
efs-can-sensor-clustor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a96c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0800ab2c  0800ab2c  0000bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf0  0800adf0  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800adf0  0800adf0  0000bdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf8  0800adf8  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800adf8  0800adf8  0000bdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae00  0800ae00  0000be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800ae04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000068  0800ae6c  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800ae6c  0000c6fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ca8  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385d  00000000  00000000  0001fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000235a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d14  00000000  00000000  000246f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031fe0  00000000  00000000  0002540c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001855a  00000000  00000000  000573ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118dde  00000000  00000000  0006f946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  00188768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0018d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ab14 	.word	0x0800ab14

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	0800ab14 	.word	0x0800ab14

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <MX_CAN1_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000918:	2204      	movs	r2, #4
 800091a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_CAN1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_CAN1_Init+0x64>)
 800092a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800092e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_CAN1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_CAN1_Init+0x64>)
 800095c:	f004 f8a4 	bl	8004aa8 <HAL_CAN_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000966:	f002 fe9f 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000084 	.word	0x20000084
 8000974:	40006400 	.word	0x40006400

08000978 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <HAL_CAN_MspInit+0x90>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d131      	bne.n	80009fe <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <HAL_CAN_MspInit+0x94>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800099e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a0c <HAL_CAN_MspInit+0x94>)
 80009a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_CAN_MspInit+0x94>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <HAL_CAN_MspInit+0x94>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <HAL_CAN_MspInit+0x94>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_CAN_MspInit+0x94>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009dc:	2309      	movs	r3, #9
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ea:	f005 f82b 	bl	8005a44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2014      	movs	r0, #20
 80009f4:	f004 ff83 	bl	80058fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f004 ff9c 	bl	8005936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40006400 	.word	0x40006400
 8000a0c:	40021000 	.word	0x40021000

08000a10 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8000a1e:	222c      	movs	r2, #44	@ 0x2c
 8000a20:	2100      	movs	r1, #0
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f009 fa90 	bl	8009f48 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6a3a      	ldr	r2, [r7, #32]
 8000a38:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a58:	d302      	bcc.n	8000a60 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8000a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a5e:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	330c      	adds	r3, #12
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	b292      	uxth	r2, r2
 8000a68:	68b9      	ldr	r1, [r7, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 ff35 	bl	80028da <initPoolAllocator>
}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d109      	bne.n	8000aa0 <canardSetLocalNodeID+0x28>
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 8000a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db02      	blt.n	8000aa0 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	78fa      	ldrb	r2, [r7, #3]
 8000a9e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	@ 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2228      	movs	r2, #40	@ 0x28
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f009 fa35 	bl	8009f48 <memset>
 8000ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ae2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000ae6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000aea:	843b      	strh	r3, [r7, #32]
 8000aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000af4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000b00:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f000 f805 	bl	8000b18 <canardBroadcastObj>
 8000b0e:	4603      	mov	r3, r0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	@ 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d106      	bne.n	8000b38 <canardBroadcastObj+0x20>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	8c1b      	ldrh	r3, [r3, #32]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000b32:	f06f 0301 	mvn.w	r3, #1
 8000b36:	e070      	b.n	8000c1a <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	7e1b      	ldrb	r3, [r3, #24]
 8000b3c:	2b1f      	cmp	r3, #31
 8000b3e:	d902      	bls.n	8000b46 <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000b40:	f06f 0301 	mvn.w	r3, #1
 8000b44:	e069      	b.n	8000c1a <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 8000b4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b4e:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ffab 	bl	8000aac <canardGetLocalNodeID>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d138      	bne.n	8000bce <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	8c1b      	ldrh	r3, [r3, #32]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d902      	bls.n	8000b6a <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000b64:	f06f 0303 	mvn.w	r3, #3
 8000b68:	e057      	b.n	8000c1a <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	8a1a      	ldrh	r2, [r3, #16]
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c24 <canardBroadcastObj+0x10c>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	4013      	ands	r3, r2
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	8a1b      	ldrh	r3, [r3, #16]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d002      	beq.n	8000b84 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8000b7e:	f06f 0301 	mvn.w	r3, #1
 8000b82:	e04a      	b.n	8000c1a <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	69d9      	ldr	r1, [r3, #28]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	8c1b      	ldrh	r3, [r3, #32]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000b92:	f001 fe85 	bl	80028a0 <crcAdd>
 8000b96:	4603      	mov	r3, r0
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	7e1b      	ldrb	r3, [r3, #24]
 8000ba6:	061a      	lsls	r2, r3, #24
 8000ba8:	8a3b      	ldrh	r3, [r7, #16]
 8000baa:	025b      	lsls	r3, r3, #9
 8000bac:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	8a19      	ldrh	r1, [r3, #16]
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <canardBroadcastObj+0x10c>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000bbc:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff73 	bl	8000aac <canardGetLocalNodeID>
 8000bc6:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e012      	b.n	8000bf4 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	7e1b      	ldrb	r3, [r3, #24]
 8000bd2:	061a      	lsls	r2, r3, #24
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	8a1b      	ldrh	r3, [r3, #16]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	ea42 0403 	orr.w	r4, r2, r3
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ff64 	bl	8000aac <canardGetLocalNodeID>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4323      	orrs	r3, r4
 8000be8:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	f000 f84c 	bl	8000c88 <calculateCRC>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000bf4:	8a7a      	ldrh	r2, [r7, #18]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6979      	ldr	r1, [r7, #20]
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f001 f83c 	bl	8001c78 <enqueueTxFrames>
 8000c00:	4603      	mov	r3, r0
 8000c02:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000c04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd04      	ble.n	8000c16 <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 ffbc 	bl	8001b8e <incrementTransferID>
    }

    return result;
 8000c16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	0800ac7a 	.word	0x0800ac7a

08000c28 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000c32:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8000c4a:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8000c62:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 8000c7a:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8000c90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c94:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	8c1b      	ldrh	r3, [r3, #32]
 8000c9a:	2b07      	cmp	r3, #7
 8000c9c:	d913      	bls.n	8000cc6 <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ca4:	89f9      	ldrh	r1, [r7, #14]
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	f001 fdcb 	bl	8002842 <crcAddSignature>
 8000cac:	4603      	mov	r3, r0
 8000cae:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69d9      	ldr	r1, [r3, #28]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	8c1b      	ldrh	r3, [r3, #32]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fdef 	bl	80028a0 <crcAdd>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	@ 0x38
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000ce0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	bf0c      	ite	eq
 8000ce8:	2301      	moveq	r3, #1
 8000cea:	2300      	movne	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000cee:	743b      	strb	r3, [r7, #16]
 8000cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cf8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	843b      	strh	r3, [r7, #32]
 8000d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000d08:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d10:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000d14:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8000d16:	f107 0210 	add.w	r2, r7, #16
 8000d1a:	7afb      	ldrb	r3, [r7, #11]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f000 f805 	bl	8000d2e <canardRequestOrRespondObj>
 8000d24:	4603      	mov	r3, r0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3738      	adds	r7, #56	@ 0x38
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000d2e:	b590      	push	{r4, r7, lr}
 8000d30:	b087      	sub	sp, #28
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	460b      	mov	r3, r1
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d106      	bne.n	8000d52 <canardRequestOrRespondObj+0x24>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	8c1b      	ldrh	r3, [r3, #32]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d4c:	f06f 0301 	mvn.w	r3, #1
 8000d50:	e042      	b.n	8000dd8 <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e1b      	ldrb	r3, [r3, #24]
 8000d56:	2b1f      	cmp	r3, #31
 8000d58:	d902      	bls.n	8000d60 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000d5a:	f06f 0301 	mvn.w	r3, #1
 8000d5e:	e03b      	b.n	8000dd8 <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff fea3 	bl	8000aac <canardGetLocalNodeID>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000d6c:	f06f 0303 	mvn.w	r3, #3
 8000d70:	e032      	b.n	8000dd8 <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7e1b      	ldrb	r3, [r3, #24]
 8000d76:	061a      	lsls	r2, r3, #24
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	8a1b      	ldrh	r3, [r3, #16]
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000d86:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f7ff fe8b 	bl	8000aac <canardGetLocalNodeID>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d9e:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff71 	bl	8000c88 <calculateCRC>
 8000da6:	4603      	mov	r3, r0
 8000da8:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000daa:	8a7a      	ldrh	r2, [r7, #18]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6979      	ldr	r1, [r7, #20]
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 ff61 	bl	8001c78 <enqueueTxFrames>
 8000db6:	4603      	mov	r3, r0
 8000db8:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8000dba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	dd08      	ble.n	8000dd4 <canardRequestOrRespondObj+0xa6>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d104      	bne.n	8000dd4 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fedd 	bl	8001b8e <incrementTransferID>
    }

    return result;
 8000dd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd90      	pop	{r4, r7, pc}

08000de0 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e002      	b.n	8000dfa <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df8:	3304      	adds	r3, #4
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e12:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	330c      	adds	r3, #12
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fdb9 	bl	800299a <freeBlock>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8000e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e34:	b09f      	sub	sp, #124	@ 0x7c
 8000e36:	af02      	add	r7, sp, #8
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 f91e 	bl	8002086 <extractTransferType>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000e50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d007      	beq.n	8000e68 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000e60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	e000      	b.n	8000e6a <canardHandleRxFrame+0x3a>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	da0f      	bge.n	8000e96 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d109      	bne.n	8000e96 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d103      	bne.n	8000e96 <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8000e96:	f06f 0309 	mvn.w	r3, #9
 8000e9a:	e361      	b.n	8001560 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8000e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d00b      	beq.n	8000ebc <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fe01 	bl	8000aac <canardGetLocalNodeID>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8000eae:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d002      	beq.n	8000ebc <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8000eb6:	f06f 030a 	mvn.w	r3, #10
 8000eba:	e351      	b.n	8001560 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0e1b      	lsrs	r3, r3, #24
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 031f 	and.w	r3, r3, #31
 8000ec8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ed6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 f8b1 	bl	8002046 <extractDataType>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    // printf("Transfer Type: %u, Received Data ID: %u\r\n", (uint32_t)transfer_type, (uint32_t)data_type_id);
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8000eea:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000eee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000efa:	049b      	lsls	r3, r3, #18
 8000efc:	431a      	orrs	r2, r3
 8000efe:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000f02:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8000f04:	4313      	orrs	r3, r2
 8000f06:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	7b1b      	ldrb	r3, [r3, #12]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	4413      	add	r3, r2
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        // printf("IS END\r\n");
    } else {
        // printf("NOT END\r\n");
    }

    uint64_t data_type_signature = 0;
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8000f28:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f2c:	09db      	lsrs	r3, r3, #7
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01e      	beq.n	8000f76 <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	685e      	ldr	r6, [r3, #4]
 8000f3c:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000f40:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000f44:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000f48:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	47b0      	blx	r6
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00a      	beq.n	8000f70 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8000f5a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f001 f8b6 	bl	80020ce <traverseRxStates>
 8000f62:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 8000f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d110      	bne.n	8000f8c <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8000f6a:	f06f 0302 	mvn.w	r3, #2
 8000f6e:	e2f7      	b.n	8001560 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8000f70:	f06f 030b 	mvn.w	r3, #11
 8000f74:	e2f4      	b.n	8001560 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 8000f76:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f001 f8d7 	bl	800212c <findRxState>
 8000f7e:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 8000f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 8000f86:	f06f 030c 	mvn.w	r3, #12
 8000f8a:	e2e9      	b.n	8001560 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8000f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	bf0c      	ite	eq
 8000f98:	2301      	moveq	r3, #1
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8000fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000faa:	ebb0 0802 	subs.w	r8, r0, r2
 8000fae:	eb61 0903 	sbc.w	r9, r1, r3
 8000fb2:	4ba9      	ldr	r3, [pc, #676]	@ (8001258 <canardHandleRxFrame+0x428>)
 8000fb4:	4598      	cmp	r8, r3
 8000fb6:	f179 0300 	sbcs.w	r3, r9, #0
 8000fba:	bf2c      	ite	cs
 8000fbc:	2301      	movcs	r3, #1
 8000fbe:	2300      	movcc	r3, #0
 8000fc0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	7b5a      	ldrb	r2, [r3, #13]
 8000fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8000fd8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fdc:	09db      	lsrs	r3, r3, #7
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bf14      	ite	ne
 8000fe8:	2301      	movne	r3, #1
 8000fea:	2300      	moveq	r3, #0
 8000fec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8000ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ff2:	7ddb      	ldrb	r3, [r3, #23]
 8000ff4:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	4610      	mov	r0, r2
 800100a:	f000 fda1 	bl	8001b50 <computeTransferIDForwardDistance>
 800100e:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8001010:	2b01      	cmp	r3, #1
 8001012:	bfcc      	ite	gt
 8001014:	2301      	movgt	r3, #1
 8001016:	2300      	movle	r3, #0
 8001018:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 800101c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800101e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001022:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001026:	1a84      	subs	r4, r0, r2
 8001028:	eb61 0503 	sbc.w	r5, r1, r3
 800102c:	4b8b      	ldr	r3, [pc, #556]	@ (800125c <canardHandleRxFrame+0x42c>)
 800102e:	429c      	cmp	r4, r3
 8001030:	f175 0300 	sbcs.w	r3, r5, #0
 8001034:	bf2c      	ite	cs
 8001036:	2301      	movcs	r3, #1
 8001038:	2300      	movcc	r3, #0
 800103a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 800103e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	b2da      	uxtb	r2, r3
 8001048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800104a:	7ddb      	ldrb	r3, [r3, #23]
 800104c:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	4610      	mov	r0, r2
 8001056:	f000 fd7b 	bl	8001b50 <computeTransferIDForwardDistance>
 800105a:	4603      	mov	r3, r0
 800105c:	2b0f      	cmp	r3, #15
 800105e:	bfd4      	ite	le
 8001060:	2301      	movle	r3, #1
 8001062:	2300      	movgt	r3, #0
 8001064:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 8001068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf14      	ite	ne
 8001070:	2301      	movne	r3, #1
 8001072:	2300      	moveq	r3, #0
 8001074:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8001078:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11f      	bne.n	80010c0 <canardHandleRxFrame+0x290>
            (not_initialized) ||
 8001080:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001084:	2b00      	cmp	r3, #0
 8001086:	d11b      	bne.n	80010c0 <canardHandleRxFrame+0x290>
            (tid_timed_out) ||
 8001088:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <canardHandleRxFrame+0x278>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8001090:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <canardHandleRxFrame+0x278>
 8001098:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10f      	bne.n	80010c0 <canardHandleRxFrame+0x290>
 80010a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10b      	bne.n	80010c0 <canardHandleRxFrame+0x290>
 80010a8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <canardHandleRxFrame+0x294>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 80010b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <canardHandleRxFrame+0x294>
 80010b8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <canardHandleRxFrame+0x294>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <canardHandleRxFrame+0x296>
 80010c4:	2300      	movs	r3, #0
    const bool need_restart =
 80010c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80010ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 80010d6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d02f      	beq.n	800113e <canardHandleRxFrame+0x30e>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 80010de:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	b2d9      	uxtb	r1, r3
 80010e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010ea:	7dd3      	ldrb	r3, [r2, #23]
 80010ec:	f361 0386 	bfi	r3, r1, #2, #5
 80010f0:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 80010f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010f4:	7dd3      	ldrb	r3, [r2, #23]
 80010f6:	f36f 13c7 	bfc	r3, #7, #1
 80010fa:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 80010fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f001 f87e 	bl	8002200 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	7b5a      	ldrb	r2, [r3, #13]
 8001108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800110a:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 800110c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001110:	09db      	lsrs	r3, r3, #7
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d110      	bne.n	800113e <canardHandleRxFrame+0x30e>
        {
            rx_state->transfer_id++;
 800111c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800111e:	7ddb      	ldrb	r3, [r3, #23]
 8001120:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001124:	b2db      	uxtb	r3, r3
 8001126:	3301      	adds	r3, #1
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	b2d9      	uxtb	r1, r3
 800112e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001130:	7dd3      	ldrb	r3, [r2, #23]
 8001132:	f361 0386 	bfi	r3, r1, #2, #5
 8001136:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8001138:	f06f 030c 	mvn.w	r3, #12
 800113c:	e210      	b.n	8001560 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	7b5a      	ldrb	r2, [r3, #13]
 8001142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001144:	7e9b      	ldrb	r3, [r3, #26]
 8001146:	429a      	cmp	r2, r3
 8001148:	d001      	beq.n	800114e <canardHandleRxFrame+0x31e>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e208      	b.n	8001560 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 800114e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001152:	09db      	lsrs	r3, r3, #7
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d041      	beq.n	80011e2 <canardHandleRxFrame+0x3b2>
 800115e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001162:	099b      	lsrs	r3, r3, #6
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d039      	beq.n	80011e2 <canardHandleRxFrame+0x3b2>
    {
        rx_state->timestamp_usec = timestamp_usec;
 800116e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001174:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2220      	movs	r2, #32
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f008 fee1 	bl	8009f48 <memset>
 8001186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800118a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8001192:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	7b1b      	ldrb	r3, [r3, #12]
 8001198:	3b01      	subs	r3, #1
 800119a:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 800119c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800119e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80011a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80011a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011a8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80011ac:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80011b6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80011ba:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80011be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011c2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80011c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f107 0210 	add.w	r2, r7, #16
 80011d2:	4611      	mov	r1, r2
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 80011d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80011da:	f000 ff12 	bl	8002002 <prepareForNextTransfer>
        return CANARD_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e1be      	b.n	8001560 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 80011e2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011fc:	7ddb      	ldrb	r3, [r3, #23]
 80011fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	429a      	cmp	r2, r3
 8001206:	d002      	beq.n	800120e <canardHandleRxFrame+0x3de>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8001208:	f06f 030d 	mvn.w	r3, #13
 800120c:	e1a8      	b.n	8001560 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 800120e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001218:	7dd2      	ldrb	r2, [r2, #23]
 800121a:	f3c2 0284 	ubfx	r2, r2, #2, #5
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	4293      	cmp	r3, r2
 8001222:	d002      	beq.n	800122a <canardHandleRxFrame+0x3fa>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8001224:	f06f 030e 	mvn.w	r3, #14
 8001228:	e19a      	b.n	8001560 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 800122a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800122e:	09db      	lsrs	r3, r3, #7
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d060      	beq.n	80012fc <canardHandleRxFrame+0x4cc>
 800123a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800123e:	099b      	lsrs	r3, r3, #6
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d158      	bne.n	80012fc <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	7b1b      	ldrb	r3, [r3, #12]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d806      	bhi.n	8001260 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8001252:	f06f 030f 	mvn.w	r3, #15
 8001256:	e183      	b.n	8001560 <canardHandleRxFrame+0x730>
 8001258:	001e8481 	.word	0x001e8481
 800125c:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8001260:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001266:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 800126a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800126c:	8ad3      	ldrh	r3, [r2, #22]
 800126e:	f36f 0309 	bfc	r3, #0, #10
 8001272:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f103 000c 	add.w	r0, r3, #12
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	3304      	adds	r3, #4
 800127e:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8001284:	3b03      	subs	r3, #3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800128a:	f000 ffed 	bl	8002268 <bufferBlockPushBytes>
 800128e:	4603      	mov	r3, r0
 8001290:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 8001294:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001298:	2b00      	cmp	r3, #0
 800129a:	da09      	bge.n	80012b0 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 800129c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 ffae 	bl	8002200 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 80012a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80012a6:	f000 feac 	bl	8002002 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80012aa:	f06f 0302 	mvn.w	r3, #2
 80012ae:	e157      	b.n	8001560 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	795b      	ldrb	r3, [r3, #5]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012c4:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 80012c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80012ce:	f001 fab8 	bl	8002842 <crcAddSignature>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012d8:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80012da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012dc:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80012e2:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	3b03      	subs	r3, #3
 80012ea:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80012ec:	461a      	mov	r2, r3
 80012ee:	f001 fad7 	bl	80028a0 <crcAdd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012f8:	829a      	strh	r2, [r3, #20]
    {
 80012fa:	e124      	b.n	8001546 <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 80012fc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001300:	09db      	lsrs	r3, r3, #7
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d133      	bne.n	8001374 <canardHandleRxFrame+0x544>
 800130c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001310:	099b      	lsrs	r3, r3, #6
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d12b      	bne.n	8001374 <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f103 000c 	add.w	r0, r3, #12
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 800132a:	3b01      	subs	r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001330:	f000 ff9a 	bl	8002268 <bufferBlockPushBytes>
 8001334:	4603      	mov	r3, r0
 8001336:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 8001338:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800133c:	2b00      	cmp	r3, #0
 800133e:	da09      	bge.n	8001354 <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 8001340:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 ff5c 	bl	8002200 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8001348:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800134a:	f000 fe5a 	bl	8002002 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800134e:	f06f 0302 	mvn.w	r3, #2
 8001352:	e105      	b.n	8001560 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001356:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1d19      	adds	r1, r3, #4
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	7b1b      	ldrb	r3, [r3, #12]
 8001360:	3b01      	subs	r3, #1
 8001362:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001364:	461a      	mov	r2, r3
 8001366:	f001 fa9b 	bl	80028a0 <crcAdd>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001370:	829a      	strh	r2, [r3, #20]
    {
 8001372:	e0e8      	b.n	8001546 <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	7b1b      	ldrb	r3, [r3, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8001384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001386:	8adb      	ldrh	r3, [r3, #22]
 8001388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800138c:	b29b      	uxth	r3, r3
 800138e:	2b04      	cmp	r3, #4
 8001390:	d823      	bhi.n	80013da <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 8001392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001394:	8adb      	ldrh	r3, [r3, #22]
 8001396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800139a:	b29b      	uxth	r3, r3
 800139c:	667b      	str	r3, [r7, #100]	@ 0x64
 800139e:	e012      	b.n	80013c6 <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 80013a0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	7919      	ldrb	r1, [r3, #4]
 80013aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80013ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013ae:	4413      	add	r3, r2
 80013b0:	331b      	adds	r3, #27
 80013b2:	460a      	mov	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 80013b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013b8:	3301      	adds	r3, #1
 80013ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80013bc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80013c0:	3301      	adds	r3, #1
 80013c2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 80013c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d848      	bhi.n	800145e <canardHandleRxFrame+0x62e>
 80013cc:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80013d0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3e3      	bcc.n	80013a0 <canardHandleRxFrame+0x570>
 80013d8:	e041      	b.n	800145e <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f103 020c 	add.w	r2, r3, #12
 80013e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f7ff fc1e 	bl	8000c28 <canardBufferFromIdx>
 80013ec:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 80013ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d034      	beq.n	800145e <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 80013f4:	2305      	movs	r3, #5
 80013f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 80013f8:	e005      	b.n	8001406 <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 80013fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8001400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001402:	331c      	adds	r3, #28
 8001404:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8001406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f5      	bne.n	80013fa <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 800140e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001410:	8adb      	ldrh	r3, [r3, #22]
 8001412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8001420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001422:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001424:	e012      	b.n	800144c <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 8001426:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4413      	add	r3, r2
 800142e:	7919      	ldrb	r1, [r3, #4]
 8001430:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001434:	4413      	add	r3, r2
 8001436:	3304      	adds	r3, #4
 8001438:	460a      	mov	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 800143c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800143e:	3301      	adds	r3, #1
 8001440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001442:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001446:	3301      	adds	r3, #1
 8001448:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 800144c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800144e:	2b1b      	cmp	r3, #27
 8001450:	d805      	bhi.n	800145e <canardHandleRxFrame+0x62e>
 8001452:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001456:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800145a:	429a      	cmp	r2, r3
 800145c:	d3e3      	bcc.n	8001426 <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 800145e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001462:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 8001466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001468:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 800146a:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f103 020c 	add.w	r2, r3, #12
 8001472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f7ff fbd5 	bl	8000c28 <canardBufferFromIdx>
 800147e:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8001480:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8001482:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001486:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800148a:	429a      	cmp	r2, r3
 800148c:	d205      	bcs.n	800149a <canardHandleRxFrame+0x66a>
 800148e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	3304      	adds	r3, #4
 8001498:	e000      	b.n	800149c <canardHandleRxFrame+0x66c>
 800149a:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 800149c:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 800149e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014a0:	8adb      	ldrh	r3, [r3, #22]
 80014a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 80014b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80014b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80014ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80014bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80014c0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80014c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80014ce:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80014d2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80014da:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80014de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 80014e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 80014e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014ea:	8a98      	ldrh	r0, [r3, #20]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1d19      	adds	r1, r3, #4
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	7b1b      	ldrb	r3, [r3, #12]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	461a      	mov	r2, r3
 80014f8:	f001 f9d2 	bl	80028a0 <crcAdd>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001502:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8001504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001506:	8a9a      	ldrh	r2, [r3, #20]
 8001508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800150a:	8b1b      	ldrh	r3, [r3, #24]
 800150c:	429a      	cmp	r2, r3
 800150e:	d106      	bne.n	800151e <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f107 0210 	add.w	r2, r7, #16
 8001518:	4611      	mov	r1, r2
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fa93 	bl	8001a50 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 800152a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800152c:	f000 fd69 	bl	8002002 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8001530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001532:	8a9a      	ldrh	r2, [r3, #20]
 8001534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001536:	8b1b      	ldrh	r3, [r3, #24]
 8001538:	429a      	cmp	r2, r3
 800153a:	d101      	bne.n	8001540 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	e00f      	b.n	8001560 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8001540:	f06f 0310 	mvn.w	r3, #16
 8001544:	e00c      	b.n	8001560 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8001546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001548:	7ddb      	ldrb	r3, [r3, #23]
 800154a:	b25b      	sxtb	r3, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	09db      	lsrs	r3, r3, #7
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001556:	7dd3      	ldrb	r3, [r2, #23]
 8001558:	f361 13c7 	bfi	r3, r1, #7, #1
 800155c:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3774      	adds	r7, #116	@ 0x74
 8001564:	46bd      	mov	sp, r7
 8001566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800156a:	bf00      	nop

0800156c <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 8001584:	e053      	b.n	800162e <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800158c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001590:	1a84      	subs	r4, r0, r2
 8001592:	eb61 0503 	sbc.w	r5, r1, r3
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <canardCleanupStaleTransfers+0xd4>)
 8001598:	429c      	cmp	r4, r3
 800159a:	f175 0300 	sbcs.w	r3, r5, #0
 800159e:	d33a      	bcc.n	8001616 <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d11c      	bne.n	80015e4 <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fe27 	bl	8002200 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f103 020c 	add.w	r2, r3, #12
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f7ff fb49 	bl	8000c58 <canardRxFromIdx>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	330c      	adds	r3, #12
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 f9e1 	bl	800299a <freeBlock>
                state = ins->rx_states;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	613b      	str	r3, [r7, #16]
                prev = state;
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e024      	b.n	800162e <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 fe0a 	bl	8002200 <releaseStatePayload>
                prev->next = state->next;
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	330c      	adds	r3, #12
 80015f8:	6939      	ldr	r1, [r7, #16]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f9cd 	bl	800299a <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f103 020c 	add.w	r2, r3, #12
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f7ff fb23 	bl	8000c58 <canardRxFromIdx>
 8001612:	6138      	str	r0, [r7, #16]
 8001614:	e00b      	b.n	800162e <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f103 020c 	add.w	r2, r3, #12
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff fb16 	bl	8000c58 <canardRxFromIdx>
 800162c:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1a8      	bne.n	8001586 <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	001e8481 	.word	0x001e8481

08001644 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8001644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001648:	b08d      	sub	sp, #52	@ 0x34
 800164a:	af00      	add	r7, sp, #0
 800164c:	61f8      	str	r0, [r7, #28]
 800164e:	61b9      	str	r1, [r7, #24]
 8001650:	4611      	mov	r1, r2
 8001652:	461a      	mov	r2, r3
 8001654:	460b      	mov	r3, r1
 8001656:	75fb      	strb	r3, [r7, #23]
 8001658:	4613      	mov	r3, r2
 800165a:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <canardDecodeScalar+0x24>
 8001662:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001668:	f06f 0301 	mvn.w	r3, #1
 800166c:	e16e      	b.n	800194c <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <canardDecodeScalar+0x36>
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	2b40      	cmp	r3, #64	@ 0x40
 8001678:	d902      	bls.n	8001680 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800167a:	f06f 0301 	mvn.w	r3, #1
 800167e:	e165      	b.n	800194c <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <canardDecodeScalar+0x4e>
 8001686:	7dbb      	ldrb	r3, [r7, #22]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800168c:	f06f 0301 	mvn.w	r3, #1
 8001690:	e15c      	b.n	800194c <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2208      	movs	r2, #8
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f008 fc54 	bl	8009f48 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	7dfa      	ldrb	r2, [r7, #23]
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	69f8      	ldr	r0, [r7, #28]
 80016aa:	f000 ff65 	bl	8002578 <descatterTransferPayload>
 80016ae:	4603      	mov	r3, r0
 80016b0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 80016b2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dc02      	bgt.n	80016c0 <canardDecodeScalar+0x7c>
    {
        return result;
 80016ba:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80016be:	e145      	b.n	800194c <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d018      	beq.n	80016fe <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	08db      	lsrs	r3, r3, #3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	3320      	adds	r3, #32
 80016d4:	f107 0210 	add.w	r2, r7, #16
 80016d8:	4413      	add	r3, r2
 80016da:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016de:	461a      	mov	r2, r3
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	425b      	negs	r3, r3
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	411a      	asrs	r2, r3
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	3320      	adds	r3, #32
 80016f4:	f107 0110 	add.w	r1, r7, #16
 80016f8:	440b      	add	r3, r1
 80016fa:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d103      	bne.n	8001712 <canardDecodeScalar+0xce>
 800170a:	2301      	movs	r3, #1
 800170c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001710:	e01e      	b.n	8001750 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8001712:	7dfb      	ldrb	r3, [r7, #23]
 8001714:	2b08      	cmp	r3, #8
 8001716:	d803      	bhi.n	8001720 <canardDecodeScalar+0xdc>
 8001718:	2301      	movs	r3, #1
 800171a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800171e:	e017      	b.n	8001750 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b10      	cmp	r3, #16
 8001724:	d803      	bhi.n	800172e <canardDecodeScalar+0xea>
 8001726:	2302      	movs	r3, #2
 8001728:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800172c:	e010      	b.n	8001750 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b20      	cmp	r3, #32
 8001732:	d803      	bhi.n	800173c <canardDecodeScalar+0xf8>
 8001734:	2304      	movs	r3, #4
 8001736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800173a:	e009      	b.n	8001750 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b40      	cmp	r3, #64	@ 0x40
 8001740:	d803      	bhi.n	800174a <canardDecodeScalar+0x106>
 8001742:	2308      	movs	r3, #8
 8001744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001748:	e002      	b.n	8001750 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 800174a:	f06f 0308 	mvn.w	r3, #8
 800174e:	e0fd      	b.n	800194c <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8001750:	f001 f807 	bl	8002762 <isBigEndian>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800175a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f001 f80d 	bl	8002784 <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 800176a:	7dbb      	ldrb	r3, [r7, #22]
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 809b 	beq.w	80018a8 <canardDecodeScalar+0x264>
 8001772:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001776:	00da      	lsls	r2, r3, #3
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	429a      	cmp	r2, r3
 800177c:	f000 8094 	beq.w	80018a8 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b08      	cmp	r3, #8
 8001784:	d819      	bhi.n	80017ba <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8001786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178a:	461a      	mov	r2, r3
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	3b01      	subs	r3, #1
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8085 	beq.w	80018a8 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 800179e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	425b      	negs	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f887 3020 	strb.w	r3, [r7, #32]
 80017b8:	e076      	b.n	80018a8 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d815      	bhi.n	80017ec <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80017c0:	8c3b      	ldrh	r3, [r7, #32]
 80017c2:	461a      	mov	r2, r3
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d069      	beq.n	80018a8 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80017d4:	8c3a      	ldrh	r2, [r7, #32]
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	b29b      	uxth	r3, r3
 80017e0:	425b      	negs	r3, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	843b      	strh	r3, [r7, #32]
 80017ea:	e05d      	b.n	80018a8 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d811      	bhi.n	8001816 <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 80017f2:	6a3a      	ldr	r2, [r7, #32]
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d051      	beq.n	80018a8 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001804:	6a3a      	ldr	r2, [r7, #32]
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	425b      	negs	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	e048      	b.n	80018a8 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	2b3f      	cmp	r3, #63	@ 0x3f
 800181a:	d842      	bhi.n	80018a2 <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 800181c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001820:	7df9      	ldrb	r1, [r7, #23]
 8001822:	1e48      	subs	r0, r1, #1
 8001824:	f1c0 0620 	rsb	r6, r0, #32
 8001828:	f1a0 0120 	sub.w	r1, r0, #32
 800182c:	fa22 f400 	lsr.w	r4, r2, r0
 8001830:	fa03 f606 	lsl.w	r6, r3, r6
 8001834:	4334      	orrs	r4, r6
 8001836:	fa23 f101 	lsr.w	r1, r3, r1
 800183a:	430c      	orrs	r4, r1
 800183c:	fa23 f500 	lsr.w	r5, r3, r0
 8001840:	f004 0301 	and.w	r3, r4, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800184e:	460b      	mov	r3, r1
 8001850:	4313      	orrs	r3, r2
 8001852:	d029      	beq.n	80018a8 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8001854:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001858:	7df9      	ldrb	r1, [r7, #23]
 800185a:	f04f 0201 	mov.w	r2, #1
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f1a1 0620 	sub.w	r6, r1, #32
 8001866:	f1c1 0020 	rsb	r0, r1, #32
 800186a:	fa03 f901 	lsl.w	r9, r3, r1
 800186e:	fa02 f606 	lsl.w	r6, r2, r6
 8001872:	ea49 0906 	orr.w	r9, r9, r6
 8001876:	fa22 f000 	lsr.w	r0, r2, r0
 800187a:	ea49 0900 	orr.w	r9, r9, r0
 800187e:	fa02 f801 	lsl.w	r8, r2, r1
 8001882:	2300      	movs	r3, #0
 8001884:	f1d8 0a00 	rsbs	sl, r8, #0
 8001888:	eb63 0b09 	sbc.w	fp, r3, r9
 800188c:	ea44 030a 	orr.w	r3, r4, sl
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	ea45 030b 	orr.w	r3, r5, fp
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	e9d7 3400 	ldrd	r3, r4, [r7]
 800189c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80018a0:	e002      	b.n	80018a8 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80018a2:	f06f 0308 	mvn.w	r3, #8
 80018a6:	e051      	b.n	800194c <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 80018a8:	7dbb      	ldrb	r3, [r7, #22]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d022      	beq.n	80018f4 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d804      	bhi.n	80018be <canardDecodeScalar+0x27a>
 80018b4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80018b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	e044      	b.n	8001948 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	d804      	bhi.n	80018ce <canardDecodeScalar+0x28a>
 80018c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80018c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ca:	801a      	strh	r2, [r3, #0]
 80018cc:	e03c      	b.n	8001948 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d803      	bhi.n	80018dc <canardDecodeScalar+0x298>
 80018d4:	6a3a      	ldr	r2, [r7, #32]
 80018d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e035      	b.n	8001948 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	2b40      	cmp	r3, #64	@ 0x40
 80018e0:	d805      	bhi.n	80018ee <canardDecodeScalar+0x2aa>
 80018e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80018e8:	e9c1 2300 	strd	r2, r3, [r1]
 80018ec:	e02c      	b.n	8001948 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80018ee:	f06f 0308 	mvn.w	r3, #8
 80018f2:	e02b      	b.n	800194c <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d104      	bne.n	8001904 <canardDecodeScalar+0x2c0>
 80018fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e021      	b.n	8001948 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b08      	cmp	r3, #8
 8001908:	d804      	bhi.n	8001914 <canardDecodeScalar+0x2d0>
 800190a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800190e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e019      	b.n	8001948 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d803      	bhi.n	8001922 <canardDecodeScalar+0x2de>
 800191a:	8c3a      	ldrh	r2, [r7, #32]
 800191c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	e012      	b.n	8001948 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b20      	cmp	r3, #32
 8001926:	d803      	bhi.n	8001930 <canardDecodeScalar+0x2ec>
 8001928:	6a3a      	ldr	r2, [r7, #32]
 800192a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	e00b      	b.n	8001948 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b40      	cmp	r3, #64	@ 0x40
 8001934:	d805      	bhi.n	8001942 <canardDecodeScalar+0x2fe>
 8001936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800193a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800193c:	e9c1 2300 	strd	r2, r3, [r1]
 8001940:	e002      	b.n	8001948 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001942:	f06f 0308 	mvn.w	r3, #8
 8001946:	e001      	b.n	800194c <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 8001948:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 800194c:	4618      	mov	r0, r3
 800194e:	3734      	adds	r7, #52	@ 0x34
 8001950:	46bd      	mov	sp, r7
 8001952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001956 <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b08a      	sub	sp, #40	@ 0x28
 800195a:	af02      	add	r7, sp, #8
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b40      	cmp	r3, #64	@ 0x40
 800196a:	d901      	bls.n	8001970 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 800196c:	2340      	movs	r3, #64	@ 0x40
 800196e:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	2208      	movs	r2, #8
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f008 fae0 	bl	8009f48 <memset>

    uint8_t std_byte_length = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <canardEncodeScalar+0x48>
 8001992:	2301      	movs	r3, #1
 8001994:	77fb      	strb	r3, [r7, #31]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	743b      	strb	r3, [r7, #16]
 800199c:	e024      	b.n	80019e8 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d805      	bhi.n	80019b0 <canardEncodeScalar+0x5a>
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	743b      	strb	r3, [r7, #16]
 80019ae:	e01b      	b.n	80019e8 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d805      	bhi.n	80019c2 <canardEncodeScalar+0x6c>
 80019b6:	2302      	movs	r3, #2
 80019b8:	77fb      	strb	r3, [r7, #31]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	823b      	strh	r3, [r7, #16]
 80019c0:	e012      	b.n	80019e8 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d805      	bhi.n	80019d4 <canardEncodeScalar+0x7e>
 80019c8:	2304      	movs	r3, #4
 80019ca:	77fb      	strb	r3, [r7, #31]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e009      	b.n	80019e8 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b40      	cmp	r3, #64	@ 0x40
 80019d8:	d806      	bhi.n	80019e8 <canardEncodeScalar+0x92>
 80019da:	2308      	movs	r3, #8
 80019dc:	77fb      	strb	r3, [r7, #31]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 80019e8:	f000 febb 	bl	8002762 <isBigEndian>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80019f2:	7ffa      	ldrb	r2, [r7, #31]
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fec2 	bl	8002784 <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d014      	beq.n	8001a36 <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3320      	adds	r3, #32
 8001a14:	443b      	add	r3, r7
 8001a16:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	425b      	negs	r3, r3
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	409a      	lsls	r2, r3
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	3320      	adds	r3, #32
 8001a30:	443b      	add	r3, r7
 8001a32:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	f107 0010 	add.w	r0, r7, #16
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2100      	movs	r1, #0
 8001a44:	f000 fd21 	bl	800248a <copyBitArray>
}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8001a5a:	e00f      	b.n	8001a7c <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f103 020c 	add.w	r2, r3, #12
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f000 ff92 	bl	800299a <freeBlock>
        transfer->payload_middle = temp;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1eb      	bne.n	8001a5c <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	829a      	strh	r2, [r3, #20]
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b08b      	sub	sp, #44	@ 0x2c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 8001aae:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8001ab2:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 8001ab4:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 8001ab8:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 8001aba:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 8001abe:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 8001ac0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ac4:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = 0xFFFFF000UL;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <canardConvertNativeFloatToFloat16+0xa8>)
 8001ac8:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	6a3a      	ldr	r2, [r7, #32]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	4053      	eors	r3, r2
 8001adc:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (in.u >= f32inf.u)
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d30a      	bcc.n	8001b00 <canardConvertNativeFloatToFloat16+0x5c>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d902      	bls.n	8001af8 <canardConvertNativeFloatToFloat16+0x54>
 8001af2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001af6:	e001      	b.n	8001afc <canardConvertNativeFloatToFloat16+0x58>
 8001af8:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001afc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001afe:	e018      	b.n	8001b32 <canardConvertNativeFloatToFloat16+0x8e>
    }
    else
    {
        in.u &= round_mask;
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 8001b08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u -= round_mask;
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d901      	bls.n	8001b2c <canardConvertNativeFloatToFloat16+0x88>
        {
            in.u = f16inf.u;
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	0b5b      	lsrs	r3, r3, #13
 8001b30:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return out;
 8001b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	372c      	adds	r7, #44	@ 0x2c
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	fffff000 	.word	0xfffff000

08001b50 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	79bb      	ldrb	r3, [r7, #6]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da03      	bge.n	8001b7e <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8001b76:	89fb      	ldrh	r3, [r7, #14]
 8001b78:	3320      	adds	r3, #32
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b1f      	cmp	r3, #31
 8001ba8:	d902      	bls.n	8001bb0 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
    }
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d801      	bhi.n	8001bd0 <dlcToDataLength+0x14>
        return dlc;
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	e01e      	b.n	8001c0e <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	d101      	bne.n	8001bda <dlcToDataLength+0x1e>
        return 12;
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	e019      	b.n	8001c0e <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	2b0a      	cmp	r3, #10
 8001bde:	d101      	bne.n	8001be4 <dlcToDataLength+0x28>
        return 16;
 8001be0:	2310      	movs	r3, #16
 8001be2:	e014      	b.n	8001c0e <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	2b0b      	cmp	r3, #11
 8001be8:	d101      	bne.n	8001bee <dlcToDataLength+0x32>
        return 20;
 8001bea:	2314      	movs	r3, #20
 8001bec:	e00f      	b.n	8001c0e <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d101      	bne.n	8001bf8 <dlcToDataLength+0x3c>
        return 24;
 8001bf4:	2318      	movs	r3, #24
 8001bf6:	e00a      	b.n	8001c0e <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	2b0d      	cmp	r3, #13
 8001bfc:	d101      	bne.n	8001c02 <dlcToDataLength+0x46>
        return 32;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e005      	b.n	8001c0e <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	2b0e      	cmp	r3, #14
 8001c06:	d101      	bne.n	8001c0c <dlcToDataLength+0x50>
        return 48;
 8001c08:	2330      	movs	r3, #48	@ 0x30
 8001c0a:	e000      	b.n	8001c0e <dlcToDataLength+0x52>
    }
    return 64;
 8001c0c:	2340      	movs	r3, #64	@ 0x40
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d801      	bhi.n	8001c2e <dataLengthToDlc+0x14>
        return data_length;
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	e01e      	b.n	8001c6c <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d801      	bhi.n	8001c38 <dataLengthToDlc+0x1e>
        return 9;
 8001c34:	2309      	movs	r3, #9
 8001c36:	e019      	b.n	8001c6c <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d801      	bhi.n	8001c42 <dataLengthToDlc+0x28>
        return 10;
 8001c3e:	230a      	movs	r3, #10
 8001c40:	e014      	b.n	8001c6c <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	2b14      	cmp	r3, #20
 8001c46:	d801      	bhi.n	8001c4c <dataLengthToDlc+0x32>
        return 11;
 8001c48:	230b      	movs	r3, #11
 8001c4a:	e00f      	b.n	8001c6c <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	2b18      	cmp	r3, #24
 8001c50:	d801      	bhi.n	8001c56 <dataLengthToDlc+0x3c>
        return 12;
 8001c52:	230c      	movs	r3, #12
 8001c54:	e00a      	b.n	8001c6c <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d801      	bhi.n	8001c60 <dataLengthToDlc+0x46>
        return 13;
 8001c5c:	230d      	movs	r3, #13
 8001c5e:	e005      	b.n	8001c6c <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	2b30      	cmp	r3, #48	@ 0x30
 8001c64:	d801      	bhi.n	8001c6a <dataLengthToDlc+0x50>
        return 14;
 8001c66:	230e      	movs	r3, #14
 8001c68:	e000      	b.n	8001c6c <dataLengthToDlc+0x52>
    }
    return 15;
 8001c6a:	230f      	movs	r3, #15
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001c90:	f06f 0301 	mvn.w	r3, #1
 8001c94:	e0f9      	b.n	8001e8a <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	8c1b      	ldrh	r3, [r3, #32]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <enqueueTxFrames+0x34>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001ca6:	f06f 0301 	mvn.w	r3, #1
 8001caa:	e0ee      	b.n	8001e8a <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	84fb      	strh	r3, [r7, #38]	@ 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	8c1a      	ldrh	r2, [r3, #32]
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d24b      	bcs.n	8001d58 <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f929 	bl	8001f1c <createTxItem>
 8001cca:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001cd2:	f06f 0302 	mvn.w	r3, #2
 8001cd6:	e0d8      	b.n	8001e8a <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f103 0008 	add.w	r0, r3, #8
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	69d9      	ldr	r1, [r3, #28]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	8c1b      	ldrh	r3, [r3, #32]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f008 f9c9 	bl	800a07e <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	8c1b      	ldrh	r3, [r3, #32]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff90 	bl	8001c1a <dataLengthToDlc>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5d 	bl	8001bbc <dlcToDataLength>
 8001d02:	4603      	mov	r3, r0
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	8c1b      	ldrh	r3, [r3, #32]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	8c12      	ldrh	r2, [r2, #32]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	440b      	add	r3, r1
 8001d36:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 8001d42:	6979      	ldr	r1, [r7, #20]
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f8a4 	bl	8001e92 <pushTxQueue>
        result++;
 8001d4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001d56:	e096      	b.n	8001e86 <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t toggle = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t sot_eot = 0x80;
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        CanardTxQueueItem* queue_item = NULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001d6c:	e085      	b.n	8001e7a <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	330c      	adds	r3, #12
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f8d2 	bl	8001f1c <createTxItem>
 8001d78:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8001d80:	f06f 0302 	mvn.w	r3, #2
 8001d84:	e081      	b.n	8001e8a <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 8001d8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10c      	bne.n	8001daa <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	725a      	strb	r2, [r3, #9]
                i = 2;
 8001da4:	2302      	movs	r3, #2
 8001da6:	843b      	strh	r3, [r7, #32]
 8001da8:	e012      	b.n	8001dd0 <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001dae:	e00f      	b.n	8001dd0 <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001db6:	441a      	add	r2, r3
 8001db8:	8c3b      	ldrh	r3, [r7, #32]
 8001dba:	7811      	ldrb	r1, [r2, #0]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001dc4:	8c3b      	ldrh	r3, [r7, #32]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	843b      	strh	r3, [r7, #32]
 8001dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001dd0:	8c3a      	ldrh	r2, [r7, #32]
 8001dd2:	7ffb      	ldrb	r3, [r7, #31]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	da04      	bge.n	8001de4 <enqueueTxFrames+0x16c>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	8c1b      	ldrh	r3, [r3, #32]
 8001dde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3e5      	bcc.n	8001db0 <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	8c1b      	ldrh	r3, [r3, #32]
 8001de8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d002      	beq.n	8001df4 <enqueueTxFrames+0x17c>
 8001dee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001df2:	e000      	b.n	8001df6 <enqueueTxFrames+0x17e>
 8001df4:	2340      	movs	r3, #64	@ 0x40
 8001df6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001dfa:	8c3b      	ldrh	r3, [r7, #32]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff0a 	bl	8001c1a <dataLengthToDlc>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fed7 	bl	8001bbc <dlcToDataLength>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	3b01      	subs	r3, #1
 8001e12:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001e14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e18:	015b      	lsls	r3, r3, #5
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b2d9      	uxtb	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	8c3b      	ldrh	r3, [r7, #32]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	b2d1      	uxtb	r1, r2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4413      	add	r3, r2
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001e48:	8c3b      	ldrh	r3, [r7, #32]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8001e54:	69b9      	ldr	r1, [r7, #24]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f81b 	bl	8001e92 <pushTxQueue>

            result++;
 8001e5c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	84fb      	strh	r3, [r7, #38]	@ 0x26
            toggle ^= 1;
 8001e68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e6c:	f083 0301 	eor.w	r3, r3, #1
 8001e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sot_eot = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while (transfer->payload_len - data_index != 0)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	8c1b      	ldrh	r3, [r3, #32]
 8001e7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f47f af74 	bne.w	8001d6e <enqueueTxFrames+0xf6>
        }
    }

    return result;
 8001e86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3728      	adds	r7, #40	@ 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8001eaa:	e034      	b.n	8001f16 <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8001eb8:	e02a      	b.n	8001f10 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f000 f840 	bl	8001f4a <isPriorityHigher>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d106      	bne.n	8001ee8 <pushTxQueue+0x56>
            {
                item->next = queue;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8001ee6:	e016      	b.n	8001f16 <pushTxQueue+0x84>
                previous->next = item;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]
            return;
 8001ef4:	e00f      	b.n	8001f16 <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <pushTxQueue+0x74>
            {
                queue->next = item;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]
                return;
 8001f04:	e007      	b.n	8001f16 <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1d1      	bne.n	8001eba <pushTxQueue+0x28>
            }
        }
    }
}
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fd0f 	bl	8002948 <allocateBlock>
 8001f2a:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <createTxItem+0x1a>
    {
        return NULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e005      	b.n	8001f42 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8001f36:	2214      	movs	r2, #20
 8001f38:	2100      	movs	r1, #0
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f008 f804 	bl	8009f48 <memset>
    return item;
 8001f40:	68fb      	ldr	r3, [r7, #12]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b089      	sub	sp, #36	@ 0x24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001f5a:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001f62:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	0fdb      	lsrs	r3, r3, #31
 8001f68:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0fdb      	lsrs	r3, r3, #31
 8001f6e:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001f70:	7dfa      	ldrb	r2, [r7, #23]
 8001f72:	7dbb      	ldrb	r3, [r7, #22]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d01d      	beq.n	8001fb4 <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <isPriorityHigher+0x3a>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	e000      	b.n	8001f86 <isPriorityHigher+0x3c>
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001f88:	7dbb      	ldrb	r3, [r7, #22]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <isPriorityHigher+0x4a>
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	0c9b      	lsrs	r3, r3, #18
 8001f92:	e000      	b.n	8001f96 <isPriorityHigher+0x4c>
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d007      	beq.n	8001fb0 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	bf34      	ite	cc
 8001fa8:	2301      	movcc	r3, #1
 8001faa:	2300      	movcs	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e022      	b.n	8001ff6 <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	e020      	b.n	8001ff6 <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d105      	bne.n	8001fe8 <isPriorityHigher+0x9e>
 8001fdc:	7d7a      	ldrb	r2, [r7, #21]
 8001fde:	7d3b      	ldrb	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 8001fe4:	7d3b      	ldrb	r3, [r7, #20]
 8001fe6:	e006      	b.n	8001ff6 <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	bf34      	ite	cc
 8001ff0:	2301      	movcc	r3, #1
 8001ff2:	2300      	movcs	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7ddb      	ldrb	r3, [r3, #23]
 800200e:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	b2d9      	uxtb	r1, r3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	7dd3      	ldrb	r3, [r2, #23]
 8002020:	f361 0386 	bfi	r3, r1, #2, #5
 8002024:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	8ad3      	ldrh	r3, [r2, #22]
 800202a:	f36f 0309 	bfc	r3, #0, #10
 800202e:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	7dd3      	ldrb	r3, [r2, #23]
 8002034:	f36f 13c7 	bfc	r3, #7, #1
 8002038:	75d3      	strb	r3, [r2, #23]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f819 	bl	8002086 <extractTransferType>
 8002054:	4603      	mov	r3, r0
 8002056:	2b02      	cmp	r3, #2
 8002058:	d10e      	bne.n	8002078 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8002074:	89fb      	ldrh	r3, [r7, #14]
 8002076:	e002      	b.n	800207e <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0c1b      	lsrs	r3, r3, #16
 800207c:	b2db      	uxtb	r3, r3
    }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 8002086:	b480      	push	{r7}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <extractTransferType+0x28>
    {
        return CanardTransferTypeBroadcast;
 80020aa:	2302      	movs	r3, #2
 80020ac:	e009      	b.n	80020c2 <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0bdb      	lsrs	r3, r3, #15
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 80020c0:	2300      	movs	r3, #0
    }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d110      	bne.n	8002106 <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	330c      	adds	r3, #12
 80020e8:	6839      	ldr	r1, [r7, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f865 	bl	80021ba <createRxState>
 80020f0:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <traverseRxStates+0x2e>
        {
            return NULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e013      	b.n	8002124 <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	621a      	str	r2, [r3, #32]
        return states;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	e00e      	b.n	8002124 <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 8002106:	6839      	ldr	r1, [r7, #0]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f80f 	bl	800212c <findRxState>
 800210e:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <traverseRxStates+0x4c>
    {
        return states;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	e004      	b.n	8002124 <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 800211a:	6839      	ldr	r1, [r7, #0]
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f827 	bl	8002170 <prependRxState>
 8002122:	4603      	mov	r3, r0
    }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 800213c:	e010      	b.n	8002160 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d101      	bne.n	800214c <findRxState+0x20>
        {
            return state;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	e00d      	b.n	8002168 <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 020c 	add.w	r2, r3, #12
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f7fe fd7d 	bl	8000c58 <canardRxFromIdx>
 800215e:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1eb      	bne.n	800213e <findRxState+0x12>
    }
    return NULL;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	330c      	adds	r3, #12
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f81a 	bl	80021ba <createRxState>
 8002186:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <prependRxState+0x22>
    {
        return NULL;
 800218e:	2300      	movs	r3, #0
 8002190:	e00f      	b.n	80021b2 <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 020c 	add.w	r2, r3, #12
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f7fe fd66 	bl	8000c70 <canardRxToIdx>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	621a      	str	r2, [r3, #32]
    return state;
 80021b0:	68fb      	ldr	r3, [r7, #12]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b08c      	sub	sp, #48	@ 0x30
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	2220      	movs	r2, #32
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 febb 	bl	8009f48 <memset>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fbb6 	bl	8002948 <allocateBlock>
 80021dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 80021de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <createRxState+0x2e>
    {
        return NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e007      	b.n	80021f8 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 80021e8:	f107 0308 	add.w	r3, r7, #8
 80021ec:	2220      	movs	r2, #32
 80021ee:	4619      	mov	r1, r3
 80021f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021f2:	f007 ff44 	bl	800a07e <memcpy>

    return state;
 80021f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3730      	adds	r7, #48	@ 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 800220a:	e01b      	b.n	8002244 <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f103 020c 	add.w	r2, r3, #12
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f7fe fd05 	bl	8000c28 <canardBufferFromIdx>
 800221e:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	330c      	adds	r3, #12
 800222a:	68f9      	ldr	r1, [r7, #12]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fbb4 	bl	800299a <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	330c      	adds	r3, #12
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fd01 	bl	8000c40 <canardBufferToIdx>
 800223e:	4602      	mov	r2, r0
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1df      	bne.n	800220c <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	8ad3      	ldrh	r3, [r2, #22]
 8002250:	f36f 0309 	bfc	r3, #0, #10
 8002254:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
}
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	@ 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	8adb      	ldrh	r3, [r3, #22]
 800227e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b05      	cmp	r3, #5
 8002286:	d036      	beq.n	80022f6 <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	8adb      	ldrh	r3, [r3, #22]
 800228c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002290:	b29b      	uxth	r3, r3
 8002292:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002294:	e00e      	b.n	80022b4 <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 8002296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	441a      	add	r2, r3
 800229c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800229e:	7811      	ldrb	r1, [r2, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	460a      	mov	r2, r1
 80022a6:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 80022a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022aa:	3301      	adds	r3, #1
 80022ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80022ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80022b0:	3301      	adds	r3, #1
 80022b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 80022b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d804      	bhi.n	80022c4 <bufferBlockPushBytes+0x5c>
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3e8      	bcc.n	8002296 <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d313      	bcc.n	80022f6 <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	8adb      	ldrh	r3, [r3, #22]
 80022d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4413      	add	r3, r2
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e6:	b299      	uxth	r1, r3
            state->payload_len =
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	8ad3      	ldrh	r3, [r2, #22]
 80022ec:	f361 0309 	bfi	r3, r1, #0, #10
 80022f0:	82d3      	strh	r3, [r2, #22]
            return 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0ae      	b.n	8002454 <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	8adb      	ldrh	r3, [r3, #22]
 80022fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fe:	b29b      	uxth	r3, r3
 8002300:	1f5a      	subs	r2, r3, #5
 8002302:	0893      	lsrs	r3, r2, #2
 8002304:	4955      	ldr	r1, [pc, #340]	@ (800245c <bufferBlockPushBytes+0x1f4>)
 8002306:	fba1 3103 	umull	r3, r1, r1, r3
 800230a:	460b      	mov	r3, r1
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a5b      	subs	r3, r3, r1
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 8002314:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f89c 	bl	8002460 <createBufferBlock>
 8002328:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 800232a:	69f9      	ldr	r1, [r7, #28]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7fe fc87 	bl	8000c40 <canardBufferToIdx>
 8002332:	4602      	mov	r2, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800233e:	f06f 0302 	mvn.w	r3, #2
 8002342:	e087      	b.n	8002454 <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002348:	e06c      	b.n	8002424 <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4619      	mov	r1, r3
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7fe fc67 	bl	8000c28 <canardBufferFromIdx>
 800235a:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 800235c:	e005      	b.n	800236a <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 800235e:	8b7b      	ldrh	r3, [r7, #26]
 8002360:	3301      	adds	r3, #1
 8002362:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f5      	bne.n	800235e <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	8adb      	ldrh	r3, [r3, #22]
 8002376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	4413      	add	r3, r2
 8002382:	3b05      	subs	r3, #5
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	4a35      	ldr	r2, [pc, #212]	@ (800245c <bufferBlockPushBytes+0x1f4>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 800238e:	3301      	adds	r3, #1
 8002390:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8002392:	8afa      	ldrh	r2, [r7, #22]
 8002394:	8b7b      	ldrh	r3, [r7, #26]
 8002396:	429a      	cmp	r2, r3
 8002398:	d944      	bls.n	8002424 <bufferBlockPushBytes+0x1bc>
 800239a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800239c:	2b00      	cmp	r3, #0
 800239e:	d141      	bne.n	8002424 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f85d 	bl	8002460 <createBufferBlock>
 80023a6:	4602      	mov	r2, r0
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80023b4:	f06f 0302 	mvn.w	r3, #2
 80023b8:	e04c      	b.n	8002454 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 80023c0:	e030      	b.n	8002424 <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 80023c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80023c4:	833b      	strh	r3, [r7, #24]
 80023c6:	e00e      	b.n	80023e6 <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 80023c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	441a      	add	r2, r3
 80023ce:	8b3b      	ldrh	r3, [r7, #24]
 80023d0:	7811      	ldrb	r1, [r2, #0]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	460a      	mov	r2, r1
 80023d8:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 80023da:	8b3b      	ldrh	r3, [r7, #24]
 80023dc:	3301      	adds	r3, #1
 80023de:	833b      	strh	r3, [r7, #24]
 80023e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80023e2:	3301      	adds	r3, #1
 80023e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 80023e6:	8b3b      	ldrh	r3, [r7, #24]
 80023e8:	2b1b      	cmp	r3, #27
 80023ea:	d804      	bhi.n	80023f6 <bufferBlockPushBytes+0x18e>
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3e8      	bcc.n	80023c8 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d211      	bcs.n	8002424 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f82d 	bl	8002460 <createBufferBlock>
 8002406:	4602      	mov	r2, r0
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8002414:	f06f 0302 	mvn.w	r3, #2
 8002418:	e01c      	b.n	8002454 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	b29b      	uxth	r3, r3
 8002428:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800242a:	429a      	cmp	r2, r3
 800242c:	d3c9      	bcc.n	80023c2 <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	8adb      	ldrh	r3, [r3, #22]
 8002432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4413      	add	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002446:	b299      	uxth	r1, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	8ad3      	ldrh	r3, [r2, #22]
 800244c:	f361 0309 	bfi	r3, r1, #0, #10
 8002450:	82d3      	strh	r3, [r2, #22]

    return 1;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	@ 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24924925 	.word	0x24924925

08002460 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fa6d 	bl	8002948 <allocateBlock>
 800246e:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <createBufferBlock+0x1a>
    {
        return NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	e003      	b.n	8002482 <createBufferBlock+0x22>
    }
    block->next = NULL;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
    return block;
 8002480:	68fb      	ldr	r3, [r7, #12]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 800248a:	b480      	push	{r7}
 800248c:	b089      	sub	sp, #36	@ 0x24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	08db      	lsrs	r3, r3, #3
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	08db      	lsrs	r3, r3, #3
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 80024c4:	e04d      	b.n	8002562 <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 80024d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 80024da:	7eba      	ldrb	r2, [r7, #26]
 80024dc:	7efb      	ldrb	r3, [r7, #27]
 80024de:	4293      	cmp	r3, r2
 80024e0:	bf38      	it	cc
 80024e2:	4613      	movcc	r3, r2
 80024e4:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 80024e6:	7e7b      	ldrb	r3, [r7, #25]
 80024e8:	f1c3 0208 	rsb	r2, r3, #8
 80024ec:	69f9      	ldr	r1, [r7, #28]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1acb      	subs	r3, r1, r3
 80024f2:	4293      	cmp	r3, r2
 80024f4:	bf28      	it	cs
 80024f6:	4613      	movcs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80024fa:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	7ebb      	ldrb	r3, [r7, #26]
 800250a:	fa42 f303 	asr.w	r3, r2, r3
 800250e:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	08db      	lsrs	r3, r3, #3
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	7efb      	ldrb	r3, [r7, #27]
 800251e:	409a      	lsls	r2, r3
 8002520:	7ebb      	ldrb	r3, [r7, #26]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252a:	08db      	lsrs	r3, r3, #3
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	43db      	mvns	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4013      	ands	r3, r2
 800253a:	b2d9      	uxtb	r1, r3
 800253c:	7cba      	ldrb	r2, [r7, #18]
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	4013      	ands	r3, r2
 8002542:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	08db      	lsrs	r3, r3, #3
 8002548:	6838      	ldr	r0, [r7, #0]
 800254a:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 800254c:	430a      	orrs	r2, r1
 800254e:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8002550:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4413      	add	r3, r2
 8002558:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 800255a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	4413      	add	r3, r2
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d1ad      	bne.n	80024c6 <copyBitArray+0x3c>
    }
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	3724      	adds	r7, #36	@ 0x24
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b090      	sub	sp, #64	@ 0x40
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8a9b      	ldrh	r3, [r3, #20]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4293      	cmp	r3, r2
 8002594:	d301      	bcc.n	800259a <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 8002596:	2300      	movs	r3, #0
 8002598:	e0df      	b.n	800275a <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 800259a:	79fa      	ldrb	r2, [r7, #7]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4413      	add	r3, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	8a92      	ldrh	r2, [r2, #20]
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d908      	bls.n	80025bc <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8a9b      	ldrh	r3, [r3, #20]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <descatterTransferPayload+0x56>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80b9 	beq.w	8002740 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80025de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e0:	2b27      	cmp	r3, #39	@ 0x27
 80025e2:	d82d      	bhi.n	8002640 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80025e4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80025e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ea:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d305      	bcc.n	80025fe <descatterTransferPayload+0x86>
 80025f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	e001      	b.n	8002602 <descatterTransferPayload+0x8a>
 80025fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6898      	ldr	r0, [r3, #8]
 800260a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002616:	f7ff ff38 	bl	800248a <copyBitArray>

            input_bit_offset += amount;
 800261a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800261e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002620:	4413      	add	r3, r2
 8002622:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8002624:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800262c:	4413      	add	r3, r2
 800262e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8002632:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002636:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8a9b      	ldrh	r3, [r3, #20]
 8002644:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002648:	3b05      	subs	r3, #5
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 800264e:	2328      	movs	r3, #40	@ 0x28
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8002658:	e044      	b.n	80026e4 <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 800265a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265c:	2be0      	cmp	r3, #224	@ 0xe0
 800265e:	bf28      	it	cs
 8002660:	23e0      	movcs	r3, #224	@ 0xe0
 8002662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002664:	4413      	add	r3, r2
 8002666:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266c:	429a      	cmp	r2, r3
 800266e:	d92e      	bls.n	80026ce <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8002670:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002674:	69f9      	ldr	r1, [r7, #28]
 8002676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002678:	1acb      	subs	r3, r1, r3
 800267a:	429a      	cmp	r2, r3
 800267c:	d306      	bcc.n	800268c <descatterTransferPayload+0x114>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002684:	b2db      	uxtb	r3, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e001      	b.n	8002690 <descatterTransferPayload+0x118>
 800268c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002690:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8002692:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	1d18      	adds	r0, r3, #4
 800269e:	7efa      	ldrb	r2, [r7, #27]
 80026a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6979      	ldr	r1, [r7, #20]
 80026aa:	f7ff feee 	bl	800248a <copyBitArray>

                input_bit_offset += amount;
 80026ae:	7efb      	ldrb	r3, [r7, #27]
 80026b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026b2:	4413      	add	r3, r2
 80026b4:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80026b6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80026ba:	7efb      	ldrb	r3, [r7, #27]
 80026bc:	4413      	add	r3, r2
 80026be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80026c2:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80026c6:	7efb      	ldrb	r3, [r7, #27]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 80026ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026d6:	4413      	add	r3, r2
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <descatterTransferPayload+0x17a>
 80026ea:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1b3      	bne.n	800265a <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d02c      	beq.n	8002754 <descatterTransferPayload+0x1dc>
 80026fa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d028      	beq.n	8002754 <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8002702:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6918      	ldr	r0, [r3, #16]
 800270e:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002712:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6939      	ldr	r1, [r7, #16]
 800271c:	f7ff feb5 	bl	800248a <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8002720:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002726:	4413      	add	r3, r2
 8002728:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 800272a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800272e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002732:	4413      	add	r3, r2
 8002734:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 800273e:	e009      	b.n	8002754 <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6898      	ldr	r0, [r3, #8]
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	2300      	movs	r3, #0
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	f7ff fe9c 	bl	800248a <copyBitArray>
 8002752:	e000      	b.n	8002756 <descatterTransferPayload+0x1de>
    {
 8002754:	bf00      	nop
    }

    return bit_length;
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	b21b      	sxth	r3, r3
}
 800275a:	4618      	mov	r0, r3
 800275c:	3738      	adds	r7, #56	@ 0x38
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8002768:	2301      	movs	r3, #1
 800276a:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 800276c:	797b      	ldrb	r3, [r7, #5]
 800276e:	2b01      	cmp	r3, #1
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
#endif
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3b01      	subs	r3, #1
 800279a:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 800279c:	e017      	b.n	80027ce <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	441a      	add	r2, r3
 80027ae:	68f9      	ldr	r1, [r7, #12]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	440b      	add	r3, r1
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	7afa      	ldrb	r2, [r7, #11]
 80027c0:	701a      	strb	r2, [r3, #0]
        fwd++;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
        rev--;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3e3      	bcc.n	800279e <swapByteOrder+0x1a>
    }
}
 80027d6:	bf00      	nop
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	80fb      	strh	r3, [r7, #6]
 80027f0:	4613      	mov	r3, r2
 80027f2:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 80027f4:	797b      	ldrb	r3, [r7, #5]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	4053      	eors	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e012      	b.n	800282e <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8002808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	da08      	bge.n	8002822 <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800281a:	f083 0301 	eor.w	r3, r3, #1
 800281e:	80fb      	strh	r3, [r7, #6]
 8002820:	e002      	b.n	8002828 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3301      	adds	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b07      	cmp	r3, #7
 8002832:	d9e9      	bls.n	8002808 <crcAddByte+0x24>
        }
    }
    return crc_val;
 8002834:	88fb      	ldrh	r3, [r7, #6]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 8002842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002844:	b087      	sub	sp, #28
 8002846:	af00      	add	r7, sp, #0
 8002848:	4601      	mov	r1, r0
 800284a:	e9c7 2300 	strd	r2, r3, [r7]
 800284e:	460b      	mov	r3, r1
 8002850:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002852:	2300      	movs	r3, #0
 8002854:	82fb      	strh	r3, [r7, #22]
 8002856:	e01b      	b.n	8002890 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002858:	8af9      	ldrh	r1, [r7, #22]
 800285a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800285e:	f1c1 0620 	rsb	r6, r1, #32
 8002862:	f1a1 0020 	sub.w	r0, r1, #32
 8002866:	fa22 f401 	lsr.w	r4, r2, r1
 800286a:	fa03 f606 	lsl.w	r6, r3, r6
 800286e:	4334      	orrs	r4, r6
 8002870:	fa23 f000 	lsr.w	r0, r3, r0
 8002874:	4304      	orrs	r4, r0
 8002876:	fa23 f501 	lsr.w	r5, r3, r1
 800287a:	b2e2      	uxtb	r2, r4
 800287c:	89fb      	ldrh	r3, [r7, #14]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ffaf 	bl	80027e4 <crcAddByte>
 8002886:	4603      	mov	r3, r0
 8002888:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800288a:	8afb      	ldrh	r3, [r7, #22]
 800288c:	3308      	adds	r3, #8
 800288e:	82fb      	strh	r3, [r7, #22]
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	2b3f      	cmp	r3, #63	@ 0x3f
 8002894:	d9e0      	bls.n	8002858 <crcAddSignature+0x16>
    }
    return crc_val;
 8002896:	89fb      	ldrh	r3, [r7, #14]
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028a0 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80028ae:	e00a      	b.n	80028c6 <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff91 	bl	80027e4 <crcAddByte>
 80028c2:	4603      	mov	r3, r0
 80028c4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ef      	bne.n	80028b0 <crcAdd+0x10>
    }
    return crc_val;
 80028d0:	89fb      	ldrh	r3, [r7, #14]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 80028da:	b480      	push	{r7}
 80028dc:	b089      	sub	sp, #36	@ 0x24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	4613      	mov	r3, r2
 80028e6:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3304      	adds	r3, #4
 80028fa:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 80028fc:	e00b      	b.n	8002916 <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	015b      	lsls	r3, r3, #5
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	441a      	add	r2, r3
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	61bb      	str	r3, [r7, #24]
        current_index++;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	3301      	adds	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	429a      	cmp	r2, r3
 800291c:	d3ef      	bcc.n	80028fe <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	88fa      	ldrh	r2, [r7, #6]
 8002928:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
}
 800293c:	bf00      	nop
 800293e:	3724      	adds	r7, #36	@ 0x24
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	e018      	b.n	800298e <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	895b      	ldrh	r3, [r3, #10]
 8002970:	3301      	adds	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	899a      	ldrh	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	895b      	ldrh	r3, [r3, #10]
 8002980:	429a      	cmp	r2, r3
 8002982:	d203      	bcs.n	800298c <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	895a      	ldrh	r2, [r3, #10]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 800298c:	68fb      	ldr	r3, [r7, #12]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	895b      	ldrh	r3, [r3, #10]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <canardSTM32Recieve>:
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @param  rx_frame pointer to a CanardCANFrame structure where the received CAN message will be
  * 		stored.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
  */
int16_t canardSTM32Recieve(CAN_HandleTypeDef *hcan, uint32_t RxLocation, CanardCANFrame *const rx_frame) {
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08e      	sub	sp, #56	@ 0x38
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
	if (rx_frame == NULL) {
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <canardSTM32Recieve+0x18>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 80029e0:	f06f 0301 	mvn.w	r3, #1
 80029e4:	e035      	b.n	8002a52 <canardSTM32Recieve+0x84>
	}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if (HAL_CAN_GetRxMessage(hcan, RxLocation, &RxHeader, RxData) == HAL_OK) {
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	f107 021c 	add.w	r2, r7, #28
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f002 fb32 	bl	800505a <HAL_CAN_GetRxMessage>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d129      	bne.n	8002a50 <canardSTM32Recieve+0x82>
		//		printf("%02x", RxData[i]);
		//	}
		//	printf("\n");

		// Process ID to canard format
		if (RxHeader.IDE == CAN_ID_EXT) { // canard will only process the message if it is extended ID
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d109      	bne.n	8002a16 <canardSTM32Recieve+0x48>
			rx_frame->id = RxHeader.ExtId;
 8002a02:	6a3a      	ldr	r2, [r7, #32]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	601a      	str	r2, [r3, #0]
			rx_frame->id |= CANARD_CAN_FRAME_EFF;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e002      	b.n	8002a1c <canardSTM32Recieve+0x4e>
		} else {
			rx_frame->id = RxHeader.StdId;
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]
		}

		if (RxHeader.RTR == CAN_RTR_REMOTE) { // canard won't process the message if it is a remote frame
 8002a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d105      	bne.n	8002a2e <canardSTM32Recieve+0x60>
			rx_frame->id |= CANARD_CAN_FRAME_RTR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
		}

		rx_frame->data_len = RxHeader.DLC;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	731a      	strb	r2, [r3, #12]
		memcpy(rx_frame->data, RxData, RxHeader.DLC);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a3c:	f107 0114 	add.w	r1, r7, #20
 8002a40:	4618      	mov	r0, r3
 8002a42:	f007 fb1c 	bl	800a07e <memcpy>

		// assume a single interface
		rx_frame->iface_id = 0;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	735a      	strb	r2, [r3, #13]

		return 1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <canardSTM32Recieve+0x84>
	}

	// Either no CAN msg to be read, or an error that can be read from hfdcan->ErrorCode
	return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3738      	adds	r7, #56	@ 0x38
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <canardSTM32Transmit>:
  *         the configuration information for the specified FDCAN.
  * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
  * 		transmit.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
  */
int16_t canardSTM32Transmit(CAN_HandleTypeDef *hcan, const CanardCANFrame* const tx_frame) {
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b08c      	sub	sp, #48	@ 0x30
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8002a6a:	f06f 0301 	mvn.w	r3, #1
 8002a6e:	e043      	b.n	8002af8 <canardSTM32Transmit+0x9e>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 8002a7c:	f06f 0301 	mvn.w	r3, #1
 8002a80:	e03a      	b.n	8002af8 <canardSTM32Transmit+0x9e>
	// For now, we discard it. If we later wanted to check if our message is pending, 
	// or if we wanted to abort the transmission, we would need to store it.
	uint32_t TxMailbox; 

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da07      	bge.n	8002a9a <canardSTM32Transmit+0x40>
		TxHeader.IDE = CAN_ID_EXT;
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	623b      	str	r3, [r7, #32]
		TxHeader.ExtId = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	e006      	b.n	8002aa8 <canardSTM32Transmit+0x4e>
	} else {
		TxHeader.IDE = CAN_ID_STD;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa6:	61bb      	str	r3, [r7, #24]
	}

	TxHeader.DLC = tx_frame->data_len;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	7b1b      	ldrb	r3, [r3, #12]
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <canardSTM32Transmit+0x66>
		TxHeader.RTR = CAN_RTR_REMOTE;
 8002aba:	2302      	movs	r3, #2
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abe:	e001      	b.n	8002ac4 <canardSTM32Transmit+0x6a>
	} else {
		TxHeader.RTR = CAN_RTR_DATA;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	TxHeader.TransmitGlobalTime = DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	memcpy(TxData, tx_frame->data, TxHeader.DLC);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	1d19      	adds	r1, r3, #4
 8002ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f007 fad2 	bl	800a07e <memcpy>

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8002ada:	f107 030c 	add.w	r3, r7, #12
 8002ade:	f107 0210 	add.w	r2, r7, #16
 8002ae2:	f107 0118 	add.w	r1, r7, #24
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f002 f9e7 	bl	8004eba <HAL_CAN_AddTxMessage>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <canardSTM32Transmit+0x9c>
//		printf("Successfully sent message with id: %lu \n", TxHeader.ExtId);
		return 1;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <canardSTM32Transmit+0x9e>
	}

//	printf("Failed at adding message with id: %lu to Tx Mailbox", TxHeader.ExtId);
	// This might be for many reasons including all Tx Mailboxes being full, the error can be read from hfdcan->ErrorCode
	return 0;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3730      	adds	r7, #48	@ 0x30
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <getUniqueID>:
/**
  * @brief  Return a unique ID made out of the 96-bit STM32 UID
  * @param  id an array of size 16 to fill with the unique ID
  * @retval None
  */
void getUniqueID(uint8_t id[16]){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	uint32_t HALUniqueIDs[4];
	// Make Unique ID out of the 96-bit STM32 UID
	memset(id, 0, 16);
 8002b08:	2210      	movs	r2, #16
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f007 fa1b 	bl	8009f48 <memset>
	HALUniqueIDs[0] = HAL_GetUIDw0();
 8002b12:	f001 ffa5 	bl	8004a60 <HAL_GetUIDw0>
 8002b16:	4603      	mov	r3, r0
 8002b18:	60bb      	str	r3, [r7, #8]
	HALUniqueIDs[1] = HAL_GetUIDw1();
 8002b1a:	f001 ffad 	bl	8004a78 <HAL_GetUIDw1>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	60fb      	str	r3, [r7, #12]
	HALUniqueIDs[2] = HAL_GetUIDw2();
 8002b22:	f001 ffb5 	bl	8004a90 <HAL_GetUIDw2>
 8002b26:	4603      	mov	r3, r0
 8002b28:	613b      	str	r3, [r7, #16]
	HALUniqueIDs[3] = HAL_GetUIDw1(); // repeating UIDw1 for this, no specific reason I chose this..
 8002b2a:	f001 ffa5 	bl	8004a78 <HAL_GetUIDw1>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	617b      	str	r3, [r7, #20]
	memcpy(id, HALUniqueIDs, 16);
 8002b32:	f107 0308 	add.w	r3, r7, #8
 8002b36:	2210      	movs	r2, #16
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f007 fa9f 	bl	800a07e <memcpy>
}
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <MX_GPIO_Init+0x74>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <MX_GPIO_Init+0x74>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6a:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <MX_GPIO_Init+0x74>)
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <MX_GPIO_Init+0x74>)
 8002b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7a:	4a10      	ldr	r2, [pc, #64]	@ (8002bbc <MX_GPIO_Init+0x74>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b82:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <MX_GPIO_Init+0x74>)
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2120      	movs	r1, #32
 8002b92:	480b      	ldr	r0, [pc, #44]	@ (8002bc0 <MX_GPIO_Init+0x78>)
 8002b94:	f003 f8e8 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4619      	mov	r1, r3
 8002bae:	4804      	ldr	r0, [pc, #16]	@ (8002bc0 <MX_GPIO_Init+0x78>)
 8002bb0:	f002 ff48 	bl	8005a44 <HAL_GPIO_Init>

}
 8002bb4:	bf00      	nop
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	48000400 	.word	0x48000400

08002bc4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002bca:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <MX_I2C3_Init+0x78>)
 8002bcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <MX_I2C3_Init+0x7c>)
 8002bd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bda:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002be0:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002be6:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bec:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002bfe:	480e      	ldr	r0, [pc, #56]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002c00:	f003 f8ca 	bl	8005d98 <HAL_I2C_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002c0a:	f000 fd4d 	bl	80036a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4809      	ldr	r0, [pc, #36]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002c12:	f005 f9d5 	bl	8007fc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002c1c:	f000 fd44 	bl	80036a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002c20:	2100      	movs	r1, #0
 8002c22:	4805      	ldr	r0, [pc, #20]	@ (8002c38 <MX_I2C3_Init+0x74>)
 8002c24:	f005 fa17 	bl	8008056 <HAL_I2CEx_ConfigDigitalFilter>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002c2e:	f000 fd3b 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200000ac 	.word	0x200000ac
 8002c3c:	40005c00 	.word	0x40005c00
 8002c40:	00503d58 	.word	0x00503d58

08002c44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b0b0      	sub	sp, #192	@ 0xc0
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2298      	movs	r2, #152	@ 0x98
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f007 f96f 	bl	8009f48 <memset>
  if(i2cHandle->Instance==I2C3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a32      	ldr	r2, [pc, #200]	@ (8002d38 <HAL_I2C_MspInit+0xf4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d15d      	bne.n	8002d30 <HAL_I2C_MspInit+0xec>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c78:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4618      	mov	r0, r3
 8002c84:	f006 f9fa 	bl	800907c <HAL_RCCEx_PeriphCLKConfig>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c8e:	f000 fd0b 	bl	80036a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9e:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cae:	4a23      	ldr	r2, [pc, #140]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb6:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cc2:	2380      	movs	r3, #128	@ 0x80
 8002cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cda:	2304      	movs	r3, #4
 8002cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cea:	f002 feab 	bl	8005a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cee:	2310      	movs	r3, #16
 8002cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf4:	2312      	movs	r3, #18
 8002cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d00:	2303      	movs	r3, #3
 8002d02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d06:	2304      	movs	r3, #4
 8002d08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002d10:	4619      	mov	r1, r3
 8002d12:	480b      	ldr	r0, [pc, #44]	@ (8002d40 <HAL_I2C_MspInit+0xfc>)
 8002d14:	f002 fe96 	bl	8005a44 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	4a07      	ldr	r2, [pc, #28]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002d1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <HAL_I2C_MspInit+0xf8>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002d30:	bf00      	nop
 8002d32:	37c0      	adds	r7, #192	@ 0xc0
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40005c00 	.word	0x40005c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000400 	.word	0x48000400

08002d44 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 0 */
// The actual ISR, modify this to your needs
// Run HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) once to set up the ISR
MLX90393 mlx90393(&hi2c3);

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b08a      	sub	sp, #40	@ 0x28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	// Receiving
	CanardCANFrame rx_frame;

	const uint64_t timestamp = HAL_GetTick() * 1000ULL;
 8002d4e:	f001 fe7b 	bl	8004a48 <HAL_GetTick>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2200      	movs	r2, #0
 8002d56:	469a      	mov	sl, r3
 8002d58:	4693      	mov	fp, r2
 8002d5a:	4652      	mov	r2, sl
 8002d5c:	465b      	mov	r3, fp
 8002d5e:	f04f 0000 	mov.w	r0, #0
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6c:	0150      	lsls	r0, r2, #5
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	ebb2 040a 	subs.w	r4, r2, sl
 8002d76:	eb63 050b 	sbc.w	r5, r3, fp
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	00ab      	lsls	r3, r5, #2
 8002d84:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002d88:	00a2      	lsls	r2, r4, #2
 8002d8a:	4614      	mov	r4, r2
 8002d8c:	461d      	mov	r5, r3
 8002d8e:	eb14 080a 	adds.w	r8, r4, sl
 8002d92:	eb45 090b 	adc.w	r9, r5, fp
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	e9c7 8908 	strd	r8, r9, [r7, #32]
	const int16_t rx_res = canardSTM32Recieve(hcan, CAN_RX_FIFO0, &rx_frame);
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	461a      	mov	r2, r3
 8002db8:	2100      	movs	r1, #0
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fe07 	bl	80029ce <canardSTM32Recieve>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	83fb      	strh	r3, [r7, #30]

	if (rx_res < 0) {
 8002dc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	da06      	bge.n	8002dda <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
		printf("Receive error %d\n", rx_res);
 8002dcc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480a      	ldr	r0, [pc, #40]	@ (8002dfc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8002dd4:	f006 ff68 	bl	8009ca8 <iprintf>
	}
	else if (rx_res > 0)        // Success - process the frame
	{
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
	}
}
 8002dd8:	e00a      	b.n	8002df0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
	else if (rx_res > 0)        // Success - process the frame
 8002dda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	dd06      	ble.n	8002df0 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
 8002de2:	f107 010c 	add.w	r1, r7, #12
 8002de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dea:	4805      	ldr	r0, [pc, #20]	@ (8002e00 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002dec:	f7fe f820 	bl	8000e30 <canardHandleRxFrame>
}
 8002df0:	bf00      	nop
 8002df2:	3728      	adds	r7, #40	@ 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0800ab2c 	.word	0x0800ab2c
 8002e00:	20000100 	.word	0x20000100

08002e04 <_Z14setupCANFilterP17CAN_HandleTypeDef>:

// CAN Filter setup, modify this to your needs
// Run this once before calling HAL_CAN_Start()
void setupCANFilter(CAN_HandleTypeDef *hcan) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	@ 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef filter;
    filter.FilterBank = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
	filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
	filter.FilterIdHigh = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
	filter.FilterIdLow = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
	filter.FilterMaskIdHigh = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
	filter.FilterMaskIdLow = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
	filter.FilterActivation = ENABLE;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	filter.SlaveStartFilterBank = 14;
 8002e30:	230e      	movs	r3, #14
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_CAN_ConfigFilter(hcan, &filter);
 8002e34:	f107 0308 	add.w	r3, r7, #8
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 ff2f 	bl	8004c9e <HAL_CAN_ConfigFilter>
}
 8002e40:	bf00      	nop
 8002e42:	3730      	adds	r7, #48	@ 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer>:
// NOTE: All canard handlers and senders are based on this reference: https://dronecan.github.io/Specification/7._List_of_standard_data_types/
// Alternatively, you can look at the corresponding generated header file in the dsdlc_generated folder

// Canard Handlers ( Many have code copied from libcanard esc_node example: https://github.com/dronecan/libcanard/blob/master/examples/ESCNode/esc_node.c )

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	6838      	ldr	r0, [r7, #0]
 8002e5a:	f001 fd68 	bl	800492e <uavcan_protocol_NodeStatus_decode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d15d      	bne.n	8002f20 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8002e64:	7c3b      	ldrb	r3, [r7, #16]
 8002e66:	4619      	mov	r1, r3
 8002e68:	7c7b      	ldrb	r3, [r7, #17]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	482e      	ldr	r0, [pc, #184]	@ (8002f28 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xe0>)
 8002e6e:	f006 ff1b 	bl	8009ca8 <iprintf>

	printf("Node Health ");
 8002e72:	482e      	ldr	r0, [pc, #184]	@ (8002f2c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xe4>)
 8002e74:	f006 ff18 	bl	8009ca8 <iprintf>

	switch (nodeStatus.health) {
 8002e78:	7c3b      	ldrb	r3, [r7, #16]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d81a      	bhi.n	8002eb4 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x6c>
 8002e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x3c>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002e9d 	.word	0x08002e9d
 8002e8c:	08002ea5 	.word	0x08002ea5
 8002e90:	08002ead 	.word	0x08002ead
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 8002e94:	4826      	ldr	r0, [pc, #152]	@ (8002f30 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xe8>)
 8002e96:	f006 ff77 	bl	8009d88 <puts>
		break;
 8002e9a:	e00f      	b.n	8002ebc <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 8002e9c:	4825      	ldr	r0, [pc, #148]	@ (8002f34 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xec>)
 8002e9e:	f006 ff73 	bl	8009d88 <puts>
		break;
 8002ea2:	e00b      	b.n	8002ebc <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 8002ea4:	4824      	ldr	r0, [pc, #144]	@ (8002f38 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf0>)
 8002ea6:	f006 ff6f 	bl	8009d88 <puts>
		break;
 8002eaa:	e007      	b.n	8002ebc <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 8002eac:	4823      	ldr	r0, [pc, #140]	@ (8002f3c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf4>)
 8002eae:	f006 ff6b 	bl	8009d88 <puts>
		break;
 8002eb2:	e003      	b.n	8002ebc <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	default:
		printf("UNKNOWN?\n");
 8002eb4:	4822      	ldr	r0, [pc, #136]	@ (8002f40 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf8>)
 8002eb6:	f006 ff67 	bl	8009d88 <puts>
		break;
 8002eba:	bf00      	nop
	}

	printf("Node Mode ");
 8002ebc:	4821      	ldr	r0, [pc, #132]	@ (8002f44 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xfc>)
 8002ebe:	f006 fef3 	bl	8009ca8 <iprintf>

	switch(nodeStatus.mode) {
 8002ec2:	7c7b      	ldrb	r3, [r7, #17]
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	d827      	bhi.n	8002f18 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xd0>
 8002ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed0 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x88>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ef1 	.word	0x08002ef1
 8002ed4:	08002ef9 	.word	0x08002ef9
 8002ed8:	08002f01 	.word	0x08002f01
 8002edc:	08002f09 	.word	0x08002f09
 8002ee0:	08002f19 	.word	0x08002f19
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	08002f19 	.word	0x08002f19
 8002eec:	08002f11 	.word	0x08002f11
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 8002ef0:	4815      	ldr	r0, [pc, #84]	@ (8002f48 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x100>)
 8002ef2:	f006 ff49 	bl	8009d88 <puts>
		break;
 8002ef6:	e014      	b.n	8002f22 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 8002ef8:	4814      	ldr	r0, [pc, #80]	@ (8002f4c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x104>)
 8002efa:	f006 ff45 	bl	8009d88 <puts>
		break;
 8002efe:	e010      	b.n	8002f22 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 8002f00:	4813      	ldr	r0, [pc, #76]	@ (8002f50 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x108>)
 8002f02:	f006 ff41 	bl	8009d88 <puts>
		break;
 8002f06:	e00c      	b.n	8002f22 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 8002f08:	4812      	ldr	r0, [pc, #72]	@ (8002f54 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x10c>)
 8002f0a:	f006 ff3d 	bl	8009d88 <puts>
		break;
 8002f0e:	e008      	b.n	8002f22 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8002f10:	4811      	ldr	r0, [pc, #68]	@ (8002f58 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x110>)
 8002f12:	f006 ff39 	bl	8009d88 <puts>
		break;
 8002f16:	e004      	b.n	8002f22 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	default:
		printf("UNKNOWN?\n");
 8002f18:	4809      	ldr	r0, [pc, #36]	@ (8002f40 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf8>)
 8002f1a:	f006 ff35 	bl	8009d88 <puts>
		break;
 8002f1e:	e000      	b.n	8002f22 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
		return;
 8002f20:	bf00      	nop
	}
}
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	0800ab40 	.word	0x0800ab40
 8002f2c:	0800ab64 	.word	0x0800ab64
 8002f30:	0800ab74 	.word	0x0800ab74
 8002f34:	0800ab78 	.word	0x0800ab78
 8002f38:	0800ab80 	.word	0x0800ab80
 8002f3c:	0800ab88 	.word	0x0800ab88
 8002f40:	0800ab94 	.word	0x0800ab94
 8002f44:	0800aba0 	.word	0x0800aba0
 8002f48:	0800abac 	.word	0x0800abac
 8002f4c:	0800abb8 	.word	0x0800abb8
 8002f50:	0800abc8 	.word	0x0800abc8
 8002f54:	0800abd4 	.word	0x0800abd4
 8002f58:	0800abe4 	.word	0x0800abe4

08002f5c <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b0c8      	sub	sp, #288	@ 0x120
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f6a:	6018      	str	r0, [r3, #0]
 8002f6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f70:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f74:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 8002f76:	f107 0208 	add.w	r2, r7, #8
 8002f7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f7e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f82:	4611      	mov	r1, r2
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	f001 f9d4 	bl	8004332 <ardupilot_indication_NotifyState_decode>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d13b      	bne.n	8003008 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xac>
		return;
	}

	uint32_t nl = notifyState.vehicle_state & 0xFFFFFFFF;  // ignoring the last 32 bits for printing since the highest vehicle_state value right now is 23 even though they're allowed to be up to 64bit unsigned integer
 8002f90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f98:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	printf("Vehicle State: %lu ", nl);
 8002fa2:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8002fa6:	481b      	ldr	r0, [pc, #108]	@ (8003014 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xb8>)
 8002fa8:	f006 fe7e 	bl	8009ca8 <iprintf>

	if (notifyState.aux_data.len > 0) {
 8002fac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fb0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d022      	beq.n	8003000 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xa4>
		printf("Aux Data: 0x");
 8002fba:	4817      	ldr	r0, [pc, #92]	@ (8003018 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xbc>)
 8002fbc:	f006 fe74 	bl	8009ca8 <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002fc6:	e011      	b.n	8002fec <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0x90>
			printf("%02x", notifyState.aux_data.data[i]);
 8002fc8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002fcc:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	480f      	ldr	r0, [pc, #60]	@ (800301c <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xc0>)
 8002fde:	f006 fe63 	bl	8009ca8 <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8002fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002fec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ff0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	dbe3      	blt.n	8002fc8 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0x6c>
		}
	}

	printf("\n");
 8003000:	200a      	movs	r0, #10
 8003002:	f006 fe63 	bl	8009ccc <putchar>
 8003006:	e000      	b.n	800300a <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xae>
		return;
 8003008:	bf00      	nop

}
 800300a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	0800abec 	.word	0x0800abec
 8003018:	0800ac00 	.word	0x0800ac00
 800301c:	0800ac10 	.word	0x0800ac10

08003020 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer>:

/*
  handle a GetNodeInfo request
*/
// TODO: All the data in here is temporary for testing. If actually need to send valid data, edit accordingly.
void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer) {
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 8003026:	af06      	add	r7, sp, #24
 8003028:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800302c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8003030:	6018      	str	r0, [r3, #0]
 8003032:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003036:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800303a:	6019      	str	r1, [r3, #0]
	printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 800303c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003040:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	7edb      	ldrb	r3, [r3, #27]
 8003048:	4619      	mov	r1, r3
 800304a:	484f      	ldr	r0, [pc, #316]	@ (8003188 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x168>)
 800304c:	f006 fe2c 	bl	8009ca8 <iprintf>

	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
	struct uavcan_protocol_GetNodeInfoResponse pkt;

	memset(&pkt, 0, sizeof(pkt));
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f006 ff74 	bl	8009f48 <memset>

	node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 8003060:	f001 fcf2 	bl	8004a48 <HAL_GetTick>
 8003064:	4603      	mov	r3, r0
 8003066:	4a49      	ldr	r2, [pc, #292]	@ (800318c <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x16c>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	4a48      	ldr	r2, [pc, #288]	@ (8003190 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x170>)
 8003070:	6013      	str	r3, [r2, #0]
	pkt.status = node_status;
 8003072:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003076:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800307a:	4a45      	ldr	r2, [pc, #276]	@ (8003190 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x170>)
 800307c:	ca07      	ldmia	r2, {r0, r1, r2}
 800307e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// fill in your major and minor firmware version
	pkt.software_version.major = 1;
 8003082:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003086:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800308a:	2201      	movs	r2, #1
 800308c:	741a      	strb	r2, [r3, #16]
	pkt.software_version.minor = 0;
 800308e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003092:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003096:	2200      	movs	r2, #0
 8003098:	745a      	strb	r2, [r3, #17]
	pkt.software_version.optional_field_flags = 0;
 800309a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800309e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80030a2:	2200      	movs	r2, #0
 80030a4:	749a      	strb	r2, [r3, #18]
	pkt.software_version.vcs_commit = 0; // should put git hash in here
 80030a6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80030aa:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]

	// should fill in hardware version
	pkt.hardware_version.major = 1;
 80030b2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80030b6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2020 	strb.w	r2, [r3, #32]
	pkt.hardware_version.minor = 0;
 80030c0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80030c4:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// just setting all 16 bytes to 1 for testing
	getUniqueID(pkt.hardware_version.unique_id);
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	3322      	adds	r3, #34	@ 0x22
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fd13 	bl	8002b00 <getUniqueID>

	strncpy((char*)pkt.name.data, "SERVONode", sizeof(pkt.name.data));
 80030da:	f107 0308 	add.w	r3, r7, #8
 80030de:	f203 1333 	addw	r3, r3, #307	@ 0x133
 80030e2:	2250      	movs	r2, #80	@ 0x50
 80030e4:	492b      	ldr	r1, [pc, #172]	@ (8003194 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x174>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f006 ff36 	bl	8009f58 <strncpy>
	pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	f203 1333 	addw	r3, r3, #307	@ 0x133
 80030f4:	2150      	movs	r1, #80	@ 0x50
 80030f6:	4618      	mov	r0, r3
 80030f8:	f006 ff41 	bl	8009f7e <strnlen>
 80030fc:	4603      	mov	r3, r0
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003104:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003108:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132

	uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 800310c:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f001 fb2f 	bl	800477a <uavcan_protocol_GetNodeInfoResponse_encode>
 800311c:	4603      	mov	r3, r0
 800311e:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

	canardRequestOrRespond(ins,
 8003122:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003126:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	7edc      	ldrb	r4, [r3, #27]
 800312e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003132:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3319      	adds	r3, #25
 800313a:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 800313e:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	7e92      	ldrb	r2, [r2, #26]
 8003146:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 800314a:	f5a1 7043 	sub.w	r0, r1, #780	@ 0x30c
 800314e:	f8b7 130e 	ldrh.w	r1, [r7, #782]	@ 0x30e
 8003152:	9105      	str	r1, [sp, #20]
 8003154:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8003158:	9104      	str	r1, [sp, #16]
 800315a:	2100      	movs	r1, #0
 800315c:	9103      	str	r1, [sp, #12]
 800315e:	9202      	str	r2, [sp, #8]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2301      	movs	r3, #1
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	a306      	add	r3, pc, #24	@ (adr r3, 8003180 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x160>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	4621      	mov	r1, r4
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	f7fd fdae 	bl	8000cd0 <canardRequestOrRespond>
						   &transfer->transfer_id,
						   transfer->priority,
						   CanardResponse,
						   &buffer[0],
						   total_size);
}
 8003174:	bf00      	nop
 8003176:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	21c46a9e 	.word	0x21c46a9e
 8003184:	ee468a81 	.word	0xee468a81
 8003188:	0800ac18 	.word	0x0800ac18
 800318c:	10624dd3 	.word	0x10624dd3
 8003190:	2000052c 	.word	0x2000052c
 8003194:	0800ac38 	.word	0x0800ac38

08003198 <_Z15send_NodeStatusv>:

/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
void send_NodeStatus(void) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b0e6      	sub	sp, #408	@ 0x198
 800319c:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000UL;
 800319e:	f001 fc53 	bl	8004a48 <HAL_GetTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003210 <_Z15send_NodeStatusv+0x78>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	4a19      	ldr	r2, [pc, #100]	@ (8003214 <_Z15send_NodeStatusv+0x7c>)
 80031ae:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 80031b0:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <_Z15send_NodeStatusv+0x7c>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 80031b6:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <_Z15send_NodeStatusv+0x7c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <_Z15send_NodeStatusv+0x7c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	719a      	strb	r2, [r3, #6]

    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 80031c2:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <_Z15send_NodeStatusv+0x7c>)
 80031c4:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 80031c8:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 80031ca:	463b      	mov	r3, r7
 80031cc:	4619      	mov	r1, r3
 80031ce:	4811      	ldr	r0, [pc, #68]	@ (8003214 <_Z15send_NodeStatusv+0x7c>)
 80031d0:	f001 fb93 	bl	80048fa <uavcan_protocol_NodeStatus_encode>
 80031d4:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 80031d8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80031dc:	b29b      	uxth	r3, r3
 80031de:	9304      	str	r3, [sp, #16]
 80031e0:	463b      	mov	r3, r7
 80031e2:	9303      	str	r3, [sp, #12]
 80031e4:	2318      	movs	r3, #24
 80031e6:	9302      	str	r3, [sp, #8]
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <_Z15send_NodeStatusv+0x80>)
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f240 1355 	movw	r3, #341	@ 0x155
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	a305      	add	r3, pc, #20	@ (adr r3, 8003208 <_Z15send_NodeStatusv+0x70>)
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	4808      	ldr	r0, [pc, #32]	@ (800321c <_Z15send_NodeStatusv+0x84>)
 80031fa:	f7fd fc63 	bl	8000ac4 <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 80031fe:	bf00      	nop
 8003200:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	c1a7c6f1 	.word	0xc1a7c6f1
 800320c:	0f0868d0 	.word	0x0f0868d0
 8003210:	10624dd3 	.word	0x10624dd3
 8003214:	2000052c 	.word	0x2000052c
 8003218:	200005a4 	.word	0x200005a4
 800321c:	20000100 	.word	0x20000100

08003220 <_Z13send_MLX90393v>:

void send_MLX90393(void) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	@ 0x38
 8003224:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_EQUIPMENT_AHRS_MAGNETICFIELDSTRENGTH2_MAX_SIZE];

    // put whatever you like in here for display in GUI
    mlx90393_node.sensor_id = 1;
 8003226:	4b44      	ldr	r3, [pc, #272]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
    //1 mT = 10G
    mlx90393_node.magnetic_field_ga[0] = (float)mlx90393.get_x_data() * 10.0;
 800322c:	4843      	ldr	r0, [pc, #268]	@ (800333c <_Z13send_MLX90393v+0x11c>)
 800322e:	f000 febb 	bl	8003fa8 <_ZN8MLX9039310get_x_dataEv>
 8003232:	ee10 3a10 	vmov	r3, s0
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd fac0 	bl	80007bc <__aeabi_f2d>
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	4b3f      	ldr	r3, [pc, #252]	@ (8003340 <_Z13send_MLX90393v+0x120>)
 8003242:	f7fd f82d 	bl	80002a0 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f7fd fb0d 	bl	800086c <__aeabi_d2f>
 8003252:	4603      	mov	r3, r0
 8003254:	4a38      	ldr	r2, [pc, #224]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 8003256:	6053      	str	r3, [r2, #4]
    mlx90393_node.magnetic_field_ga[1] = (float)mlx90393.get_y_data() * 10.0;
 8003258:	4838      	ldr	r0, [pc, #224]	@ (800333c <_Z13send_MLX90393v+0x11c>)
 800325a:	f000 feb4 	bl	8003fc6 <_ZN8MLX9039310get_y_dataEv>
 800325e:	ee10 3a10 	vmov	r3, s0
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd faaa 	bl	80007bc <__aeabi_f2d>
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	4b34      	ldr	r3, [pc, #208]	@ (8003340 <_Z13send_MLX90393v+0x120>)
 800326e:	f7fd f817 	bl	80002a0 <__aeabi_dmul>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	f7fd faf7 	bl	800086c <__aeabi_d2f>
 800327e:	4603      	mov	r3, r0
 8003280:	4a2d      	ldr	r2, [pc, #180]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 8003282:	6093      	str	r3, [r2, #8]
    mlx90393_node.magnetic_field_ga[2] = (float)mlx90393.get_z_data() * 10.0;
 8003284:	482d      	ldr	r0, [pc, #180]	@ (800333c <_Z13send_MLX90393v+0x11c>)
 8003286:	f000 fead 	bl	8003fe4 <_ZN8MLX9039310get_z_dataEv>
 800328a:	ee10 3a10 	vmov	r3, s0
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fa94 	bl	80007bc <__aeabi_f2d>
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <_Z13send_MLX90393v+0x120>)
 800329a:	f7fd f801 	bl	80002a0 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7fd fae1 	bl	800086c <__aeabi_d2f>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a22      	ldr	r2, [pc, #136]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032ae:	60d3      	str	r3, [r2, #12]
    mlx90393_node.magnetic_field_covariance.len = 9;
 80032b0:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032b2:	2209      	movs	r2, #9
 80032b4:	741a      	strb	r2, [r3, #16]
    //Covariance matrix with variance terms only, refer to 13.1 for noise standard deviation
    mlx90393_node.magnetic_field_covariance.data[0] = 2.5E-5;
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032b8:	4a22      	ldr	r2, [pc, #136]	@ (8003344 <_Z13send_MLX90393v+0x124>)
 80032ba:	615a      	str	r2, [r3, #20]
    mlx90393_node.magnetic_field_covariance.data[1] = 0.0;
 80032bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
    mlx90393_node.magnetic_field_covariance.data[2] = 0.0;
 80032c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	61da      	str	r2, [r3, #28]
    mlx90393_node.magnetic_field_covariance.data[3] = 0.0;
 80032cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	621a      	str	r2, [r3, #32]
    mlx90393_node.magnetic_field_covariance.data[4] = 2.5E-5;
 80032d4:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <_Z13send_MLX90393v+0x124>)
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24
    mlx90393_node.magnetic_field_covariance.data[5] = 0.0;
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	629a      	str	r2, [r3, #40]	@ 0x28
    mlx90393_node.magnetic_field_covariance.data[6] = 0.0;
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    mlx90393_node.magnetic_field_covariance.data[7] = 0.0;
 80032ea:	4b13      	ldr	r3, [pc, #76]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30
    mlx90393_node.magnetic_field_covariance.data[8] = 4.9E-5;
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032f4:	4a14      	ldr	r2, [pc, #80]	@ (8003348 <_Z13send_MLX90393v+0x128>)
 80032f6:	635a      	str	r2, [r3, #52]	@ 0x34
    uint32_t len = uavcan_equipment_ahrs_MagneticFieldStrength2_encode(&mlx90393_node, buffer);
 80032f8:	463b      	mov	r3, r7
 80032fa:	4619      	mov	r1, r3
 80032fc:	480e      	ldr	r0, [pc, #56]	@ (8003338 <_Z13send_MLX90393v+0x118>)
 80032fe:	f001 f8b9 	bl	8004474 <uavcan_equipment_ahrs_MagneticFieldStrength2_encode>
 8003302:	61f8      	str	r0, [r7, #28]
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	b29b      	uxth	r3, r3
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	463b      	mov	r3, r7
 800330c:	9303      	str	r3, [sp, #12]
 800330e:	2318      	movs	r3, #24
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <_Z13send_MLX90393v+0x12c>)
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	a304      	add	r3, pc, #16	@ (adr r3, 8003330 <_Z13send_MLX90393v+0x110>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	480b      	ldr	r0, [pc, #44]	@ (8003350 <_Z13send_MLX90393v+0x130>)
 8003324:	f7fd fbce 	bl	8000ac4 <canardBroadcast>
					UAVCAN_EQUIPMENT_AHRS_MAGNETICFIELDSTRENGTH2_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 8003328:	bf00      	nop
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	2430297e 	.word	0x2430297e
 8003334:	b6ac0c44 	.word	0xb6ac0c44
 8003338:	20000538 	.word	0x20000538
 800333c:	20000570 	.word	0x20000570
 8003340:	40240000 	.word	0x40240000
 8003344:	37d1b717 	.word	0x37d1b717
 8003348:	384d8559 	.word	0x384d8559
 800334c:	200005a5 	.word	0x200005a5
 8003350:	20000100 	.word	0x20000100
 8003354:	00000000 	.word	0x00000000

08003358 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                                 uint64_t *out_data_type_signature,
                                 uint16_t data_type_id,
                                 CanardTransferType transfer_type,
                                 uint8_t source_node_id)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	460b      	mov	r3, r1
 8003368:	80fb      	strh	r3, [r7, #6]
 800336a:	4613      	mov	r3, r2
 800336c:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeRequest) {
 800336e:	797b      	ldrb	r3, [r7, #5]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d10a      	bne.n	800338a <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x32>
	// check if we want to handle a specific service request
		switch (data_type_id) {
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x32>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	a316      	add	r3, pc, #88	@ (adr r3, 80033d8 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x80>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8003386:	2301      	movs	r3, #1
 8003388:	e01f      	b.n	80033ca <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x72>
		}
		}
	}
	if (transfer_type == CanardTransferTypeResponse) {
 800338a:	797b      	ldrb	r3, [r7, #5]
 800338c:	2b00      	cmp	r3, #0
		// check if we want to handle a specific service request
		switch (data_type_id) {
		}
	}
	if (transfer_type == CanardTransferTypeBroadcast) {
 800338e:	797b      	ldrb	r3, [r7, #5]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d119      	bne.n	80033c8 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x70>
		// see if we want to handle a specific broadcast packet
		switch (data_type_id) {
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	f240 1255 	movw	r2, #341	@ 0x155
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x50>
 800339e:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d008      	beq.n	80033b8 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x60>
 80033a6:	e00f      	b.n	80033c8 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x70>
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	a30d      	add	r3, pc, #52	@ (adr r3, 80033e0 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x88>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e008      	b.n	80033ca <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x72>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			*out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	a30b      	add	r3, pc, #44	@ (adr r3, 80033e8 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x90>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x72>
		}
		}
	}
	// we don't want any other messages
	return false;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	21c46a9e 	.word	0x21c46a9e
 80033dc:	ee468a81 	.word	0xee468a81
 80033e0:	c1a7c6f1 	.word	0xc1a7c6f1
 80033e4:	0f0868d0 	.word	0x0f0868d0
 80033e8:	1651fdec 	.word	0x1651fdec
 80033ec:	631f2a9c 	.word	0x631f2a9c

080033f0 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer>:

void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
//		for (int i = 0; i < transfer->payload_len; i++) {
//			printf("%02x", transfer->payload_head[i]);
//		}
//
//		printf("\n");
	if (transfer->transfer_type == CanardTransferTypeRequest) {
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	7e1b      	ldrb	r3, [r3, #24]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d108      	bne.n	8003414 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x24>
		// check if we want to handle a specific service request
		switch (transfer->data_type_id) {
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	8adb      	ldrh	r3, [r3, #22]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d104      	bne.n	8003414 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x24>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			handle_GetNodeInfo(ins, transfer);
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fe07 	bl	8003020 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer>
			break;
 8003412:	bf00      	nop
		}
		}
	}
	if (transfer->transfer_type == CanardTransferTypeResponse) {
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	7e1b      	ldrb	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
		switch (transfer->data_type_id) {
		}
	}
	if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	7e1b      	ldrb	r3, [r3, #24]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d114      	bne.n	800344c <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x5c>
		// check if we want to handle a specific broadcast message
		switch (transfer->data_type_id) {
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	8adb      	ldrh	r3, [r3, #22]
 8003426:	f240 1255 	movw	r2, #341	@ 0x155
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x48>
 800342e:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8003432:	4293      	cmp	r3, r2
 8003434:	d005      	beq.n	8003442 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x52>
			handle_NotifyState(ins, transfer);
			break;
		}
		}
	}
}
 8003436:	e009      	b.n	800344c <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x5c>
			handle_NodeStatus(ins, transfer);
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fd04 	bl	8002e48 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer>
			break;
 8003440:	e004      	b.n	800344c <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x5c>
			handle_NotifyState(ins, transfer);
 8003442:	6839      	ldr	r1, [r7, #0]
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fd89 	bl	8002f5c <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer>
			break;
 800344a:	bf00      	nop
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <_Z20processCanardTxQueueP17CAN_HandleTypeDef>:


// Processes the canard Tx queue and attempts to transmit the messages
// Call this function very often to check if there are any Tx to process
// Calling it once every cycle of the while(1) loop is not a bad idea
void processCanardTxQueue(CAN_HandleTypeDef *hcan) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 800345c:	e01a      	b.n	8003494 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x40>
		const int16_t tx_res = canardSTM32Transmit(hcan, tx_frame);
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fafa 	bl	8002a5a <canardSTM32Transmit>
 8003466:	4603      	mov	r3, r0
 8003468:	817b      	strh	r3, [r7, #10]

		if (tx_res <= 0) {
 800346a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800346e:	2b00      	cmp	r3, #0
 8003470:	dc06      	bgt.n	8003480 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x2c>
			printf("Transmit error %d\n", tx_res);
 8003472:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003476:	4619      	mov	r1, r3
 8003478:	480f      	ldr	r0, [pc, #60]	@ (80034b8 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x64>)
 800347a:	f006 fc15 	bl	8009ca8 <iprintf>
 800347e:	e006      	b.n	800348e <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x3a>
		} else if (tx_res > 0) {
 8003480:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003484:	2b00      	cmp	r3, #0
 8003486:	dd02      	ble.n	800348e <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x3a>
			printf("Successfully transmitted message\n");
 8003488:	480c      	ldr	r0, [pc, #48]	@ (80034bc <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x68>)
 800348a:	f006 fc7d 	bl	8009d88 <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 800348e:	480c      	ldr	r0, [pc, #48]	@ (80034c0 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x6c>)
 8003490:	f7fd fcb9 	bl	8000e06 <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8003494:	480a      	ldr	r0, [pc, #40]	@ (80034c0 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x6c>)
 8003496:	f7fd fca3 	bl	8000de0 <canardPeekTxQueue>
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1d8      	bne.n	800345e <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0xa>
	}
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	0800ac44 	.word	0x0800ac44
 80034bc:	0800ac58 	.word	0x0800ac58
 80034c0:	20000100 	.word	0x20000100

080034c4 <_Z15process1HzTasksy>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
void process1HzTasks(uint64_t timestamp_usec) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 80034ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034d2:	4805      	ldr	r0, [pc, #20]	@ (80034e8 <_Z15process1HzTasksy+0x24>)
 80034d4:	f7fe f84a 	bl	800156c <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 80034d8:	f7ff fe5e 	bl	8003198 <_Z15send_NodeStatusv>
    send_MLX90393();
 80034dc:	f7ff fea0 	bl	8003220 <_Z13send_MLX90393v>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000100 	.word	0x20000100

080034ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034f4:	f001 fa3f 	bl	8004976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034f8:	f000 f866 	bl	80035c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034fc:	f7ff fb24 	bl	8002b48 <MX_GPIO_Init>
  MX_I2C3_Init();
 8003500:	f7ff fb60 	bl	8002bc4 <MX_I2C3_Init>
  MX_CAN1_Init();
 8003504:	f7fd fa02 	bl	800090c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  setupCANFilter(&hcan1);
 8003508:	4829      	ldr	r0, [pc, #164]	@ (80035b0 <main+0xc4>)
 800350a:	f7ff fc7b 	bl	8002e04 <_Z14setupCANFilterP17CAN_HandleTypeDef>
  HAL_CAN_Start(&hcan1);
 800350e:	4828      	ldr	r0, [pc, #160]	@ (80035b0 <main+0xc4>)
 8003510:	f001 fc8f 	bl	8004e32 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003514:	2102      	movs	r1, #2
 8003516:	4826      	ldr	r0, [pc, #152]	@ (80035b0 <main+0xc4>)
 8003518:	f001 fec1 	bl	800529e <HAL_CAN_ActivateNotification>

  canardInit(&canard,
 800351c:	2300      	movs	r3, #0
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <main+0xc8>)
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <main+0xcc>)
 8003526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800352a:	4924      	ldr	r1, [pc, #144]	@ (80035bc <main+0xd0>)
 800352c:	4824      	ldr	r0, [pc, #144]	@ (80035c0 <main+0xd4>)
 800352e:	f7fd fa6f 	bl	8000a10 <canardInit>
			  NULL);

  // Could use DNA (Dynamic Node Allocation) by following example in esc_node.c but that requires a lot of setup and I'm not too sure of what advantage it brings
  // Instead, set a different NODE_ID for each device on the CAN bus by configuring node_settings
  if (NODE_ID > 0) {
	  canardSetLocalNodeID(&canard, NODE_ID);
 8003532:	2102      	movs	r1, #2
 8003534:	4822      	ldr	r0, [pc, #136]	@ (80035c0 <main+0xd4>)
 8003536:	f7fd fa9f 	bl	8000a78 <canardSetLocalNodeID>
  } else {
	  printf("Node ID is 0, this node is anonymous and can't transmit most messaged. Please update this in node_settings.h\n");
  }

  uint64_t next_1hz_service_at = HAL_GetTick();
 800353a:	f001 fa85 	bl	8004a48 <HAL_GetTick>
 800353e:	4603      	mov	r3, r0
 8003540:	2200      	movs	r2, #0
 8003542:	469a      	mov	sl, r3
 8003544:	4693      	mov	fp, r2
 8003546:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mlx90393.i2c_SM();
 800354a:	481e      	ldr	r0, [pc, #120]	@ (80035c4 <main+0xd8>)
 800354c:	f000 f987 	bl	800385e <_ZN8MLX903936i2c_SMEv>
	  mlx90393.i2c_RM();
 8003550:	481c      	ldr	r0, [pc, #112]	@ (80035c4 <main+0xd8>)
 8003552:	f000 f9ad 	bl	80038b0 <_ZN8MLX903936i2c_RMEv>
	  if(mlx90393.read_update_flag()){
 8003556:	481b      	ldr	r0, [pc, #108]	@ (80035c4 <main+0xd8>)
 8003558:	f000 fd19 	bl	8003f8e <_ZN8MLX9039316read_update_flagEv>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <main+0x82>
		  mlx90393.decode();
 8003562:	4818      	ldr	r0, [pc, #96]	@ (80035c4 <main+0xd8>)
 8003564:	f000 fbbc 	bl	8003ce0 <_ZN8MLX903936decodeEv>
		  mlx90393.convert();
 8003568:	4816      	ldr	r0, [pc, #88]	@ (80035c4 <main+0xd8>)
 800356a:	f000 fc29 	bl	8003dc0 <_ZN8MLX903937convertEv>
	  }
	const uint64_t ts = HAL_GetTick();
 800356e:	f001 fa6b 	bl	8004a48 <HAL_GetTick>
 8003572:	4603      	mov	r3, r0
 8003574:	2200      	movs	r2, #0
 8003576:	4698      	mov	r8, r3
 8003578:	4691      	mov	r9, r2
 800357a:	e9c7 8900 	strd	r8, r9, [r7]

	if (ts >= next_1hz_service_at){
 800357e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003586:	4290      	cmp	r0, r2
 8003588:	eb71 0303 	sbcs.w	r3, r1, r3
 800358c:	d30b      	bcc.n	80035a6 <main+0xba>
	  next_1hz_service_at += 1000ULL;
 800358e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003592:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8003596:	f143 0500 	adc.w	r5, r3, #0
 800359a:	e9c7 4502 	strd	r4, r5, [r7, #8]
	  process1HzTasks(ts);
 800359e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035a2:	f7ff ff8f 	bl	80034c4 <_Z15process1HzTasksy>
	}

	processCanardTxQueue(&hcan1);
 80035a6:	4802      	ldr	r0, [pc, #8]	@ (80035b0 <main+0xc4>)
 80035a8:	f7ff ff54 	bl	8003454 <_Z20processCanardTxQueueP17CAN_HandleTypeDef>
  }
 80035ac:	e7cd      	b.n	800354a <main+0x5e>
 80035ae:	bf00      	nop
 80035b0:	20000084 	.word	0x20000084
 80035b4:	08003359 	.word	0x08003359
 80035b8:	080033f1 	.word	0x080033f1
 80035bc:	2000012c 	.word	0x2000012c
 80035c0:	20000100 	.word	0x20000100
 80035c4:	20000570 	.word	0x20000570

080035c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b098      	sub	sp, #96	@ 0x60
 80035cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ce:	f107 0318 	add.w	r3, r7, #24
 80035d2:	2248      	movs	r2, #72	@ 0x48
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f006 fcb6 	bl	8009f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80035ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80035ee:	f004 fd9f 	bl	8008130 <HAL_PWREx_ControlVoltageScaling>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003602:	f000 f851 	bl	80036a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003606:	2302      	movs	r3, #2
 8003608:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800360a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003610:	2340      	movs	r3, #64	@ 0x40
 8003612:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003614:	2300      	movs	r3, #0
 8003616:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003618:	f107 0318 	add.w	r3, r7, #24
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fe2b 	bl	8008278 <HAL_RCC_OscConfig>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <_Z18SystemClock_Configv+0x6e>
  {
    Error_Handler();
 8003632:	f000 f839 	bl	80036a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003636:	230f      	movs	r3, #15
 8003638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800363a:	2301      	movs	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f005 fa8e 	bl	8008b70 <HAL_RCC_ClockConfig>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8003664:	f000 f820 	bl	80036a8 <Error_Handler>
  }
}
 8003668:	bf00      	nop
 800366a:	3760      	adds	r7, #96	@ 0x60
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_I2C_MasterRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C3){
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a08      	ldr	r2, [pc, #32]	@ (80036a0 <HAL_I2C_MasterRxCpltCallback+0x30>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d109      	bne.n	8003696 <HAL_I2C_MasterRxCpltCallback+0x26>
		if(mlx90393.get_rm_flag()){
 8003682:	4808      	ldr	r0, [pc, #32]	@ (80036a4 <HAL_I2C_MasterRxCpltCallback+0x34>)
 8003684:	f000 fc66 	bl	8003f54 <_ZN8MLX9039311get_rm_flagEv>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_I2C_MasterRxCpltCallback+0x26>
			mlx90393.set_update_flag(true);
 800368e:	2101      	movs	r1, #1
 8003690:	4804      	ldr	r0, [pc, #16]	@ (80036a4 <HAL_I2C_MasterRxCpltCallback+0x34>)
 8003692:	f000 fc6c 	bl	8003f6e <_ZN8MLX9039315set_update_flagEb>
		}
	}
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40005c00 	.word	0x40005c00
 80036a4:	20000570 	.word	0x20000570

080036a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <Error_Handler+0x8>

080036b4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d108      	bne.n	80036d6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d103      	bne.n	80036d6 <_Z41__static_initialization_and_destruction_0ii+0x22>
MLX90393 mlx90393(&hi2c3);
 80036ce:	4904      	ldr	r1, [pc, #16]	@ (80036e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80036d0:	4804      	ldr	r0, [pc, #16]	@ (80036e4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80036d2:	f000 f811 	bl	80036f8 <_ZN8MLX90393C1EP19__I2C_HandleTypeDef>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200000ac 	.word	0x200000ac
 80036e4:	20000570 	.word	0x20000570

080036e8 <_GLOBAL__sub_I_mlx90393>:
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7ff ffdf 	bl	80036b4 <_Z41__static_initialization_and_destruction_0ii>
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZN8MLX90393C1EP19__I2C_HandleTypeDef>:
 */
#include <mlx90393_i2c.hpp>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_i2c.h"

MLX90393::MLX90393(I2C_HandleTypeDef *hi2c){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
	this->hi2c = hi2c;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_SET);
 8003708:	2201      	movs	r2, #1
 800370a:	2120      	movs	r1, #32
 800370c:	482b      	ldr	r0, [pc, #172]	@ (80037bc <_ZN8MLX90393C1EP19__I2C_HandleTypeDef+0xc4>)
 800370e:	f002 fb2b 	bl	8005d68 <HAL_GPIO_WritePin>
	i2c_EX();
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8f9 	bl	800390a <_ZN8MLX903936i2c_EXEv>
	i2c_RT();
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f91a 	bl	8003952 <_ZN8MLX903936i2c_RTEv>
	i2c_set_resolution(MLX90393_RES_16, MLX90393_RES_16, MLX90393_RES_15);
 800371e:	2300      	movs	r3, #0
 8003720:	2201      	movs	r2, #1
 8003722:	2101      	movs	r1, #1
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9a2 	bl	8003a6e <_ZN8MLX9039318i2c_set_resolutionEhhh>
	i2c_set_oversampling(0x03);
 800372a:	2103      	movs	r1, #3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fa76 	bl	8003c1e <_ZN8MLX9039320i2c_set_oversamplingEh>
	i2c_set_filter(0x05);
 8003732:	2105      	movs	r1, #5
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa14 	bl	8003b62 <_ZN8MLX9039314i2c_set_filterEh>
	this->reg.gain = MLX90393_GAIN_1X;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2207      	movs	r2, #7
 800373e:	771a      	strb	r2, [r3, #28]
	this->reg.x_res = MLX90393_RES_16;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	775a      	strb	r2, [r3, #29]
	this->reg.y_res = MLX90393_RES_16;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	779a      	strb	r2, [r3, #30]
	this->reg.z_res = MLX90393_RES_15;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	77da      	strb	r2, [r3, #31]
	this->reg.hallconf = 0x0C;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	220c      	movs	r2, #12
 8003756:	f883 2020 	strb.w	r2, [r3, #32]
	this->reg.tcmp_en = 0x00;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	this->reg.filter = 0x05;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2205      	movs	r2, #5
 8003766:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	this->reg.osr = 0x03;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	this->raw.t = 0;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	801a      	strh	r2, [r3, #0]
	this->raw.x = 0;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	805a      	strh	r2, [r3, #2]
	this->raw.y = 0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	809a      	strh	r2, [r3, #4]
	this->raw.z = 0;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	80da      	strh	r2, [r3, #6]
	this->converted.t = 0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
	this->converted.x = 0;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	60da      	str	r2, [r3, #12]
	this->converted.y = 0;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
	this->converted.z = 0;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	615a      	str	r2, [r3, #20]
	this->zyxt = 0x0E;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	220e      	movs	r2, #14
 80037ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	48000400 	.word	0x48000400

080037c0 <_ZN8MLX9039314i2c_transceiveEPhS0_tt>:

HAL_StatusTypeDef MLX90393::i2c_transceive(uint8_t *tx_data, uint8_t *rx_data, uint16_t tx_size, uint16_t rx_size)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(hi2c, DEFAULT_I2C_ADDRESS, tx_data, tx_size, HAL_MAX_DELAY);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	9200      	str	r2, [sp, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	2130      	movs	r1, #48	@ 0x30
 80037de:	f002 fb77 	bl	8005ed0 <HAL_I2C_Master_Transmit>
 80037e2:	4603      	mov	r3, r0
 80037e4:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK){
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <_ZN8MLX9039314i2c_transceiveEPhS0_tt+0x30>
		return status;
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	e00c      	b.n	800380a <_ZN8MLX9039314i2c_transceiveEPhS0_tt+0x4a>
	}
	status = HAL_I2C_Master_Receive(hi2c, DEFAULT_I2C_ADDRESS, rx_data, rx_size, HAL_MAX_DELAY);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80037f4:	8c3b      	ldrh	r3, [r7, #32]
 80037f6:	f04f 32ff 	mov.w	r2, #4294967295
 80037fa:	9200      	str	r2, [sp, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	2130      	movs	r1, #48	@ 0x30
 8003800:	f002 fc7e 	bl	8006100 <HAL_I2C_Master_Receive>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]
	return status;
 8003808:	7dfb      	ldrb	r3, [r7, #23]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <_ZN8MLX9039317i2c_transceive_ITEPhS0_tt>:

HAL_StatusTypeDef MLX90393::i2c_transceive_IT(uint8_t *tx_data, uint8_t *rx_data, uint16_t tx_size, uint16_t rx_size)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b088      	sub	sp, #32
 8003816:	af02      	add	r7, sp, #8
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(hi2c, DEFAULT_I2C_ADDRESS, tx_data, tx_size, HAL_MAX_DELAY);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	f04f 32ff 	mov.w	r2, #4294967295
 800382a:	9200      	str	r2, [sp, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	2130      	movs	r1, #48	@ 0x30
 8003830:	f002 fb4e 	bl	8005ed0 <HAL_I2C_Master_Transmit>
 8003834:	4603      	mov	r3, r0
 8003836:	75fb      	strb	r3, [r7, #23]
	if(status != HAL_OK){
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <_ZN8MLX9039317i2c_transceive_ITEPhS0_tt+0x30>
		return status;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	e009      	b.n	8003856 <_ZN8MLX9039317i2c_transceive_ITEPhS0_tt+0x44>
	}
	status = HAL_I2C_Master_Receive_IT(hi2c, DEFAULT_I2C_ADDRESS, rx_data, rx_size);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003846:	8c3b      	ldrh	r3, [r7, #32]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	2130      	movs	r1, #48	@ 0x30
 800384c:	f002 fd4e 	bl	80062ec <HAL_I2C_Master_Receive_IT>
 8003850:	4603      	mov	r3, r0
 8003852:	75fb      	strb	r3, [r7, #23]
	return status;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <_ZN8MLX903936i2c_SMEv>:

bool MLX90393::i2c_SM()
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af02      	add	r7, sp, #8
 8003864:	6078      	str	r0, [r7, #4]
	uint8_t tx_data = (uint8_t)CMD_START_MEASUREMENT | this->zyxt;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800386c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003870:	b2db      	uxtb	r3, r3
 8003872:	73fb      	strb	r3, [r7, #15]
	uint8_t buf = 0x00;
 8003874:	2300      	movs	r3, #0
 8003876:	73bb      	strb	r3, [r7, #14]
	if(i2c_transceive(&tx_data, &buf, 1, 1) != HAL_OK){
 8003878:	f107 020e 	add.w	r2, r7, #14
 800387c:	f107 010f 	add.w	r1, r7, #15
 8003880:	2301      	movs	r3, #1
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2301      	movs	r3, #1
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff9a 	bl	80037c0 <_ZN8MLX9039314i2c_transceiveEPhS0_tt>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <_ZN8MLX903936i2c_SMEv+0x42>
		return false;
 800389c:	2300      	movs	r3, #0
 800389e:	e003      	b.n	80038a8 <_ZN8MLX903936i2c_SMEv+0x4a>
	}
	this->reg.stat = buf;
 80038a0:	7bba      	ldrb	r2, [r7, #14]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	761a      	strb	r2, [r3, #24]
	return true;
 80038a6:	2301      	movs	r3, #1
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ZN8MLX903936i2c_RMEv>:

bool MLX90393::i2c_RM(){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	6078      	str	r0, [r7, #4]
	this->rm_flag = true;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	this->mes_updated = false;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	uint8_t tx_data = (uint8_t)CMD_READ_MEASUREMENT | this->zyxt;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	73fb      	strb	r3, [r7, #15]
	if(i2c_transceive_IT(&tx_data, this->rx_data, 1, 7) != HAL_OK){
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80038dc:	f107 010f 	add.w	r1, r7, #15
 80038e0:	2307      	movs	r3, #7
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2301      	movs	r3, #1
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff93 	bl	8003812 <_ZN8MLX9039317i2c_transceive_ITEPhS0_tt>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <_ZN8MLX903936i2c_RMEv+0x50>
		return false;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <_ZN8MLX903936i2c_RMEv+0x52>
	}
	return true;
 8003900:	2301      	movs	r3, #1
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_ZN8MLX903936i2c_EXEv>:

bool MLX90393::i2c_EX(){
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af02      	add	r7, sp, #8
 8003910:	6078      	str	r0, [r7, #4]
	uint8_t tx_data = CMD_EXIT;
 8003912:	2380      	movs	r3, #128	@ 0x80
 8003914:	73fb      	strb	r3, [r7, #15]
	uint8_t buf = 0x00;
 8003916:	2300      	movs	r3, #0
 8003918:	73bb      	strb	r3, [r7, #14]
	if(i2c_transceive(&tx_data, &buf, 1, 1) != HAL_OK){
 800391a:	f107 020e 	add.w	r2, r7, #14
 800391e:	f107 010f 	add.w	r1, r7, #15
 8003922:	2301      	movs	r3, #1
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2301      	movs	r3, #1
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff49 	bl	80037c0 <_ZN8MLX9039314i2c_transceiveEPhS0_tt>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <_ZN8MLX903936i2c_EXEv+0x38>
		return false;
 800393e:	2300      	movs	r3, #0
 8003940:	e003      	b.n	800394a <_ZN8MLX903936i2c_EXEv+0x40>
	}
	this->reg.stat = buf;
 8003942:	7bba      	ldrb	r2, [r7, #14]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	761a      	strb	r2, [r3, #24]
	return true;
 8003948:	2301      	movs	r3, #1
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZN8MLX903936i2c_RTEv>:

bool MLX90393::i2c_RT(){
 8003952:	b580      	push	{r7, lr}
 8003954:	b086      	sub	sp, #24
 8003956:	af02      	add	r7, sp, #8
 8003958:	6078      	str	r0, [r7, #4]
	uint8_t tx_data = CMD_RESET;
 800395a:	23f0      	movs	r3, #240	@ 0xf0
 800395c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf = 0x00;
 800395e:	2300      	movs	r3, #0
 8003960:	73bb      	strb	r3, [r7, #14]
	if(i2c_transceive(&tx_data, &buf, 1, 1) != HAL_OK){
 8003962:	f107 020e 	add.w	r2, r7, #14
 8003966:	f107 010f 	add.w	r1, r7, #15
 800396a:	2301      	movs	r3, #1
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	2301      	movs	r3, #1
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff25 	bl	80037c0 <_ZN8MLX9039314i2c_transceiveEPhS0_tt>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <_ZN8MLX903936i2c_RTEv+0x38>
		return false;
 8003986:	2300      	movs	r3, #0
 8003988:	e003      	b.n	8003992 <_ZN8MLX903936i2c_RTEv+0x40>
	}
	this->reg.stat = buf;
 800398a:	7bba      	ldrb	r2, [r7, #14]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	761a      	strb	r2, [r3, #24]
	return true;
 8003990:	2301      	movs	r3, #1
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_ZN8MLX903936i2c_WREht>:

bool MLX90393::i2c_WR(uint8_t regNum, uint16_t tx_data){
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af02      	add	r7, sp, #8
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
 80039a6:	4613      	mov	r3, r2
 80039a8:	803b      	strh	r3, [r7, #0]
	uint8_t tx[4] = {CMD_WRITE_REGISTER, (uint8_t)(tx_data >> 8), (uint8_t)(tx_data & 0xFF), (uint8_t)regNum << 2};
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	2360      	movs	r3, #96	@ 0x60
 80039b0:	733b      	strb	r3, [r7, #12]
 80039b2:	883b      	ldrh	r3, [r7, #0]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	737b      	strb	r3, [r7, #13]
 80039bc:	883b      	ldrh	r3, [r7, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	73bb      	strb	r3, [r7, #14]
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	73fb      	strb	r3, [r7, #15]
	uint8_t buf = 0x00;
 80039ca:	2300      	movs	r3, #0
 80039cc:	72fb      	strb	r3, [r7, #11]
	if(i2c_transceive(tx, &buf, 4, 1) != HAL_OK){
 80039ce:	f107 020b 	add.w	r2, r7, #11
 80039d2:	f107 010c 	add.w	r1, r7, #12
 80039d6:	2301      	movs	r3, #1
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2304      	movs	r3, #4
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff feef 	bl	80037c0 <_ZN8MLX9039314i2c_transceiveEPhS0_tt>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <_ZN8MLX903936i2c_WREht+0x5c>
		return false;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e003      	b.n	80039fe <_ZN8MLX903936i2c_WREht+0x64>
	}
	this->reg.stat = buf;
 80039f6:	7afa      	ldrb	r2, [r7, #11]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	761a      	strb	r2, [r3, #24]
	return true;
 80039fc:	2301      	movs	r3, #1
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <_ZN8MLX903936i2c_RREh>:
bool MLX90393::i2c_RR(uint8_t regNum){
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
	uint8_t tx_data[2] = {CMD_READ_REGISTER, (uint8_t)regNum << 2};
 8003a12:	2300      	movs	r3, #0
 8003a14:	81bb      	strh	r3, [r7, #12]
 8003a16:	2350      	movs	r3, #80	@ 0x50
 8003a18:	733b      	strb	r3, [r7, #12]
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	737b      	strb	r3, [r7, #13]
	uint8_t rx_data[3];
	if(i2c_transceive(tx_data, rx_data, 2, 3) != HAL_OK){
 8003a22:	f107 0208 	add.w	r2, r7, #8
 8003a26:	f107 010c 	add.w	r1, r7, #12
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2302      	movs	r3, #2
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fec5 	bl	80037c0 <_ZN8MLX9039314i2c_transceiveEPhS0_tt>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <_ZN8MLX903936i2c_RREh+0x44>
		return false;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e00d      	b.n	8003a66 <_ZN8MLX903936i2c_RREh+0x60>
	}
	this->reg.stat = rx_data[0];
 8003a4a:	7a3a      	ldrb	r2, [r7, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	761a      	strb	r2, [r3, #24]
	this->reg.val = rx_data[1] << 8 | rx_data[2];
 8003a50:	7a7b      	ldrb	r3, [r7, #9]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	7abb      	ldrb	r3, [r7, #10]
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	b21b      	sxth	r3, r3
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	835a      	strh	r2, [r3, #26]
	return true;
 8003a64:	2301      	movs	r3, #1
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZN8MLX9039318i2c_set_resolutionEhhh>:
	uint16_t data = reg.val & MLX90393_GAIN_MASK;
	this->reg.gain = data >> MLX90393_GAIN_SHIFT;
	return true;
}

bool MLX90393::i2c_set_resolution(uint8_t x_res, uint8_t y_res, uint8_t z_res){
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	4608      	mov	r0, r1
 8003a78:	4611      	mov	r1, r2
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	70fb      	strb	r3, [r7, #3]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70bb      	strb	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	707b      	strb	r3, [r7, #1]
	if(!i2c_RR(MLX90393_CONF3)){
 8003a88:	2102      	movs	r1, #2
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ffbb 	bl	8003a06 <_ZN8MLX903936i2c_RREh>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f083 0301 	eor.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <_ZN8MLX9039318i2c_set_resolutionEhhh+0x32>
		return false;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e05c      	b.n	8003b5a <_ZN8MLX9039318i2c_set_resolutionEhhh+0xec>
	}
	//Res 2 and 3 not allowed if temperature compensation enabled. See 16.2.10
	if(this->reg.tcmp_en == 1){
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <_ZN8MLX9039318i2c_set_resolutionEhhh+0x70>
		if(x_res == 2 || x_res == 3 || y_res == 2 || y_res == 3 || z_res == 2 || z_res == 3){
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d00e      	beq.n	8003ada <_ZN8MLX9039318i2c_set_resolutionEhhh+0x6c>
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d00b      	beq.n	8003ada <_ZN8MLX9039318i2c_set_resolutionEhhh+0x6c>
 8003ac2:	78bb      	ldrb	r3, [r7, #2]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d008      	beq.n	8003ada <_ZN8MLX9039318i2c_set_resolutionEhhh+0x6c>
 8003ac8:	78bb      	ldrb	r3, [r7, #2]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d005      	beq.n	8003ada <_ZN8MLX9039318i2c_set_resolutionEhhh+0x6c>
 8003ace:	787b      	ldrb	r3, [r7, #1]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d002      	beq.n	8003ada <_ZN8MLX9039318i2c_set_resolutionEhhh+0x6c>
 8003ad4:	787b      	ldrb	r3, [r7, #1]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d101      	bne.n	8003ade <_ZN8MLX9039318i2c_set_resolutionEhhh+0x70>
			return false;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e03d      	b.n	8003b5a <_ZN8MLX9039318i2c_set_resolutionEhhh+0xec>
		}
	}
	this->reg.x_res = x_res;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	775a      	strb	r2, [r3, #29]
	this->reg.y_res = y_res;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	78ba      	ldrb	r2, [r7, #2]
 8003ae8:	779a      	strb	r2, [r3, #30]
	this->reg.z_res = z_res;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	787a      	ldrb	r2, [r7, #1]
 8003aee:	77da      	strb	r2, [r3, #31]
	uint16_t data = this->reg.val;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8b5b      	ldrh	r3, [r3, #26]
 8003af4:	81fb      	strh	r3, [r7, #14]
	if(x_res != 0){
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <_ZN8MLX9039318i2c_set_resolutionEhhh+0xa4>
		data = (data & ~MLX90393_X_RES_MASK) | (x_res << MLX90393_X_RES_SHIFT);
 8003afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b00:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8003b04:	b21a      	sxth	r2, r3
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	015b      	lsls	r3, r3, #5
 8003b0a:	b21b      	sxth	r3, r3
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	b21b      	sxth	r3, r3
 8003b10:	81fb      	strh	r3, [r7, #14]
	}
	if(y_res != 0){
 8003b12:	78bb      	ldrb	r3, [r7, #2]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <_ZN8MLX9039318i2c_set_resolutionEhhh+0xc0>
		data = (data & ~MLX90393_Y_RES_MASK) | (y_res << MLX90393_Y_RES_SHIFT);
 8003b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b1c:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8003b20:	b21a      	sxth	r2, r3
 8003b22:	78bb      	ldrb	r3, [r7, #2]
 8003b24:	01db      	lsls	r3, r3, #7
 8003b26:	b21b      	sxth	r3, r3
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	81fb      	strh	r3, [r7, #14]
	}
	if(z_res != 0){
 8003b2e:	787b      	ldrb	r3, [r7, #1]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <_ZN8MLX9039318i2c_set_resolutionEhhh+0xdc>
		data = (data & ~MLX90393_Z_RES_MASK) | (z_res << MLX90393_Z_RES_SHIFT);
 8003b34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b3c:	b21a      	sxth	r2, r3
 8003b3e:	787b      	ldrb	r3, [r7, #1]
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b21b      	sxth	r3, r3
 8003b48:	81fb      	strh	r3, [r7, #14]
	}
	return(i2c_WR(MLX90393_CONF3, data));
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2102      	movs	r1, #2
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff22 	bl	800399a <_ZN8MLX903936i2c_WREht>
 8003b56:	4603      	mov	r3, r0
 8003b58:	bf00      	nop
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_ZN8MLX9039314i2c_set_filterEh>:
	this->reg.y_res = (data & MLX90393_Y_RES_MASK) >> MLX90393_Y_RES_SHIFT;
	this->reg.z_res = (data & MLX90393_Z_RES_MASK) >> MLX90393_Z_RES_SHIFT;
	return true;
}

bool MLX90393::i2c_set_filter(uint8_t filter){
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
	if(!i2c_RR(MLX90393_CONF3)){
 8003b6e:	2102      	movs	r1, #2
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff48 	bl	8003a06 <_ZN8MLX903936i2c_RREh>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f083 0301 	eor.w	r3, r3, #1
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <_ZN8MLX9039314i2c_set_filterEh+0x24>
		return false;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e047      	b.n	8003c16 <_ZN8MLX9039314i2c_set_filterEh+0xb4>
	}
	//Not permitted settings see 16.2.5
	if(this->reg.hallconf == 0x0C){
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d022      	beq.n	8003be2 <_ZN8MLX9039314i2c_set_filterEh+0x80>
		if(this->reg.osr == 0x00){
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <_ZN8MLX9039314i2c_set_filterEh+0x60>
			if(filter == 0 || filter == 1){
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <_ZN8MLX9039314i2c_set_filterEh+0x5c>
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <_ZN8MLX9039314i2c_set_filterEh+0x60>
				return false;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e029      	b.n	8003c16 <_ZN8MLX9039314i2c_set_filterEh+0xb4>
			}
		}
		if(this->reg.osr == 0x01){
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <_ZN8MLX9039314i2c_set_filterEh+0x80>
			if(filter == 1){
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <_ZN8MLX9039314i2c_set_filterEh+0x80>
				return false;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e019      	b.n	8003c16 <_ZN8MLX9039314i2c_set_filterEh+0xb4>
			}
		}
	}
	this->reg.filter = filter;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	uint16_t data = this->reg.val;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8b5b      	ldrh	r3, [r3, #26]
 8003bee:	81fb      	strh	r3, [r7, #14]
	data = (data & ~MLX90393_FILTER_MASK) | (filter << MLX90393_FILTER_SHIFT);
 8003bf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bf4:	f023 031c 	bic.w	r3, r3, #28
 8003bf8:	b21a      	sxth	r2, r3
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	4313      	orrs	r3, r2
 8003c02:	b21b      	sxth	r3, r3
 8003c04:	81fb      	strh	r3, [r7, #14]
	return(i2c_WR(MLX90393_CONF3, data));
 8003c06:	89fb      	ldrh	r3, [r7, #14]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fec4 	bl	800399a <_ZN8MLX903936i2c_WREht>
 8003c12:	4603      	mov	r3, r0
 8003c14:	bf00      	nop

}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZN8MLX9039320i2c_set_oversamplingEh>:
	}
	uint16_t data = this->reg.val;
	this->reg.filter = (data & MLX90393_FILTER_MASK) >> MLX90393_FILTER_SHIFT;
	return true;
}
bool MLX90393::i2c_set_oversampling(uint8_t osr){
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
	if(!i2c_RR(MLX90393_CONF3)){
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff feea 	bl	8003a06 <_ZN8MLX903936i2c_RREh>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f083 0301 	eor.w	r3, r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <_ZN8MLX9039320i2c_set_oversamplingEh+0x24>
		return false;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e04a      	b.n	8003cd8 <_ZN8MLX9039320i2c_set_oversamplingEh+0xba>
	}
	//Not permitted settings see 16.2.5
	if(this->reg.hallconf == 0x0C){
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	bf0c      	ite	eq
 8003c4e:	2301      	moveq	r3, #1
 8003c50:	2300      	movne	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d022      	beq.n	8003c9e <_ZN8MLX9039320i2c_set_oversamplingEh+0x80>
		if(this->reg.filter == 0x00){
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <_ZN8MLX9039320i2c_set_oversamplingEh+0x60>
			if(osr == 0 || osr == 1){
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <_ZN8MLX9039320i2c_set_oversamplingEh+0x5c>
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <_ZN8MLX9039320i2c_set_oversamplingEh+0x60>
				return false;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e02c      	b.n	8003cd8 <_ZN8MLX9039320i2c_set_oversamplingEh+0xba>
			}
		}
		if(this->reg.hallconf == 0x01){
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <_ZN8MLX9039320i2c_set_oversamplingEh+0x80>
			if(osr == 1){
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <_ZN8MLX9039320i2c_set_oversamplingEh+0x80>
				return false;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e01c      	b.n	8003cd8 <_ZN8MLX9039320i2c_set_oversamplingEh+0xba>
			}
		}
	}
	this->reg.osr = osr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	uint16_t data = this->reg.val;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8b5b      	ldrh	r3, [r3, #26]
 8003caa:	81fb      	strh	r3, [r7, #14]
	data = (data & ~MLX90393_OSR_MASK) | (this->reg.filter << MLX90393_OSR_SHIFT);
 8003cac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cb0:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8003cb4:	b21a      	sxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	02db      	lsls	r3, r3, #11
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	81fb      	strh	r3, [r7, #14]
	return(i2c_WR(MLX90393_CONF3, data));
 8003cc8:	89fb      	ldrh	r3, [r7, #14]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2102      	movs	r1, #2
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fe63 	bl	800399a <_ZN8MLX903936i2c_WREht>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	bf00      	nop
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <_ZN8MLX903936decodeEv>:
		temp >>= 1;
	}
	return count;
}

void MLX90393::decode(){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	uint8_t *cursor = this->rx_data;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	332a      	adds	r3, #42	@ 0x2a
 8003cec:	60fb      	str	r3, [r7, #12]
	this->reg.stat = this->rx_data[0];
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	761a      	strb	r2, [r3, #24]
	cursor += 1; //Skip status byte
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
	if(this->zyxt & MLX90393_T){
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <_ZN8MLX903936decodeEv+0x42>
		this->raw.t = decode_helper(cursor);
 8003d0c:	68f9      	ldr	r1, [r7, #12]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f841 	bl	8003d96 <_ZN8MLX9039313decode_helperEPh>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	801a      	strh	r2, [r3, #0]
		cursor += 2;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3302      	adds	r3, #2
 8003d20:	60fb      	str	r3, [r7, #12]
	}
	if(this->zyxt & MLX90393_X){
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <_ZN8MLX903936decodeEv+0x66>
		this->raw.x = decode_helper(cursor);
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f82f 	bl	8003d96 <_ZN8MLX9039313decode_helperEPh>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	805a      	strh	r2, [r3, #2]
		cursor += 2;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3302      	adds	r3, #2
 8003d44:	60fb      	str	r3, [r7, #12]
	}
	if(this->zyxt & MLX90393_Y){
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <_ZN8MLX903936decodeEv+0x8a>
		this->raw.y = decode_helper(cursor);
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f81d 	bl	8003d96 <_ZN8MLX9039313decode_helperEPh>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	809a      	strh	r2, [r3, #4]
		cursor += 2;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3302      	adds	r3, #2
 8003d68:	60fb      	str	r3, [r7, #12]
	}
	if(this->zyxt & MLX90393_Z){
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <_ZN8MLX903936decodeEv+0xae>
		this->raw.z = decode_helper(cursor);
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f80b 	bl	8003d96 <_ZN8MLX9039313decode_helperEPh>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	80da      	strh	r2, [r3, #6]
		cursor += 2;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	60fb      	str	r3, [r7, #12]
	}
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_ZN8MLX9039313decode_helperEPh>:

int16_t MLX90393::decode_helper(uint8_t *data){
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
	return (data[0] << 8 | data[1]);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	b21a      	sxth	r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b21b      	sxth	r3, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_ZN8MLX903937convertEv>:

void MLX90393::convert(){
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	//Only when tcmp_en = 0
	//Remove sign bit for unsigned res settings
	if(this->reg.x_res == 2){
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7f5b      	ldrb	r3, [r3, #29]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <_ZN8MLX903937convertEv+0x2c>
		this->raw.x &= ~MLX90393_RES_17;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	885b      	ldrh	r3, [r3, #2]
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	f023 0302 	bic.w	r3, r3, #2
 8003de6:	b21a      	sxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	805a      	strh	r2, [r3, #2]
	}
	if(this->reg.x_res == 3){
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	7f5b      	ldrb	r3, [r3, #29]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <_ZN8MLX903937convertEv+0x50>
		this->raw.x &= ~MLX90393_RES_18;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	885b      	ldrh	r3, [r3, #2]
 8003e04:	b21b      	sxth	r3, r3
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	b21a      	sxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	805a      	strh	r2, [r3, #2]
	}
	if(this->reg.y_res == 2){
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	7f9b      	ldrb	r3, [r3, #30]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <_ZN8MLX903937convertEv+0x74>
		this->raw.y &= ~MLX90393_RES_17;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	889b      	ldrh	r3, [r3, #4]
 8003e28:	b21b      	sxth	r3, r3
 8003e2a:	f023 0302 	bic.w	r3, r3, #2
 8003e2e:	b21a      	sxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	809a      	strh	r2, [r3, #4]
	}
	if(this->reg.y_res == 3){
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7f9b      	ldrb	r3, [r3, #30]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <_ZN8MLX903937convertEv+0x98>
		this->raw.y &= ~MLX90393_RES_18;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	889b      	ldrh	r3, [r3, #4]
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	b21a      	sxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	809a      	strh	r2, [r3, #4]
	}
	if(this->reg.z_res == 2){
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7fdb      	ldrb	r3, [r3, #31]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	bf0c      	ite	eq
 8003e62:	2301      	moveq	r3, #1
 8003e64:	2300      	movne	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <_ZN8MLX903937convertEv+0xbc>
		this->raw.z &= ~MLX90393_RES_17;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	88db      	ldrh	r3, [r3, #6]
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	f023 0302 	bic.w	r3, r3, #2
 8003e76:	b21a      	sxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	80da      	strh	r2, [r3, #6]
	}
	if(this->reg.x_res == 2){
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7f5b      	ldrb	r3, [r3, #29]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <_ZN8MLX903937convertEv+0xe0>
		this->raw.z &= ~MLX90393_RES_18;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	88db      	ldrh	r3, [r3, #6]
 8003e94:	b21b      	sxth	r3, r3
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	b21a      	sxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	80da      	strh	r2, [r3, #6]
	}

	//Check if temperature compensation is enabled. See 16.2.10
	//Convert raw data base on sensitivity
	this->converted.x = (float)this->raw.x * sens_lookup_0xC[this->reg.gain][this->reg.x_res][0];
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	885b      	ldrh	r3, [r3, #2]
 8003ea4:	b21b      	sxth	r3, r3
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7f1b      	ldrb	r3, [r3, #28]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7f5b      	ldrb	r3, [r3, #29]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4a24      	ldr	r2, [pc, #144]	@ (8003f50 <_ZN8MLX903937convertEv+0x190>)
 8003ec0:	0083      	lsls	r3, r0, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	edd3 7a00 	vldr	s15, [r3]
 8003ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	edc3 7a03 	vstr	s15, [r3, #12]
	this->converted.y = (float)this->raw.y * sens_lookup_0xC[this->reg.gain][this->reg.y_res][0];
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	889b      	ldrh	r3, [r3, #4]
 8003eda:	b21b      	sxth	r3, r3
 8003edc:	ee07 3a90 	vmov	s15, r3
 8003ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	7f1b      	ldrb	r3, [r3, #28]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	4618      	mov	r0, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	7f9b      	ldrb	r3, [r3, #30]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4a16      	ldr	r2, [pc, #88]	@ (8003f50 <_ZN8MLX903937convertEv+0x190>)
 8003ef6:	0083      	lsls	r3, r0, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	edc3 7a04 	vstr	s15, [r3, #16]
	this->converted.z = (float)this->raw.z * sens_lookup_0xC[this->reg.gain][this->reg.z_res][1];
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	88db      	ldrh	r3, [r3, #6]
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	7f1b      	ldrb	r3, [r3, #28]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7fdb      	ldrb	r3, [r3, #31]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4a09      	ldr	r2, [pc, #36]	@ (8003f50 <_ZN8MLX903937convertEv+0x190>)
 8003f2c:	0083      	lsls	r3, r0, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	3304      	adds	r3, #4
 8003f36:	edd3 7a00 	vldr	s15, [r3]
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	0800ac7c 	.word	0x0800ac7c

08003f54 <_ZN8MLX9039311get_rm_flagEv>:

void MLX90393::set_zyxt(uint8_t set_zyxt){
	this->zyxt = set_zyxt;
}

bool MLX90393::get_rm_flag(){
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	return this->rm_flag;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <_ZN8MLX9039315set_update_flagEb>:

void MLX90393::set_update_flag(bool update){
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
	this->mes_updated = update;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <_ZN8MLX9039316read_update_flagEv>:

bool MLX90393::read_update_flag(){
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
	return this->mes_updated;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <_ZN8MLX9039310get_x_dataEv>:

float MLX90393::get_x_data(){
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	return this->converted.x;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	ee07 3a90 	vmov	s15, r3
}
 8003fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <_ZN8MLX9039310get_y_dataEv>:

float MLX90393::get_y_data(){
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
	return this->converted.y;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	ee07 3a90 	vmov	s15, r3
}
 8003fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_ZN8MLX9039310get_z_dataEv>:

float MLX90393::get_z_data(){
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	return this->converted.z;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	ee07 3a90 	vmov	s15, r3
}
 8003ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400a:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <HAL_MspInit+0x44>)
 800400c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400e:	4a0e      	ldr	r2, [pc, #56]	@ (8004048 <HAL_MspInit+0x44>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6613      	str	r3, [r2, #96]	@ 0x60
 8004016:	4b0c      	ldr	r3, [pc, #48]	@ (8004048 <HAL_MspInit+0x44>)
 8004018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_MspInit+0x44>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <HAL_MspInit+0x44>)
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800402c:	6593      	str	r3, [r2, #88]	@ 0x58
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_MspInit+0x44>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000

0800404c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <NMI_Handler+0x4>

08004054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <HardFault_Handler+0x4>

0800405c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <MemManage_Handler+0x4>

08004064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <BusFault_Handler+0x4>

0800406c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <UsageFault_Handler+0x4>

08004074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040a2:	f000 fcbd 	bl	8004a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040b0:	4802      	ldr	r0, [pc, #8]	@ (80040bc <CAN1_RX0_IRQHandler+0x10>)
 80040b2:	f001 f91a 	bl	80052ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000084 	.word	0x20000084

080040c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e00a      	b.n	80040e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040d2:	f3af 8000 	nop.w
 80040d6:	4601      	mov	r1, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	60ba      	str	r2, [r7, #8]
 80040de:	b2ca      	uxtb	r2, r1
 80040e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dbf0      	blt.n	80040d2 <_read+0x12>
  }

  return len;
 80040f0:	687b      	ldr	r3, [r7, #4]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e009      	b.n	8004120 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	60ba      	str	r2, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3301      	adds	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	dbf1      	blt.n	800410c <_write+0x12>
  }
  return len;
 8004128:	687b      	ldr	r3, [r7, #4]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_close>:

int _close(int file)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800415a:	605a      	str	r2, [r3, #4]
  return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_isatty>:

int _isatty(int file)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a4:	4a14      	ldr	r2, [pc, #80]	@ (80041f8 <_sbrk+0x5c>)
 80041a6:	4b15      	ldr	r3, [pc, #84]	@ (80041fc <_sbrk+0x60>)
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041b0:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <_sbrk+0x64>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b8:	4b11      	ldr	r3, [pc, #68]	@ (8004200 <_sbrk+0x64>)
 80041ba:	4a12      	ldr	r2, [pc, #72]	@ (8004204 <_sbrk+0x68>)
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <_sbrk+0x64>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d207      	bcs.n	80041dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041cc:	f005 ff2a 	bl	800a024 <__errno>
 80041d0:	4603      	mov	r3, r0
 80041d2:	220c      	movs	r2, #12
 80041d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	e009      	b.n	80041f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041dc:	4b08      	ldr	r3, [pc, #32]	@ (8004200 <_sbrk+0x64>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041e2:	4b07      	ldr	r3, [pc, #28]	@ (8004200 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	4a05      	ldr	r2, [pc, #20]	@ (8004200 <_sbrk+0x64>)
 80041ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20050000 	.word	0x20050000
 80041fc:	00000400 	.word	0x00000400
 8004200:	200005a8 	.word	0x200005a8
 8004204:	20000700 	.word	0x20000700

08004208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800420c:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <SystemInit+0x20>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	4a05      	ldr	r2, [pc, #20]	@ (8004228 <SystemInit+0x20>)
 8004214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800422c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004264 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004230:	f7ff ffea 	bl	8004208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004234:	480c      	ldr	r0, [pc, #48]	@ (8004268 <LoopForever+0x6>)
  ldr r1, =_edata
 8004236:	490d      	ldr	r1, [pc, #52]	@ (800426c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004238:	4a0d      	ldr	r2, [pc, #52]	@ (8004270 <LoopForever+0xe>)
  movs r3, #0
 800423a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800423c:	e002      	b.n	8004244 <LoopCopyDataInit>

0800423e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800423e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004242:	3304      	adds	r3, #4

08004244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004248:	d3f9      	bcc.n	800423e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800424a:	4a0a      	ldr	r2, [pc, #40]	@ (8004274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800424c:	4c0a      	ldr	r4, [pc, #40]	@ (8004278 <LoopForever+0x16>)
  movs r3, #0
 800424e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004250:	e001      	b.n	8004256 <LoopFillZerobss>

08004252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004254:	3204      	adds	r2, #4

08004256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004258:	d3fb      	bcc.n	8004252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800425a:	f005 fee9 	bl	800a030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800425e:	f7ff f945 	bl	80034ec <main>

08004262 <LoopForever>:

LoopForever:
    b LoopForever
 8004262:	e7fe      	b.n	8004262 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004264:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800426c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8004270:	0800ae04 	.word	0x0800ae04
  ldr r2, =_sbss
 8004274:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004278:	200006fc 	.word	0x200006fc

0800427c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800427c:	e7fe      	b.n	800427c <ADC1_2_IRQHandler>

0800427e <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af02      	add	r7, sp, #8
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2300      	movs	r3, #0
 8004296:	2208      	movs	r2, #8
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7fd f9d3 	bl	8001644 <canardDecodeScalar>

    *bit_ofs += 8;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f103 0208 	add.w	r2, r3, #8
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3301      	adds	r3, #1
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2300      	movs	r3, #0
 80042b6:	2208      	movs	r2, #8
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7fd f9c3 	bl	8001644 <canardDecodeScalar>
    *bit_ofs += 8;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f103 0208 	add.w	r2, r3, #8
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e014      	b.n	80042fa <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4413      	add	r3, r2
 80042da:	3302      	adds	r3, #2
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	2208      	movs	r2, #8
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7fd f9ae 	bl	8001644 <canardDecodeScalar>

        *bit_ofs += 8;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f103 0208 	add.w	r2, r3, #8
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3301      	adds	r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	461a      	mov	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4293      	cmp	r3, r2
 8004304:	d3e4      	bcc.n	80042d0 <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6819      	ldr	r1, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	2240      	movs	r2, #64	@ 0x40
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7fd f994 	bl	8001644 <canardDecodeScalar>

    *bit_ofs += 64;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004328:	2300      	movs	r3, #0

}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 8004340:	f107 0108 	add.w	r1, r7, #8
 8004344:	2301      	movs	r3, #1
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff ff98 	bl	800427e <_ardupilot_indication_NotifyState_decode>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004354:	2301      	movs	r3, #1
 8004356:	e00c      	b.n	8004372 <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	3307      	adds	r3, #7
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8a9b      	ldrh	r3, [r3, #20]
 8004364:	461a      	mov	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4293      	cmp	r3, r2
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_uavcan_equipment_ahrs_MagneticFieldStrength2_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_equipment_ahrs_MagneticFieldStrength2_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_ahrs_MagneticFieldStrength2* msg, bool tao);
static inline bool _uavcan_equipment_ahrs_MagneticFieldStrength2_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_ahrs_MagneticFieldStrength2* msg, bool tao);
void _uavcan_equipment_ahrs_MagneticFieldStrength2_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_ahrs_MagneticFieldStrength2* msg, bool tao) {
 800437a:	b580      	push	{r7, lr}
 800437c:	b088      	sub	sp, #32
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->sensor_id);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2208      	movs	r2, #8
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7fd fae0 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 8;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f103 0208 	add.w	r2, r3, #8
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 3; i++) {
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e01d      	b.n	80043e4 <_uavcan_equipment_ahrs_MagneticFieldStrength2_encode+0x6a>




        {
            uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->magnetic_field_ga[i]);
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	3304      	adds	r3, #4
 80043b2:	edd3 7a00 	vldr	s15, [r3]
 80043b6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ba:	f7fd fb73 	bl	8001aa4 <canardConvertNativeFloatToFloat16>
 80043be:	4603      	mov	r3, r0
 80043c0:	827b      	strh	r3, [r7, #18]
            canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	f107 0312 	add.w	r3, r7, #18
 80043ca:	2210      	movs	r2, #16
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7fd fac2 	bl	8001956 <canardEncodeScalar>
        }

        *bit_ofs += 16;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f103 0210 	add.w	r2, r3, #16
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 3; i++) {
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d9de      	bls.n	80043a8 <_uavcan_equipment_ahrs_MagneticFieldStrength2_encode+0x2e>





    if (!tao) {
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	f083 0301 	eor.w	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <_uavcan_equipment_ahrs_MagneticFieldStrength2_encode+0x96>


        canardEncodeScalar(buffer, *bit_ofs, 4, &msg->magnetic_field_covariance.len);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3310      	adds	r3, #16
 80043fe:	2204      	movs	r2, #4
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7fd faa8 	bl	8001956 <canardEncodeScalar>
        *bit_ofs += 4;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t magnetic_field_covariance_len = msg->magnetic_field_covariance.len > 9 ? 9 : msg->magnetic_field_covariance.len;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7c1b      	ldrb	r3, [r3, #16]
 8004414:	2b09      	cmp	r3, #9
 8004416:	bf28      	it	cs
 8004418:	2309      	movcs	r3, #9
 800441a:	b2db      	uxtb	r3, r3
 800441c:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < magnetic_field_covariance_len; i++) {
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e01e      	b.n	8004462 <_uavcan_equipment_ahrs_MagneticFieldStrength2_encode+0xe8>




        {
            uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->magnetic_field_covariance.data[i]);
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3304      	adds	r3, #4
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3304      	adds	r3, #4
 8004430:	edd3 7a00 	vldr	s15, [r3]
 8004434:	eeb0 0a67 	vmov.f32	s0, s15
 8004438:	f7fd fb34 	bl	8001aa4 <canardConvertNativeFloatToFloat16>
 800443c:	4603      	mov	r3, r0
 800443e:	823b      	strh	r3, [r7, #16]
            canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6819      	ldr	r1, [r3, #0]
 8004444:	f107 0310 	add.w	r3, r7, #16
 8004448:	2210      	movs	r2, #16
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7fd fa83 	bl	8001956 <canardEncodeScalar>
        }

        *bit_ofs += 16;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f103 0210 	add.w	r2, r3, #16
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < magnetic_field_covariance_len; i++) {
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	3301      	adds	r3, #1
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	429a      	cmp	r2, r3
 8004468:	d3dc      	bcc.n	8004424 <_uavcan_equipment_ahrs_MagneticFieldStrength2_encode+0xaa>





}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <uavcan_equipment_ahrs_MagneticFieldStrength2_encode>:

uint32_t uavcan_equipment_ahrs_MagneticFieldStrength2_encode(struct uavcan_equipment_ahrs_MagneticFieldStrength2* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_EQUIPMENT_AHRS_MAGNETICFIELDSTRENGTH2_MAX_SIZE);
 8004482:	221a      	movs	r2, #26
 8004484:	2100      	movs	r1, #0
 8004486:	6838      	ldr	r0, [r7, #0]
 8004488:	f005 fd5e 	bl	8009f48 <memset>
    _uavcan_equipment_ahrs_MagneticFieldStrength2_encode(buffer, &bit_ofs, msg, 
 800448c:	f107 010c 	add.w	r1, r7, #12
 8004490:	2301      	movs	r3, #1
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6838      	ldr	r0, [r7, #0]
 8004496:	f7ff ff70 	bl	800437a <_uavcan_equipment_ahrs_MagneticFieldStrength2_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3307      	adds	r3, #7
 800449e:	08db      	lsrs	r3, r3, #3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2208      	movs	r2, #8
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f7fd fa49 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 8;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f103 0208 	add.w	r2, r3, #8
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3301      	adds	r3, #1
 80044d8:	2208      	movs	r2, #8
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7fd fa3b 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 8;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f103 0208 	add.w	r2, r3, #8
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e012      	b.n	8004518 <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	3302      	adds	r3, #2
 80044fe:	2208      	movs	r2, #8
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7fd fa28 	bl	8001956 <canardEncodeScalar>

        *bit_ofs += 8;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f103 0208 	add.w	r2, r3, #8
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3301      	adds	r3, #1
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b0f      	cmp	r3, #15
 800451c:	d9e9      	bls.n	80044f2 <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f083 0301 	eor.w	r3, r3, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6819      	ldr	r1, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3312      	adds	r3, #18
 8004532:	2208      	movs	r2, #8
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7fd fa0e 	bl	8001956 <canardEncodeScalar>
        *bit_ofs += 8;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f103 0208 	add.w	r2, r3, #8
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7c9b      	ldrb	r3, [r3, #18]
 800454a:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e013      	b.n	800457a <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	3310      	adds	r3, #16
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	3303      	adds	r3, #3
 8004560:	2208      	movs	r2, #8
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fd f9f7 	bl	8001956 <canardEncodeScalar>

        *bit_ofs += 8;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f103 0208 	add.w	r2, r3, #8
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	3301      	adds	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	429a      	cmp	r2, r3
 8004580:	d3e7      	bcc.n	8004552 <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 8004582:	bf00      	nop
 8004584:	bf00      	nop
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7fd f9d7 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 32;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f103 0220 	add.w	r2, r3, #32
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	2202      	movs	r2, #2
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7fd f9c9 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 2;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3305      	adds	r3, #5
 80045d6:	2203      	movs	r2, #3
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7fd f9bc 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 3;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	1cda      	adds	r2, r3, #3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3306      	adds	r3, #6
 80045f0:	2203      	movs	r2, #3
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7fd f9af 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 3;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1cda      	adds	r2, r3, #3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3308      	adds	r3, #8
 800460a:	2210      	movs	r2, #16
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7fd f9a2 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 16;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f103 0210 	add.w	r2, r3, #16
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	601a      	str	r2, [r3, #0]





}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2208      	movs	r2, #8
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fd f98a 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 8;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f103 0208 	add.w	r2, r3, #8
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3301      	adds	r3, #1
 8004656:	2208      	movs	r2, #8
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7fd f97c 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 8;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f103 0208 	add.w	r2, r3, #8
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3302      	adds	r3, #2
 8004672:	2208      	movs	r2, #8
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7fd f96e 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 8;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f103 0208 	add.w	r2, r3, #8
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	2220      	movs	r2, #32
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7fd f960 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 32;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f103 0220 	add.w	r2, r3, #32
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3308      	adds	r3, #8
 80046aa:	2240      	movs	r2, #64	@ 0x40
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7fd f952 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 64;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	601a      	str	r2, [r3, #0]





}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b086      	sub	sp, #24
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	60b9      	str	r1, [r7, #8]
 80046d0:	607a      	str	r2, [r7, #4]
 80046d2:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	2300      	movs	r3, #0
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ff56 	bl	800458c <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f103 0210 	add.w	r2, r3, #16
 80046e6:	2300      	movs	r3, #0
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff ff9b 	bl	8004626 <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f103 0220 	add.w	r2, r3, #32
 80046f6:	2300      	movs	r3, #0
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fed4 	bl	80044a8 <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f083 0301 	eor.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8004716:	2207      	movs	r2, #7
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f7fd f91c 	bl	8001956 <canardEncodeScalar>
        *bit_ofs += 7;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	1dda      	adds	r2, r3, #7
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800472e:	2b50      	cmp	r3, #80	@ 0x50
 8004730:	bf28      	it	cs
 8004732:	2350      	movcs	r3, #80	@ 0x50
 8004734:	b2db      	uxtb	r3, r3
 8004736:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e014      	b.n	8004768 <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	3303      	adds	r3, #3
 800474e:	2208      	movs	r2, #8
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7fd f900 	bl	8001956 <canardEncodeScalar>

        *bit_ofs += 8;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f103 0208 	add.w	r2, r3, #8
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	3301      	adds	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	d3e6      	bcc.n	800473e <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 8004788:	f240 1279 	movw	r2, #377	@ 0x179
 800478c:	2100      	movs	r1, #0
 800478e:	6838      	ldr	r0, [r7, #0]
 8004790:	f005 fbda 	bl	8009f48 <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 8004794:	f107 010c 	add.w	r1, r7, #12
 8004798:	2301      	movs	r3, #1
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6838      	ldr	r0, [r7, #0]
 800479e:	f7ff ff92 	bl	80046c6 <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3307      	adds	r3, #7
 80047a6:	08db      	lsrs	r3, r3, #3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7fd f8c5 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 32;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f103 0220 	add.w	r2, r3, #32
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	2202      	movs	r2, #2
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7fd f8b7 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 2;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3305      	adds	r3, #5
 80047fa:	2203      	movs	r2, #3
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7fd f8aa 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 3;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	1cda      	adds	r2, r3, #3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6819      	ldr	r1, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3306      	adds	r3, #6
 8004814:	2203      	movs	r2, #3
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7fd f89d 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 3;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1cda      	adds	r2, r3, #3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3308      	adds	r3, #8
 800482e:	2210      	movs	r2, #16
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7fd f890 	bl	8001956 <canardEncodeScalar>

    *bit_ofs += 16;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f103 0210 	add.w	r2, r3, #16
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	601a      	str	r2, [r3, #0]





}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af02      	add	r7, sp, #8
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2300      	movs	r3, #0
 8004862:	2220      	movs	r2, #32
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7fc feed 	bl	8001644 <canardDecodeScalar>

    *bit_ofs += 32;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f103 0220 	add.w	r2, r3, #32
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3304      	adds	r3, #4
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2300      	movs	r3, #0
 8004882:	2202      	movs	r2, #2
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7fc fedd 	bl	8001644 <canardDecodeScalar>

    *bit_ofs += 2;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	1c9a      	adds	r2, r3, #2
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6819      	ldr	r1, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3305      	adds	r3, #5
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2300      	movs	r3, #0
 80048a0:	2203      	movs	r2, #3
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7fc fece 	bl	8001644 <canardDecodeScalar>

    *bit_ofs += 3;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1cda      	adds	r2, r3, #3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6819      	ldr	r1, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3306      	adds	r3, #6
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	2203      	movs	r2, #3
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7fc febf 	bl	8001644 <canardDecodeScalar>

    *bit_ofs += 3;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1cda      	adds	r2, r3, #3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	6819      	ldr	r1, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3308      	adds	r3, #8
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2300      	movs	r3, #0
 80048dc:	2210      	movs	r2, #16
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7fc feb0 	bl	8001644 <canardDecodeScalar>

    *bit_ofs += 16;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f103 0210 	add.w	r2, r3, #16
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	601a      	str	r2, [r3, #0]





    return false; /* success */
 80048f0:	2300      	movs	r3, #0

}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8004908:	2207      	movs	r2, #7
 800490a:	2100      	movs	r1, #0
 800490c:	6838      	ldr	r0, [r7, #0]
 800490e:	f005 fb1b 	bl	8009f48 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8004912:	f107 010c 	add.w	r1, r7, #12
 8004916:	2301      	movs	r3, #1
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	f7ff ff48 	bl	80047b0 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3307      	adds	r3, #7
 8004924:	08db      	lsrs	r3, r3, #3
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 800493c:	f107 0108 	add.w	r1, r7, #8
 8004940:	2301      	movs	r3, #1
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ff80 	bl	800484a <_uavcan_protocol_NodeStatus_decode>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004950:	2301      	movs	r3, #1
 8004952:	e00c      	b.n	800496e <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	3307      	adds	r3, #7
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8a9b      	ldrh	r3, [r3, #20]
 8004960:	461a      	mov	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4293      	cmp	r3, r2
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004980:	2003      	movs	r0, #3
 8004982:	f000 ffb1 	bl	80058e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004986:	200f      	movs	r0, #15
 8004988:	f000 f80e 	bl	80049a8 <HAL_InitTick>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	71fb      	strb	r3, [r7, #7]
 8004996:	e001      	b.n	800499c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004998:	f7ff fb34 	bl	8004004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800499c:	79fb      	ldrb	r3, [r7, #7]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80049b4:	4b17      	ldr	r3, [pc, #92]	@ (8004a14 <HAL_InitTick+0x6c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d023      	beq.n	8004a04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80049bc:	4b16      	ldr	r3, [pc, #88]	@ (8004a18 <HAL_InitTick+0x70>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <HAL_InitTick+0x6c>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 ffbd 	bl	8005952 <HAL_SYSTICK_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d809      	bhi.n	80049f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049e4:	2200      	movs	r2, #0
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	f000 ff87 	bl	80058fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049f0:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <HAL_InitTick+0x74>)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e007      	b.n	8004a08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e004      	b.n	8004a08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	e001      	b.n	8004a08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000008 	.word	0x20000008
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	20000004 	.word	0x20000004

08004a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a24:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <HAL_IncTick+0x20>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <HAL_IncTick+0x24>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4413      	add	r3, r2
 8004a30:	4a04      	ldr	r2, [pc, #16]	@ (8004a44 <HAL_IncTick+0x24>)
 8004a32:	6013      	str	r3, [r2, #0]
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000008 	.word	0x20000008
 8004a44:	200005ac 	.word	0x200005ac

08004a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <HAL_GetTick+0x14>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	200005ac 	.word	0x200005ac

08004a60 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004a64:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <HAL_GetUIDw0+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	1fff7590 	.word	0x1fff7590

08004a78 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <HAL_GetUIDw1+0x14>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	1fff7594 	.word	0x1fff7594

08004a90 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004a94:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <HAL_GetUIDw2+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	1fff7598 	.word	0x1fff7598

08004aa8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0ed      	b.n	8004c96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fb ff56 	bl	8000978 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004adc:	f7ff ffb4 	bl	8004a48 <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ae2:	e012      	b.n	8004b0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ae4:	f7ff ffb0 	bl	8004a48 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b0a      	cmp	r3, #10
 8004af0:	d90b      	bls.n	8004b0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2205      	movs	r2, #5
 8004b02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0c5      	b.n	8004c96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0e5      	beq.n	8004ae4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0202 	bic.w	r2, r2, #2
 8004b26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b28:	f7ff ff8e 	bl	8004a48 <HAL_GetTick>
 8004b2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b2e:	e012      	b.n	8004b56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b30:	f7ff ff8a 	bl	8004a48 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b0a      	cmp	r3, #10
 8004b3c:	d90b      	bls.n	8004b56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2205      	movs	r2, #5
 8004b4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e09f      	b.n	8004c96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	7e1b      	ldrb	r3, [r3, #24]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d108      	bne.n	8004b7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	e007      	b.n	8004b8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7e5b      	ldrb	r3, [r3, #25]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d108      	bne.n	8004ba8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e007      	b.n	8004bb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7e9b      	ldrb	r3, [r3, #26]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d108      	bne.n	8004bd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0220 	orr.w	r2, r2, #32
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e007      	b.n	8004be2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0220 	bic.w	r2, r2, #32
 8004be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	7edb      	ldrb	r3, [r3, #27]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d108      	bne.n	8004bfc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0210 	bic.w	r2, r2, #16
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e007      	b.n	8004c0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0210 	orr.w	r2, r2, #16
 8004c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	7f1b      	ldrb	r3, [r3, #28]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d108      	bne.n	8004c26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0208 	orr.w	r2, r2, #8
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e007      	b.n	8004c36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0208 	bic.w	r2, r2, #8
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7f5b      	ldrb	r3, [r3, #29]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d108      	bne.n	8004c50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0204 	orr.w	r2, r2, #4
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e007      	b.n	8004c60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0204 	bic.w	r2, r2, #4
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	ea42 0103 	orr.w	r1, r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b087      	sub	sp, #28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004cb6:	7cfb      	ldrb	r3, [r7, #19]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d003      	beq.n	8004cc4 <HAL_CAN_ConfigFilter+0x26>
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	f040 80aa 	bne.w	8004e18 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004cca:	f043 0201 	orr.w	r2, r3, #1
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	2201      	movs	r2, #1
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	401a      	ands	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d123      	bne.n	8004d46 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	401a      	ands	r2, r3
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d20:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	3248      	adds	r2, #72	@ 0x48
 8004d26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d3a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d3c:	6979      	ldr	r1, [r7, #20]
 8004d3e:	3348      	adds	r3, #72	@ 0x48
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d122      	bne.n	8004d94 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3248      	adds	r2, #72	@ 0x48
 8004d74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	3348      	adds	r3, #72	@ 0x48
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	440b      	add	r3, r1
 8004d92:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	401a      	ands	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004dae:	e007      	b.n	8004dc0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	431a      	orrs	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004dda:	e007      	b.n	8004dec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d107      	bne.n	8004e04 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e0a:	f023 0201 	bic.w	r2, r3, #1
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e006      	b.n	8004e26 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d12e      	bne.n	8004ea4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5e:	f7ff fdf3 	bl	8004a48 <HAL_GetTick>
 8004e62:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e64:	e012      	b.n	8004e8c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e66:	f7ff fdef 	bl	8004a48 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b0a      	cmp	r3, #10
 8004e72:	d90b      	bls.n	8004e8c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2205      	movs	r2, #5
 8004e84:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e012      	b.n	8004eb2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e5      	bne.n	8004e66 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e006      	b.n	8004eb2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b089      	sub	sp, #36	@ 0x24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ece:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ed8:	7ffb      	ldrb	r3, [r7, #31]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d003      	beq.n	8004ee6 <HAL_CAN_AddTxMessage+0x2c>
 8004ede:	7ffb      	ldrb	r3, [r7, #31]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	f040 80ad 	bne.w	8005040 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8095 	beq.w	8005030 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	0e1b      	lsrs	r3, r3, #24
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f10:	2201      	movs	r2, #1
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	409a      	lsls	r2, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	6809      	ldr	r1, [r1, #0]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	3318      	adds	r3, #24
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	440b      	add	r3, r1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e00f      	b.n	8004f5e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f48:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004f52:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	3318      	adds	r3, #24
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	440b      	add	r3, r1
 8004f5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6819      	ldr	r1, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3318      	adds	r3, #24
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3304      	adds	r3, #4
 8004f70:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	7d1b      	ldrb	r3, [r3, #20]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d111      	bne.n	8004f9e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	3318      	adds	r3, #24
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	4413      	add	r3, r2
 8004f86:	3304      	adds	r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	6811      	ldr	r1, [r2, #0]
 8004f8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	3318      	adds	r3, #24
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	440b      	add	r3, r1
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	061a      	lsls	r2, r3, #24
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3306      	adds	r3, #6
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	041b      	lsls	r3, r3, #16
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3305      	adds	r3, #5
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	3204      	adds	r2, #4
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	ea43 0200 	orr.w	r2, r3, r0
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	440b      	add	r3, r1
 8004fd0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004fd4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3303      	adds	r3, #3
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	061a      	lsls	r2, r3, #24
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3301      	adds	r3, #1
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	6811      	ldr	r1, [r2, #0]
 8004ffc:	ea43 0200 	orr.w	r2, r3, r0
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	440b      	add	r3, r1
 8005006:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800500a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3318      	adds	r3, #24
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	6811      	ldr	r1, [r2, #0]
 800501e:	f043 0201 	orr.w	r2, r3, #1
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	3318      	adds	r3, #24
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	440b      	add	r3, r1
 800502a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e00e      	b.n	800504e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e006      	b.n	800504e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3724      	adds	r7, #36	@ 0x24
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800505a:	b480      	push	{r7}
 800505c:	b087      	sub	sp, #28
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800506e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d003      	beq.n	800507e <HAL_CAN_GetRxMessage+0x24>
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f040 8103 	bne.w	8005284 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10e      	bne.n	80050a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d116      	bne.n	80050c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e0f7      	b.n	8005292 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0e8      	b.n	8005292 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	331b      	adds	r3, #27
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	4413      	add	r3, r2
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0204 	and.w	r2, r3, #4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10c      	bne.n	80050f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	331b      	adds	r3, #27
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	4413      	add	r3, r2
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	0d5b      	lsrs	r3, r3, #21
 80050ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e00b      	b.n	8005110 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	331b      	adds	r3, #27
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4413      	add	r3, r2
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	08db      	lsrs	r3, r3, #3
 8005108:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	331b      	adds	r3, #27
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	4413      	add	r3, r2
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0202 	and.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	331b      	adds	r3, #27
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	4413      	add	r3, r2
 8005132:	3304      	adds	r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2208      	movs	r2, #8
 8005142:	611a      	str	r2, [r3, #16]
 8005144:	e00b      	b.n	800515e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	331b      	adds	r3, #27
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	3304      	adds	r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 020f 	and.w	r2, r3, #15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	331b      	adds	r3, #27
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	4413      	add	r3, r2
 800516a:	3304      	adds	r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	b2da      	uxtb	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	331b      	adds	r3, #27
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	4413      	add	r3, r2
 8005182:	3304      	adds	r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	4413      	add	r3, r2
 8005198:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0a1a      	lsrs	r2, r3, #8
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	0c1a      	lsrs	r2, r3, #16
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	3302      	adds	r3, #2
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	0e1a      	lsrs	r2, r3, #24
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	3303      	adds	r3, #3
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	3304      	adds	r3, #4
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	4413      	add	r3, r2
 8005214:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	0a1a      	lsrs	r2, r3, #8
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	3305      	adds	r3, #5
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	4413      	add	r3, r2
 800522e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	0c1a      	lsrs	r2, r3, #16
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	3306      	adds	r3, #6
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	4413      	add	r3, r2
 8005248:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	0e1a      	lsrs	r2, r3, #24
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	3307      	adds	r3, #7
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d108      	bne.n	8005270 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0220 	orr.w	r2, r2, #32
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	e007      	b.n	8005280 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0220 	orr.w	r2, r2, #32
 800527e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e006      	b.n	8005292 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d002      	beq.n	80052bc <HAL_CAN_ActivateNotification+0x1e>
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d109      	bne.n	80052d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6959      	ldr	r1, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e006      	b.n	80052de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b08a      	sub	sp, #40	@ 0x28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d07c      	beq.n	800542a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d023      	beq.n	8005382 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f983 	bl	8005658 <HAL_CAN_TxMailbox0CompleteCallback>
 8005352:	e016      	b.n	8005382 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005364:	627b      	str	r3, [r7, #36]	@ 0x24
 8005366:	e00c      	b.n	8005382 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
 800537a:	e002      	b.n	8005382 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f989 	bl	8005694 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d024      	beq.n	80053d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005394:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f963 	bl	800566c <HAL_CAN_TxMailbox1CompleteCallback>
 80053a6:	e016      	b.n	80053d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ba:	e00c      	b.n	80053d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ce:	e002      	b.n	80053d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f969 	bl	80056a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d024      	beq.n	800542a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80053e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f943 	bl	8005680 <HAL_CAN_TxMailbox2CompleteCallback>
 80053fa:	e016      	b.n	800542a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24
 800540e:	e00c      	b.n	800542a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d004      	beq.n	8005424 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
 8005422:	e002      	b.n	800542a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f949 	bl	80056bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00c      	beq.n	800544e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d006      	beq.n	8005470 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2208      	movs	r2, #8
 8005468:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f930 	bl	80056d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7fd fc5b 	bl	8002d44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2210      	movs	r2, #16
 80054b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d006      	beq.n	80054d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2208      	movs	r2, #8
 80054cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f912 	bl	80056f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8f9 	bl	80056e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d006      	beq.n	8005514 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2210      	movs	r2, #16
 800550c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f8fc 	bl	800570c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2208      	movs	r2, #8
 800552e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8f5 	bl	8005720 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d07b      	beq.n	8005638 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d072      	beq.n	8005630 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	f043 0304 	orr.w	r3, r3, #4
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d043      	beq.n	8005630 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03e      	beq.n	8005630 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055b8:	2b60      	cmp	r3, #96	@ 0x60
 80055ba:	d02b      	beq.n	8005614 <HAL_CAN_IRQHandler+0x32a>
 80055bc:	2b60      	cmp	r3, #96	@ 0x60
 80055be:	d82e      	bhi.n	800561e <HAL_CAN_IRQHandler+0x334>
 80055c0:	2b50      	cmp	r3, #80	@ 0x50
 80055c2:	d022      	beq.n	800560a <HAL_CAN_IRQHandler+0x320>
 80055c4:	2b50      	cmp	r3, #80	@ 0x50
 80055c6:	d82a      	bhi.n	800561e <HAL_CAN_IRQHandler+0x334>
 80055c8:	2b40      	cmp	r3, #64	@ 0x40
 80055ca:	d019      	beq.n	8005600 <HAL_CAN_IRQHandler+0x316>
 80055cc:	2b40      	cmp	r3, #64	@ 0x40
 80055ce:	d826      	bhi.n	800561e <HAL_CAN_IRQHandler+0x334>
 80055d0:	2b30      	cmp	r3, #48	@ 0x30
 80055d2:	d010      	beq.n	80055f6 <HAL_CAN_IRQHandler+0x30c>
 80055d4:	2b30      	cmp	r3, #48	@ 0x30
 80055d6:	d822      	bhi.n	800561e <HAL_CAN_IRQHandler+0x334>
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d002      	beq.n	80055e2 <HAL_CAN_IRQHandler+0x2f8>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d005      	beq.n	80055ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055e0:	e01d      	b.n	800561e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	f043 0308 	orr.w	r3, r3, #8
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80055ea:	e019      	b.n	8005620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	f043 0310 	orr.w	r3, r3, #16
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80055f4:	e014      	b.n	8005620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	f043 0320 	orr.w	r3, r3, #32
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80055fe:	e00f      	b.n	8005620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005608:	e00a      	b.n	8005620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005610:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005612:	e005      	b.n	8005620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800561c:	e000      	b.n	8005620 <HAL_CAN_IRQHandler+0x336>
            break;
 800561e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800562e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2204      	movs	r2, #4
 8005636:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f872 	bl	8005734 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005650:	bf00      	nop
 8005652:	3728      	adds	r7, #40	@ 0x28
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005758:	4b0c      	ldr	r3, [pc, #48]	@ (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005764:	4013      	ands	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800577a:	4a04      	ldr	r2, [pc, #16]	@ (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	60d3      	str	r3, [r2, #12]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005794:	4b04      	ldr	r3, [pc, #16]	@ (80057a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f003 0307 	and.w	r3, r3, #7
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	db0b      	blt.n	80057d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	f003 021f 	and.w	r2, r3, #31
 80057c4:	4907      	ldr	r1, [pc, #28]	@ (80057e4 <__NVIC_EnableIRQ+0x38>)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2001      	movs	r0, #1
 80057ce:	fa00 f202 	lsl.w	r2, r0, r2
 80057d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	e000e100 	.word	0xe000e100

080057e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	6039      	str	r1, [r7, #0]
 80057f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	db0a      	blt.n	8005812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	490c      	ldr	r1, [pc, #48]	@ (8005834 <__NVIC_SetPriority+0x4c>)
 8005802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005806:	0112      	lsls	r2, r2, #4
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	440b      	add	r3, r1
 800580c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005810:	e00a      	b.n	8005828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4908      	ldr	r1, [pc, #32]	@ (8005838 <__NVIC_SetPriority+0x50>)
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	3b04      	subs	r3, #4
 8005820:	0112      	lsls	r2, r2, #4
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	440b      	add	r3, r1
 8005826:	761a      	strb	r2, [r3, #24]
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000e100 	.word	0xe000e100
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800583c:	b480      	push	{r7}
 800583e:	b089      	sub	sp, #36	@ 0x24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f1c3 0307 	rsb	r3, r3, #7
 8005856:	2b04      	cmp	r3, #4
 8005858:	bf28      	it	cs
 800585a:	2304      	movcs	r3, #4
 800585c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3304      	adds	r3, #4
 8005862:	2b06      	cmp	r3, #6
 8005864:	d902      	bls.n	800586c <NVIC_EncodePriority+0x30>
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3b03      	subs	r3, #3
 800586a:	e000      	b.n	800586e <NVIC_EncodePriority+0x32>
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	401a      	ands	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005884:	f04f 31ff 	mov.w	r1, #4294967295
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	43d9      	mvns	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005894:	4313      	orrs	r3, r2
         );
}
 8005896:	4618      	mov	r0, r3
 8005898:	3724      	adds	r7, #36	@ 0x24
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058b4:	d301      	bcc.n	80058ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058b6:	2301      	movs	r3, #1
 80058b8:	e00f      	b.n	80058da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ba:	4a0a      	ldr	r2, [pc, #40]	@ (80058e4 <SysTick_Config+0x40>)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3b01      	subs	r3, #1
 80058c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058c2:	210f      	movs	r1, #15
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	f7ff ff8e 	bl	80057e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <SysTick_Config+0x40>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058d2:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <SysTick_Config+0x40>)
 80058d4:	2207      	movs	r2, #7
 80058d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000e010 	.word	0xe000e010

080058e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff29 	bl	8005748 <__NVIC_SetPriorityGrouping>
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	4603      	mov	r3, r0
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005910:	f7ff ff3e 	bl	8005790 <__NVIC_GetPriorityGrouping>
 8005914:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f7ff ff8e 	bl	800583c <NVIC_EncodePriority>
 8005920:	4602      	mov	r2, r0
 8005922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff ff5d 	bl	80057e8 <__NVIC_SetPriority>
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	4603      	mov	r3, r0
 800593e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff31 	bl	80057ac <__NVIC_EnableIRQ>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff ffa2 	bl	80058a4 <SysTick_Config>
 8005960:	4603      	mov	r3, r0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d005      	beq.n	800598e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	e047      	b.n	8005a1e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 020e 	bic.w	r2, r2, #14
 800599c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	f003 021c 	and.w	r2, r3, #28
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	2101      	movs	r1, #1
 80059cc:	fa01 f202 	lsl.w	r2, r1, r2
 80059d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00c      	beq.n	80059fe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80059fc:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
    }
  }
  return status;
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005a36:	b2db      	uxtb	r3, r3
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a52:	e166      	b.n	8005d22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	2101      	movs	r1, #1
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	4013      	ands	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8158 	beq.w	8005d1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d005      	beq.n	8005a84 <HAL_GPIO_Init+0x40>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d130      	bne.n	8005ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	2203      	movs	r2, #3
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aba:	2201      	movs	r2, #1
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	091b      	lsrs	r3, r3, #4
 8005ad0:	f003 0201 	and.w	r2, r3, #1
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d017      	beq.n	8005b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	2203      	movs	r2, #3
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	43db      	mvns	r3, r3
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4013      	ands	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d123      	bne.n	8005b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	08da      	lsrs	r2, r3, #3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3208      	adds	r2, #8
 8005b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	220f      	movs	r2, #15
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	08da      	lsrs	r2, r3, #3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3208      	adds	r2, #8
 8005b70:	6939      	ldr	r1, [r7, #16]
 8005b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	2203      	movs	r2, #3
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	43db      	mvns	r3, r3
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f003 0203 	and.w	r2, r3, #3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80b2 	beq.w	8005d1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bb8:	4b61      	ldr	r3, [pc, #388]	@ (8005d40 <HAL_GPIO_Init+0x2fc>)
 8005bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bbc:	4a60      	ldr	r2, [pc, #384]	@ (8005d40 <HAL_GPIO_Init+0x2fc>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8005bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8005d40 <HAL_GPIO_Init+0x2fc>)
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8005d44 <HAL_GPIO_Init+0x300>)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	089b      	lsrs	r3, r3, #2
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	220f      	movs	r2, #15
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005bfa:	d02b      	beq.n	8005c54 <HAL_GPIO_Init+0x210>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a52      	ldr	r2, [pc, #328]	@ (8005d48 <HAL_GPIO_Init+0x304>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d025      	beq.n	8005c50 <HAL_GPIO_Init+0x20c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a51      	ldr	r2, [pc, #324]	@ (8005d4c <HAL_GPIO_Init+0x308>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d01f      	beq.n	8005c4c <HAL_GPIO_Init+0x208>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a50      	ldr	r2, [pc, #320]	@ (8005d50 <HAL_GPIO_Init+0x30c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d019      	beq.n	8005c48 <HAL_GPIO_Init+0x204>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a4f      	ldr	r2, [pc, #316]	@ (8005d54 <HAL_GPIO_Init+0x310>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <HAL_GPIO_Init+0x200>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a4e      	ldr	r2, [pc, #312]	@ (8005d58 <HAL_GPIO_Init+0x314>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00d      	beq.n	8005c40 <HAL_GPIO_Init+0x1fc>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a4d      	ldr	r2, [pc, #308]	@ (8005d5c <HAL_GPIO_Init+0x318>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <HAL_GPIO_Init+0x1f8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8005d60 <HAL_GPIO_Init+0x31c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d101      	bne.n	8005c38 <HAL_GPIO_Init+0x1f4>
 8005c34:	2307      	movs	r3, #7
 8005c36:	e00e      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	e00c      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c3c:	2306      	movs	r3, #6
 8005c3e:	e00a      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c40:	2305      	movs	r3, #5
 8005c42:	e008      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c44:	2304      	movs	r3, #4
 8005c46:	e006      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e004      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e002      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <HAL_GPIO_Init+0x212>
 8005c54:	2300      	movs	r3, #0
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	f002 0203 	and.w	r2, r2, #3
 8005c5c:	0092      	lsls	r2, r2, #2
 8005c5e:	4093      	lsls	r3, r2
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c66:	4937      	ldr	r1, [pc, #220]	@ (8005d44 <HAL_GPIO_Init+0x300>)
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	089b      	lsrs	r3, r3, #2
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c74:	4b3b      	ldr	r3, [pc, #236]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c98:	4a32      	ldr	r2, [pc, #200]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005c9e:	4b31      	ldr	r3, [pc, #196]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4013      	ands	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cc2:	4a28      	ldr	r2, [pc, #160]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005cc8:	4b26      	ldr	r3, [pc, #152]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cec:	4a1d      	ldr	r2, [pc, #116]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d16:	4a13      	ldr	r2, [pc, #76]	@ (8005d64 <HAL_GPIO_Init+0x320>)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f47f ae91 	bne.w	8005a54 <HAL_GPIO_Init+0x10>
  }
}
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40010000 	.word	0x40010000
 8005d48:	48000400 	.word	0x48000400
 8005d4c:	48000800 	.word	0x48000800
 8005d50:	48000c00 	.word	0x48000c00
 8005d54:	48001000 	.word	0x48001000
 8005d58:	48001400 	.word	0x48001400
 8005d5c:	48001800 	.word	0x48001800
 8005d60:	48001c00 	.word	0x48001c00
 8005d64:	40010400 	.word	0x40010400

08005d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	807b      	strh	r3, [r7, #2]
 8005d74:	4613      	mov	r3, r2
 8005d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d78:	787b      	ldrb	r3, [r7, #1]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d7e:	887a      	ldrh	r2, [r7, #2]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d84:	e002      	b.n	8005d8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d86:	887a      	ldrh	r2, [r7, #2]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e08d      	b.n	8005ec6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc ff40 	bl	8002c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2224      	movs	r2, #36	@ 0x24
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005de8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005df8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d107      	bne.n	8005e12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	e006      	b.n	8005e20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d108      	bne.n	8005e3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	e007      	b.n	8005e4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	461a      	mov	r2, r3
 8005edc:	460b      	mov	r3, r1
 8005ede:	817b      	strh	r3, [r7, #10]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	f040 80fd 	bne.w	80060ec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_I2C_Master_Transmit+0x30>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e0f6      	b.n	80060ee <HAL_I2C_Master_Transmit+0x21e>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f08:	f7fe fd9e 	bl	8004a48 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	2319      	movs	r3, #25
 8005f14:	2201      	movs	r2, #1
 8005f16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f001 fced 	bl	80078fa <I2C_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e0e1      	b.n	80060ee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2221      	movs	r2, #33	@ 0x21
 8005f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2210      	movs	r2, #16
 8005f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	893a      	ldrh	r2, [r7, #8]
 8005f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2bff      	cmp	r3, #255	@ 0xff
 8005f5a:	d906      	bls.n	8005f6a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	22ff      	movs	r2, #255	@ 0xff
 8005f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e007      	b.n	8005f7a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f78:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d024      	beq.n	8005fcc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	3301      	adds	r3, #1
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	8979      	ldrh	r1, [r7, #10]
 8005fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80060f8 <HAL_I2C_Master_Transmit+0x228>)
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f001 fee7 	bl	8007d98 <I2C_TransferConfig>
 8005fca:	e066      	b.n	800609a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	8979      	ldrh	r1, [r7, #10]
 8005fd4:	4b48      	ldr	r3, [pc, #288]	@ (80060f8 <HAL_I2C_Master_Transmit+0x228>)
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 fedc 	bl	8007d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005fe0:	e05b      	b.n	800609a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	6a39      	ldr	r1, [r7, #32]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f001 fce0 	bl	80079ac <I2C_WaitOnTXISFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e07b      	b.n	80060ee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d034      	beq.n	800609a <HAL_I2C_Master_Transmit+0x1ca>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006034:	2b00      	cmp	r3, #0
 8006036:	d130      	bne.n	800609a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2200      	movs	r2, #0
 8006040:	2180      	movs	r1, #128	@ 0x80
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 fc59 	bl	80078fa <I2C_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e04d      	b.n	80060ee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2bff      	cmp	r3, #255	@ 0xff
 800605a:	d90e      	bls.n	800607a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	22ff      	movs	r2, #255	@ 0xff
 8006060:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006066:	b2da      	uxtb	r2, r3
 8006068:	8979      	ldrh	r1, [r7, #10]
 800606a:	2300      	movs	r3, #0
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f001 fe90 	bl	8007d98 <I2C_TransferConfig>
 8006078:	e00f      	b.n	800609a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	8979      	ldrh	r1, [r7, #10]
 800608c:	2300      	movs	r3, #0
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f001 fe7f 	bl	8007d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d19e      	bne.n	8005fe2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	6a39      	ldr	r1, [r7, #32]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f001 fcc6 	bl	8007a3a <I2C_WaitOnSTOPFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e01a      	b.n	80060ee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2220      	movs	r2, #32
 80060be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6859      	ldr	r1, [r3, #4]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b0c      	ldr	r3, [pc, #48]	@ (80060fc <HAL_I2C_Master_Transmit+0x22c>)
 80060cc:	400b      	ands	r3, r1
 80060ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e000      	b.n	80060ee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80060ec:	2302      	movs	r3, #2
  }
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	80002000 	.word	0x80002000
 80060fc:	fe00e800 	.word	0xfe00e800

08006100 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	461a      	mov	r2, r3
 800610c:	460b      	mov	r3, r1
 800610e:	817b      	strh	r3, [r7, #10]
 8006110:	4613      	mov	r3, r2
 8006112:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b20      	cmp	r3, #32
 800611e:	f040 80db 	bne.w	80062d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_I2C_Master_Receive+0x30>
 800612c:	2302      	movs	r3, #2
 800612e:	e0d4      	b.n	80062da <HAL_I2C_Master_Receive+0x1da>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006138:	f7fe fc86 	bl	8004a48 <HAL_GetTick>
 800613c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2319      	movs	r3, #25
 8006144:	2201      	movs	r2, #1
 8006146:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f001 fbd5 	bl	80078fa <I2C_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e0bf      	b.n	80062da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2222      	movs	r2, #34	@ 0x22
 800615e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2210      	movs	r2, #16
 8006166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	893a      	ldrh	r2, [r7, #8]
 800617a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	2bff      	cmp	r3, #255	@ 0xff
 800618a:	d90e      	bls.n	80061aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006196:	b2da      	uxtb	r2, r3
 8006198:	8979      	ldrh	r1, [r7, #10]
 800619a:	4b52      	ldr	r3, [pc, #328]	@ (80062e4 <HAL_I2C_Master_Receive+0x1e4>)
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f001 fdf8 	bl	8007d98 <I2C_TransferConfig>
 80061a8:	e06d      	b.n	8006286 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	8979      	ldrh	r1, [r7, #10]
 80061bc:	4b49      	ldr	r3, [pc, #292]	@ (80062e4 <HAL_I2C_Master_Receive+0x1e4>)
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f001 fde7 	bl	8007d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80061ca:	e05c      	b.n	8006286 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	6a39      	ldr	r1, [r7, #32]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f001 fc75 	bl	8007ac0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e07c      	b.n	80062da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d034      	beq.n	8006286 <HAL_I2C_Master_Receive+0x186>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d130      	bne.n	8006286 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	2200      	movs	r2, #0
 800622c:	2180      	movs	r1, #128	@ 0x80
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f001 fb63 	bl	80078fa <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e04d      	b.n	80062da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	2bff      	cmp	r3, #255	@ 0xff
 8006246:	d90e      	bls.n	8006266 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	22ff      	movs	r2, #255	@ 0xff
 800624c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006252:	b2da      	uxtb	r2, r3
 8006254:	8979      	ldrh	r1, [r7, #10]
 8006256:	2300      	movs	r3, #0
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 fd9a 	bl	8007d98 <I2C_TransferConfig>
 8006264:	e00f      	b.n	8006286 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006274:	b2da      	uxtb	r2, r3
 8006276:	8979      	ldrh	r1, [r7, #10]
 8006278:	2300      	movs	r3, #0
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f001 fd89 	bl	8007d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d19d      	bne.n	80061cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	6a39      	ldr	r1, [r7, #32]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 fbd0 	bl	8007a3a <I2C_WaitOnSTOPFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e01a      	b.n	80062da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2220      	movs	r2, #32
 80062aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4b0c      	ldr	r3, [pc, #48]	@ (80062e8 <HAL_I2C_Master_Receive+0x1e8>)
 80062b8:	400b      	ands	r3, r1
 80062ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e000      	b.n	80062da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
  }
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	80002400 	.word	0x80002400
 80062e8:	fe00e800 	.word	0xfe00e800

080062ec <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	461a      	mov	r2, r3
 80062f8:	460b      	mov	r3, r1
 80062fa:	817b      	strh	r3, [r7, #10]
 80062fc:	4613      	mov	r3, r2
 80062fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b20      	cmp	r3, #32
 800630a:	d153      	bne.n	80063b4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631a:	d101      	bne.n	8006320 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
 800631e:	e04a      	b.n	80063b6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_I2C_Master_Receive_IT+0x42>
 800632a:	2302      	movs	r3, #2
 800632c:	e043      	b.n	80063b6 <HAL_I2C_Master_Receive_IT+0xca>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2222      	movs	r2, #34	@ 0x22
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2210      	movs	r2, #16
 8006342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	893a      	ldrh	r2, [r7, #8]
 8006356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a19      	ldr	r2, [pc, #100]	@ (80063c0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800635c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a18      	ldr	r2, [pc, #96]	@ (80063c4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006362:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	2bff      	cmp	r3, #255	@ 0xff
 800636c:	d906      	bls.n	800637c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006374:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e007      	b.n	800638c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006386:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800638a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006390:	b2da      	uxtb	r2, r3
 8006392:	8979      	ldrh	r1, [r7, #10]
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f001 fcfc 	bl	8007d98 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063a8:	2102      	movs	r1, #2
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f001 fd26 	bl	8007dfc <I2C_Enable_IRQ>

    return HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	e000      	b.n	80063b6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80063b4:	2302      	movs	r3, #2
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	ffff0000 	.word	0xffff0000
 80063c4:	08006489 	.word	0x08006489
 80063c8:	80002400 	.word	0x80002400

080063cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
 8006414:	4613      	mov	r3, r2
 8006416:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <I2C_Master_ISR_IT+0x1e>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e121      	b.n	80066ea <I2C_Master_ISR_IT+0x262>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d012      	beq.n	80064de <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2210      	movs	r2, #16
 80064c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ce:	f043 0204 	orr.w	r2, r3, #4
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f001 f9cd 	bl	8007876 <I2C_Flush_TXDR>
 80064dc:	e0f2      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d022      	beq.n	800652e <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01d      	beq.n	800652e <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800652c:	e0ca      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d128      	bne.n	800658a <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800653e:	2b00      	cmp	r3, #0
 8006540:	d023      	beq.n	800658a <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01e      	beq.n	800658a <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80b6 	beq.w	80066c4 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006588:	e09c      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d06a      	beq.n	800666a <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800659a:	2b00      	cmp	r3, #0
 800659c:	d065      	beq.n	800666a <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d04e      	beq.n	8006646 <I2C_Master_ISR_IT+0x1be>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d14a      	bne.n	8006646 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065bc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2bff      	cmp	r3, #255	@ 0xff
 80065c6:	d91c      	bls.n	8006602 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d103      	bne.n	80065e4 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065e2:	e002      	b.n	80065ea <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	22ff      	movs	r2, #255	@ 0xff
 80065e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	8a79      	ldrh	r1, [r7, #18]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f001 fbcc 	bl	8007d98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006600:	e032      	b.n	8006668 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006614:	d00b      	beq.n	800662e <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006620:	8a79      	ldrh	r1, [r7, #18]
 8006622:	2000      	movs	r0, #0
 8006624:	9000      	str	r0, [sp, #0]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f001 fbb6 	bl	8007d98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800662c:	e01c      	b.n	8006668 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006632:	b2da      	uxtb	r2, r3
 8006634:	8a79      	ldrh	r1, [r7, #18]
 8006636:	2300      	movs	r3, #0
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f001 fbaa 	bl	8007d98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006644:	e010      	b.n	8006668 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006654:	d003      	beq.n	800665e <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 fcdd 	bl	8007016 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800665c:	e032      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800665e:	2140      	movs	r1, #64	@ 0x40
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fff1 	bl	8007648 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006666:	e02d      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
 8006668:	e02c      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d027      	beq.n	80066c4 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800667a:	2b00      	cmp	r3, #0
 800667c:	d022      	beq.n	80066c4 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d119      	bne.n	80066bc <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006696:	d015      	beq.n	80066c4 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066a0:	d108      	bne.n	80066b4 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	e007      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fcae 	bl	8007016 <I2C_ITMasterSeqCplt>
 80066ba:	e003      	b.n	80066c4 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066bc:	2140      	movs	r1, #64	@ 0x40
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 ffc2 	bl	8007648 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d008      	beq.n	80066e0 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80066d8:	6979      	ldr	r1, [r7, #20]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fd34 	bl	8007148 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006702:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <I2C_Slave_ISR_IT+0x24>
 8006712:	2302      	movs	r3, #2
 8006714:	e0e2      	b.n	80068dc <I2C_Slave_ISR_IT+0x1ea>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006732:	6939      	ldr	r1, [r7, #16]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fdcf 	bl	80072d8 <I2C_ITSlaveCplt>
 800673a:	e0ca      	b.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b00      	cmp	r3, #0
 8006744:	d04b      	beq.n	80067de <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800674c:	2b00      	cmp	r3, #0
 800674e:	d046      	beq.n	80067de <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d128      	bne.n	80067ac <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b28      	cmp	r3, #40	@ 0x28
 8006764:	d108      	bne.n	8006778 <I2C_Slave_ISR_IT+0x86>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800676c:	d104      	bne.n	8006778 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800676e:	6939      	ldr	r1, [r7, #16]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 ff15 	bl	80075a0 <I2C_ITListenCplt>
 8006776:	e031      	b.n	80067dc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b29      	cmp	r3, #41	@ 0x29
 8006782:	d10e      	bne.n	80067a2 <I2C_Slave_ISR_IT+0xb0>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800678a:	d00a      	beq.n	80067a2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2210      	movs	r2, #16
 8006792:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f001 f86e 	bl	8007876 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fc78 	bl	8007090 <I2C_ITSlaveSeqCplt>
 80067a0:	e01c      	b.n	80067dc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067aa:	e08f      	b.n	80068cc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2210      	movs	r2, #16
 80067b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b8:	f043 0204 	orr.w	r2, r3, #4
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <I2C_Slave_ISR_IT+0xdc>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067cc:	d17e      	bne.n	80068cc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d2:	4619      	mov	r1, r3
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 ff37 	bl	8007648 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067da:	e077      	b.n	80068cc <I2C_Slave_ISR_IT+0x1da>
 80067dc:	e076      	b.n	80068cc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d02f      	beq.n	8006848 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02a      	beq.n	8006848 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d018      	beq.n	800682e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d14b      	bne.n	80068d0 <I2C_Slave_ISR_IT+0x1de>
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800683e:	d047      	beq.n	80068d0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fc25 	bl	8007090 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006846:	e043      	b.n	80068d0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800685c:	6939      	ldr	r1, [r7, #16]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fb55 	bl	8006f0e <I2C_ITAddrCplt>
 8006864:	e035      	b.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d030      	beq.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02b      	beq.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d018      	beq.n	80068b6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80068b4:	e00d      	b.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068bc:	d002      	beq.n	80068c4 <I2C_Slave_ISR_IT+0x1d2>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fbe3 	bl	8007090 <I2C_ITSlaveSeqCplt>
 80068ca:	e002      	b.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80068cc:	bf00      	nop
 80068ce:	e000      	b.n	80068d2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80068d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <I2C_Master_ISR_DMA+0x1a>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e0e7      	b.n	8006ace <I2C_Master_ISR_DMA+0x1ea>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	d016      	beq.n	800693e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006916:	2b00      	cmp	r3, #0
 8006918:	d011      	beq.n	800693e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2210      	movs	r2, #16
 8006920:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	f043 0204 	orr.w	r2, r3, #4
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800692e:	2120      	movs	r1, #32
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f001 fa63 	bl	8007dfc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 ff9d 	bl	8007876 <I2C_Flush_TXDR>
 800693c:	e0c2      	b.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d07f      	beq.n	8006a48 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800694e:	2b00      	cmp	r3, #0
 8006950:	d07a      	beq.n	8006a48 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006960:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d05c      	beq.n	8006a26 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006978:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697e:	b29b      	uxth	r3, r3
 8006980:	2bff      	cmp	r3, #255	@ 0xff
 8006982:	d914      	bls.n	80069ae <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	0c1b      	lsrs	r3, r3, #16
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d103      	bne.n	80069a0 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2201      	movs	r2, #1
 800699c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800699e:	e002      	b.n	80069a6 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	22ff      	movs	r2, #255	@ 0xff
 80069a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80069a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e010      	b.n	80069d0 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069c0:	d003      	beq.n	80069ca <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	e002      	b.n	80069d0 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80069ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069ce:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	8a79      	ldrh	r1, [r7, #18]
 80069d8:	2300      	movs	r3, #0
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f001 f9da 	bl	8007d98 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b22      	cmp	r3, #34	@ 0x22
 8006a00:	d108      	bne.n	8006a14 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a12:	e057      	b.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a22:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a24:	e04e      	b.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a34:	d003      	beq.n	8006a3e <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 faed 	bl	8007016 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a3c:	e042      	b.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a3e:	2140      	movs	r1, #64	@ 0x40
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fe01 	bl	8007648 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a46:	e03d      	b.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d028      	beq.n	8006aa4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d023      	beq.n	8006aa4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d119      	bne.n	8006a9a <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a74:	d025      	beq.n	8006ac2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a7e:	d108      	bne.n	8006a92 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a8e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a90:	e017      	b.n	8006ac2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fabf 	bl	8007016 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006a98:	e013      	b.n	8006ac2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a9a:	2140      	movs	r1, #64	@ 0x40
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fdd3 	bl	8007648 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006aa2:	e00e      	b.n	8006ac2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fb44 	bl	8007148 <I2C_ITMasterCplt>
 8006ac0:	e000      	b.n	8006ac4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8006ac2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006ae4:	4b90      	ldr	r3, [pc, #576]	@ (8006d28 <I2C_Mem_ISR_DMA+0x250>)
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <I2C_Mem_ISR_DMA+0x1e>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e12f      	b.n	8006d56 <I2C_Mem_ISR_DMA+0x27e>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d016      	beq.n	8006b36 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d011      	beq.n	8006b36 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2210      	movs	r2, #16
 8006b18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b26:	2120      	movs	r1, #32
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f001 f967 	bl	8007dfc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fea1 	bl	8007876 <I2C_Flush_TXDR>
 8006b34:	e10a      	b.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00e      	beq.n	8006b5e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b5c:	e0f6      	b.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d06d      	beq.n	8006c44 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d068      	beq.n	8006c44 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b72:	2101      	movs	r1, #1
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f001 f9c5 	bl	8007f04 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b7a:	2110      	movs	r1, #16
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f001 f93d 	bl	8007dfc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d056      	beq.n	8006c3a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2bff      	cmp	r3, #255	@ 0xff
 8006b94:	d91e      	bls.n	8006bd4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d103      	bne.n	8006bb2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006bb0:	e002      	b.n	8006bb8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	22ff      	movs	r2, #255	@ 0xff
 8006bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bbc:	b299      	uxth	r1, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 f8e3 	bl	8007d98 <I2C_TransferConfig>
 8006bd2:	e011      	b.n	8006bf8 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	b299      	uxth	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f001 f8d0 	bl	8007d98 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b22      	cmp	r3, #34	@ 0x22
 8006c14:	d108      	bne.n	8006c28 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c26:	e091      	b.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c36:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c38:	e088      	b.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c3a:	2140      	movs	r1, #64	@ 0x40
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fd03 	bl	8007648 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c42:	e083      	b.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d070      	beq.n	8006d30 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d06b      	beq.n	8006d30 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c58:	2101      	movs	r1, #1
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 f952 	bl	8007f04 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c60:	2110      	movs	r1, #16
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f001 f8ca 	bl	8007dfc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b22      	cmp	r3, #34	@ 0x22
 8006c72:	d101      	bne.n	8006c78 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8006c74:	4b2d      	ldr	r3, [pc, #180]	@ (8006d2c <I2C_Mem_ISR_DMA+0x254>)
 8006c76:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2bff      	cmp	r3, #255	@ 0xff
 8006c80:	d91e      	bls.n	8006cc0 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	0c1b      	lsrs	r3, r3, #16
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d103      	bne.n	8006c9e <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006c9c:	e002      	b.n	8006ca4 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	22ff      	movs	r2, #255	@ 0xff
 8006ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ca8:	b299      	uxth	r1, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f001 f86d 	bl	8007d98 <I2C_TransferConfig>
 8006cbe:	e011      	b.n	8006ce4 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cce:	b299      	uxth	r1, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f001 f85a 	bl	8007d98 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b22      	cmp	r3, #34	@ 0x22
 8006d00:	d108      	bne.n	8006d14 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d10:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d12:	e01b      	b.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d22:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d24:	e012      	b.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
 8006d26:	bf00      	nop
 8006d28:	80002000 	.word	0x80002000
 8006d2c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f9fe 	bl	8007148 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop

08006d60 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <I2C_Slave_ISR_DMA+0x24>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e0c0      	b.n	8006f06 <I2C_Slave_ISR_DMA+0x1a6>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d004      	beq.n	8006daa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fa98 	bl	80072d8 <I2C_ITSlaveCplt>
 8006da8:	e0a8      	b.n	8006efc <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8095 	beq.w	8006ee0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 808f 	beq.w	8006ee0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d104      	bne.n	8006dd6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d07d      	beq.n	8006ed2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00c      	beq.n	8006df8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8006df4:	2301      	movs	r3, #1
 8006df6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00c      	beq.n	8006e1a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8006e16:	2301      	movs	r3, #1
 8006e18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d128      	bne.n	8006e72 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b28      	cmp	r3, #40	@ 0x28
 8006e2a:	d108      	bne.n	8006e3e <I2C_Slave_ISR_DMA+0xde>
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e32:	d104      	bne.n	8006e3e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 fbb2 	bl	80075a0 <I2C_ITListenCplt>
 8006e3c:	e048      	b.n	8006ed0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b29      	cmp	r3, #41	@ 0x29
 8006e48:	d10e      	bne.n	8006e68 <I2C_Slave_ISR_DMA+0x108>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e50:	d00a      	beq.n	8006e68 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2210      	movs	r2, #16
 8006e58:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fd0b 	bl	8007876 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f915 	bl	8007090 <I2C_ITSlaveSeqCplt>
 8006e66:	e033      	b.n	8006ed0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006e70:	e034      	b.n	8006edc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2210      	movs	r2, #16
 8006e78:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <I2C_Slave_ISR_DMA+0x13c>
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e9a:	d11f      	bne.n	8006edc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	2b21      	cmp	r3, #33	@ 0x21
 8006ea0:	d002      	beq.n	8006ea8 <I2C_Slave_ISR_DMA+0x148>
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	2b29      	cmp	r3, #41	@ 0x29
 8006ea6:	d103      	bne.n	8006eb0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2221      	movs	r2, #33	@ 0x21
 8006eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8006eae:	e008      	b.n	8006ec2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	2b22      	cmp	r3, #34	@ 0x22
 8006eb4:	d002      	beq.n	8006ebc <I2C_Slave_ISR_DMA+0x15c>
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eba:	d102      	bne.n	8006ec2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2222      	movs	r2, #34	@ 0x22
 8006ec0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fbbd 	bl	8007648 <I2C_ITError>
      if (treatdmanack == 1U)
 8006ece:	e005      	b.n	8006edc <I2C_Slave_ISR_DMA+0x17c>
 8006ed0:	e004      	b.n	8006edc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006eda:	e00f      	b.n	8006efc <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8006edc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ede:	e00d      	b.n	8006efc <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d008      	beq.n	8006efc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f809 	bl	8006f0e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f24:	2b28      	cmp	r3, #40	@ 0x28
 8006f26:	d16a      	bne.n	8006ffe <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	0c1b      	lsrs	r3, r3, #16
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	0c1b      	lsrs	r3, r3, #16
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f46:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f54:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006f62:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d138      	bne.n	8006fde <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f6c:	897b      	ldrh	r3, [r7, #10]
 8006f6e:	09db      	lsrs	r3, r3, #7
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	89bb      	ldrh	r3, [r7, #12]
 8006f74:	4053      	eors	r3, r2
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	f003 0306 	and.w	r3, r3, #6
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11c      	bne.n	8006fba <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f80:	897b      	ldrh	r3, [r7, #10]
 8006f82:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d13b      	bne.n	800700e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fac:	89ba      	ldrh	r2, [r7, #12]
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff fa28 	bl	8006408 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006fb8:	e029      	b.n	800700e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006fba:	893b      	ldrh	r3, [r7, #8]
 8006fbc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 ff9e 	bl	8007f04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fd0:	89ba      	ldrh	r2, [r7, #12]
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff fa16 	bl	8006408 <HAL_I2C_AddrCallback>
}
 8006fdc:	e017      	b.n	800700e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006fde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 ff8e 	bl	8007f04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ff0:	89ba      	ldrh	r2, [r7, #12]
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff fa06 	bl	8006408 <HAL_I2C_AddrCallback>
}
 8006ffc:	e007      	b.n	800700e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2208      	movs	r2, #8
 8007004:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b21      	cmp	r3, #33	@ 0x21
 8007030:	d115      	bne.n	800705e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2211      	movs	r2, #17
 800703e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007046:	2101      	movs	r1, #1
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 ff5b 	bl	8007f04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff f9b8 	bl	80063cc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800705c:	e014      	b.n	8007088 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2212      	movs	r2, #18
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007072:	2102      	movs	r1, #2
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 ff45 	bl	8007f04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fc faf4 	bl	8003670 <HAL_I2C_MasterRxCpltCallback>
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d008      	beq.n	80070c4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e00c      	b.n	80070de <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b29      	cmp	r3, #41	@ 0x29
 80070e8:	d112      	bne.n	8007110 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2228      	movs	r2, #40	@ 0x28
 80070ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2221      	movs	r2, #33	@ 0x21
 80070f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070f8:	2101      	movs	r1, #1
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 ff02 	bl	8007f04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff f969 	bl	80063e0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800710e:	e017      	b.n	8007140 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b2a      	cmp	r3, #42	@ 0x2a
 800711a:	d111      	bne.n	8007140 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2228      	movs	r2, #40	@ 0x28
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2222      	movs	r2, #34	@ 0x22
 8007128:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800712a:	2102      	movs	r1, #2
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fee9 	bl	8007f04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff f95a 	bl	80063f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2220      	movs	r2, #32
 800715c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b21      	cmp	r3, #33	@ 0x21
 8007168:	d107      	bne.n	800717a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800716a:	2101      	movs	r1, #1
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fec9 	bl	8007f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2211      	movs	r2, #17
 8007176:	631a      	str	r2, [r3, #48]	@ 0x30
 8007178:	e00c      	b.n	8007194 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b22      	cmp	r3, #34	@ 0x22
 8007184:	d106      	bne.n	8007194 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007186:	2102      	movs	r1, #2
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 febb 	bl	8007f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2212      	movs	r2, #18
 8007192:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6859      	ldr	r1, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4b4c      	ldr	r3, [pc, #304]	@ (80072d0 <I2C_ITMasterCplt+0x188>)
 80071a0:	400b      	ands	r3, r1
 80071a2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a49      	ldr	r2, [pc, #292]	@ (80072d4 <I2C_ITMasterCplt+0x18c>)
 80071ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2210      	movs	r2, #16
 80071c0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c6:	f043 0204 	orr.w	r2, r3, #4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b60      	cmp	r3, #96	@ 0x60
 80071d8:	d10a      	bne.n	80071f0 <I2C_ITMasterCplt+0xa8>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80071ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb40 	bl	8007876 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b60      	cmp	r3, #96	@ 0x60
 8007206:	d002      	beq.n	800720e <I2C_ITMasterCplt+0xc6>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa17 	bl	8007648 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800721a:	e054      	b.n	80072c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b21      	cmp	r3, #33	@ 0x21
 8007226:	d124      	bne.n	8007272 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b40      	cmp	r3, #64	@ 0x40
 8007240:	d10b      	bne.n	800725a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff f8f0 	bl	8006438 <HAL_I2C_MemTxCpltCallback>
}
 8007258:	e035      	b.n	80072c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff f8ae 	bl	80063cc <HAL_I2C_MasterTxCpltCallback>
}
 8007270:	e029      	b.n	80072c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b22      	cmp	r3, #34	@ 0x22
 800727c:	d123      	bne.n	80072c6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b40      	cmp	r3, #64	@ 0x40
 8007296:	d10b      	bne.n	80072b0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff f8cf 	bl	800644c <HAL_I2C_MemRxCpltCallback>
}
 80072ae:	e00a      	b.n	80072c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fc f9d5 	bl	8003670 <HAL_I2C_MasterRxCpltCallback>
}
 80072c6:	bf00      	nop
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	fe00e800 	.word	0xfe00e800
 80072d4:	ffff0000 	.word	0xffff0000

080072d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072fa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2220      	movs	r2, #32
 8007302:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	2b21      	cmp	r3, #33	@ 0x21
 8007308:	d002      	beq.n	8007310 <I2C_ITSlaveCplt+0x38>
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2b29      	cmp	r3, #41	@ 0x29
 800730e:	d108      	bne.n	8007322 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007310:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fdf5 	bl	8007f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2221      	movs	r2, #33	@ 0x21
 800731e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007320:	e019      	b.n	8007356 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	2b22      	cmp	r3, #34	@ 0x22
 8007326:	d002      	beq.n	800732e <I2C_ITSlaveCplt+0x56>
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	2b2a      	cmp	r3, #42	@ 0x2a
 800732c:	d108      	bne.n	8007340 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800732e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fde6 	bl	8007f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2222      	movs	r2, #34	@ 0x22
 800733c:	631a      	str	r2, [r3, #48]	@ 0x30
 800733e:	e00a      	b.n	8007356 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007340:	7afb      	ldrb	r3, [r7, #11]
 8007342:	2b28      	cmp	r3, #40	@ 0x28
 8007344:	d107      	bne.n	8007356 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007346:	f248 0103 	movw	r1, #32771	@ 0x8003
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fdda 	bl	8007f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007364:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b89      	ldr	r3, [pc, #548]	@ (8007598 <I2C_ITSlaveCplt+0x2c0>)
 8007372:	400b      	ands	r3, r1
 8007374:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa7d 	bl	8007876 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007394:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01f      	beq.n	80073de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073ac:	e017      	b.n	80073de <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d012      	beq.n	80073de <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d006      	beq.n	80073de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	b29a      	uxth	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d020      	beq.n	800742a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0304 	bic.w	r3, r3, #4
 80073ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00c      	beq.n	800742a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007438:	f043 0204 	orr.w	r2, r3, #4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b00      	cmp	r3, #0
 8007448:	d049      	beq.n	80074de <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007450:	2b00      	cmp	r3, #0
 8007452:	d044      	beq.n	80074de <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d128      	bne.n	80074b0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b28      	cmp	r3, #40	@ 0x28
 8007468:	d108      	bne.n	800747c <I2C_ITSlaveCplt+0x1a4>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007470:	d104      	bne.n	800747c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007472:	6979      	ldr	r1, [r7, #20]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f893 	bl	80075a0 <I2C_ITListenCplt>
 800747a:	e030      	b.n	80074de <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b29      	cmp	r3, #41	@ 0x29
 8007486:	d10e      	bne.n	80074a6 <I2C_ITSlaveCplt+0x1ce>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800748e:	d00a      	beq.n	80074a6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2210      	movs	r2, #16
 8007496:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f9ec 	bl	8007876 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fdf6 	bl	8007090 <I2C_ITSlaveSeqCplt>
 80074a4:	e01b      	b.n	80074de <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2210      	movs	r2, #16
 80074ac:	61da      	str	r2, [r3, #28]
 80074ae:	e016      	b.n	80074de <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2210      	movs	r2, #16
 80074b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074bc:	f043 0204 	orr.w	r2, r3, #4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <I2C_ITSlaveCplt+0x1fa>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074d0:	d105      	bne.n	80074de <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8b5 	bl	8007648 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d010      	beq.n	8007516 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f8a4 	bl	8007648 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b28      	cmp	r3, #40	@ 0x28
 800750a:	d141      	bne.n	8007590 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f846 	bl	80075a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007514:	e03c      	b.n	8007590 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800751e:	d014      	beq.n	800754a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fdb5 	bl	8007090 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a1c      	ldr	r2, [pc, #112]	@ (800759c <I2C_ITSlaveCplt+0x2c4>)
 800752a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe ff6e 	bl	8006424 <HAL_I2C_ListenCpltCallback>
}
 8007548:	e022      	b.n	8007590 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b22      	cmp	r3, #34	@ 0x22
 8007554:	d10e      	bne.n	8007574 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7fe ff41 	bl	80063f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007572:	e00d      	b.n	8007590 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fe ff28 	bl	80063e0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007590:	bf00      	nop
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	fe00e800 	.word	0xfe00e800
 800759c:	ffff0000 	.word	0xffff0000

080075a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a25      	ldr	r2, [pc, #148]	@ (8007644 <I2C_ITListenCplt+0xa4>)
 80075ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d022      	beq.n	800761c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d012      	beq.n	800761c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007614:	f043 0204 	orr.w	r2, r3, #4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800761c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc6f 	bl	8007f04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2210      	movs	r2, #16
 800762c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fe fef4 	bl	8006424 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	ffff0000 	.word	0xffff0000

08007648 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007658:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a6d      	ldr	r2, [pc, #436]	@ (800781c <I2C_ITError+0x1d4>)
 8007666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	2b28      	cmp	r3, #40	@ 0x28
 800767e:	d005      	beq.n	800768c <I2C_ITError+0x44>
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	2b29      	cmp	r3, #41	@ 0x29
 8007684:	d002      	beq.n	800768c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	2b2a      	cmp	r3, #42	@ 0x2a
 800768a:	d10b      	bne.n	80076a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800768c:	2103      	movs	r1, #3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fc38 	bl	8007f04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2228      	movs	r2, #40	@ 0x28
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a60      	ldr	r2, [pc, #384]	@ (8007820 <I2C_ITError+0x1d8>)
 80076a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80076a2:	e030      	b.n	8007706 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fc2b 	bl	8007f04 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8e1 	bl	8007876 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b60      	cmp	r3, #96	@ 0x60
 80076be:	d01f      	beq.n	8007700 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d114      	bne.n	8007700 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f003 0310 	and.w	r3, r3, #16
 80076e0:	2b10      	cmp	r3, #16
 80076e2:	d109      	bne.n	80076f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2210      	movs	r2, #16
 80076ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f0:	f043 0204 	orr.w	r2, r3, #4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2220      	movs	r2, #32
 80076fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007710:	2b00      	cmp	r3, #0
 8007712:	d039      	beq.n	8007788 <I2C_ITError+0x140>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b11      	cmp	r3, #17
 8007718:	d002      	beq.n	8007720 <I2C_ITError+0xd8>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b21      	cmp	r3, #33	@ 0x21
 800771e:	d133      	bne.n	8007788 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800772a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800772e:	d107      	bne.n	8007740 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800773e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe f96f 	bl	8005a28 <HAL_DMA_GetState>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d017      	beq.n	8007780 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	4a33      	ldr	r2, [pc, #204]	@ (8007824 <I2C_ITError+0x1dc>)
 8007756:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe f900 	bl	800596a <HAL_DMA_Abort_IT>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d04d      	beq.n	800780c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800777a:	4610      	mov	r0, r2
 800777c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800777e:	e045      	b.n	800780c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f851 	bl	8007828 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007786:	e041      	b.n	800780c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d039      	beq.n	8007804 <I2C_ITError+0x1bc>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b12      	cmp	r3, #18
 8007794:	d002      	beq.n	800779c <I2C_ITError+0x154>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b22      	cmp	r3, #34	@ 0x22
 800779a:	d133      	bne.n	8007804 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077aa:	d107      	bne.n	80077bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80077ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe f931 	bl	8005a28 <HAL_DMA_GetState>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d017      	beq.n	80077fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d0:	4a14      	ldr	r2, [pc, #80]	@ (8007824 <I2C_ITError+0x1dc>)
 80077d2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe f8c2 	bl	800596a <HAL_DMA_Abort_IT>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d011      	beq.n	8007810 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80077f6:	4610      	mov	r0, r2
 80077f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077fa:	e009      	b.n	8007810 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f813 	bl	8007828 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007802:	e005      	b.n	8007810 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f80f 	bl	8007828 <I2C_TreatErrorCallback>
  }
}
 800780a:	e002      	b.n	8007812 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800780c:	bf00      	nop
 800780e:	e000      	b.n	8007812 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007810:	bf00      	nop
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	ffff0000 	.word	0xffff0000
 8007820:	080066f3 	.word	0x080066f3
 8007824:	080078bf 	.word	0x080078bf

08007828 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b60      	cmp	r3, #96	@ 0x60
 800783a:	d10e      	bne.n	800785a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fe fe0e 	bl	8006474 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007858:	e009      	b.n	800786e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7fe fdf9 	bl	8006460 <HAL_I2C_ErrorCallback>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b02      	cmp	r3, #2
 800788a:	d103      	bne.n	8007894 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2200      	movs	r2, #0
 8007892:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d007      	beq.n	80078b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 0201 	orr.w	r2, r2, #1
 80078b0:	619a      	str	r2, [r3, #24]
  }
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d8:	2200      	movs	r2, #0
 80078da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e8:	2200      	movs	r2, #0
 80078ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f7ff ff9b 	bl	8007828 <I2C_TreatErrorCallback>
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	4613      	mov	r3, r2
 8007908:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800790a:	e03b      	b.n	8007984 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f961 	bl	8007bd8 <I2C_IsErrorOccurred>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e041      	b.n	80079a4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d02d      	beq.n	8007984 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7fd f88e 	bl	8004a48 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnFlagUntilTimeout+0x44>
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d122      	bne.n	8007984 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699a      	ldr	r2, [r3, #24]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	4013      	ands	r3, r2
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	429a      	cmp	r2, r3
 800794c:	bf0c      	ite	eq
 800794e:	2301      	moveq	r3, #1
 8007950:	2300      	movne	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	429a      	cmp	r2, r3
 800795a:	d113      	bne.n	8007984 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007960:	f043 0220 	orr.w	r2, r3, #32
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e00f      	b.n	80079a4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	4013      	ands	r3, r2
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	429a      	cmp	r2, r3
 8007992:	bf0c      	ite	eq
 8007994:	2301      	moveq	r3, #1
 8007996:	2300      	movne	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	461a      	mov	r2, r3
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d0b4      	beq.n	800790c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079b8:	e033      	b.n	8007a22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f90a 	bl	8007bd8 <I2C_IsErrorOccurred>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e031      	b.n	8007a32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d025      	beq.n	8007a22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079d6:	f7fd f837 	bl	8004a48 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d302      	bcc.n	80079ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d11a      	bne.n	8007a22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d013      	beq.n	8007a22 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fe:	f043 0220 	orr.w	r2, r3, #32
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e007      	b.n	8007a32 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d1c4      	bne.n	80079ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a46:	e02f      	b.n	8007aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f8c3 	bl	8007bd8 <I2C_IsErrorOccurred>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e02d      	b.n	8007ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5c:	f7fc fff4 	bl	8004a48 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d302      	bcc.n	8007a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d11a      	bne.n	8007aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d013      	beq.n	8007aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a84:	f043 0220 	orr.w	r2, r3, #32
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e007      	b.n	8007ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d1c8      	bne.n	8007a48 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007ad0:	e071      	b.n	8007bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f87e 	bl	8007bd8 <I2C_IsErrorOccurred>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d13b      	bne.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d138      	bne.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d105      	bne.n	8007b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	2b10      	cmp	r3, #16
 8007b20:	d121      	bne.n	8007b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2210      	movs	r2, #16
 8007b28:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2220      	movs	r2, #32
 8007b36:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b24      	ldr	r3, [pc, #144]	@ (8007bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007b44:	400b      	ands	r3, r1
 8007b46:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
 8007b64:	e002      	b.n	8007b6c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007b6c:	f7fc ff6c 	bl	8004a48 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d302      	bcc.n	8007b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d119      	bne.n	8007bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d116      	bne.n	8007bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d00f      	beq.n	8007bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d002      	beq.n	8007bca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d083      	beq.n	8007ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	fe00e800 	.word	0xfe00e800

08007bd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	@ 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d068      	beq.n	8007cd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2210      	movs	r2, #16
 8007c0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c0c:	e049      	b.n	8007ca2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c14:	d045      	beq.n	8007ca2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c16:	f7fc ff17 	bl	8004a48 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d302      	bcc.n	8007c2c <I2C_IsErrorOccurred+0x54>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d13a      	bne.n	8007ca2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c4e:	d121      	bne.n	8007c94 <I2C_IsErrorOccurred+0xbc>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c56:	d01d      	beq.n	8007c94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007c58:	7cfb      	ldrb	r3, [r7, #19]
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d01a      	beq.n	8007c94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007c6e:	f7fc feeb 	bl	8004a48 <HAL_GetTick>
 8007c72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c74:	e00e      	b.n	8007c94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007c76:	f7fc fee7 	bl	8004a48 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b19      	cmp	r3, #25
 8007c82:	d907      	bls.n	8007c94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	f043 0320 	orr.w	r3, r3, #32
 8007c8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007c92:	e006      	b.n	8007ca2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d1e9      	bne.n	8007c76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d003      	beq.n	8007cb8 <I2C_IsErrorOccurred+0xe0>
 8007cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0aa      	beq.n	8007c0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	f043 0304 	orr.w	r3, r3, #4
 8007cce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	f043 0308 	orr.w	r3, r3, #8
 8007d10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	f043 0302 	orr.w	r3, r3, #2
 8007d32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01c      	beq.n	8007d86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fd92 	bl	8007876 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6859      	ldr	r1, [r3, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d94 <I2C_IsErrorOccurred+0x1bc>)
 8007d5e:	400b      	ands	r3, r1
 8007d60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3728      	adds	r7, #40	@ 0x28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	fe00e800 	.word	0xfe00e800

08007d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	607b      	str	r3, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	817b      	strh	r3, [r7, #10]
 8007da6:	4613      	mov	r3, r2
 8007da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007daa:	897b      	ldrh	r3, [r7, #10]
 8007dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007db0:	7a7b      	ldrb	r3, [r7, #9]
 8007db2:	041b      	lsls	r3, r3, #16
 8007db4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007db8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	0d5b      	lsrs	r3, r3, #21
 8007dd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007dd6:	4b08      	ldr	r3, [pc, #32]	@ (8007df8 <I2C_TransferConfig+0x60>)
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	ea02 0103 	and.w	r1, r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	03ff63ff 	.word	0x03ff63ff

08007dfc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e10:	4a39      	ldr	r2, [pc, #228]	@ (8007ef8 <I2C_Enable_IRQ+0xfc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d032      	beq.n	8007e7c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e1a:	4a38      	ldr	r2, [pc, #224]	@ (8007efc <I2C_Enable_IRQ+0x100>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d02d      	beq.n	8007e7c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007e24:	4a36      	ldr	r2, [pc, #216]	@ (8007f00 <I2C_Enable_IRQ+0x104>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d028      	beq.n	8007e7c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007e2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da03      	bge.n	8007e3a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007e38:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007e3a:	887b      	ldrh	r3, [r7, #2]
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007e4a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007e4c:	887b      	ldrh	r3, [r7, #2]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007e5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007e5e:	887b      	ldrh	r3, [r7, #2]
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d103      	bne.n	8007e6c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007e6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007e6c:	887b      	ldrh	r3, [r7, #2]
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d133      	bne.n	8007eda <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f043 0320 	orr.w	r3, r3, #32
 8007e78:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007e7a:	e02e      	b.n	8007eda <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	da03      	bge.n	8007e8c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007e8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007e8c:	887b      	ldrh	r3, [r7, #2]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007e9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007e9e:	887b      	ldrh	r3, [r7, #2]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007eae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007eb0:	887b      	ldrh	r3, [r7, #2]
 8007eb2:	2b10      	cmp	r3, #16
 8007eb4:	d103      	bne.n	8007ebe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007ebc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ebe:	887b      	ldrh	r3, [r7, #2]
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d103      	bne.n	8007ecc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007eca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007ecc:	887b      	ldrh	r3, [r7, #2]
 8007ece:	2b40      	cmp	r3, #64	@ 0x40
 8007ed0:	d103      	bne.n	8007eda <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	080068e5 	.word	0x080068e5
 8007efc:	08006d61 	.word	0x08006d61
 8007f00:	08006ad9 	.word	0x08006ad9

08007f04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f14:	887b      	ldrh	r3, [r7, #2]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00f      	beq.n	8007f3e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007f24:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f32:	2b28      	cmp	r3, #40	@ 0x28
 8007f34:	d003      	beq.n	8007f3e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007f3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f3e:	887b      	ldrh	r3, [r7, #2]
 8007f40:	f003 0302 	and.w	r3, r3, #2
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00f      	beq.n	8007f68 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007f4e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f5c:	2b28      	cmp	r3, #40	@ 0x28
 8007f5e:	d003      	beq.n	8007f68 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007f66:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007f68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	da03      	bge.n	8007f78 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007f76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007f78:	887b      	ldrh	r3, [r7, #2]
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d103      	bne.n	8007f86 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007f84:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f86:	887b      	ldrh	r3, [r7, #2]
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d103      	bne.n	8007f94 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f043 0320 	orr.w	r3, r3, #32
 8007f92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f94:	887b      	ldrh	r3, [r7, #2]
 8007f96:	2b40      	cmp	r3, #64	@ 0x40
 8007f98:	d103      	bne.n	8007fa2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6819      	ldr	r1, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	43da      	mvns	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	400a      	ands	r2, r1
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d138      	bne.n	8008048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e032      	b.n	800804a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2224      	movs	r2, #36	@ 0x24
 8007ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0201 	bic.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6819      	ldr	r1, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e000      	b.n	800804a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008048:	2302      	movs	r3, #2
  }
}
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008056:	b480      	push	{r7}
 8008058:	b085      	sub	sp, #20
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b20      	cmp	r3, #32
 800806a:	d139      	bne.n	80080e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008076:	2302      	movs	r3, #2
 8008078:	e033      	b.n	80080e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2224      	movs	r2, #36	@ 0x24
 8008086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80080a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e000      	b.n	80080e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080e0:	2302      	movs	r3, #2
  }
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080f4:	4b0d      	ldr	r3, [pc, #52]	@ (800812c <HAL_PWREx_GetVoltageRange+0x3c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008100:	d102      	bne.n	8008108 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008106:	e00b      	b.n	8008120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008108:	4b08      	ldr	r3, [pc, #32]	@ (800812c <HAL_PWREx_GetVoltageRange+0x3c>)
 800810a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800810e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008116:	d102      	bne.n	800811e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800811c:	e000      	b.n	8008120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800811e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008120:	4618      	mov	r0, r3
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40007000 	.word	0x40007000

08008130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d141      	bne.n	80081c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800813e:	4b4b      	ldr	r3, [pc, #300]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800814a:	d131      	bne.n	80081b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800814c:	4b47      	ldr	r3, [pc, #284]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800814e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008152:	4a46      	ldr	r2, [pc, #280]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800815c:	4b43      	ldr	r3, [pc, #268]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008164:	4a41      	ldr	r2, [pc, #260]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800816a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800816c:	4b40      	ldr	r3, [pc, #256]	@ (8008270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2232      	movs	r2, #50	@ 0x32
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	4a3f      	ldr	r2, [pc, #252]	@ (8008274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008178:	fba2 2303 	umull	r2, r3, r2, r3
 800817c:	0c9b      	lsrs	r3, r3, #18
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008182:	e002      	b.n	800818a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3b01      	subs	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800818a:	4b38      	ldr	r3, [pc, #224]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008196:	d102      	bne.n	800819e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f2      	bne.n	8008184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800819e:	4b33      	ldr	r3, [pc, #204]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081aa:	d158      	bne.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e057      	b.n	8008260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081b0:	4b2e      	ldr	r3, [pc, #184]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081b6:	4a2d      	ldr	r2, [pc, #180]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80081c0:	e04d      	b.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c8:	d141      	bne.n	800824e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081ca:	4b28      	ldr	r3, [pc, #160]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80081d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d6:	d131      	bne.n	800823c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081d8:	4b24      	ldr	r3, [pc, #144]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081de:	4a23      	ldr	r2, [pc, #140]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081e8:	4b20      	ldr	r3, [pc, #128]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80081f0:	4a1e      	ldr	r2, [pc, #120]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80081f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80081f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2232      	movs	r2, #50	@ 0x32
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	4a1c      	ldr	r2, [pc, #112]	@ (8008274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008204:	fba2 2303 	umull	r2, r3, r2, r3
 8008208:	0c9b      	lsrs	r3, r3, #18
 800820a:	3301      	adds	r3, #1
 800820c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800820e:	e002      	b.n	8008216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3b01      	subs	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008216:	4b15      	ldr	r3, [pc, #84]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800821e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008222:	d102      	bne.n	800822a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f2      	bne.n	8008210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800822a:	4b10      	ldr	r3, [pc, #64]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008236:	d112      	bne.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e011      	b.n	8008260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800823c:	4b0b      	ldr	r3, [pc, #44]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008242:	4a0a      	ldr	r2, [pc, #40]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800824c:	e007      	b.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800824e:	4b07      	ldr	r3, [pc, #28]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008256:	4a05      	ldr	r2, [pc, #20]	@ (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008258:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800825c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	40007000 	.word	0x40007000
 8008270:	20000000 	.word	0x20000000
 8008274:	431bde83 	.word	0x431bde83

08008278 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	@ 0x28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d102      	bne.n	800828c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	f000 bc68 	b.w	8008b5c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800828c:	4b97      	ldr	r3, [pc, #604]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f003 030c 	and.w	r3, r3, #12
 8008294:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008296:	4b95      	ldr	r3, [pc, #596]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80e6 	beq.w	800847a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d007      	beq.n	80082c4 <HAL_RCC_OscConfig+0x4c>
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	f040 808d 	bne.w	80083d6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	f040 8089 	bne.w	80083d6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082c4:	4b89      	ldr	r3, [pc, #548]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d006      	beq.n	80082de <HAL_RCC_OscConfig+0x66>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d102      	bne.n	80082de <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f000 bc3f 	b.w	8008b5c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082e2:	4b82      	ldr	r3, [pc, #520]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <HAL_RCC_OscConfig+0x80>
 80082ee:	4b7f      	ldr	r3, [pc, #508]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082f6:	e005      	b.n	8008304 <HAL_RCC_OscConfig+0x8c>
 80082f8:	4b7c      	ldr	r3, [pc, #496]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80082fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082fe:	091b      	lsrs	r3, r3, #4
 8008300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008304:	4293      	cmp	r3, r2
 8008306:	d224      	bcs.n	8008352 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fdf5 	bl	8008efc <RCC_SetFlashLatencyFromMSIRange>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f000 bc1f 	b.w	8008b5c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800831e:	4b73      	ldr	r3, [pc, #460]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a72      	ldr	r2, [pc, #456]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008324:	f043 0308 	orr.w	r3, r3, #8
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	4b70      	ldr	r3, [pc, #448]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	496d      	ldr	r1, [pc, #436]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008338:	4313      	orrs	r3, r2
 800833a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800833c:	4b6b      	ldr	r3, [pc, #428]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	4968      	ldr	r1, [pc, #416]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800834c:	4313      	orrs	r3, r2
 800834e:	604b      	str	r3, [r1, #4]
 8008350:	e025      	b.n	800839e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008352:	4b66      	ldr	r3, [pc, #408]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a65      	ldr	r2, [pc, #404]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008358:	f043 0308 	orr.w	r3, r3, #8
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	4b63      	ldr	r3, [pc, #396]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836a:	4960      	ldr	r1, [pc, #384]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800836c:	4313      	orrs	r3, r2
 800836e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008370:	4b5e      	ldr	r3, [pc, #376]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	495b      	ldr	r1, [pc, #364]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008380:	4313      	orrs	r3, r2
 8008382:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fdb4 	bl	8008efc <RCC_SetFlashLatencyFromMSIRange>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e3de      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800839e:	f000 fd21 	bl	8008de4 <HAL_RCC_GetSysClockFreq>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b51      	ldr	r3, [pc, #324]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	091b      	lsrs	r3, r3, #4
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	4950      	ldr	r1, [pc, #320]	@ (80084f0 <HAL_RCC_OscConfig+0x278>)
 80083b0:	5ccb      	ldrb	r3, [r1, r3]
 80083b2:	f003 031f 	and.w	r3, r3, #31
 80083b6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ba:	4a4e      	ldr	r2, [pc, #312]	@ (80084f4 <HAL_RCC_OscConfig+0x27c>)
 80083bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80083be:	4b4e      	ldr	r3, [pc, #312]	@ (80084f8 <HAL_RCC_OscConfig+0x280>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fc faf0 	bl	80049a8 <HAL_InitTick>
 80083c8:	4603      	mov	r3, r0
 80083ca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d052      	beq.n	8008478 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	e3c2      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d032      	beq.n	8008444 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80083de:	4b43      	ldr	r3, [pc, #268]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a42      	ldr	r2, [pc, #264]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80083e4:	f043 0301 	orr.w	r3, r3, #1
 80083e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80083ea:	f7fc fb2d 	bl	8004a48 <HAL_GetTick>
 80083ee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083f2:	f7fc fb29 	bl	8004a48 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e3ab      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008404:	4b39      	ldr	r3, [pc, #228]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f0      	beq.n	80083f2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008410:	4b36      	ldr	r3, [pc, #216]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a35      	ldr	r2, [pc, #212]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008416:	f043 0308 	orr.w	r3, r3, #8
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	4b33      	ldr	r3, [pc, #204]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	4930      	ldr	r1, [pc, #192]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800842a:	4313      	orrs	r3, r2
 800842c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800842e:	4b2f      	ldr	r3, [pc, #188]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	492b      	ldr	r1, [pc, #172]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800843e:	4313      	orrs	r3, r2
 8008440:	604b      	str	r3, [r1, #4]
 8008442:	e01a      	b.n	800847a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008444:	4b29      	ldr	r3, [pc, #164]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a28      	ldr	r2, [pc, #160]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800844a:	f023 0301 	bic.w	r3, r3, #1
 800844e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008450:	f7fc fafa 	bl	8004a48 <HAL_GetTick>
 8008454:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008456:	e008      	b.n	800846a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008458:	f7fc faf6 	bl	8004a48 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	d901      	bls.n	800846a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e378      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800846a:	4b20      	ldr	r3, [pc, #128]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f0      	bne.n	8008458 <HAL_RCC_OscConfig+0x1e0>
 8008476:	e000      	b.n	800847a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008478:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d073      	beq.n	800856e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	2b08      	cmp	r3, #8
 800848a:	d005      	beq.n	8008498 <HAL_RCC_OscConfig+0x220>
 800848c:	6a3b      	ldr	r3, [r7, #32]
 800848e:	2b0c      	cmp	r3, #12
 8008490:	d10e      	bne.n	80084b0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	2b03      	cmp	r3, #3
 8008496:	d10b      	bne.n	80084b0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008498:	4b14      	ldr	r3, [pc, #80]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d063      	beq.n	800856c <HAL_RCC_OscConfig+0x2f4>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d15f      	bne.n	800856c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e355      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b8:	d106      	bne.n	80084c8 <HAL_RCC_OscConfig+0x250>
 80084ba:	4b0c      	ldr	r3, [pc, #48]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a0b      	ldr	r2, [pc, #44]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80084c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	e025      	b.n	8008514 <HAL_RCC_OscConfig+0x29c>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084d0:	d114      	bne.n	80084fc <HAL_RCC_OscConfig+0x284>
 80084d2:	4b06      	ldr	r3, [pc, #24]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a05      	ldr	r2, [pc, #20]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80084d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	4b03      	ldr	r3, [pc, #12]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a02      	ldr	r2, [pc, #8]	@ (80084ec <HAL_RCC_OscConfig+0x274>)
 80084e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	e013      	b.n	8008514 <HAL_RCC_OscConfig+0x29c>
 80084ec:	40021000 	.word	0x40021000
 80084f0:	0800ad7c 	.word	0x0800ad7c
 80084f4:	20000000 	.word	0x20000000
 80084f8:	20000004 	.word	0x20000004
 80084fc:	4b8f      	ldr	r3, [pc, #572]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a8e      	ldr	r2, [pc, #568]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	4b8c      	ldr	r3, [pc, #560]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a8b      	ldr	r2, [pc, #556]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 800850e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d013      	beq.n	8008544 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7fc fa94 	bl	8004a48 <HAL_GetTick>
 8008520:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008524:	f7fc fa90 	bl	8004a48 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b64      	cmp	r3, #100	@ 0x64
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e312      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008536:	4b81      	ldr	r3, [pc, #516]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0f0      	beq.n	8008524 <HAL_RCC_OscConfig+0x2ac>
 8008542:	e014      	b.n	800856e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7fc fa80 	bl	8004a48 <HAL_GetTick>
 8008548:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800854c:	f7fc fa7c 	bl	8004a48 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b64      	cmp	r3, #100	@ 0x64
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e2fe      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800855e:	4b77      	ldr	r3, [pc, #476]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x2d4>
 800856a:	e000      	b.n	800856e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800856c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d060      	beq.n	800863c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	2b04      	cmp	r3, #4
 800857e:	d005      	beq.n	800858c <HAL_RCC_OscConfig+0x314>
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	2b0c      	cmp	r3, #12
 8008584:	d119      	bne.n	80085ba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d116      	bne.n	80085ba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800858c:	4b6b      	ldr	r3, [pc, #428]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <HAL_RCC_OscConfig+0x32c>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e2db      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a4:	4b65      	ldr	r3, [pc, #404]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	061b      	lsls	r3, r3, #24
 80085b2:	4962      	ldr	r1, [pc, #392]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085b8:	e040      	b.n	800863c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d023      	beq.n	800860a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085c2:	4b5e      	ldr	r3, [pc, #376]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a5d      	ldr	r2, [pc, #372]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80085c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ce:	f7fc fa3b 	bl	8004a48 <HAL_GetTick>
 80085d2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085d4:	e008      	b.n	80085e8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085d6:	f7fc fa37 	bl	8004a48 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e2b9      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085e8:	4b54      	ldr	r3, [pc, #336]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0f0      	beq.n	80085d6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f4:	4b51      	ldr	r3, [pc, #324]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	061b      	lsls	r3, r3, #24
 8008602:	494e      	ldr	r1, [pc, #312]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008604:	4313      	orrs	r3, r2
 8008606:	604b      	str	r3, [r1, #4]
 8008608:	e018      	b.n	800863c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800860a:	4b4c      	ldr	r3, [pc, #304]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a4b      	ldr	r2, [pc, #300]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008616:	f7fc fa17 	bl	8004a48 <HAL_GetTick>
 800861a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800861e:	f7fc fa13 	bl	8004a48 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e295      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008630:	4b42      	ldr	r3, [pc, #264]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f0      	bne.n	800861e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8082 	beq.w	800874e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d05f      	beq.n	8008712 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8008652:	4b3a      	ldr	r3, [pc, #232]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008658:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699a      	ldr	r2, [r3, #24]
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	429a      	cmp	r2, r3
 8008666:	d037      	beq.n	80086d8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e26d      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01b      	beq.n	80086c2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800868a:	4b2c      	ldr	r3, [pc, #176]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 800868c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008690:	4a2a      	ldr	r2, [pc, #168]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008692:	f023 0301 	bic.w	r3, r3, #1
 8008696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800869a:	f7fc f9d5 	bl	8004a48 <HAL_GetTick>
 800869e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086a0:	e008      	b.n	80086b4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086a2:	f7fc f9d1 	bl	8004a48 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	2b11      	cmp	r3, #17
 80086ae:	d901      	bls.n	80086b4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e253      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086b4:	4b21      	ldr	r3, [pc, #132]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80086b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1ef      	bne.n	80086a2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80086c2:	4b1e      	ldr	r3, [pc, #120]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80086c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086c8:	f023 0210 	bic.w	r2, r3, #16
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	491a      	ldr	r1, [pc, #104]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086d8:	4b18      	ldr	r3, [pc, #96]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80086da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086de:	4a17      	ldr	r2, [pc, #92]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e8:	f7fc f9ae 	bl	8004a48 <HAL_GetTick>
 80086ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086f0:	f7fc f9aa 	bl	8004a48 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b11      	cmp	r3, #17
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e22c      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008702:	4b0e      	ldr	r3, [pc, #56]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0ef      	beq.n	80086f0 <HAL_RCC_OscConfig+0x478>
 8008710:	e01d      	b.n	800874e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 8008714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008718:	4a08      	ldr	r2, [pc, #32]	@ (800873c <HAL_RCC_OscConfig+0x4c4>)
 800871a:	f023 0301 	bic.w	r3, r3, #1
 800871e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008722:	f7fc f991 	bl	8004a48 <HAL_GetTick>
 8008726:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008728:	e00a      	b.n	8008740 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800872a:	f7fc f98d 	bl	8004a48 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b11      	cmp	r3, #17
 8008736:	d903      	bls.n	8008740 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e20f      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
 800873c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008740:	4b83      	ldr	r3, [pc, #524]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1ed      	bne.n	800872a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0304 	and.w	r3, r3, #4
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 80bd 	beq.w	80088d6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800875c:	2300      	movs	r3, #0
 800875e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008762:	4b7b      	ldr	r3, [pc, #492]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10e      	bne.n	800878c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800876e:	4b78      	ldr	r3, [pc, #480]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008772:	4a77      	ldr	r2, [pc, #476]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008778:	6593      	str	r3, [r2, #88]	@ 0x58
 800877a:	4b75      	ldr	r3, [pc, #468]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 800877c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800877e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008786:	2301      	movs	r3, #1
 8008788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800878c:	4b71      	ldr	r3, [pc, #452]	@ (8008954 <HAL_RCC_OscConfig+0x6dc>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008794:	2b00      	cmp	r3, #0
 8008796:	d118      	bne.n	80087ca <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008798:	4b6e      	ldr	r3, [pc, #440]	@ (8008954 <HAL_RCC_OscConfig+0x6dc>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a6d      	ldr	r2, [pc, #436]	@ (8008954 <HAL_RCC_OscConfig+0x6dc>)
 800879e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087a4:	f7fc f950 	bl	8004a48 <HAL_GetTick>
 80087a8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ac:	f7fc f94c 	bl	8004a48 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e1ce      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087be:	4b65      	ldr	r3, [pc, #404]	@ (8008954 <HAL_RCC_OscConfig+0x6dc>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0f0      	beq.n	80087ac <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d02c      	beq.n	8008830 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80087d6:	4b5e      	ldr	r3, [pc, #376]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80087d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e8:	4959      	ldr	r1, [pc, #356]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d010      	beq.n	800881e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80087fc:	4b54      	ldr	r3, [pc, #336]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008802:	4a53      	ldr	r2, [pc, #332]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008804:	f043 0304 	orr.w	r3, r3, #4
 8008808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800880c:	4b50      	ldr	r3, [pc, #320]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 800880e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008812:	4a4f      	ldr	r2, [pc, #316]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008814:	f043 0301 	orr.w	r3, r3, #1
 8008818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800881c:	e018      	b.n	8008850 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800881e:	4b4c      	ldr	r3, [pc, #304]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008824:	4a4a      	ldr	r2, [pc, #296]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800882e:	e00f      	b.n	8008850 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008830:	4b47      	ldr	r3, [pc, #284]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008836:	4a46      	ldr	r2, [pc, #280]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008838:	f023 0301 	bic.w	r3, r3, #1
 800883c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008840:	4b43      	ldr	r3, [pc, #268]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008846:	4a42      	ldr	r2, [pc, #264]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008848:	f023 0304 	bic.w	r3, r3, #4
 800884c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d016      	beq.n	8008886 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008858:	f7fc f8f6 	bl	8004a48 <HAL_GetTick>
 800885c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800885e:	e00a      	b.n	8008876 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008860:	f7fc f8f2 	bl	8004a48 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800886e:	4293      	cmp	r3, r2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e172      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008876:	4b36      	ldr	r3, [pc, #216]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0ed      	beq.n	8008860 <HAL_RCC_OscConfig+0x5e8>
 8008884:	e01d      	b.n	80088c2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008886:	f7fc f8df 	bl	8004a48 <HAL_GetTick>
 800888a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800888c:	e00a      	b.n	80088a4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800888e:	f7fc f8db 	bl	8004a48 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800889c:	4293      	cmp	r3, r2
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e15b      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80088a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80088a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1ed      	bne.n	800888e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80088b2:	4b27      	ldr	r3, [pc, #156]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80088b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088b8:	4a25      	ldr	r2, [pc, #148]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80088ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d105      	bne.n	80088d6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088ca:	4b21      	ldr	r3, [pc, #132]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80088cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088ce:	4a20      	ldr	r2, [pc, #128]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80088d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d041      	beq.n	8008966 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d01c      	beq.n	8008924 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088ea:	4b19      	ldr	r3, [pc, #100]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80088ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088f0:	4a17      	ldr	r2, [pc, #92]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088fa:	f7fc f8a5 	bl	8004a48 <HAL_GetTick>
 80088fe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008902:	f7fc f8a1 	bl	8004a48 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e123      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008914:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0ef      	beq.n	8008902 <HAL_RCC_OscConfig+0x68a>
 8008922:	e020      	b.n	8008966 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008924:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 8008926:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800892a:	4a09      	ldr	r2, [pc, #36]	@ (8008950 <HAL_RCC_OscConfig+0x6d8>)
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008934:	f7fc f888 	bl	8004a48 <HAL_GetTick>
 8008938:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800893a:	e00d      	b.n	8008958 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800893c:	f7fc f884 	bl	8004a48 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d906      	bls.n	8008958 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e106      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
 800894e:	bf00      	nop
 8008950:	40021000 	.word	0x40021000
 8008954:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008958:	4b82      	ldr	r3, [pc, #520]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 800895a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1ea      	bne.n	800893c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 80f5 	beq.w	8008b5a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008974:	2b02      	cmp	r3, #2
 8008976:	f040 80cb 	bne.w	8008b10 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800897a:	4b7a      	ldr	r3, [pc, #488]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f003 0203 	and.w	r2, r3, #3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898a:	429a      	cmp	r2, r3
 800898c:	d12c      	bne.n	80089e8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008998:	3b01      	subs	r3, #1
 800899a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800899c:	429a      	cmp	r2, r3
 800899e:	d123      	bne.n	80089e8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d11b      	bne.n	80089e8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089bc:	429a      	cmp	r2, r3
 80089be:	d113      	bne.n	80089e8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	3b01      	subs	r3, #1
 80089ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d109      	bne.n	80089e8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	3b01      	subs	r3, #1
 80089e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d06d      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	2b0c      	cmp	r3, #12
 80089ec:	d068      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80089ee:	4b5d      	ldr	r3, [pc, #372]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80089fa:	4b5a      	ldr	r3, [pc, #360]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e0a8      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008a0a:	4b56      	ldr	r3, [pc, #344]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a55      	ldr	r2, [pc, #340]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a16:	f7fc f817 	bl	8004a48 <HAL_GetTick>
 8008a1a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a1c:	e008      	b.n	8008a30 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a1e:	f7fc f813 	bl	8004a48 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e095      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a30:	4b4c      	ldr	r3, [pc, #304]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f0      	bne.n	8008a1e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a3c:	4b49      	ldr	r3, [pc, #292]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	4b49      	ldr	r3, [pc, #292]	@ (8008b68 <HAL_RCC_OscConfig+0x8f0>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a4c:	3a01      	subs	r2, #1
 8008a4e:	0112      	lsls	r2, r2, #4
 8008a50:	4311      	orrs	r1, r2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a56:	0212      	lsls	r2, r2, #8
 8008a58:	4311      	orrs	r1, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008a5e:	0852      	lsrs	r2, r2, #1
 8008a60:	3a01      	subs	r2, #1
 8008a62:	0552      	lsls	r2, r2, #21
 8008a64:	4311      	orrs	r1, r2
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008a6a:	0852      	lsrs	r2, r2, #1
 8008a6c:	3a01      	subs	r2, #1
 8008a6e:	0652      	lsls	r2, r2, #25
 8008a70:	4311      	orrs	r1, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a76:	06d2      	lsls	r2, r2, #27
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	493a      	ldr	r1, [pc, #232]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008a80:	4b38      	ldr	r3, [pc, #224]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a37      	ldr	r2, [pc, #220]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a8c:	4b35      	ldr	r3, [pc, #212]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	4a34      	ldr	r2, [pc, #208]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a98:	f7fb ffd6 	bl	8004a48 <HAL_GetTick>
 8008a9c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa0:	f7fb ffd2 	bl	8004a48 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e054      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0f0      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008abe:	e04c      	b.n	8008b5a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e04b      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ac4:	4b27      	ldr	r3, [pc, #156]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d144      	bne.n	8008b5a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ad0:	4b24      	ldr	r3, [pc, #144]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a23      	ldr	r2, [pc, #140]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008adc:	4b21      	ldr	r3, [pc, #132]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	4a20      	ldr	r2, [pc, #128]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ae8:	f7fb ffae 	bl	8004a48 <HAL_GetTick>
 8008aec:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aee:	e008      	b.n	8008b02 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af0:	f7fb ffaa 	bl	8004a48 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d901      	bls.n	8008b02 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8008afe:	2303      	movs	r3, #3
 8008b00:	e02c      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b02:	4b18      	ldr	r3, [pc, #96]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f0      	beq.n	8008af0 <HAL_RCC_OscConfig+0x878>
 8008b0e:	e024      	b.n	8008b5a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	2b0c      	cmp	r3, #12
 8008b14:	d01f      	beq.n	8008b56 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b16:	4b13      	ldr	r3, [pc, #76]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a12      	ldr	r2, [pc, #72]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008b1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b22:	f7fb ff91 	bl	8004a48 <HAL_GetTick>
 8008b26:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b2a:	f7fb ff8d 	bl	8004a48 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e00f      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b3c:	4b09      	ldr	r3, [pc, #36]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1f0      	bne.n	8008b2a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008b48:	4b06      	ldr	r3, [pc, #24]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	4905      	ldr	r1, [pc, #20]	@ (8008b64 <HAL_RCC_OscConfig+0x8ec>)
 8008b4e:	4b07      	ldr	r3, [pc, #28]	@ (8008b6c <HAL_RCC_OscConfig+0x8f4>)
 8008b50:	4013      	ands	r3, r2
 8008b52:	60cb      	str	r3, [r1, #12]
 8008b54:	e001      	b.n	8008b5a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3728      	adds	r7, #40	@ 0x28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	40021000 	.word	0x40021000
 8008b68:	019d800c 	.word	0x019d800c
 8008b6c:	feeefffc 	.word	0xfeeefffc

08008b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e11d      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b88:	4b90      	ldr	r3, [pc, #576]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d910      	bls.n	8008bb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b96:	4b8d      	ldr	r3, [pc, #564]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f023 020f 	bic.w	r2, r3, #15
 8008b9e:	498b      	ldr	r1, [pc, #556]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ba6:	4b89      	ldr	r3, [pc, #548]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 030f 	and.w	r3, r3, #15
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d001      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e105      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d010      	beq.n	8008be6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	4b81      	ldr	r3, [pc, #516]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d908      	bls.n	8008be6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	497b      	ldr	r1, [pc, #492]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d079      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d11e      	bne.n	8008c38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bfa:	4b75      	ldr	r3, [pc, #468]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0dc      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008c0a:	f000 f9d1 	bl	8008fb0 <RCC_GetSysClockFreqFromPLLSource>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4a70      	ldr	r2, [pc, #448]	@ (8008dd4 <HAL_RCC_ClockConfig+0x264>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d946      	bls.n	8008ca4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008c16:	4b6e      	ldr	r3, [pc, #440]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d140      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c22:	4b6b      	ldr	r3, [pc, #428]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c2a:	4a69      	ldr	r2, [pc, #420]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c32:	2380      	movs	r3, #128	@ 0x80
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e035      	b.n	8008ca4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d107      	bne.n	8008c50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c40:	4b63      	ldr	r3, [pc, #396]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d115      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e0b9      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d107      	bne.n	8008c68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008c58:	4b5d      	ldr	r3, [pc, #372]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d109      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e0ad      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c68:	4b59      	ldr	r3, [pc, #356]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e0a5      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008c78:	f000 f8b4 	bl	8008de4 <HAL_RCC_GetSysClockFreq>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	4a55      	ldr	r2, [pc, #340]	@ (8008dd4 <HAL_RCC_ClockConfig+0x264>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d90f      	bls.n	8008ca4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008c84:	4b52      	ldr	r3, [pc, #328]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c90:	4b4f      	ldr	r3, [pc, #316]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c98:	4a4d      	ldr	r2, [pc, #308]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008ca0:	2380      	movs	r3, #128	@ 0x80
 8008ca2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f023 0203 	bic.w	r2, r3, #3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	4947      	ldr	r1, [pc, #284]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb6:	f7fb fec7 	bl	8004a48 <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cbc:	e00a      	b.n	8008cd4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cbe:	f7fb fec3 	bl	8004a48 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e077      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	f003 020c 	and.w	r2, r3, #12
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d1eb      	bne.n	8008cbe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b80      	cmp	r3, #128	@ 0x80
 8008cea:	d105      	bne.n	8008cf8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008cec:	4b38      	ldr	r3, [pc, #224]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	4a37      	ldr	r2, [pc, #220]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008cf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cf6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689a      	ldr	r2, [r3, #8]
 8008d08:	4b31      	ldr	r3, [pc, #196]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d208      	bcs.n	8008d26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d14:	4b2e      	ldr	r3, [pc, #184]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	492b      	ldr	r1, [pc, #172]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d26:	4b29      	ldr	r3, [pc, #164]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d210      	bcs.n	8008d56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d34:	4b25      	ldr	r3, [pc, #148]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f023 020f 	bic.w	r2, r3, #15
 8008d3c:	4923      	ldr	r1, [pc, #140]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d44:	4b21      	ldr	r3, [pc, #132]	@ (8008dcc <HAL_RCC_ClockConfig+0x25c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 030f 	and.w	r3, r3, #15
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d001      	beq.n	8008d56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e036      	b.n	8008dc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d008      	beq.n	8008d74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d62:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	4918      	ldr	r1, [pc, #96]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d009      	beq.n	8008d94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d80:	4b13      	ldr	r3, [pc, #76]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4910      	ldr	r1, [pc, #64]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d94:	f000 f826 	bl	8008de4 <HAL_RCC_GetSysClockFreq>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd0 <HAL_RCC_ClockConfig+0x260>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	091b      	lsrs	r3, r3, #4
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	490c      	ldr	r1, [pc, #48]	@ (8008dd8 <HAL_RCC_ClockConfig+0x268>)
 8008da6:	5ccb      	ldrb	r3, [r1, r3]
 8008da8:	f003 031f 	and.w	r3, r3, #31
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ddc <HAL_RCC_ClockConfig+0x26c>)
 8008db2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008db4:	4b0a      	ldr	r3, [pc, #40]	@ (8008de0 <HAL_RCC_ClockConfig+0x270>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fb fdf5 	bl	80049a8 <HAL_InitTick>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  return status;
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	40022000 	.word	0x40022000
 8008dd0:	40021000 	.word	0x40021000
 8008dd4:	04c4b400 	.word	0x04c4b400
 8008dd8:	0800ad7c 	.word	0x0800ad7c
 8008ddc:	20000000 	.word	0x20000000
 8008de0:	20000004 	.word	0x20000004

08008de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b089      	sub	sp, #36	@ 0x24
 8008de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	2300      	movs	r3, #0
 8008df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008df2:	4b3e      	ldr	r3, [pc, #248]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f003 030c 	and.w	r3, r3, #12
 8008dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_RCC_GetSysClockFreq+0x34>
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b0c      	cmp	r3, #12
 8008e10:	d121      	bne.n	8008e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d11e      	bne.n	8008e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008e18:	4b34      	ldr	r3, [pc, #208]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d107      	bne.n	8008e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008e24:	4b31      	ldr	r3, [pc, #196]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e2a:	0a1b      	lsrs	r3, r3, #8
 8008e2c:	f003 030f 	and.w	r3, r3, #15
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	e005      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008e34:	4b2d      	ldr	r3, [pc, #180]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	091b      	lsrs	r3, r3, #4
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008e40:	4a2b      	ldr	r2, [pc, #172]	@ (8008ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10d      	bne.n	8008e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e54:	e00a      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d102      	bne.n	8008e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e5c:	4b25      	ldr	r3, [pc, #148]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8008e5e:	61bb      	str	r3, [r7, #24]
 8008e60:	e004      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b08      	cmp	r3, #8
 8008e66:	d101      	bne.n	8008e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e68:	4b23      	ldr	r3, [pc, #140]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b0c      	cmp	r3, #12
 8008e70:	d134      	bne.n	8008edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e72:	4b1e      	ldr	r3, [pc, #120]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d003      	beq.n	8008e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d003      	beq.n	8008e90 <HAL_RCC_GetSysClockFreq+0xac>
 8008e88:	e005      	b.n	8008e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8008e8c:	617b      	str	r3, [r7, #20]
      break;
 8008e8e:	e005      	b.n	8008e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008e90:	4b19      	ldr	r3, [pc, #100]	@ (8008ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e92:	617b      	str	r3, [r7, #20]
      break;
 8008e94:	e002      	b.n	8008e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	617b      	str	r3, [r7, #20]
      break;
 8008e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e9c:	4b13      	ldr	r3, [pc, #76]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	091b      	lsrs	r3, r3, #4
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008eaa:	4b10      	ldr	r3, [pc, #64]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	fb03 f202 	mul.w	r2, r3, r2
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8008eec <HAL_RCC_GetSysClockFreq+0x108>)
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	0e5b      	lsrs	r3, r3, #25
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	3301      	adds	r3, #1
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008edc:	69bb      	ldr	r3, [r7, #24]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3724      	adds	r7, #36	@ 0x24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	0800ad8c 	.word	0x0800ad8c
 8008ef4:	00f42400 	.word	0x00f42400
 8008ef8:	007a1200 	.word	0x007a1200

08008efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008f04:	2300      	movs	r3, #0
 8008f06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008f08:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008f14:	f7ff f8ec 	bl	80080f0 <HAL_PWREx_GetVoltageRange>
 8008f18:	6178      	str	r0, [r7, #20]
 8008f1a:	e014      	b.n	8008f46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f1c:	4b22      	ldr	r3, [pc, #136]	@ (8008fa8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f20:	4a21      	ldr	r2, [pc, #132]	@ (8008fa8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f28:	4b1f      	ldr	r3, [pc, #124]	@ (8008fa8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008f34:	f7ff f8dc 	bl	80080f0 <HAL_PWREx_GetVoltageRange>
 8008f38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8008fa8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f4c:	d10b      	bne.n	8008f66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b80      	cmp	r3, #128	@ 0x80
 8008f52:	d913      	bls.n	8008f7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2ba0      	cmp	r3, #160	@ 0xa0
 8008f58:	d902      	bls.n	8008f60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	e00d      	b.n	8008f7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f60:	2301      	movs	r3, #1
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	e00a      	b.n	8008f7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f6a:	d902      	bls.n	8008f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e004      	b.n	8008f7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b70      	cmp	r3, #112	@ 0x70
 8008f76:	d101      	bne.n	8008f7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f78:	2301      	movs	r3, #1
 8008f7a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f023 020f 	bic.w	r2, r3, #15
 8008f84:	4909      	ldr	r1, [pc, #36]	@ (8008fac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008f8c:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d001      	beq.n	8008f9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	40022000 	.word	0x40022000

08008fb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800906c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d00b      	beq.n	8008fde <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d825      	bhi.n	8009018 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d008      	beq.n	8008fe4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d11f      	bne.n	8009018 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008fd8:	4b25      	ldr	r3, [pc, #148]	@ (8009070 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008fda:	613b      	str	r3, [r7, #16]
    break;
 8008fdc:	e01f      	b.n	800901e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008fde:	4b25      	ldr	r3, [pc, #148]	@ (8009074 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008fe0:	613b      	str	r3, [r7, #16]
    break;
 8008fe2:	e01c      	b.n	800901e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008fe4:	4b21      	ldr	r3, [pc, #132]	@ (800906c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d107      	bne.n	8009000 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800906c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e005      	b.n	800900c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009000:	4b1a      	ldr	r3, [pc, #104]	@ (800906c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	091b      	lsrs	r3, r3, #4
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800900c:	4a1a      	ldr	r2, [pc, #104]	@ (8009078 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009014:	613b      	str	r3, [r7, #16]
    break;
 8009016:	e002      	b.n	800901e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009018:	2300      	movs	r3, #0
 800901a:	613b      	str	r3, [r7, #16]
    break;
 800901c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800901e:	4b13      	ldr	r3, [pc, #76]	@ (800906c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	091b      	lsrs	r3, r3, #4
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	3301      	adds	r3, #1
 800902a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800902c:	4b0f      	ldr	r3, [pc, #60]	@ (800906c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	fb03 f202 	mul.w	r2, r3, r2
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009042:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009044:	4b09      	ldr	r3, [pc, #36]	@ (800906c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	0e5b      	lsrs	r3, r3, #25
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	3301      	adds	r3, #1
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	fbb2 f3f3 	udiv	r3, r2, r3
 800905c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800905e:	683b      	ldr	r3, [r7, #0]
}
 8009060:	4618      	mov	r0, r3
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	40021000 	.word	0x40021000
 8009070:	00f42400 	.word	0x00f42400
 8009074:	007a1200 	.word	0x007a1200
 8009078:	0800ad8c 	.word	0x0800ad8c

0800907c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009084:	2300      	movs	r3, #0
 8009086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009088:	2300      	movs	r3, #0
 800908a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009094:	2b00      	cmp	r3, #0
 8009096:	d040      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800909c:	2b80      	cmp	r3, #128	@ 0x80
 800909e:	d02a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80090a0:	2b80      	cmp	r3, #128	@ 0x80
 80090a2:	d825      	bhi.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80090a4:	2b60      	cmp	r3, #96	@ 0x60
 80090a6:	d026      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80090a8:	2b60      	cmp	r3, #96	@ 0x60
 80090aa:	d821      	bhi.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80090ac:	2b40      	cmp	r3, #64	@ 0x40
 80090ae:	d006      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x42>
 80090b0:	2b40      	cmp	r3, #64	@ 0x40
 80090b2:	d81d      	bhi.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80090b8:	2b20      	cmp	r3, #32
 80090ba:	d010      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x62>
 80090bc:	e018      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80090be:	4b89      	ldr	r3, [pc, #548]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	4a88      	ldr	r2, [pc, #544]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090c8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090ca:	e015      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3304      	adds	r3, #4
 80090d0:	2100      	movs	r1, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fb3e 	bl	8009754 <RCCEx_PLLSAI1_Config>
 80090d8:	4603      	mov	r3, r0
 80090da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090dc:	e00c      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3320      	adds	r3, #32
 80090e2:	2100      	movs	r1, #0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fc29 	bl	800993c <RCCEx_PLLSAI2_Config>
 80090ea:	4603      	mov	r3, r0
 80090ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090ee:	e003      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	74fb      	strb	r3, [r7, #19]
      break;
 80090f4:	e000      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80090f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f8:	7cfb      	ldrb	r3, [r7, #19]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090fe:	4b79      	ldr	r3, [pc, #484]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009100:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009104:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800910c:	4975      	ldr	r1, [pc, #468]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800910e:	4313      	orrs	r3, r2
 8009110:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8009114:	e001      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009116:	7cfb      	ldrb	r3, [r7, #19]
 8009118:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d047      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800912a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800912e:	d030      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009134:	d82a      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800913a:	d02a      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800913c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009140:	d824      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009146:	d008      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800914c:	d81e      	bhi.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009156:	d010      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009158:	e018      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800915a:	4b62      	ldr	r3, [pc, #392]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	4a61      	ldr	r2, [pc, #388]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009164:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009166:	e015      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3304      	adds	r3, #4
 800916c:	2100      	movs	r1, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f000 faf0 	bl	8009754 <RCCEx_PLLSAI1_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009178:	e00c      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3320      	adds	r3, #32
 800917e:	2100      	movs	r1, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fbdb 	bl	800993c <RCCEx_PLLSAI2_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800918a:	e003      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	74fb      	strb	r3, [r7, #19]
      break;
 8009190:	e000      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009194:	7cfb      	ldrb	r3, [r7, #19]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800919a:	4b52      	ldr	r3, [pc, #328]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800919c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091a8:	494e      	ldr	r1, [pc, #312]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80091b0:	e001      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b2:	7cfb      	ldrb	r3, [r7, #19]
 80091b4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 809f 	beq.w	8009302 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091c4:	2300      	movs	r3, #0
 80091c6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091c8:	4b46      	ldr	r3, [pc, #280]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80091d8:	2300      	movs	r3, #0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00d      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091de:	4b41      	ldr	r3, [pc, #260]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e2:	4a40      	ldr	r2, [pc, #256]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80091ea:	4b3e      	ldr	r3, [pc, #248]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091f2:	60bb      	str	r3, [r7, #8]
 80091f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091f6:	2301      	movs	r3, #1
 80091f8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091fa:	4b3b      	ldr	r3, [pc, #236]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a3a      	ldr	r2, [pc, #232]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009206:	f7fb fc1f 	bl	8004a48 <HAL_GetTick>
 800920a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800920c:	e009      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920e:	f7fb fc1b 	bl	8004a48 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d902      	bls.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	74fb      	strb	r3, [r7, #19]
        break;
 8009220:	e005      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009222:	4b31      	ldr	r3, [pc, #196]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0ef      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800922e:	7cfb      	ldrb	r3, [r7, #19]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d15b      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009234:	4b2b      	ldr	r3, [pc, #172]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800923e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d01f      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	429a      	cmp	r2, r3
 8009250:	d019      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009252:	4b24      	ldr	r3, [pc, #144]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800925c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800925e:	4b21      	ldr	r3, [pc, #132]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009264:	4a1f      	ldr	r2, [pc, #124]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800926a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800926e:	4b1d      	ldr	r3, [pc, #116]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009274:	4a1b      	ldr	r2, [pc, #108]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800927a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800927e:	4a19      	ldr	r2, [pc, #100]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	d016      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009290:	f7fb fbda 	bl	8004a48 <HAL_GetTick>
 8009294:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009296:	e00b      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009298:	f7fb fbd6 	bl	8004a48 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d902      	bls.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	74fb      	strb	r3, [r7, #19]
            break;
 80092ae:	e006      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092b0:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0ec      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80092be:	7cfb      	ldrb	r3, [r7, #19]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10c      	bne.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092c4:	4b07      	ldr	r3, [pc, #28]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092d4:	4903      	ldr	r1, [pc, #12]	@ (80092e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80092dc:	e008      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092de:	7cfb      	ldrb	r3, [r7, #19]
 80092e0:	74bb      	strb	r3, [r7, #18]
 80092e2:	e005      	b.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80092e4:	40021000 	.word	0x40021000
 80092e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	7cfb      	ldrb	r3, [r7, #19]
 80092ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092f0:	7c7b      	ldrb	r3, [r7, #17]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d105      	bne.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092f6:	4ba0      	ldr	r3, [pc, #640]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fa:	4a9f      	ldr	r2, [pc, #636]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009300:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00a      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800930e:	4b9a      	ldr	r3, [pc, #616]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009314:	f023 0203 	bic.w	r2, r3, #3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800931c:	4996      	ldr	r1, [pc, #600]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800931e:	4313      	orrs	r3, r2
 8009320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00a      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009330:	4b91      	ldr	r3, [pc, #580]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009336:	f023 020c 	bic.w	r2, r3, #12
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933e:	498e      	ldr	r1, [pc, #568]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009340:	4313      	orrs	r3, r2
 8009342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0304 	and.w	r3, r3, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00a      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009352:	4b89      	ldr	r3, [pc, #548]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009358:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009360:	4985      	ldr	r1, [pc, #532]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009362:	4313      	orrs	r3, r2
 8009364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0308 	and.w	r3, r3, #8
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00a      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009374:	4b80      	ldr	r3, [pc, #512]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800937a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009382:	497d      	ldr	r1, [pc, #500]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009384:	4313      	orrs	r3, r2
 8009386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0310 	and.w	r3, r3, #16
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009396:	4b78      	ldr	r3, [pc, #480]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093a4:	4974      	ldr	r1, [pc, #464]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00a      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093b8:	4b6f      	ldr	r3, [pc, #444]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c6:	496c      	ldr	r1, [pc, #432]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093da:	4b67      	ldr	r3, [pc, #412]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093e8:	4963      	ldr	r1, [pc, #396]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00a      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093fc:	4b5e      	ldr	r3, [pc, #376]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009402:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800940a:	495b      	ldr	r1, [pc, #364]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800940c:	4313      	orrs	r3, r2
 800940e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800941e:	4b56      	ldr	r3, [pc, #344]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009424:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800942c:	4952      	ldr	r1, [pc, #328]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800942e:	4313      	orrs	r3, r2
 8009430:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00a      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009440:	4b4d      	ldr	r3, [pc, #308]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009446:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800944e:	494a      	ldr	r1, [pc, #296]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009450:	4313      	orrs	r3, r2
 8009452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009462:	4b45      	ldr	r3, [pc, #276]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009468:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009470:	4941      	ldr	r1, [pc, #260]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009472:	4313      	orrs	r3, r2
 8009474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009484:	4b3c      	ldr	r3, [pc, #240]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800948a:	f023 0203 	bic.w	r2, r3, #3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009492:	4939      	ldr	r1, [pc, #228]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009494:	4313      	orrs	r3, r2
 8009496:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d028      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094a6:	4b34      	ldr	r3, [pc, #208]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b4:	4930      	ldr	r1, [pc, #192]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094c4:	d106      	bne.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094c6:	4b2c      	ldr	r3, [pc, #176]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	4a2b      	ldr	r2, [pc, #172]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094d0:	60d3      	str	r3, [r2, #12]
 80094d2:	e011      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094dc:	d10c      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3304      	adds	r3, #4
 80094e2:	2101      	movs	r1, #1
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 f935 	bl	8009754 <RCCEx_PLLSAI1_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80094ee:	7cfb      	ldrb	r3, [r7, #19]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80094f4:	7cfb      	ldrb	r3, [r7, #19]
 80094f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d04d      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800950c:	d108      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800950e:	4b1a      	ldr	r3, [pc, #104]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009510:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009514:	4a18      	ldr	r2, [pc, #96]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800951a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800951e:	e012      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009520:	4b15      	ldr	r3, [pc, #84]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009526:	4a14      	ldr	r2, [pc, #80]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009528:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800952c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8009530:	4b11      	ldr	r3, [pc, #68]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009536:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800953e:	490e      	ldr	r1, [pc, #56]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009540:	4313      	orrs	r3, r2
 8009542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800954a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800954e:	d106      	bne.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009550:	4b09      	ldr	r3, [pc, #36]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	4a08      	ldr	r2, [pc, #32]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800955a:	60d3      	str	r3, [r2, #12]
 800955c:	e020      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009566:	d109      	bne.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009568:	4b03      	ldr	r3, [pc, #12]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	4a02      	ldr	r2, [pc, #8]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800956e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009572:	60d3      	str	r3, [r2, #12]
 8009574:	e014      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009576:	bf00      	nop
 8009578:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009580:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009584:	d10c      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3304      	adds	r3, #4
 800958a:	2101      	movs	r1, #1
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f8e1 	bl	8009754 <RCCEx_PLLSAI1_Config>
 8009592:	4603      	mov	r3, r0
 8009594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009596:	7cfb      	ldrb	r3, [r7, #19]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800959c:	7cfb      	ldrb	r3, [r7, #19]
 800959e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d028      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095ac:	4b68      	ldr	r3, [pc, #416]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095ba:	4965      	ldr	r1, [pc, #404]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095ca:	d106      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095cc:	4b60      	ldr	r3, [pc, #384]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	4a5f      	ldr	r2, [pc, #380]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80095d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095d6:	60d3      	str	r3, [r2, #12]
 80095d8:	e011      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095e2:	d10c      	bne.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	2101      	movs	r1, #1
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 f8b2 	bl	8009754 <RCCEx_PLLSAI1_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095f4:	7cfb      	ldrb	r3, [r7, #19]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80095fa:	7cfb      	ldrb	r3, [r7, #19]
 80095fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01e      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800960a:	4b51      	ldr	r3, [pc, #324]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800960c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009610:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800961a:	494d      	ldr	r1, [pc, #308]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800961c:	4313      	orrs	r3, r2
 800961e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800962c:	d10c      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3304      	adds	r3, #4
 8009632:	2102      	movs	r1, #2
 8009634:	4618      	mov	r0, r3
 8009636:	f000 f88d 	bl	8009754 <RCCEx_PLLSAI1_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800963e:	7cfb      	ldrb	r3, [r7, #19]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009644:	7cfb      	ldrb	r3, [r7, #19]
 8009646:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009654:	4b3e      	ldr	r3, [pc, #248]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800965a:	f023 0204 	bic.w	r2, r3, #4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009664:	493a      	ldr	r1, [pc, #232]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009666:	4313      	orrs	r3, r2
 8009668:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009678:	4b35      	ldr	r3, [pc, #212]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800967a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800967e:	f023 0218 	bic.w	r2, r3, #24
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009688:	4931      	ldr	r1, [pc, #196]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d035      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800969c:	4b2c      	ldr	r3, [pc, #176]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a2b      	ldr	r2, [pc, #172]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096a8:	f7fb f9ce 	bl	8004a48 <HAL_GetTick>
 80096ac:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80096ae:	e009      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80096b0:	f7fb f9ca 	bl	8004a48 <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d902      	bls.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	74fb      	strb	r3, [r7, #19]
        break;
 80096c2:	e005      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80096c4:	4b22      	ldr	r3, [pc, #136]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1ef      	bne.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80096d0:	7cfb      	ldrb	r3, [r7, #19]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d113      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80096d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096e6:	491a      	ldr	r1, [pc, #104]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3320      	adds	r3, #32
 80096f2:	2102      	movs	r1, #2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f921 	bl	800993c <RCCEx_PLLSAI2_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80096fe:	7cfb      	ldrb	r3, [r7, #19]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8009704:	7cfb      	ldrb	r3, [r7, #19]
 8009706:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d017      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009714:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009716:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800971a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009724:	490a      	ldr	r1, [pc, #40]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009726:	4313      	orrs	r3, r2
 8009728:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009736:	d105      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009738:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	4a04      	ldr	r2, [pc, #16]	@ (8009750 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800973e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009742:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009744:	7cbb      	ldrb	r3, [r7, #18]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	40021000 	.word	0x40021000

08009754 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009762:	4b72      	ldr	r3, [pc, #456]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00e      	beq.n	800978c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800976e:	4b6f      	ldr	r3, [pc, #444]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f003 0203 	and.w	r2, r3, #3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	429a      	cmp	r2, r3
 800977c:	d103      	bne.n	8009786 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
       ||
 8009782:	2b00      	cmp	r3, #0
 8009784:	d142      	bne.n	800980c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	73fb      	strb	r3, [r7, #15]
 800978a:	e03f      	b.n	800980c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b03      	cmp	r3, #3
 8009792:	d018      	beq.n	80097c6 <RCCEx_PLLSAI1_Config+0x72>
 8009794:	2b03      	cmp	r3, #3
 8009796:	d825      	bhi.n	80097e4 <RCCEx_PLLSAI1_Config+0x90>
 8009798:	2b01      	cmp	r3, #1
 800979a:	d002      	beq.n	80097a2 <RCCEx_PLLSAI1_Config+0x4e>
 800979c:	2b02      	cmp	r3, #2
 800979e:	d009      	beq.n	80097b4 <RCCEx_PLLSAI1_Config+0x60>
 80097a0:	e020      	b.n	80097e4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80097a2:	4b62      	ldr	r3, [pc, #392]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d11d      	bne.n	80097ea <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097b2:	e01a      	b.n	80097ea <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80097b4:	4b5d      	ldr	r3, [pc, #372]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d116      	bne.n	80097ee <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097c4:	e013      	b.n	80097ee <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80097c6:	4b59      	ldr	r3, [pc, #356]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10f      	bne.n	80097f2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80097d2:	4b56      	ldr	r3, [pc, #344]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097e2:	e006      	b.n	80097f2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	73fb      	strb	r3, [r7, #15]
      break;
 80097e8:	e004      	b.n	80097f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80097ea:	bf00      	nop
 80097ec:	e002      	b.n	80097f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80097ee:	bf00      	nop
 80097f0:	e000      	b.n	80097f4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80097f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d108      	bne.n	800980c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80097fa:	4b4c      	ldr	r3, [pc, #304]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f023 0203 	bic.w	r2, r3, #3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4949      	ldr	r1, [pc, #292]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009808:	4313      	orrs	r3, r2
 800980a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 8086 	bne.w	8009920 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009814:	4b45      	ldr	r3, [pc, #276]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a44      	ldr	r2, [pc, #272]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 800981a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800981e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009820:	f7fb f912 	bl	8004a48 <HAL_GetTick>
 8009824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009826:	e009      	b.n	800983c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009828:	f7fb f90e 	bl	8004a48 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b02      	cmp	r3, #2
 8009834:	d902      	bls.n	800983c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	73fb      	strb	r3, [r7, #15]
        break;
 800983a:	e005      	b.n	8009848 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800983c:	4b3b      	ldr	r3, [pc, #236]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1ef      	bne.n	8009828 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d168      	bne.n	8009920 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d113      	bne.n	800987c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009854:	4b35      	ldr	r3, [pc, #212]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009856:	691a      	ldr	r2, [r3, #16]
 8009858:	4b35      	ldr	r3, [pc, #212]	@ (8009930 <RCCEx_PLLSAI1_Config+0x1dc>)
 800985a:	4013      	ands	r3, r2
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6892      	ldr	r2, [r2, #8]
 8009860:	0211      	lsls	r1, r2, #8
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	68d2      	ldr	r2, [r2, #12]
 8009866:	06d2      	lsls	r2, r2, #27
 8009868:	4311      	orrs	r1, r2
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6852      	ldr	r2, [r2, #4]
 800986e:	3a01      	subs	r2, #1
 8009870:	0112      	lsls	r2, r2, #4
 8009872:	430a      	orrs	r2, r1
 8009874:	492d      	ldr	r1, [pc, #180]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009876:	4313      	orrs	r3, r2
 8009878:	610b      	str	r3, [r1, #16]
 800987a:	e02d      	b.n	80098d8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d115      	bne.n	80098ae <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009882:	4b2a      	ldr	r3, [pc, #168]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	4b2b      	ldr	r3, [pc, #172]	@ (8009934 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009888:	4013      	ands	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6892      	ldr	r2, [r2, #8]
 800988e:	0211      	lsls	r1, r2, #8
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6912      	ldr	r2, [r2, #16]
 8009894:	0852      	lsrs	r2, r2, #1
 8009896:	3a01      	subs	r2, #1
 8009898:	0552      	lsls	r2, r2, #21
 800989a:	4311      	orrs	r1, r2
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6852      	ldr	r2, [r2, #4]
 80098a0:	3a01      	subs	r2, #1
 80098a2:	0112      	lsls	r2, r2, #4
 80098a4:	430a      	orrs	r2, r1
 80098a6:	4921      	ldr	r1, [pc, #132]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	610b      	str	r3, [r1, #16]
 80098ac:	e014      	b.n	80098d8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098ae:	4b1f      	ldr	r3, [pc, #124]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80098b0:	691a      	ldr	r2, [r3, #16]
 80098b2:	4b21      	ldr	r3, [pc, #132]	@ (8009938 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	6892      	ldr	r2, [r2, #8]
 80098ba:	0211      	lsls	r1, r2, #8
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	6952      	ldr	r2, [r2, #20]
 80098c0:	0852      	lsrs	r2, r2, #1
 80098c2:	3a01      	subs	r2, #1
 80098c4:	0652      	lsls	r2, r2, #25
 80098c6:	4311      	orrs	r1, r2
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6852      	ldr	r2, [r2, #4]
 80098cc:	3a01      	subs	r2, #1
 80098ce:	0112      	lsls	r2, r2, #4
 80098d0:	430a      	orrs	r2, r1
 80098d2:	4916      	ldr	r1, [pc, #88]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80098d8:	4b14      	ldr	r3, [pc, #80]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a13      	ldr	r2, [pc, #76]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 80098de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098e4:	f7fb f8b0 	bl	8004a48 <HAL_GetTick>
 80098e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80098ea:	e009      	b.n	8009900 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098ec:	f7fb f8ac 	bl	8004a48 <HAL_GetTick>
 80098f0:	4602      	mov	r2, r0
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d902      	bls.n	8009900 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	73fb      	strb	r3, [r7, #15]
          break;
 80098fe:	e005      	b.n	800990c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d0ef      	beq.n	80098ec <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009912:	4b06      	ldr	r3, [pc, #24]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 8009914:	691a      	ldr	r2, [r3, #16]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	4904      	ldr	r1, [pc, #16]	@ (800992c <RCCEx_PLLSAI1_Config+0x1d8>)
 800991c:	4313      	orrs	r3, r2
 800991e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	40021000 	.word	0x40021000
 8009930:	07ff800f 	.word	0x07ff800f
 8009934:	ff9f800f 	.word	0xff9f800f
 8009938:	f9ff800f 	.word	0xf9ff800f

0800993c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800994a:	4b72      	ldr	r3, [pc, #456]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00e      	beq.n	8009974 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009956:	4b6f      	ldr	r3, [pc, #444]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	f003 0203 	and.w	r2, r3, #3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	429a      	cmp	r2, r3
 8009964:	d103      	bne.n	800996e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
       ||
 800996a:	2b00      	cmp	r3, #0
 800996c:	d142      	bne.n	80099f4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	73fb      	strb	r3, [r7, #15]
 8009972:	e03f      	b.n	80099f4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b03      	cmp	r3, #3
 800997a:	d018      	beq.n	80099ae <RCCEx_PLLSAI2_Config+0x72>
 800997c:	2b03      	cmp	r3, #3
 800997e:	d825      	bhi.n	80099cc <RCCEx_PLLSAI2_Config+0x90>
 8009980:	2b01      	cmp	r3, #1
 8009982:	d002      	beq.n	800998a <RCCEx_PLLSAI2_Config+0x4e>
 8009984:	2b02      	cmp	r3, #2
 8009986:	d009      	beq.n	800999c <RCCEx_PLLSAI2_Config+0x60>
 8009988:	e020      	b.n	80099cc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800998a:	4b62      	ldr	r3, [pc, #392]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0302 	and.w	r3, r3, #2
 8009992:	2b00      	cmp	r3, #0
 8009994:	d11d      	bne.n	80099d2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800999a:	e01a      	b.n	80099d2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800999c:	4b5d      	ldr	r3, [pc, #372]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d116      	bne.n	80099d6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099ac:	e013      	b.n	80099d6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80099ae:	4b59      	ldr	r3, [pc, #356]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10f      	bne.n	80099da <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80099ba:	4b56      	ldr	r3, [pc, #344]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099ca:	e006      	b.n	80099da <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
      break;
 80099d0:	e004      	b.n	80099dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80099d2:	bf00      	nop
 80099d4:	e002      	b.n	80099dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80099d6:	bf00      	nop
 80099d8:	e000      	b.n	80099dc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80099da:	bf00      	nop
    }

    if(status == HAL_OK)
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d108      	bne.n	80099f4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80099e2:	4b4c      	ldr	r3, [pc, #304]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f023 0203 	bic.w	r2, r3, #3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4949      	ldr	r1, [pc, #292]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f040 8086 	bne.w	8009b08 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80099fc:	4b45      	ldr	r3, [pc, #276]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a44      	ldr	r2, [pc, #272]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a08:	f7fb f81e 	bl	8004a48 <HAL_GetTick>
 8009a0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a0e:	e009      	b.n	8009a24 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a10:	f7fb f81a 	bl	8004a48 <HAL_GetTick>
 8009a14:	4602      	mov	r2, r0
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d902      	bls.n	8009a24 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	73fb      	strb	r3, [r7, #15]
        break;
 8009a22:	e005      	b.n	8009a30 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a24:	4b3b      	ldr	r3, [pc, #236]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1ef      	bne.n	8009a10 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d168      	bne.n	8009b08 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d113      	bne.n	8009a64 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a3c:	4b35      	ldr	r3, [pc, #212]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a3e:	695a      	ldr	r2, [r3, #20]
 8009a40:	4b35      	ldr	r3, [pc, #212]	@ (8009b18 <RCCEx_PLLSAI2_Config+0x1dc>)
 8009a42:	4013      	ands	r3, r2
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6892      	ldr	r2, [r2, #8]
 8009a48:	0211      	lsls	r1, r2, #8
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68d2      	ldr	r2, [r2, #12]
 8009a4e:	06d2      	lsls	r2, r2, #27
 8009a50:	4311      	orrs	r1, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6852      	ldr	r2, [r2, #4]
 8009a56:	3a01      	subs	r2, #1
 8009a58:	0112      	lsls	r2, r2, #4
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	492d      	ldr	r1, [pc, #180]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	614b      	str	r3, [r1, #20]
 8009a62:	e02d      	b.n	8009ac0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d115      	bne.n	8009a96 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a6c:	695a      	ldr	r2, [r3, #20]
 8009a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8009b1c <RCCEx_PLLSAI2_Config+0x1e0>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6892      	ldr	r2, [r2, #8]
 8009a76:	0211      	lsls	r1, r2, #8
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6912      	ldr	r2, [r2, #16]
 8009a7c:	0852      	lsrs	r2, r2, #1
 8009a7e:	3a01      	subs	r2, #1
 8009a80:	0552      	lsls	r2, r2, #21
 8009a82:	4311      	orrs	r1, r2
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	6852      	ldr	r2, [r2, #4]
 8009a88:	3a01      	subs	r2, #1
 8009a8a:	0112      	lsls	r2, r2, #4
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	4921      	ldr	r1, [pc, #132]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	614b      	str	r3, [r1, #20]
 8009a94:	e014      	b.n	8009ac0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a96:	4b1f      	ldr	r3, [pc, #124]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a98:	695a      	ldr	r2, [r3, #20]
 8009a9a:	4b21      	ldr	r3, [pc, #132]	@ (8009b20 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6892      	ldr	r2, [r2, #8]
 8009aa2:	0211      	lsls	r1, r2, #8
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6952      	ldr	r2, [r2, #20]
 8009aa8:	0852      	lsrs	r2, r2, #1
 8009aaa:	3a01      	subs	r2, #1
 8009aac:	0652      	lsls	r2, r2, #25
 8009aae:	4311      	orrs	r1, r2
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	6852      	ldr	r2, [r2, #4]
 8009ab4:	3a01      	subs	r2, #1
 8009ab6:	0112      	lsls	r2, r2, #4
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	4916      	ldr	r1, [pc, #88]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009abc:	4313      	orrs	r3, r2
 8009abe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009ac0:	4b14      	ldr	r3, [pc, #80]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a13      	ldr	r2, [pc, #76]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009acc:	f7fa ffbc 	bl	8004a48 <HAL_GetTick>
 8009ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009ad2:	e009      	b.n	8009ae8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009ad4:	f7fa ffb8 	bl	8004a48 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d902      	bls.n	8009ae8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8009ae6:	e005      	b.n	8009af4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0ef      	beq.n	8009ad4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d106      	bne.n	8009b08 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009afa:	4b06      	ldr	r3, [pc, #24]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009afc:	695a      	ldr	r2, [r3, #20]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	4904      	ldr	r1, [pc, #16]	@ (8009b14 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	40021000 	.word	0x40021000
 8009b18:	07ff800f 	.word	0x07ff800f
 8009b1c:	ff9f800f 	.word	0xff9f800f
 8009b20:	f9ff800f 	.word	0xf9ff800f

08009b24 <std>:
 8009b24:	2300      	movs	r3, #0
 8009b26:	b510      	push	{r4, lr}
 8009b28:	4604      	mov	r4, r0
 8009b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b32:	6083      	str	r3, [r0, #8]
 8009b34:	8181      	strh	r1, [r0, #12]
 8009b36:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b38:	81c2      	strh	r2, [r0, #14]
 8009b3a:	6183      	str	r3, [r0, #24]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	2208      	movs	r2, #8
 8009b40:	305c      	adds	r0, #92	@ 0x5c
 8009b42:	f000 fa01 	bl	8009f48 <memset>
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <std+0x58>)
 8009b48:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b80 <std+0x5c>)
 8009b4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b84 <std+0x60>)
 8009b50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b52:	4b0d      	ldr	r3, [pc, #52]	@ (8009b88 <std+0x64>)
 8009b54:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b56:	4b0d      	ldr	r3, [pc, #52]	@ (8009b8c <std+0x68>)
 8009b58:	6224      	str	r4, [r4, #32]
 8009b5a:	429c      	cmp	r4, r3
 8009b5c:	d006      	beq.n	8009b6c <std+0x48>
 8009b5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b62:	4294      	cmp	r4, r2
 8009b64:	d002      	beq.n	8009b6c <std+0x48>
 8009b66:	33d0      	adds	r3, #208	@ 0xd0
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	d105      	bne.n	8009b78 <std+0x54>
 8009b6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b74:	f000 ba80 	b.w	800a078 <__retarget_lock_init_recursive>
 8009b78:	bd10      	pop	{r4, pc}
 8009b7a:	bf00      	nop
 8009b7c:	08009d99 	.word	0x08009d99
 8009b80:	08009dbb 	.word	0x08009dbb
 8009b84:	08009df3 	.word	0x08009df3
 8009b88:	08009e17 	.word	0x08009e17
 8009b8c:	200005b0 	.word	0x200005b0

08009b90 <stdio_exit_handler>:
 8009b90:	4a02      	ldr	r2, [pc, #8]	@ (8009b9c <stdio_exit_handler+0xc>)
 8009b92:	4903      	ldr	r1, [pc, #12]	@ (8009ba0 <stdio_exit_handler+0x10>)
 8009b94:	4803      	ldr	r0, [pc, #12]	@ (8009ba4 <stdio_exit_handler+0x14>)
 8009b96:	f000 b869 	b.w	8009c6c <_fwalk_sglue>
 8009b9a:	bf00      	nop
 8009b9c:	2000000c 	.word	0x2000000c
 8009ba0:	0800a935 	.word	0x0800a935
 8009ba4:	2000001c 	.word	0x2000001c

08009ba8 <cleanup_stdio>:
 8009ba8:	6841      	ldr	r1, [r0, #4]
 8009baa:	4b0c      	ldr	r3, [pc, #48]	@ (8009bdc <cleanup_stdio+0x34>)
 8009bac:	4299      	cmp	r1, r3
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	d001      	beq.n	8009bb8 <cleanup_stdio+0x10>
 8009bb4:	f000 febe 	bl	800a934 <_fflush_r>
 8009bb8:	68a1      	ldr	r1, [r4, #8]
 8009bba:	4b09      	ldr	r3, [pc, #36]	@ (8009be0 <cleanup_stdio+0x38>)
 8009bbc:	4299      	cmp	r1, r3
 8009bbe:	d002      	beq.n	8009bc6 <cleanup_stdio+0x1e>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 feb7 	bl	800a934 <_fflush_r>
 8009bc6:	68e1      	ldr	r1, [r4, #12]
 8009bc8:	4b06      	ldr	r3, [pc, #24]	@ (8009be4 <cleanup_stdio+0x3c>)
 8009bca:	4299      	cmp	r1, r3
 8009bcc:	d004      	beq.n	8009bd8 <cleanup_stdio+0x30>
 8009bce:	4620      	mov	r0, r4
 8009bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd4:	f000 beae 	b.w	800a934 <_fflush_r>
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	bf00      	nop
 8009bdc:	200005b0 	.word	0x200005b0
 8009be0:	20000618 	.word	0x20000618
 8009be4:	20000680 	.word	0x20000680

08009be8 <global_stdio_init.part.0>:
 8009be8:	b510      	push	{r4, lr}
 8009bea:	4b0b      	ldr	r3, [pc, #44]	@ (8009c18 <global_stdio_init.part.0+0x30>)
 8009bec:	4c0b      	ldr	r4, [pc, #44]	@ (8009c1c <global_stdio_init.part.0+0x34>)
 8009bee:	4a0c      	ldr	r2, [pc, #48]	@ (8009c20 <global_stdio_init.part.0+0x38>)
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2104      	movs	r1, #4
 8009bf8:	f7ff ff94 	bl	8009b24 <std>
 8009bfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c00:	2201      	movs	r2, #1
 8009c02:	2109      	movs	r1, #9
 8009c04:	f7ff ff8e 	bl	8009b24 <std>
 8009c08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c12:	2112      	movs	r1, #18
 8009c14:	f7ff bf86 	b.w	8009b24 <std>
 8009c18:	200006e8 	.word	0x200006e8
 8009c1c:	200005b0 	.word	0x200005b0
 8009c20:	08009b91 	.word	0x08009b91

08009c24 <__sfp_lock_acquire>:
 8009c24:	4801      	ldr	r0, [pc, #4]	@ (8009c2c <__sfp_lock_acquire+0x8>)
 8009c26:	f000 ba28 	b.w	800a07a <__retarget_lock_acquire_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	200006f1 	.word	0x200006f1

08009c30 <__sfp_lock_release>:
 8009c30:	4801      	ldr	r0, [pc, #4]	@ (8009c38 <__sfp_lock_release+0x8>)
 8009c32:	f000 ba23 	b.w	800a07c <__retarget_lock_release_recursive>
 8009c36:	bf00      	nop
 8009c38:	200006f1 	.word	0x200006f1

08009c3c <__sinit>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	4604      	mov	r4, r0
 8009c40:	f7ff fff0 	bl	8009c24 <__sfp_lock_acquire>
 8009c44:	6a23      	ldr	r3, [r4, #32]
 8009c46:	b11b      	cbz	r3, 8009c50 <__sinit+0x14>
 8009c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c4c:	f7ff bff0 	b.w	8009c30 <__sfp_lock_release>
 8009c50:	4b04      	ldr	r3, [pc, #16]	@ (8009c64 <__sinit+0x28>)
 8009c52:	6223      	str	r3, [r4, #32]
 8009c54:	4b04      	ldr	r3, [pc, #16]	@ (8009c68 <__sinit+0x2c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1f5      	bne.n	8009c48 <__sinit+0xc>
 8009c5c:	f7ff ffc4 	bl	8009be8 <global_stdio_init.part.0>
 8009c60:	e7f2      	b.n	8009c48 <__sinit+0xc>
 8009c62:	bf00      	nop
 8009c64:	08009ba9 	.word	0x08009ba9
 8009c68:	200006e8 	.word	0x200006e8

08009c6c <_fwalk_sglue>:
 8009c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c70:	4607      	mov	r7, r0
 8009c72:	4688      	mov	r8, r1
 8009c74:	4614      	mov	r4, r2
 8009c76:	2600      	movs	r6, #0
 8009c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c80:	d505      	bpl.n	8009c8e <_fwalk_sglue+0x22>
 8009c82:	6824      	ldr	r4, [r4, #0]
 8009c84:	2c00      	cmp	r4, #0
 8009c86:	d1f7      	bne.n	8009c78 <_fwalk_sglue+0xc>
 8009c88:	4630      	mov	r0, r6
 8009c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d907      	bls.n	8009ca4 <_fwalk_sglue+0x38>
 8009c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	d003      	beq.n	8009ca4 <_fwalk_sglue+0x38>
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	47c0      	blx	r8
 8009ca2:	4306      	orrs	r6, r0
 8009ca4:	3568      	adds	r5, #104	@ 0x68
 8009ca6:	e7e9      	b.n	8009c7c <_fwalk_sglue+0x10>

08009ca8 <iprintf>:
 8009ca8:	b40f      	push	{r0, r1, r2, r3}
 8009caa:	b507      	push	{r0, r1, r2, lr}
 8009cac:	4906      	ldr	r1, [pc, #24]	@ (8009cc8 <iprintf+0x20>)
 8009cae:	ab04      	add	r3, sp, #16
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb6:	6881      	ldr	r1, [r0, #8]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	f000 fb11 	bl	800a2e0 <_vfiprintf_r>
 8009cbe:	b003      	add	sp, #12
 8009cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc4:	b004      	add	sp, #16
 8009cc6:	4770      	bx	lr
 8009cc8:	20000018 	.word	0x20000018

08009ccc <putchar>:
 8009ccc:	4b02      	ldr	r3, [pc, #8]	@ (8009cd8 <putchar+0xc>)
 8009cce:	4601      	mov	r1, r0
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	6882      	ldr	r2, [r0, #8]
 8009cd4:	f000 beb8 	b.w	800aa48 <_putc_r>
 8009cd8:	20000018 	.word	0x20000018

08009cdc <_puts_r>:
 8009cdc:	6a03      	ldr	r3, [r0, #32]
 8009cde:	b570      	push	{r4, r5, r6, lr}
 8009ce0:	6884      	ldr	r4, [r0, #8]
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	460e      	mov	r6, r1
 8009ce6:	b90b      	cbnz	r3, 8009cec <_puts_r+0x10>
 8009ce8:	f7ff ffa8 	bl	8009c3c <__sinit>
 8009cec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cee:	07db      	lsls	r3, r3, #31
 8009cf0:	d405      	bmi.n	8009cfe <_puts_r+0x22>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	0598      	lsls	r0, r3, #22
 8009cf6:	d402      	bmi.n	8009cfe <_puts_r+0x22>
 8009cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cfa:	f000 f9be 	bl	800a07a <__retarget_lock_acquire_recursive>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	0719      	lsls	r1, r3, #28
 8009d02:	d502      	bpl.n	8009d0a <_puts_r+0x2e>
 8009d04:	6923      	ldr	r3, [r4, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d135      	bne.n	8009d76 <_puts_r+0x9a>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 f8c5 	bl	8009e9c <__swsetup_r>
 8009d12:	b380      	cbz	r0, 8009d76 <_puts_r+0x9a>
 8009d14:	f04f 35ff 	mov.w	r5, #4294967295
 8009d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d1a:	07da      	lsls	r2, r3, #31
 8009d1c:	d405      	bmi.n	8009d2a <_puts_r+0x4e>
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	059b      	lsls	r3, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_puts_r+0x4e>
 8009d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d26:	f000 f9a9 	bl	800a07c <__retarget_lock_release_recursive>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da04      	bge.n	8009d3c <_puts_r+0x60>
 8009d32:	69a2      	ldr	r2, [r4, #24]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	dc17      	bgt.n	8009d68 <_puts_r+0x8c>
 8009d38:	290a      	cmp	r1, #10
 8009d3a:	d015      	beq.n	8009d68 <_puts_r+0x8c>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	6022      	str	r2, [r4, #0]
 8009d42:	7019      	strb	r1, [r3, #0]
 8009d44:	68a3      	ldr	r3, [r4, #8]
 8009d46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	60a3      	str	r3, [r4, #8]
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d1ed      	bne.n	8009d2e <_puts_r+0x52>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	da11      	bge.n	8009d7a <_puts_r+0x9e>
 8009d56:	4622      	mov	r2, r4
 8009d58:	210a      	movs	r1, #10
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f000 f85f 	bl	8009e1e <__swbuf_r>
 8009d60:	3001      	adds	r0, #1
 8009d62:	d0d7      	beq.n	8009d14 <_puts_r+0x38>
 8009d64:	250a      	movs	r5, #10
 8009d66:	e7d7      	b.n	8009d18 <_puts_r+0x3c>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 f857 	bl	8009e1e <__swbuf_r>
 8009d70:	3001      	adds	r0, #1
 8009d72:	d1e7      	bne.n	8009d44 <_puts_r+0x68>
 8009d74:	e7ce      	b.n	8009d14 <_puts_r+0x38>
 8009d76:	3e01      	subs	r6, #1
 8009d78:	e7e4      	b.n	8009d44 <_puts_r+0x68>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	220a      	movs	r2, #10
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	e7ee      	b.n	8009d64 <_puts_r+0x88>
	...

08009d88 <puts>:
 8009d88:	4b02      	ldr	r3, [pc, #8]	@ (8009d94 <puts+0xc>)
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	6818      	ldr	r0, [r3, #0]
 8009d8e:	f7ff bfa5 	b.w	8009cdc <_puts_r>
 8009d92:	bf00      	nop
 8009d94:	20000018 	.word	0x20000018

08009d98 <__sread>:
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da0:	f000 f91c 	bl	8009fdc <_read_r>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	bfab      	itete	ge
 8009da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009daa:	89a3      	ldrhlt	r3, [r4, #12]
 8009dac:	181b      	addge	r3, r3, r0
 8009dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009db2:	bfac      	ite	ge
 8009db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009db6:	81a3      	strhlt	r3, [r4, #12]
 8009db8:	bd10      	pop	{r4, pc}

08009dba <__swrite>:
 8009dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dbe:	461f      	mov	r7, r3
 8009dc0:	898b      	ldrh	r3, [r1, #12]
 8009dc2:	05db      	lsls	r3, r3, #23
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	4616      	mov	r6, r2
 8009dca:	d505      	bpl.n	8009dd8 <__swrite+0x1e>
 8009dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f000 f8f0 	bl	8009fb8 <_lseek_r>
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	4632      	mov	r2, r6
 8009de6:	463b      	mov	r3, r7
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	f000 b907 	b.w	800a000 <_write_r>

08009df2 <__sseek>:
 8009df2:	b510      	push	{r4, lr}
 8009df4:	460c      	mov	r4, r1
 8009df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfa:	f000 f8dd 	bl	8009fb8 <_lseek_r>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	bf15      	itete	ne
 8009e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e0e:	81a3      	strheq	r3, [r4, #12]
 8009e10:	bf18      	it	ne
 8009e12:	81a3      	strhne	r3, [r4, #12]
 8009e14:	bd10      	pop	{r4, pc}

08009e16 <__sclose>:
 8009e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1a:	f000 b8bd 	b.w	8009f98 <_close_r>

08009e1e <__swbuf_r>:
 8009e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e20:	460e      	mov	r6, r1
 8009e22:	4614      	mov	r4, r2
 8009e24:	4605      	mov	r5, r0
 8009e26:	b118      	cbz	r0, 8009e30 <__swbuf_r+0x12>
 8009e28:	6a03      	ldr	r3, [r0, #32]
 8009e2a:	b90b      	cbnz	r3, 8009e30 <__swbuf_r+0x12>
 8009e2c:	f7ff ff06 	bl	8009c3c <__sinit>
 8009e30:	69a3      	ldr	r3, [r4, #24]
 8009e32:	60a3      	str	r3, [r4, #8]
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	071a      	lsls	r2, r3, #28
 8009e38:	d501      	bpl.n	8009e3e <__swbuf_r+0x20>
 8009e3a:	6923      	ldr	r3, [r4, #16]
 8009e3c:	b943      	cbnz	r3, 8009e50 <__swbuf_r+0x32>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f000 f82b 	bl	8009e9c <__swsetup_r>
 8009e46:	b118      	cbz	r0, 8009e50 <__swbuf_r+0x32>
 8009e48:	f04f 37ff 	mov.w	r7, #4294967295
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	6922      	ldr	r2, [r4, #16]
 8009e54:	1a98      	subs	r0, r3, r2
 8009e56:	6963      	ldr	r3, [r4, #20]
 8009e58:	b2f6      	uxtb	r6, r6
 8009e5a:	4283      	cmp	r3, r0
 8009e5c:	4637      	mov	r7, r6
 8009e5e:	dc05      	bgt.n	8009e6c <__swbuf_r+0x4e>
 8009e60:	4621      	mov	r1, r4
 8009e62:	4628      	mov	r0, r5
 8009e64:	f000 fd66 	bl	800a934 <_fflush_r>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d1ed      	bne.n	8009e48 <__swbuf_r+0x2a>
 8009e6c:	68a3      	ldr	r3, [r4, #8]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	60a3      	str	r3, [r4, #8]
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	701e      	strb	r6, [r3, #0]
 8009e7a:	6962      	ldr	r2, [r4, #20]
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d004      	beq.n	8009e8c <__swbuf_r+0x6e>
 8009e82:	89a3      	ldrh	r3, [r4, #12]
 8009e84:	07db      	lsls	r3, r3, #31
 8009e86:	d5e1      	bpl.n	8009e4c <__swbuf_r+0x2e>
 8009e88:	2e0a      	cmp	r6, #10
 8009e8a:	d1df      	bne.n	8009e4c <__swbuf_r+0x2e>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 fd50 	bl	800a934 <_fflush_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d0d9      	beq.n	8009e4c <__swbuf_r+0x2e>
 8009e98:	e7d6      	b.n	8009e48 <__swbuf_r+0x2a>
	...

08009e9c <__swsetup_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4b29      	ldr	r3, [pc, #164]	@ (8009f44 <__swsetup_r+0xa8>)
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	b118      	cbz	r0, 8009eb0 <__swsetup_r+0x14>
 8009ea8:	6a03      	ldr	r3, [r0, #32]
 8009eaa:	b90b      	cbnz	r3, 8009eb0 <__swsetup_r+0x14>
 8009eac:	f7ff fec6 	bl	8009c3c <__sinit>
 8009eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb4:	0719      	lsls	r1, r3, #28
 8009eb6:	d422      	bmi.n	8009efe <__swsetup_r+0x62>
 8009eb8:	06da      	lsls	r2, r3, #27
 8009eba:	d407      	bmi.n	8009ecc <__swsetup_r+0x30>
 8009ebc:	2209      	movs	r2, #9
 8009ebe:	602a      	str	r2, [r5, #0]
 8009ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eca:	e033      	b.n	8009f34 <__swsetup_r+0x98>
 8009ecc:	0758      	lsls	r0, r3, #29
 8009ece:	d512      	bpl.n	8009ef6 <__swsetup_r+0x5a>
 8009ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ed2:	b141      	cbz	r1, 8009ee6 <__swsetup_r+0x4a>
 8009ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ed8:	4299      	cmp	r1, r3
 8009eda:	d002      	beq.n	8009ee2 <__swsetup_r+0x46>
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 f8dd 	bl	800a09c <_free_r>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6063      	str	r3, [r4, #4]
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f043 0308 	orr.w	r3, r3, #8
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	b94b      	cbnz	r3, 8009f16 <__swsetup_r+0x7a>
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f0c:	d003      	beq.n	8009f16 <__swsetup_r+0x7a>
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4628      	mov	r0, r5
 8009f12:	f000 fd5d 	bl	800a9d0 <__smakebuf_r>
 8009f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f1a:	f013 0201 	ands.w	r2, r3, #1
 8009f1e:	d00a      	beq.n	8009f36 <__swsetup_r+0x9a>
 8009f20:	2200      	movs	r2, #0
 8009f22:	60a2      	str	r2, [r4, #8]
 8009f24:	6962      	ldr	r2, [r4, #20]
 8009f26:	4252      	negs	r2, r2
 8009f28:	61a2      	str	r2, [r4, #24]
 8009f2a:	6922      	ldr	r2, [r4, #16]
 8009f2c:	b942      	cbnz	r2, 8009f40 <__swsetup_r+0xa4>
 8009f2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f32:	d1c5      	bne.n	8009ec0 <__swsetup_r+0x24>
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	0799      	lsls	r1, r3, #30
 8009f38:	bf58      	it	pl
 8009f3a:	6962      	ldrpl	r2, [r4, #20]
 8009f3c:	60a2      	str	r2, [r4, #8]
 8009f3e:	e7f4      	b.n	8009f2a <__swsetup_r+0x8e>
 8009f40:	2000      	movs	r0, #0
 8009f42:	e7f7      	b.n	8009f34 <__swsetup_r+0x98>
 8009f44:	20000018 	.word	0x20000018

08009f48 <memset>:
 8009f48:	4402      	add	r2, r0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d100      	bne.n	8009f52 <memset+0xa>
 8009f50:	4770      	bx	lr
 8009f52:	f803 1b01 	strb.w	r1, [r3], #1
 8009f56:	e7f9      	b.n	8009f4c <memset+0x4>

08009f58 <strncpy>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	3901      	subs	r1, #1
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	b132      	cbz	r2, 8009f6e <strncpy+0x16>
 8009f60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009f64:	f803 4b01 	strb.w	r4, [r3], #1
 8009f68:	3a01      	subs	r2, #1
 8009f6a:	2c00      	cmp	r4, #0
 8009f6c:	d1f7      	bne.n	8009f5e <strncpy+0x6>
 8009f6e:	441a      	add	r2, r3
 8009f70:	2100      	movs	r1, #0
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d100      	bne.n	8009f78 <strncpy+0x20>
 8009f76:	bd10      	pop	{r4, pc}
 8009f78:	f803 1b01 	strb.w	r1, [r3], #1
 8009f7c:	e7f9      	b.n	8009f72 <strncpy+0x1a>

08009f7e <strnlen>:
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	4602      	mov	r2, r0
 8009f82:	4401      	add	r1, r0
 8009f84:	428a      	cmp	r2, r1
 8009f86:	4613      	mov	r3, r2
 8009f88:	d003      	beq.n	8009f92 <strnlen+0x14>
 8009f8a:	781c      	ldrb	r4, [r3, #0]
 8009f8c:	3201      	adds	r2, #1
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d1f8      	bne.n	8009f84 <strnlen+0x6>
 8009f92:	1a18      	subs	r0, r3, r0
 8009f94:	bd10      	pop	{r4, pc}
	...

08009f98 <_close_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d06      	ldr	r5, [pc, #24]	@ (8009fb4 <_close_r+0x1c>)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7fa f8c5 	bl	8004132 <_close>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_close_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_close_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	200006ec 	.word	0x200006ec

08009fb8 <_lseek_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d07      	ldr	r5, [pc, #28]	@ (8009fd8 <_lseek_r+0x20>)
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	4608      	mov	r0, r1
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7fa f8da 	bl	8004180 <_lseek>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_lseek_r+0x1e>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_lseek_r+0x1e>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	200006ec 	.word	0x200006ec

08009fdc <_read_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d07      	ldr	r5, [pc, #28]	@ (8009ffc <_read_r+0x20>)
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f7fa f868 	bl	80040c0 <_read>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_read_r+0x1e>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_read_r+0x1e>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	200006ec 	.word	0x200006ec

0800a000 <_write_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d07      	ldr	r5, [pc, #28]	@ (800a020 <_write_r+0x20>)
 800a004:	4604      	mov	r4, r0
 800a006:	4608      	mov	r0, r1
 800a008:	4611      	mov	r1, r2
 800a00a:	2200      	movs	r2, #0
 800a00c:	602a      	str	r2, [r5, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	f7fa f873 	bl	80040fa <_write>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_write_r+0x1e>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_write_r+0x1e>
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	200006ec 	.word	0x200006ec

0800a024 <__errno>:
 800a024:	4b01      	ldr	r3, [pc, #4]	@ (800a02c <__errno+0x8>)
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	20000018 	.word	0x20000018

0800a030 <__libc_init_array>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	4d0d      	ldr	r5, [pc, #52]	@ (800a068 <__libc_init_array+0x38>)
 800a034:	4c0d      	ldr	r4, [pc, #52]	@ (800a06c <__libc_init_array+0x3c>)
 800a036:	1b64      	subs	r4, r4, r5
 800a038:	10a4      	asrs	r4, r4, #2
 800a03a:	2600      	movs	r6, #0
 800a03c:	42a6      	cmp	r6, r4
 800a03e:	d109      	bne.n	800a054 <__libc_init_array+0x24>
 800a040:	4d0b      	ldr	r5, [pc, #44]	@ (800a070 <__libc_init_array+0x40>)
 800a042:	4c0c      	ldr	r4, [pc, #48]	@ (800a074 <__libc_init_array+0x44>)
 800a044:	f000 fd66 	bl	800ab14 <_init>
 800a048:	1b64      	subs	r4, r4, r5
 800a04a:	10a4      	asrs	r4, r4, #2
 800a04c:	2600      	movs	r6, #0
 800a04e:	42a6      	cmp	r6, r4
 800a050:	d105      	bne.n	800a05e <__libc_init_array+0x2e>
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	f855 3b04 	ldr.w	r3, [r5], #4
 800a058:	4798      	blx	r3
 800a05a:	3601      	adds	r6, #1
 800a05c:	e7ee      	b.n	800a03c <__libc_init_array+0xc>
 800a05e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a062:	4798      	blx	r3
 800a064:	3601      	adds	r6, #1
 800a066:	e7f2      	b.n	800a04e <__libc_init_array+0x1e>
 800a068:	0800adf8 	.word	0x0800adf8
 800a06c:	0800adf8 	.word	0x0800adf8
 800a070:	0800adf8 	.word	0x0800adf8
 800a074:	0800ae00 	.word	0x0800ae00

0800a078 <__retarget_lock_init_recursive>:
 800a078:	4770      	bx	lr

0800a07a <__retarget_lock_acquire_recursive>:
 800a07a:	4770      	bx	lr

0800a07c <__retarget_lock_release_recursive>:
 800a07c:	4770      	bx	lr

0800a07e <memcpy>:
 800a07e:	440a      	add	r2, r1
 800a080:	4291      	cmp	r1, r2
 800a082:	f100 33ff 	add.w	r3, r0, #4294967295
 800a086:	d100      	bne.n	800a08a <memcpy+0xc>
 800a088:	4770      	bx	lr
 800a08a:	b510      	push	{r4, lr}
 800a08c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a090:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a094:	4291      	cmp	r1, r2
 800a096:	d1f9      	bne.n	800a08c <memcpy+0xe>
 800a098:	bd10      	pop	{r4, pc}
	...

0800a09c <_free_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4605      	mov	r5, r0
 800a0a0:	2900      	cmp	r1, #0
 800a0a2:	d041      	beq.n	800a128 <_free_r+0x8c>
 800a0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0a8:	1f0c      	subs	r4, r1, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfb8      	it	lt
 800a0ae:	18e4      	addlt	r4, r4, r3
 800a0b0:	f000 f8e0 	bl	800a274 <__malloc_lock>
 800a0b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a12c <_free_r+0x90>)
 800a0b6:	6813      	ldr	r3, [r2, #0]
 800a0b8:	b933      	cbnz	r3, 800a0c8 <_free_r+0x2c>
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	6014      	str	r4, [r2, #0]
 800a0be:	4628      	mov	r0, r5
 800a0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0c4:	f000 b8dc 	b.w	800a280 <__malloc_unlock>
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d908      	bls.n	800a0de <_free_r+0x42>
 800a0cc:	6820      	ldr	r0, [r4, #0]
 800a0ce:	1821      	adds	r1, r4, r0
 800a0d0:	428b      	cmp	r3, r1
 800a0d2:	bf01      	itttt	eq
 800a0d4:	6819      	ldreq	r1, [r3, #0]
 800a0d6:	685b      	ldreq	r3, [r3, #4]
 800a0d8:	1809      	addeq	r1, r1, r0
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	e7ed      	b.n	800a0ba <_free_r+0x1e>
 800a0de:	461a      	mov	r2, r3
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b10b      	cbz	r3, 800a0e8 <_free_r+0x4c>
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d9fa      	bls.n	800a0de <_free_r+0x42>
 800a0e8:	6811      	ldr	r1, [r2, #0]
 800a0ea:	1850      	adds	r0, r2, r1
 800a0ec:	42a0      	cmp	r0, r4
 800a0ee:	d10b      	bne.n	800a108 <_free_r+0x6c>
 800a0f0:	6820      	ldr	r0, [r4, #0]
 800a0f2:	4401      	add	r1, r0
 800a0f4:	1850      	adds	r0, r2, r1
 800a0f6:	4283      	cmp	r3, r0
 800a0f8:	6011      	str	r1, [r2, #0]
 800a0fa:	d1e0      	bne.n	800a0be <_free_r+0x22>
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	6053      	str	r3, [r2, #4]
 800a102:	4408      	add	r0, r1
 800a104:	6010      	str	r0, [r2, #0]
 800a106:	e7da      	b.n	800a0be <_free_r+0x22>
 800a108:	d902      	bls.n	800a110 <_free_r+0x74>
 800a10a:	230c      	movs	r3, #12
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	e7d6      	b.n	800a0be <_free_r+0x22>
 800a110:	6820      	ldr	r0, [r4, #0]
 800a112:	1821      	adds	r1, r4, r0
 800a114:	428b      	cmp	r3, r1
 800a116:	bf04      	itt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	bf04      	itt	eq
 800a120:	1809      	addeq	r1, r1, r0
 800a122:	6021      	streq	r1, [r4, #0]
 800a124:	6054      	str	r4, [r2, #4]
 800a126:	e7ca      	b.n	800a0be <_free_r+0x22>
 800a128:	bd38      	pop	{r3, r4, r5, pc}
 800a12a:	bf00      	nop
 800a12c:	200006f8 	.word	0x200006f8

0800a130 <sbrk_aligned>:
 800a130:	b570      	push	{r4, r5, r6, lr}
 800a132:	4e0f      	ldr	r6, [pc, #60]	@ (800a170 <sbrk_aligned+0x40>)
 800a134:	460c      	mov	r4, r1
 800a136:	6831      	ldr	r1, [r6, #0]
 800a138:	4605      	mov	r5, r0
 800a13a:	b911      	cbnz	r1, 800a142 <sbrk_aligned+0x12>
 800a13c:	f000 fcda 	bl	800aaf4 <_sbrk_r>
 800a140:	6030      	str	r0, [r6, #0]
 800a142:	4621      	mov	r1, r4
 800a144:	4628      	mov	r0, r5
 800a146:	f000 fcd5 	bl	800aaf4 <_sbrk_r>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d103      	bne.n	800a156 <sbrk_aligned+0x26>
 800a14e:	f04f 34ff 	mov.w	r4, #4294967295
 800a152:	4620      	mov	r0, r4
 800a154:	bd70      	pop	{r4, r5, r6, pc}
 800a156:	1cc4      	adds	r4, r0, #3
 800a158:	f024 0403 	bic.w	r4, r4, #3
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d0f8      	beq.n	800a152 <sbrk_aligned+0x22>
 800a160:	1a21      	subs	r1, r4, r0
 800a162:	4628      	mov	r0, r5
 800a164:	f000 fcc6 	bl	800aaf4 <_sbrk_r>
 800a168:	3001      	adds	r0, #1
 800a16a:	d1f2      	bne.n	800a152 <sbrk_aligned+0x22>
 800a16c:	e7ef      	b.n	800a14e <sbrk_aligned+0x1e>
 800a16e:	bf00      	nop
 800a170:	200006f4 	.word	0x200006f4

0800a174 <_malloc_r>:
 800a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a178:	1ccd      	adds	r5, r1, #3
 800a17a:	f025 0503 	bic.w	r5, r5, #3
 800a17e:	3508      	adds	r5, #8
 800a180:	2d0c      	cmp	r5, #12
 800a182:	bf38      	it	cc
 800a184:	250c      	movcc	r5, #12
 800a186:	2d00      	cmp	r5, #0
 800a188:	4606      	mov	r6, r0
 800a18a:	db01      	blt.n	800a190 <_malloc_r+0x1c>
 800a18c:	42a9      	cmp	r1, r5
 800a18e:	d904      	bls.n	800a19a <_malloc_r+0x26>
 800a190:	230c      	movs	r3, #12
 800a192:	6033      	str	r3, [r6, #0]
 800a194:	2000      	movs	r0, #0
 800a196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a270 <_malloc_r+0xfc>
 800a19e:	f000 f869 	bl	800a274 <__malloc_lock>
 800a1a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a6:	461c      	mov	r4, r3
 800a1a8:	bb44      	cbnz	r4, 800a1fc <_malloc_r+0x88>
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff ffbf 	bl	800a130 <sbrk_aligned>
 800a1b2:	1c43      	adds	r3, r0, #1
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	d158      	bne.n	800a26a <_malloc_r+0xf6>
 800a1b8:	f8d8 4000 	ldr.w	r4, [r8]
 800a1bc:	4627      	mov	r7, r4
 800a1be:	2f00      	cmp	r7, #0
 800a1c0:	d143      	bne.n	800a24a <_malloc_r+0xd6>
 800a1c2:	2c00      	cmp	r4, #0
 800a1c4:	d04b      	beq.n	800a25e <_malloc_r+0xea>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	eb04 0903 	add.w	r9, r4, r3
 800a1d0:	f000 fc90 	bl	800aaf4 <_sbrk_r>
 800a1d4:	4581      	cmp	r9, r0
 800a1d6:	d142      	bne.n	800a25e <_malloc_r+0xea>
 800a1d8:	6821      	ldr	r1, [r4, #0]
 800a1da:	1a6d      	subs	r5, r5, r1
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f7ff ffa6 	bl	800a130 <sbrk_aligned>
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d03a      	beq.n	800a25e <_malloc_r+0xea>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	442b      	add	r3, r5
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	bb62      	cbnz	r2, 800a250 <_malloc_r+0xdc>
 800a1f6:	f8c8 7000 	str.w	r7, [r8]
 800a1fa:	e00f      	b.n	800a21c <_malloc_r+0xa8>
 800a1fc:	6822      	ldr	r2, [r4, #0]
 800a1fe:	1b52      	subs	r2, r2, r5
 800a200:	d420      	bmi.n	800a244 <_malloc_r+0xd0>
 800a202:	2a0b      	cmp	r2, #11
 800a204:	d917      	bls.n	800a236 <_malloc_r+0xc2>
 800a206:	1961      	adds	r1, r4, r5
 800a208:	42a3      	cmp	r3, r4
 800a20a:	6025      	str	r5, [r4, #0]
 800a20c:	bf18      	it	ne
 800a20e:	6059      	strne	r1, [r3, #4]
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	bf08      	it	eq
 800a214:	f8c8 1000 	streq.w	r1, [r8]
 800a218:	5162      	str	r2, [r4, r5]
 800a21a:	604b      	str	r3, [r1, #4]
 800a21c:	4630      	mov	r0, r6
 800a21e:	f000 f82f 	bl	800a280 <__malloc_unlock>
 800a222:	f104 000b 	add.w	r0, r4, #11
 800a226:	1d23      	adds	r3, r4, #4
 800a228:	f020 0007 	bic.w	r0, r0, #7
 800a22c:	1ac2      	subs	r2, r0, r3
 800a22e:	bf1c      	itt	ne
 800a230:	1a1b      	subne	r3, r3, r0
 800a232:	50a3      	strne	r3, [r4, r2]
 800a234:	e7af      	b.n	800a196 <_malloc_r+0x22>
 800a236:	6862      	ldr	r2, [r4, #4]
 800a238:	42a3      	cmp	r3, r4
 800a23a:	bf0c      	ite	eq
 800a23c:	f8c8 2000 	streq.w	r2, [r8]
 800a240:	605a      	strne	r2, [r3, #4]
 800a242:	e7eb      	b.n	800a21c <_malloc_r+0xa8>
 800a244:	4623      	mov	r3, r4
 800a246:	6864      	ldr	r4, [r4, #4]
 800a248:	e7ae      	b.n	800a1a8 <_malloc_r+0x34>
 800a24a:	463c      	mov	r4, r7
 800a24c:	687f      	ldr	r7, [r7, #4]
 800a24e:	e7b6      	b.n	800a1be <_malloc_r+0x4a>
 800a250:	461a      	mov	r2, r3
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	42a3      	cmp	r3, r4
 800a256:	d1fb      	bne.n	800a250 <_malloc_r+0xdc>
 800a258:	2300      	movs	r3, #0
 800a25a:	6053      	str	r3, [r2, #4]
 800a25c:	e7de      	b.n	800a21c <_malloc_r+0xa8>
 800a25e:	230c      	movs	r3, #12
 800a260:	6033      	str	r3, [r6, #0]
 800a262:	4630      	mov	r0, r6
 800a264:	f000 f80c 	bl	800a280 <__malloc_unlock>
 800a268:	e794      	b.n	800a194 <_malloc_r+0x20>
 800a26a:	6005      	str	r5, [r0, #0]
 800a26c:	e7d6      	b.n	800a21c <_malloc_r+0xa8>
 800a26e:	bf00      	nop
 800a270:	200006f8 	.word	0x200006f8

0800a274 <__malloc_lock>:
 800a274:	4801      	ldr	r0, [pc, #4]	@ (800a27c <__malloc_lock+0x8>)
 800a276:	f7ff bf00 	b.w	800a07a <__retarget_lock_acquire_recursive>
 800a27a:	bf00      	nop
 800a27c:	200006f0 	.word	0x200006f0

0800a280 <__malloc_unlock>:
 800a280:	4801      	ldr	r0, [pc, #4]	@ (800a288 <__malloc_unlock+0x8>)
 800a282:	f7ff befb 	b.w	800a07c <__retarget_lock_release_recursive>
 800a286:	bf00      	nop
 800a288:	200006f0 	.word	0x200006f0

0800a28c <__sfputc_r>:
 800a28c:	6893      	ldr	r3, [r2, #8]
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	b410      	push	{r4}
 800a294:	6093      	str	r3, [r2, #8]
 800a296:	da08      	bge.n	800a2aa <__sfputc_r+0x1e>
 800a298:	6994      	ldr	r4, [r2, #24]
 800a29a:	42a3      	cmp	r3, r4
 800a29c:	db01      	blt.n	800a2a2 <__sfputc_r+0x16>
 800a29e:	290a      	cmp	r1, #10
 800a2a0:	d103      	bne.n	800a2aa <__sfputc_r+0x1e>
 800a2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a6:	f7ff bdba 	b.w	8009e1e <__swbuf_r>
 800a2aa:	6813      	ldr	r3, [r2, #0]
 800a2ac:	1c58      	adds	r0, r3, #1
 800a2ae:	6010      	str	r0, [r2, #0]
 800a2b0:	7019      	strb	r1, [r3, #0]
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <__sfputs_r>:
 800a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	4614      	mov	r4, r2
 800a2c2:	18d5      	adds	r5, r2, r3
 800a2c4:	42ac      	cmp	r4, r5
 800a2c6:	d101      	bne.n	800a2cc <__sfputs_r+0x12>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e007      	b.n	800a2dc <__sfputs_r+0x22>
 800a2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d0:	463a      	mov	r2, r7
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ffda 	bl	800a28c <__sfputc_r>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d1f3      	bne.n	800a2c4 <__sfputs_r+0xa>
 800a2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2e0 <_vfiprintf_r>:
 800a2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	b09d      	sub	sp, #116	@ 0x74
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	4698      	mov	r8, r3
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	b118      	cbz	r0, 800a2f8 <_vfiprintf_r+0x18>
 800a2f0:	6a03      	ldr	r3, [r0, #32]
 800a2f2:	b90b      	cbnz	r3, 800a2f8 <_vfiprintf_r+0x18>
 800a2f4:	f7ff fca2 	bl	8009c3c <__sinit>
 800a2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2fa:	07d9      	lsls	r1, r3, #31
 800a2fc:	d405      	bmi.n	800a30a <_vfiprintf_r+0x2a>
 800a2fe:	89ab      	ldrh	r3, [r5, #12]
 800a300:	059a      	lsls	r2, r3, #22
 800a302:	d402      	bmi.n	800a30a <_vfiprintf_r+0x2a>
 800a304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a306:	f7ff feb8 	bl	800a07a <__retarget_lock_acquire_recursive>
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	071b      	lsls	r3, r3, #28
 800a30e:	d501      	bpl.n	800a314 <_vfiprintf_r+0x34>
 800a310:	692b      	ldr	r3, [r5, #16]
 800a312:	b99b      	cbnz	r3, 800a33c <_vfiprintf_r+0x5c>
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f7ff fdc0 	bl	8009e9c <__swsetup_r>
 800a31c:	b170      	cbz	r0, 800a33c <_vfiprintf_r+0x5c>
 800a31e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a320:	07dc      	lsls	r4, r3, #31
 800a322:	d504      	bpl.n	800a32e <_vfiprintf_r+0x4e>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b01d      	add	sp, #116	@ 0x74
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	0598      	lsls	r0, r3, #22
 800a332:	d4f7      	bmi.n	800a324 <_vfiprintf_r+0x44>
 800a334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a336:	f7ff fea1 	bl	800a07c <__retarget_lock_release_recursive>
 800a33a:	e7f3      	b.n	800a324 <_vfiprintf_r+0x44>
 800a33c:	2300      	movs	r3, #0
 800a33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a340:	2320      	movs	r3, #32
 800a342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a346:	f8cd 800c 	str.w	r8, [sp, #12]
 800a34a:	2330      	movs	r3, #48	@ 0x30
 800a34c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4fc <_vfiprintf_r+0x21c>
 800a350:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a354:	f04f 0901 	mov.w	r9, #1
 800a358:	4623      	mov	r3, r4
 800a35a:	469a      	mov	sl, r3
 800a35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a360:	b10a      	cbz	r2, 800a366 <_vfiprintf_r+0x86>
 800a362:	2a25      	cmp	r2, #37	@ 0x25
 800a364:	d1f9      	bne.n	800a35a <_vfiprintf_r+0x7a>
 800a366:	ebba 0b04 	subs.w	fp, sl, r4
 800a36a:	d00b      	beq.n	800a384 <_vfiprintf_r+0xa4>
 800a36c:	465b      	mov	r3, fp
 800a36e:	4622      	mov	r2, r4
 800a370:	4629      	mov	r1, r5
 800a372:	4630      	mov	r0, r6
 800a374:	f7ff ffa1 	bl	800a2ba <__sfputs_r>
 800a378:	3001      	adds	r0, #1
 800a37a:	f000 80a7 	beq.w	800a4cc <_vfiprintf_r+0x1ec>
 800a37e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a380:	445a      	add	r2, fp
 800a382:	9209      	str	r2, [sp, #36]	@ 0x24
 800a384:	f89a 3000 	ldrb.w	r3, [sl]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 809f 	beq.w	800a4cc <_vfiprintf_r+0x1ec>
 800a38e:	2300      	movs	r3, #0
 800a390:	f04f 32ff 	mov.w	r2, #4294967295
 800a394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a398:	f10a 0a01 	add.w	sl, sl, #1
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	9307      	str	r3, [sp, #28]
 800a3a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3a6:	4654      	mov	r4, sl
 800a3a8:	2205      	movs	r2, #5
 800a3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ae:	4853      	ldr	r0, [pc, #332]	@ (800a4fc <_vfiprintf_r+0x21c>)
 800a3b0:	f7f5 ff26 	bl	8000200 <memchr>
 800a3b4:	9a04      	ldr	r2, [sp, #16]
 800a3b6:	b9d8      	cbnz	r0, 800a3f0 <_vfiprintf_r+0x110>
 800a3b8:	06d1      	lsls	r1, r2, #27
 800a3ba:	bf44      	itt	mi
 800a3bc:	2320      	movmi	r3, #32
 800a3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c2:	0713      	lsls	r3, r2, #28
 800a3c4:	bf44      	itt	mi
 800a3c6:	232b      	movmi	r3, #43	@ 0x2b
 800a3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3d2:	d015      	beq.n	800a400 <_vfiprintf_r+0x120>
 800a3d4:	9a07      	ldr	r2, [sp, #28]
 800a3d6:	4654      	mov	r4, sl
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f04f 0c0a 	mov.w	ip, #10
 800a3de:	4621      	mov	r1, r4
 800a3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e4:	3b30      	subs	r3, #48	@ 0x30
 800a3e6:	2b09      	cmp	r3, #9
 800a3e8:	d94b      	bls.n	800a482 <_vfiprintf_r+0x1a2>
 800a3ea:	b1b0      	cbz	r0, 800a41a <_vfiprintf_r+0x13a>
 800a3ec:	9207      	str	r2, [sp, #28]
 800a3ee:	e014      	b.n	800a41a <_vfiprintf_r+0x13a>
 800a3f0:	eba0 0308 	sub.w	r3, r0, r8
 800a3f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	9304      	str	r3, [sp, #16]
 800a3fc:	46a2      	mov	sl, r4
 800a3fe:	e7d2      	b.n	800a3a6 <_vfiprintf_r+0xc6>
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	1d19      	adds	r1, r3, #4
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	9103      	str	r1, [sp, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bfbb      	ittet	lt
 800a40c:	425b      	neglt	r3, r3
 800a40e:	f042 0202 	orrlt.w	r2, r2, #2
 800a412:	9307      	strge	r3, [sp, #28]
 800a414:	9307      	strlt	r3, [sp, #28]
 800a416:	bfb8      	it	lt
 800a418:	9204      	strlt	r2, [sp, #16]
 800a41a:	7823      	ldrb	r3, [r4, #0]
 800a41c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a41e:	d10a      	bne.n	800a436 <_vfiprintf_r+0x156>
 800a420:	7863      	ldrb	r3, [r4, #1]
 800a422:	2b2a      	cmp	r3, #42	@ 0x2a
 800a424:	d132      	bne.n	800a48c <_vfiprintf_r+0x1ac>
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	9203      	str	r2, [sp, #12]
 800a42e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a432:	3402      	adds	r4, #2
 800a434:	9305      	str	r3, [sp, #20]
 800a436:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a50c <_vfiprintf_r+0x22c>
 800a43a:	7821      	ldrb	r1, [r4, #0]
 800a43c:	2203      	movs	r2, #3
 800a43e:	4650      	mov	r0, sl
 800a440:	f7f5 fede 	bl	8000200 <memchr>
 800a444:	b138      	cbz	r0, 800a456 <_vfiprintf_r+0x176>
 800a446:	9b04      	ldr	r3, [sp, #16]
 800a448:	eba0 000a 	sub.w	r0, r0, sl
 800a44c:	2240      	movs	r2, #64	@ 0x40
 800a44e:	4082      	lsls	r2, r0
 800a450:	4313      	orrs	r3, r2
 800a452:	3401      	adds	r4, #1
 800a454:	9304      	str	r3, [sp, #16]
 800a456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45a:	4829      	ldr	r0, [pc, #164]	@ (800a500 <_vfiprintf_r+0x220>)
 800a45c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a460:	2206      	movs	r2, #6
 800a462:	f7f5 fecd 	bl	8000200 <memchr>
 800a466:	2800      	cmp	r0, #0
 800a468:	d03f      	beq.n	800a4ea <_vfiprintf_r+0x20a>
 800a46a:	4b26      	ldr	r3, [pc, #152]	@ (800a504 <_vfiprintf_r+0x224>)
 800a46c:	bb1b      	cbnz	r3, 800a4b6 <_vfiprintf_r+0x1d6>
 800a46e:	9b03      	ldr	r3, [sp, #12]
 800a470:	3307      	adds	r3, #7
 800a472:	f023 0307 	bic.w	r3, r3, #7
 800a476:	3308      	adds	r3, #8
 800a478:	9303      	str	r3, [sp, #12]
 800a47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a47c:	443b      	add	r3, r7
 800a47e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a480:	e76a      	b.n	800a358 <_vfiprintf_r+0x78>
 800a482:	fb0c 3202 	mla	r2, ip, r2, r3
 800a486:	460c      	mov	r4, r1
 800a488:	2001      	movs	r0, #1
 800a48a:	e7a8      	b.n	800a3de <_vfiprintf_r+0xfe>
 800a48c:	2300      	movs	r3, #0
 800a48e:	3401      	adds	r4, #1
 800a490:	9305      	str	r3, [sp, #20]
 800a492:	4619      	mov	r1, r3
 800a494:	f04f 0c0a 	mov.w	ip, #10
 800a498:	4620      	mov	r0, r4
 800a49a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a49e:	3a30      	subs	r2, #48	@ 0x30
 800a4a0:	2a09      	cmp	r2, #9
 800a4a2:	d903      	bls.n	800a4ac <_vfiprintf_r+0x1cc>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0c6      	beq.n	800a436 <_vfiprintf_r+0x156>
 800a4a8:	9105      	str	r1, [sp, #20]
 800a4aa:	e7c4      	b.n	800a436 <_vfiprintf_r+0x156>
 800a4ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e7f0      	b.n	800a498 <_vfiprintf_r+0x1b8>
 800a4b6:	ab03      	add	r3, sp, #12
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	4b12      	ldr	r3, [pc, #72]	@ (800a508 <_vfiprintf_r+0x228>)
 800a4be:	a904      	add	r1, sp, #16
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f3af 8000 	nop.w
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	1c78      	adds	r0, r7, #1
 800a4ca:	d1d6      	bne.n	800a47a <_vfiprintf_r+0x19a>
 800a4cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4ce:	07d9      	lsls	r1, r3, #31
 800a4d0:	d405      	bmi.n	800a4de <_vfiprintf_r+0x1fe>
 800a4d2:	89ab      	ldrh	r3, [r5, #12]
 800a4d4:	059a      	lsls	r2, r3, #22
 800a4d6:	d402      	bmi.n	800a4de <_vfiprintf_r+0x1fe>
 800a4d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4da:	f7ff fdcf 	bl	800a07c <__retarget_lock_release_recursive>
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	065b      	lsls	r3, r3, #25
 800a4e2:	f53f af1f 	bmi.w	800a324 <_vfiprintf_r+0x44>
 800a4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4e8:	e71e      	b.n	800a328 <_vfiprintf_r+0x48>
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	462a      	mov	r2, r5
 800a4f0:	4b05      	ldr	r3, [pc, #20]	@ (800a508 <_vfiprintf_r+0x228>)
 800a4f2:	a904      	add	r1, sp, #16
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f000 f879 	bl	800a5ec <_printf_i>
 800a4fa:	e7e4      	b.n	800a4c6 <_vfiprintf_r+0x1e6>
 800a4fc:	0800adbc 	.word	0x0800adbc
 800a500:	0800adc6 	.word	0x0800adc6
 800a504:	00000000 	.word	0x00000000
 800a508:	0800a2bb 	.word	0x0800a2bb
 800a50c:	0800adc2 	.word	0x0800adc2

0800a510 <_printf_common>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	4616      	mov	r6, r2
 800a516:	4698      	mov	r8, r3
 800a518:	688a      	ldr	r2, [r1, #8]
 800a51a:	690b      	ldr	r3, [r1, #16]
 800a51c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a520:	4293      	cmp	r3, r2
 800a522:	bfb8      	it	lt
 800a524:	4613      	movlt	r3, r2
 800a526:	6033      	str	r3, [r6, #0]
 800a528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a52c:	4607      	mov	r7, r0
 800a52e:	460c      	mov	r4, r1
 800a530:	b10a      	cbz	r2, 800a536 <_printf_common+0x26>
 800a532:	3301      	adds	r3, #1
 800a534:	6033      	str	r3, [r6, #0]
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	0699      	lsls	r1, r3, #26
 800a53a:	bf42      	ittt	mi
 800a53c:	6833      	ldrmi	r3, [r6, #0]
 800a53e:	3302      	addmi	r3, #2
 800a540:	6033      	strmi	r3, [r6, #0]
 800a542:	6825      	ldr	r5, [r4, #0]
 800a544:	f015 0506 	ands.w	r5, r5, #6
 800a548:	d106      	bne.n	800a558 <_printf_common+0x48>
 800a54a:	f104 0a19 	add.w	sl, r4, #25
 800a54e:	68e3      	ldr	r3, [r4, #12]
 800a550:	6832      	ldr	r2, [r6, #0]
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	42ab      	cmp	r3, r5
 800a556:	dc26      	bgt.n	800a5a6 <_printf_common+0x96>
 800a558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a55c:	6822      	ldr	r2, [r4, #0]
 800a55e:	3b00      	subs	r3, #0
 800a560:	bf18      	it	ne
 800a562:	2301      	movne	r3, #1
 800a564:	0692      	lsls	r2, r2, #26
 800a566:	d42b      	bmi.n	800a5c0 <_printf_common+0xb0>
 800a568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a56c:	4641      	mov	r1, r8
 800a56e:	4638      	mov	r0, r7
 800a570:	47c8      	blx	r9
 800a572:	3001      	adds	r0, #1
 800a574:	d01e      	beq.n	800a5b4 <_printf_common+0xa4>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	f003 0306 	and.w	r3, r3, #6
 800a57e:	2b04      	cmp	r3, #4
 800a580:	bf02      	ittt	eq
 800a582:	68e5      	ldreq	r5, [r4, #12]
 800a584:	6833      	ldreq	r3, [r6, #0]
 800a586:	1aed      	subeq	r5, r5, r3
 800a588:	68a3      	ldr	r3, [r4, #8]
 800a58a:	bf0c      	ite	eq
 800a58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a590:	2500      	movne	r5, #0
 800a592:	4293      	cmp	r3, r2
 800a594:	bfc4      	itt	gt
 800a596:	1a9b      	subgt	r3, r3, r2
 800a598:	18ed      	addgt	r5, r5, r3
 800a59a:	2600      	movs	r6, #0
 800a59c:	341a      	adds	r4, #26
 800a59e:	42b5      	cmp	r5, r6
 800a5a0:	d11a      	bne.n	800a5d8 <_printf_common+0xc8>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e008      	b.n	800a5b8 <_printf_common+0xa8>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4652      	mov	r2, sl
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	47c8      	blx	r9
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d103      	bne.n	800a5bc <_printf_common+0xac>
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5bc:	3501      	adds	r5, #1
 800a5be:	e7c6      	b.n	800a54e <_printf_common+0x3e>
 800a5c0:	18e1      	adds	r1, r4, r3
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	2030      	movs	r0, #48	@ 0x30
 800a5c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5ca:	4422      	add	r2, r4
 800a5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5d4:	3302      	adds	r3, #2
 800a5d6:	e7c7      	b.n	800a568 <_printf_common+0x58>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	4622      	mov	r2, r4
 800a5dc:	4641      	mov	r1, r8
 800a5de:	4638      	mov	r0, r7
 800a5e0:	47c8      	blx	r9
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d0e6      	beq.n	800a5b4 <_printf_common+0xa4>
 800a5e6:	3601      	adds	r6, #1
 800a5e8:	e7d9      	b.n	800a59e <_printf_common+0x8e>
	...

0800a5ec <_printf_i>:
 800a5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	7e0f      	ldrb	r7, [r1, #24]
 800a5f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5f4:	2f78      	cmp	r7, #120	@ 0x78
 800a5f6:	4691      	mov	r9, r2
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	469a      	mov	sl, r3
 800a5fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a602:	d807      	bhi.n	800a614 <_printf_i+0x28>
 800a604:	2f62      	cmp	r7, #98	@ 0x62
 800a606:	d80a      	bhi.n	800a61e <_printf_i+0x32>
 800a608:	2f00      	cmp	r7, #0
 800a60a:	f000 80d2 	beq.w	800a7b2 <_printf_i+0x1c6>
 800a60e:	2f58      	cmp	r7, #88	@ 0x58
 800a610:	f000 80b9 	beq.w	800a786 <_printf_i+0x19a>
 800a614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a61c:	e03a      	b.n	800a694 <_printf_i+0xa8>
 800a61e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a622:	2b15      	cmp	r3, #21
 800a624:	d8f6      	bhi.n	800a614 <_printf_i+0x28>
 800a626:	a101      	add	r1, pc, #4	@ (adr r1, 800a62c <_printf_i+0x40>)
 800a628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a62c:	0800a685 	.word	0x0800a685
 800a630:	0800a699 	.word	0x0800a699
 800a634:	0800a615 	.word	0x0800a615
 800a638:	0800a615 	.word	0x0800a615
 800a63c:	0800a615 	.word	0x0800a615
 800a640:	0800a615 	.word	0x0800a615
 800a644:	0800a699 	.word	0x0800a699
 800a648:	0800a615 	.word	0x0800a615
 800a64c:	0800a615 	.word	0x0800a615
 800a650:	0800a615 	.word	0x0800a615
 800a654:	0800a615 	.word	0x0800a615
 800a658:	0800a799 	.word	0x0800a799
 800a65c:	0800a6c3 	.word	0x0800a6c3
 800a660:	0800a753 	.word	0x0800a753
 800a664:	0800a615 	.word	0x0800a615
 800a668:	0800a615 	.word	0x0800a615
 800a66c:	0800a7bb 	.word	0x0800a7bb
 800a670:	0800a615 	.word	0x0800a615
 800a674:	0800a6c3 	.word	0x0800a6c3
 800a678:	0800a615 	.word	0x0800a615
 800a67c:	0800a615 	.word	0x0800a615
 800a680:	0800a75b 	.word	0x0800a75b
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	1d1a      	adds	r2, r3, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6032      	str	r2, [r6, #0]
 800a68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a694:	2301      	movs	r3, #1
 800a696:	e09d      	b.n	800a7d4 <_printf_i+0x1e8>
 800a698:	6833      	ldr	r3, [r6, #0]
 800a69a:	6820      	ldr	r0, [r4, #0]
 800a69c:	1d19      	adds	r1, r3, #4
 800a69e:	6031      	str	r1, [r6, #0]
 800a6a0:	0606      	lsls	r6, r0, #24
 800a6a2:	d501      	bpl.n	800a6a8 <_printf_i+0xbc>
 800a6a4:	681d      	ldr	r5, [r3, #0]
 800a6a6:	e003      	b.n	800a6b0 <_printf_i+0xc4>
 800a6a8:	0645      	lsls	r5, r0, #25
 800a6aa:	d5fb      	bpl.n	800a6a4 <_printf_i+0xb8>
 800a6ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6b0:	2d00      	cmp	r5, #0
 800a6b2:	da03      	bge.n	800a6bc <_printf_i+0xd0>
 800a6b4:	232d      	movs	r3, #45	@ 0x2d
 800a6b6:	426d      	negs	r5, r5
 800a6b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6bc:	4859      	ldr	r0, [pc, #356]	@ (800a824 <_printf_i+0x238>)
 800a6be:	230a      	movs	r3, #10
 800a6c0:	e011      	b.n	800a6e6 <_printf_i+0xfa>
 800a6c2:	6821      	ldr	r1, [r4, #0]
 800a6c4:	6833      	ldr	r3, [r6, #0]
 800a6c6:	0608      	lsls	r0, r1, #24
 800a6c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6cc:	d402      	bmi.n	800a6d4 <_printf_i+0xe8>
 800a6ce:	0649      	lsls	r1, r1, #25
 800a6d0:	bf48      	it	mi
 800a6d2:	b2ad      	uxthmi	r5, r5
 800a6d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6d6:	4853      	ldr	r0, [pc, #332]	@ (800a824 <_printf_i+0x238>)
 800a6d8:	6033      	str	r3, [r6, #0]
 800a6da:	bf14      	ite	ne
 800a6dc:	230a      	movne	r3, #10
 800a6de:	2308      	moveq	r3, #8
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6e6:	6866      	ldr	r6, [r4, #4]
 800a6e8:	60a6      	str	r6, [r4, #8]
 800a6ea:	2e00      	cmp	r6, #0
 800a6ec:	bfa2      	ittt	ge
 800a6ee:	6821      	ldrge	r1, [r4, #0]
 800a6f0:	f021 0104 	bicge.w	r1, r1, #4
 800a6f4:	6021      	strge	r1, [r4, #0]
 800a6f6:	b90d      	cbnz	r5, 800a6fc <_printf_i+0x110>
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	d04b      	beq.n	800a794 <_printf_i+0x1a8>
 800a6fc:	4616      	mov	r6, r2
 800a6fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800a702:	fb03 5711 	mls	r7, r3, r1, r5
 800a706:	5dc7      	ldrb	r7, [r0, r7]
 800a708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a70c:	462f      	mov	r7, r5
 800a70e:	42bb      	cmp	r3, r7
 800a710:	460d      	mov	r5, r1
 800a712:	d9f4      	bls.n	800a6fe <_printf_i+0x112>
 800a714:	2b08      	cmp	r3, #8
 800a716:	d10b      	bne.n	800a730 <_printf_i+0x144>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	07df      	lsls	r7, r3, #31
 800a71c:	d508      	bpl.n	800a730 <_printf_i+0x144>
 800a71e:	6923      	ldr	r3, [r4, #16]
 800a720:	6861      	ldr	r1, [r4, #4]
 800a722:	4299      	cmp	r1, r3
 800a724:	bfde      	ittt	le
 800a726:	2330      	movle	r3, #48	@ 0x30
 800a728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a72c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a730:	1b92      	subs	r2, r2, r6
 800a732:	6122      	str	r2, [r4, #16]
 800a734:	f8cd a000 	str.w	sl, [sp]
 800a738:	464b      	mov	r3, r9
 800a73a:	aa03      	add	r2, sp, #12
 800a73c:	4621      	mov	r1, r4
 800a73e:	4640      	mov	r0, r8
 800a740:	f7ff fee6 	bl	800a510 <_printf_common>
 800a744:	3001      	adds	r0, #1
 800a746:	d14a      	bne.n	800a7de <_printf_i+0x1f2>
 800a748:	f04f 30ff 	mov.w	r0, #4294967295
 800a74c:	b004      	add	sp, #16
 800a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	f043 0320 	orr.w	r3, r3, #32
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	4833      	ldr	r0, [pc, #204]	@ (800a828 <_printf_i+0x23c>)
 800a75c:	2778      	movs	r7, #120	@ 0x78
 800a75e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	6831      	ldr	r1, [r6, #0]
 800a766:	061f      	lsls	r7, r3, #24
 800a768:	f851 5b04 	ldr.w	r5, [r1], #4
 800a76c:	d402      	bmi.n	800a774 <_printf_i+0x188>
 800a76e:	065f      	lsls	r7, r3, #25
 800a770:	bf48      	it	mi
 800a772:	b2ad      	uxthmi	r5, r5
 800a774:	6031      	str	r1, [r6, #0]
 800a776:	07d9      	lsls	r1, r3, #31
 800a778:	bf44      	itt	mi
 800a77a:	f043 0320 	orrmi.w	r3, r3, #32
 800a77e:	6023      	strmi	r3, [r4, #0]
 800a780:	b11d      	cbz	r5, 800a78a <_printf_i+0x19e>
 800a782:	2310      	movs	r3, #16
 800a784:	e7ac      	b.n	800a6e0 <_printf_i+0xf4>
 800a786:	4827      	ldr	r0, [pc, #156]	@ (800a824 <_printf_i+0x238>)
 800a788:	e7e9      	b.n	800a75e <_printf_i+0x172>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	f023 0320 	bic.w	r3, r3, #32
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	e7f6      	b.n	800a782 <_printf_i+0x196>
 800a794:	4616      	mov	r6, r2
 800a796:	e7bd      	b.n	800a714 <_printf_i+0x128>
 800a798:	6833      	ldr	r3, [r6, #0]
 800a79a:	6825      	ldr	r5, [r4, #0]
 800a79c:	6961      	ldr	r1, [r4, #20]
 800a79e:	1d18      	adds	r0, r3, #4
 800a7a0:	6030      	str	r0, [r6, #0]
 800a7a2:	062e      	lsls	r6, r5, #24
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	d501      	bpl.n	800a7ac <_printf_i+0x1c0>
 800a7a8:	6019      	str	r1, [r3, #0]
 800a7aa:	e002      	b.n	800a7b2 <_printf_i+0x1c6>
 800a7ac:	0668      	lsls	r0, r5, #25
 800a7ae:	d5fb      	bpl.n	800a7a8 <_printf_i+0x1bc>
 800a7b0:	8019      	strh	r1, [r3, #0]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	6123      	str	r3, [r4, #16]
 800a7b6:	4616      	mov	r6, r2
 800a7b8:	e7bc      	b.n	800a734 <_printf_i+0x148>
 800a7ba:	6833      	ldr	r3, [r6, #0]
 800a7bc:	1d1a      	adds	r2, r3, #4
 800a7be:	6032      	str	r2, [r6, #0]
 800a7c0:	681e      	ldr	r6, [r3, #0]
 800a7c2:	6862      	ldr	r2, [r4, #4]
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7f5 fd1a 	bl	8000200 <memchr>
 800a7cc:	b108      	cbz	r0, 800a7d2 <_printf_i+0x1e6>
 800a7ce:	1b80      	subs	r0, r0, r6
 800a7d0:	6060      	str	r0, [r4, #4]
 800a7d2:	6863      	ldr	r3, [r4, #4]
 800a7d4:	6123      	str	r3, [r4, #16]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7dc:	e7aa      	b.n	800a734 <_printf_i+0x148>
 800a7de:	6923      	ldr	r3, [r4, #16]
 800a7e0:	4632      	mov	r2, r6
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	47d0      	blx	sl
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d0ad      	beq.n	800a748 <_printf_i+0x15c>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	079b      	lsls	r3, r3, #30
 800a7f0:	d413      	bmi.n	800a81a <_printf_i+0x22e>
 800a7f2:	68e0      	ldr	r0, [r4, #12]
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	4298      	cmp	r0, r3
 800a7f8:	bfb8      	it	lt
 800a7fa:	4618      	movlt	r0, r3
 800a7fc:	e7a6      	b.n	800a74c <_printf_i+0x160>
 800a7fe:	2301      	movs	r3, #1
 800a800:	4632      	mov	r2, r6
 800a802:	4649      	mov	r1, r9
 800a804:	4640      	mov	r0, r8
 800a806:	47d0      	blx	sl
 800a808:	3001      	adds	r0, #1
 800a80a:	d09d      	beq.n	800a748 <_printf_i+0x15c>
 800a80c:	3501      	adds	r5, #1
 800a80e:	68e3      	ldr	r3, [r4, #12]
 800a810:	9903      	ldr	r1, [sp, #12]
 800a812:	1a5b      	subs	r3, r3, r1
 800a814:	42ab      	cmp	r3, r5
 800a816:	dcf2      	bgt.n	800a7fe <_printf_i+0x212>
 800a818:	e7eb      	b.n	800a7f2 <_printf_i+0x206>
 800a81a:	2500      	movs	r5, #0
 800a81c:	f104 0619 	add.w	r6, r4, #25
 800a820:	e7f5      	b.n	800a80e <_printf_i+0x222>
 800a822:	bf00      	nop
 800a824:	0800adcd 	.word	0x0800adcd
 800a828:	0800adde 	.word	0x0800adde

0800a82c <__sflush_r>:
 800a82c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a834:	0716      	lsls	r6, r2, #28
 800a836:	4605      	mov	r5, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	d454      	bmi.n	800a8e6 <__sflush_r+0xba>
 800a83c:	684b      	ldr	r3, [r1, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dc02      	bgt.n	800a848 <__sflush_r+0x1c>
 800a842:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd48      	ble.n	800a8da <__sflush_r+0xae>
 800a848:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a84a:	2e00      	cmp	r6, #0
 800a84c:	d045      	beq.n	800a8da <__sflush_r+0xae>
 800a84e:	2300      	movs	r3, #0
 800a850:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a854:	682f      	ldr	r7, [r5, #0]
 800a856:	6a21      	ldr	r1, [r4, #32]
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	d030      	beq.n	800a8be <__sflush_r+0x92>
 800a85c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	0759      	lsls	r1, r3, #29
 800a862:	d505      	bpl.n	800a870 <__sflush_r+0x44>
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	1ad2      	subs	r2, r2, r3
 800a868:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a86a:	b10b      	cbz	r3, 800a870 <__sflush_r+0x44>
 800a86c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a86e:	1ad2      	subs	r2, r2, r3
 800a870:	2300      	movs	r3, #0
 800a872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a874:	6a21      	ldr	r1, [r4, #32]
 800a876:	4628      	mov	r0, r5
 800a878:	47b0      	blx	r6
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	d106      	bne.n	800a88e <__sflush_r+0x62>
 800a880:	6829      	ldr	r1, [r5, #0]
 800a882:	291d      	cmp	r1, #29
 800a884:	d82b      	bhi.n	800a8de <__sflush_r+0xb2>
 800a886:	4a2a      	ldr	r2, [pc, #168]	@ (800a930 <__sflush_r+0x104>)
 800a888:	410a      	asrs	r2, r1
 800a88a:	07d6      	lsls	r6, r2, #31
 800a88c:	d427      	bmi.n	800a8de <__sflush_r+0xb2>
 800a88e:	2200      	movs	r2, #0
 800a890:	6062      	str	r2, [r4, #4]
 800a892:	04d9      	lsls	r1, r3, #19
 800a894:	6922      	ldr	r2, [r4, #16]
 800a896:	6022      	str	r2, [r4, #0]
 800a898:	d504      	bpl.n	800a8a4 <__sflush_r+0x78>
 800a89a:	1c42      	adds	r2, r0, #1
 800a89c:	d101      	bne.n	800a8a2 <__sflush_r+0x76>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	b903      	cbnz	r3, 800a8a4 <__sflush_r+0x78>
 800a8a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8a6:	602f      	str	r7, [r5, #0]
 800a8a8:	b1b9      	cbz	r1, 800a8da <__sflush_r+0xae>
 800a8aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8ae:	4299      	cmp	r1, r3
 800a8b0:	d002      	beq.n	800a8b8 <__sflush_r+0x8c>
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f7ff fbf2 	bl	800a09c <_free_r>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8bc:	e00d      	b.n	800a8da <__sflush_r+0xae>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	47b0      	blx	r6
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	1c50      	adds	r0, r2, #1
 800a8c8:	d1c9      	bne.n	800a85e <__sflush_r+0x32>
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d0c6      	beq.n	800a85e <__sflush_r+0x32>
 800a8d0:	2b1d      	cmp	r3, #29
 800a8d2:	d001      	beq.n	800a8d8 <__sflush_r+0xac>
 800a8d4:	2b16      	cmp	r3, #22
 800a8d6:	d11e      	bne.n	800a916 <__sflush_r+0xea>
 800a8d8:	602f      	str	r7, [r5, #0]
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e022      	b.n	800a924 <__sflush_r+0xf8>
 800a8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e2:	b21b      	sxth	r3, r3
 800a8e4:	e01b      	b.n	800a91e <__sflush_r+0xf2>
 800a8e6:	690f      	ldr	r7, [r1, #16]
 800a8e8:	2f00      	cmp	r7, #0
 800a8ea:	d0f6      	beq.n	800a8da <__sflush_r+0xae>
 800a8ec:	0793      	lsls	r3, r2, #30
 800a8ee:	680e      	ldr	r6, [r1, #0]
 800a8f0:	bf08      	it	eq
 800a8f2:	694b      	ldreq	r3, [r1, #20]
 800a8f4:	600f      	str	r7, [r1, #0]
 800a8f6:	bf18      	it	ne
 800a8f8:	2300      	movne	r3, #0
 800a8fa:	eba6 0807 	sub.w	r8, r6, r7
 800a8fe:	608b      	str	r3, [r1, #8]
 800a900:	f1b8 0f00 	cmp.w	r8, #0
 800a904:	dde9      	ble.n	800a8da <__sflush_r+0xae>
 800a906:	6a21      	ldr	r1, [r4, #32]
 800a908:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a90a:	4643      	mov	r3, r8
 800a90c:	463a      	mov	r2, r7
 800a90e:	4628      	mov	r0, r5
 800a910:	47b0      	blx	r6
 800a912:	2800      	cmp	r0, #0
 800a914:	dc08      	bgt.n	800a928 <__sflush_r+0xfc>
 800a916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	f04f 30ff 	mov.w	r0, #4294967295
 800a924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a928:	4407      	add	r7, r0
 800a92a:	eba8 0800 	sub.w	r8, r8, r0
 800a92e:	e7e7      	b.n	800a900 <__sflush_r+0xd4>
 800a930:	dfbffffe 	.word	0xdfbffffe

0800a934 <_fflush_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	690b      	ldr	r3, [r1, #16]
 800a938:	4605      	mov	r5, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	b913      	cbnz	r3, 800a944 <_fflush_r+0x10>
 800a93e:	2500      	movs	r5, #0
 800a940:	4628      	mov	r0, r5
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	b118      	cbz	r0, 800a94e <_fflush_r+0x1a>
 800a946:	6a03      	ldr	r3, [r0, #32]
 800a948:	b90b      	cbnz	r3, 800a94e <_fflush_r+0x1a>
 800a94a:	f7ff f977 	bl	8009c3c <__sinit>
 800a94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0f3      	beq.n	800a93e <_fflush_r+0xa>
 800a956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a958:	07d0      	lsls	r0, r2, #31
 800a95a:	d404      	bmi.n	800a966 <_fflush_r+0x32>
 800a95c:	0599      	lsls	r1, r3, #22
 800a95e:	d402      	bmi.n	800a966 <_fflush_r+0x32>
 800a960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a962:	f7ff fb8a 	bl	800a07a <__retarget_lock_acquire_recursive>
 800a966:	4628      	mov	r0, r5
 800a968:	4621      	mov	r1, r4
 800a96a:	f7ff ff5f 	bl	800a82c <__sflush_r>
 800a96e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a970:	07da      	lsls	r2, r3, #31
 800a972:	4605      	mov	r5, r0
 800a974:	d4e4      	bmi.n	800a940 <_fflush_r+0xc>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	059b      	lsls	r3, r3, #22
 800a97a:	d4e1      	bmi.n	800a940 <_fflush_r+0xc>
 800a97c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a97e:	f7ff fb7d 	bl	800a07c <__retarget_lock_release_recursive>
 800a982:	e7dd      	b.n	800a940 <_fflush_r+0xc>

0800a984 <__swhatbuf_r>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	460c      	mov	r4, r1
 800a988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98c:	2900      	cmp	r1, #0
 800a98e:	b096      	sub	sp, #88	@ 0x58
 800a990:	4615      	mov	r5, r2
 800a992:	461e      	mov	r6, r3
 800a994:	da0d      	bge.n	800a9b2 <__swhatbuf_r+0x2e>
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a99c:	f04f 0100 	mov.w	r1, #0
 800a9a0:	bf14      	ite	ne
 800a9a2:	2340      	movne	r3, #64	@ 0x40
 800a9a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	6031      	str	r1, [r6, #0]
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	b016      	add	sp, #88	@ 0x58
 800a9b0:	bd70      	pop	{r4, r5, r6, pc}
 800a9b2:	466a      	mov	r2, sp
 800a9b4:	f000 f87c 	bl	800aab0 <_fstat_r>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	dbec      	blt.n	800a996 <__swhatbuf_r+0x12>
 800a9bc:	9901      	ldr	r1, [sp, #4]
 800a9be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9c6:	4259      	negs	r1, r3
 800a9c8:	4159      	adcs	r1, r3
 800a9ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9ce:	e7eb      	b.n	800a9a8 <__swhatbuf_r+0x24>

0800a9d0 <__smakebuf_r>:
 800a9d0:	898b      	ldrh	r3, [r1, #12]
 800a9d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9d4:	079d      	lsls	r5, r3, #30
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	d507      	bpl.n	800a9ec <__smakebuf_r+0x1c>
 800a9dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	6163      	str	r3, [r4, #20]
 800a9e8:	b003      	add	sp, #12
 800a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ec:	ab01      	add	r3, sp, #4
 800a9ee:	466a      	mov	r2, sp
 800a9f0:	f7ff ffc8 	bl	800a984 <__swhatbuf_r>
 800a9f4:	9f00      	ldr	r7, [sp, #0]
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f7ff fbba 	bl	800a174 <_malloc_r>
 800aa00:	b948      	cbnz	r0, 800aa16 <__smakebuf_r+0x46>
 800aa02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa06:	059a      	lsls	r2, r3, #22
 800aa08:	d4ee      	bmi.n	800a9e8 <__smakebuf_r+0x18>
 800aa0a:	f023 0303 	bic.w	r3, r3, #3
 800aa0e:	f043 0302 	orr.w	r3, r3, #2
 800aa12:	81a3      	strh	r3, [r4, #12]
 800aa14:	e7e2      	b.n	800a9dc <__smakebuf_r+0xc>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	6020      	str	r0, [r4, #0]
 800aa1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa1e:	81a3      	strh	r3, [r4, #12]
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa26:	b15b      	cbz	r3, 800aa40 <__smakebuf_r+0x70>
 800aa28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	f000 f851 	bl	800aad4 <_isatty_r>
 800aa32:	b128      	cbz	r0, 800aa40 <__smakebuf_r+0x70>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f023 0303 	bic.w	r3, r3, #3
 800aa3a:	f043 0301 	orr.w	r3, r3, #1
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	431d      	orrs	r5, r3
 800aa44:	81a5      	strh	r5, [r4, #12]
 800aa46:	e7cf      	b.n	800a9e8 <__smakebuf_r+0x18>

0800aa48 <_putc_r>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	4606      	mov	r6, r0
 800aa50:	b118      	cbz	r0, 800aa5a <_putc_r+0x12>
 800aa52:	6a03      	ldr	r3, [r0, #32]
 800aa54:	b90b      	cbnz	r3, 800aa5a <_putc_r+0x12>
 800aa56:	f7ff f8f1 	bl	8009c3c <__sinit>
 800aa5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa5c:	07d8      	lsls	r0, r3, #31
 800aa5e:	d405      	bmi.n	800aa6c <_putc_r+0x24>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	0599      	lsls	r1, r3, #22
 800aa64:	d402      	bmi.n	800aa6c <_putc_r+0x24>
 800aa66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa68:	f7ff fb07 	bl	800a07a <__retarget_lock_acquire_recursive>
 800aa6c:	68a3      	ldr	r3, [r4, #8]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	60a3      	str	r3, [r4, #8]
 800aa74:	da05      	bge.n	800aa82 <_putc_r+0x3a>
 800aa76:	69a2      	ldr	r2, [r4, #24]
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	db12      	blt.n	800aaa2 <_putc_r+0x5a>
 800aa7c:	b2eb      	uxtb	r3, r5
 800aa7e:	2b0a      	cmp	r3, #10
 800aa80:	d00f      	beq.n	800aaa2 <_putc_r+0x5a>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	6022      	str	r2, [r4, #0]
 800aa88:	701d      	strb	r5, [r3, #0]
 800aa8a:	b2ed      	uxtb	r5, r5
 800aa8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa8e:	07da      	lsls	r2, r3, #31
 800aa90:	d405      	bmi.n	800aa9e <_putc_r+0x56>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	059b      	lsls	r3, r3, #22
 800aa96:	d402      	bmi.n	800aa9e <_putc_r+0x56>
 800aa98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa9a:	f7ff faef 	bl	800a07c <__retarget_lock_release_recursive>
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	bd70      	pop	{r4, r5, r6, pc}
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f7ff f9b9 	bl	8009e1e <__swbuf_r>
 800aaac:	4605      	mov	r5, r0
 800aaae:	e7ed      	b.n	800aa8c <_putc_r+0x44>

0800aab0 <_fstat_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d07      	ldr	r5, [pc, #28]	@ (800aad0 <_fstat_r+0x20>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	4611      	mov	r1, r2
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	f7f9 fb44 	bl	800414a <_fstat>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	d102      	bne.n	800aacc <_fstat_r+0x1c>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	b103      	cbz	r3, 800aacc <_fstat_r+0x1c>
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	bd38      	pop	{r3, r4, r5, pc}
 800aace:	bf00      	nop
 800aad0:	200006ec 	.word	0x200006ec

0800aad4 <_isatty_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d06      	ldr	r5, [pc, #24]	@ (800aaf0 <_isatty_r+0x1c>)
 800aad8:	2300      	movs	r3, #0
 800aada:	4604      	mov	r4, r0
 800aadc:	4608      	mov	r0, r1
 800aade:	602b      	str	r3, [r5, #0]
 800aae0:	f7f9 fb43 	bl	800416a <_isatty>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d102      	bne.n	800aaee <_isatty_r+0x1a>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	b103      	cbz	r3, 800aaee <_isatty_r+0x1a>
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	200006ec 	.word	0x200006ec

0800aaf4 <_sbrk_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d06      	ldr	r5, [pc, #24]	@ (800ab10 <_sbrk_r+0x1c>)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4604      	mov	r4, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	602b      	str	r3, [r5, #0]
 800ab00:	f7f9 fb4c 	bl	800419c <_sbrk>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_sbrk_r+0x1a>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_sbrk_r+0x1a>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	200006ec 	.word	0x200006ec

0800ab14 <_init>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	bf00      	nop
 800ab18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1a:	bc08      	pop	{r3}
 800ab1c:	469e      	mov	lr, r3
 800ab1e:	4770      	bx	lr

0800ab20 <_fini>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr
