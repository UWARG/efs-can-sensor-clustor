
efs-can-sensor-clustor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011468  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000602c  08011628  08011628  00012628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017654  08017654  0001920c  2**0
                  CONTENTS
  4 .ARM          00000008  08017654  08017654  00018654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801765c  0801765c  0001920c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801765c  0801765c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017660  08017660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  08017664  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000020c  08017870  0001920c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08017870  00019408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001920c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d9f7  00000000  00000000  0001923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b137  00000000  00000000  00066c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d28  00000000  00000000  00071d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000746  00000000  00000000  00073a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c614  00000000  00000000  000741de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026433  00000000  00000000  000a07f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111de8  00000000  00000000  000c6c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000008f  00000000  00000000  001d8a0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000738c  00000000  00000000  001d8a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001dfe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00027ed6  00000000  00000000  001dfe8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000061c8  00000000  00000000  00207d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011610 	.word	0x08011610

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000210 	.word	0x20000210
 80001fc:	08011610 	.word	0x08011610

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__mulsc3>:
 8000a7c:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000a80:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000a84:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000a88:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000a8c:	ee61 5a20 	vmul.f32	s11, s2, s1
 8000a90:	eef4 7a67 	vcmp.f32	s15, s15
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000a9c:	d604      	bvs.n	8000aa8 <__mulsc3+0x2c>
 8000a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000aa2:	eef0 0a47 	vmov.f32	s1, s14
 8000aa6:	4770      	bx	lr
 8000aa8:	eeb4 7a47 	vcmp.f32	s14, s14
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	d7f5      	bvc.n	8000a9e <__mulsc3+0x22>
 8000ab2:	ed9f 4aa1 	vldr	s8, [pc, #644]	@ 8000d38 <__mulsc3+0x2bc>
 8000ab6:	eef0 4ac0 	vabs.f32	s9, s0
 8000aba:	eef4 4a44 	vcmp.f32	s9, s8
 8000abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac2:	eef0 3ae0 	vabs.f32	s7, s1
 8000ac6:	f300 80a0 	bgt.w	8000c0a <__mulsc3+0x18e>
 8000aca:	eef4 3a44 	vcmp.f32	s7, s8
 8000ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad2:	f300 809a 	bgt.w	8000c0a <__mulsc3+0x18e>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	eddf 4a97 	vldr	s9, [pc, #604]	@ 8000d38 <__mulsc3+0x2bc>
 8000adc:	eeb0 4ac1 	vabs.f32	s8, s2
 8000ae0:	eeb4 4a64 	vcmp.f32	s8, s9
 8000ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae8:	eef0 3ae1 	vabs.f32	s7, s3
 8000aec:	dc48      	bgt.n	8000b80 <__mulsc3+0x104>
 8000aee:	eef4 3a64 	vcmp.f32	s7, s9
 8000af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af6:	dc43      	bgt.n	8000b80 <__mulsc3+0x104>
 8000af8:	bb9b      	cbnz	r3, 8000b62 <__mulsc3+0xe6>
 8000afa:	eef0 6ae6 	vabs.f32	s13, s13
 8000afe:	eef4 6a64 	vcmp.f32	s13, s9
 8000b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b06:	dc14      	bgt.n	8000b32 <__mulsc3+0xb6>
 8000b08:	eeb0 6ac6 	vabs.f32	s12, s12
 8000b0c:	eeb4 6a64 	vcmp.f32	s12, s9
 8000b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b14:	dc0d      	bgt.n	8000b32 <__mulsc3+0xb6>
 8000b16:	eeb0 5ac5 	vabs.f32	s10, s10
 8000b1a:	eeb4 5a64 	vcmp.f32	s10, s9
 8000b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b22:	dc06      	bgt.n	8000b32 <__mulsc3+0xb6>
 8000b24:	eef0 5ae5 	vabs.f32	s11, s11
 8000b28:	eef4 5a64 	vcmp.f32	s11, s9
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	ddb5      	ble.n	8000a9e <__mulsc3+0x22>
 8000b32:	eeb4 0a40 	vcmp.f32	s0, s0
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	f180 80f0 	bvs.w	8000d1e <__mulsc3+0x2a2>
 8000b3e:	eef4 0a60 	vcmp.f32	s1, s1
 8000b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b46:	f180 80dd 	bvs.w	8000d04 <__mulsc3+0x288>
 8000b4a:	eeb4 1a41 	vcmp.f32	s2, s2
 8000b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b52:	f180 80ca 	bvs.w	8000cea <__mulsc3+0x26e>
 8000b56:	eef4 1a61 	vcmp.f32	s3, s3
 8000b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5e:	f180 80b7 	bvs.w	8000cd0 <__mulsc3+0x254>
 8000b62:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000b66:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000b6a:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000b6e:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000b72:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8000d3c <__mulsc3+0x2c0>
 8000b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7a:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000b7e:	e78e      	b.n	8000a9e <__mulsc3+0x22>
 8000b80:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8000d38 <__mulsc3+0x2bc>
 8000b84:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000d38 <__mulsc3+0x2bc>
 8000b88:	eeb4 4a67 	vcmp.f32	s8, s15
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	bfcc      	ite	gt
 8000b92:	2301      	movgt	r3, #1
 8000b94:	2300      	movle	r3, #0
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	ee11 3a10 	vmov	r3, s2
 8000b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	eef0 7ae7 	vabs.f32	s15, s15
 8000ba8:	eef4 3a47 	vcmp.f32	s7, s14
 8000bac:	bfb8      	it	lt
 8000bae:	eef1 7a67 	vneglt.f32	s15, s15
 8000bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb6:	bfcc      	ite	gt
 8000bb8:	2301      	movgt	r3, #1
 8000bba:	2300      	movle	r3, #0
 8000bbc:	eeb0 1a67 	vmov.f32	s2, s15
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	ee11 3a90 	vmov	r3, s3
 8000bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	eef0 7ae7 	vabs.f32	s15, s15
 8000bd2:	eeb4 0a40 	vcmp.f32	s0, s0
 8000bd6:	bfb8      	it	lt
 8000bd8:	eef1 7a67 	vneglt.f32	s15, s15
 8000bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be0:	eef0 1a67 	vmov.f32	s3, s15
 8000be4:	d65a      	bvs.n	8000c9c <__mulsc3+0x220>
 8000be6:	eef4 0a60 	vcmp.f32	s1, s1
 8000bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bee:	d7b8      	bvc.n	8000b62 <__mulsc3+0xe6>
 8000bf0:	ee10 3a90 	vmov	r3, s1
 8000bf4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000d40 <__mulsc3+0x2c4>
 8000bf8:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8000d44 <__mulsc3+0x2c8>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bfb4      	ite	lt
 8000c00:	eef0 0a67 	vmovlt.f32	s1, s15
 8000c04:	eef0 0a47 	vmovge.f32	s1, s14
 8000c08:	e7ab      	b.n	8000b62 <__mulsc3+0xe6>
 8000c0a:	ed9f 4a4b 	vldr	s8, [pc, #300]	@ 8000d38 <__mulsc3+0x2bc>
 8000c0e:	eef4 4a44 	vcmp.f32	s9, s8
 8000c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c16:	bfcc      	ite	gt
 8000c18:	2301      	movgt	r3, #1
 8000c1a:	2300      	movle	r3, #0
 8000c1c:	ee04 3a90 	vmov	s9, r3
 8000c20:	ed9f 4a45 	vldr	s8, [pc, #276]	@ 8000d38 <__mulsc3+0x2bc>
 8000c24:	ee10 3a10 	vmov	r3, s0
 8000c28:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	eef0 4ae4 	vabs.f32	s9, s9
 8000c32:	eef4 3a44 	vcmp.f32	s7, s8
 8000c36:	bfb8      	it	lt
 8000c38:	eef1 4a64 	vneglt.f32	s9, s9
 8000c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c40:	bfcc      	ite	gt
 8000c42:	2301      	movgt	r3, #1
 8000c44:	2300      	movle	r3, #0
 8000c46:	eeb0 0a64 	vmov.f32	s0, s9
 8000c4a:	ee04 3a90 	vmov	s9, r3
 8000c4e:	ee10 3a90 	vmov	r3, s1
 8000c52:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	eef0 4ae4 	vabs.f32	s9, s9
 8000c5c:	eeb4 1a41 	vcmp.f32	s2, s2
 8000c60:	bfb8      	it	lt
 8000c62:	eef1 4a64 	vneglt.f32	s9, s9
 8000c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6a:	eef0 0a64 	vmov.f32	s1, s9
 8000c6e:	d622      	bvs.n	8000cb6 <__mulsc3+0x23a>
 8000c70:	eef4 1a61 	vcmp.f32	s3, s3
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	bf78      	it	vc
 8000c7a:	2301      	movvc	r3, #1
 8000c7c:	f5ff af2c 	bvc.w	8000ad8 <__mulsc3+0x5c>
 8000c80:	ee11 3a90 	vmov	r3, s3
 8000c84:	ed9f 4a2e 	vldr	s8, [pc, #184]	@ 8000d40 <__mulsc3+0x2c4>
 8000c88:	eddf 4a2e 	vldr	s9, [pc, #184]	@ 8000d44 <__mulsc3+0x2c8>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bfb4      	ite	lt
 8000c90:	eef0 1a64 	vmovlt.f32	s3, s9
 8000c94:	eef0 1a44 	vmovge.f32	s3, s8
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e71d      	b.n	8000ad8 <__mulsc3+0x5c>
 8000c9c:	ee10 3a10 	vmov	r3, s0
 8000ca0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000d40 <__mulsc3+0x2c4>
 8000ca4:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8000d44 <__mulsc3+0x2c8>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bfb4      	ite	lt
 8000cac:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000cb0:	eeb0 0a47 	vmovge.f32	s0, s14
 8000cb4:	e797      	b.n	8000be6 <__mulsc3+0x16a>
 8000cb6:	ee11 3a10 	vmov	r3, s2
 8000cba:	ed9f 4a21 	vldr	s8, [pc, #132]	@ 8000d40 <__mulsc3+0x2c4>
 8000cbe:	eddf 4a21 	vldr	s9, [pc, #132]	@ 8000d44 <__mulsc3+0x2c8>
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bfb4      	ite	lt
 8000cc6:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000cca:	eeb0 1a44 	vmovge.f32	s2, s8
 8000cce:	e7cf      	b.n	8000c70 <__mulsc3+0x1f4>
 8000cd0:	ee11 3a90 	vmov	r3, s3
 8000cd4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000d40 <__mulsc3+0x2c4>
 8000cd8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8000d44 <__mulsc3+0x2c8>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bfb4      	ite	lt
 8000ce0:	eef0 1a67 	vmovlt.f32	s3, s15
 8000ce4:	eef0 1a47 	vmovge.f32	s3, s14
 8000ce8:	e73b      	b.n	8000b62 <__mulsc3+0xe6>
 8000cea:	ee11 3a10 	vmov	r3, s2
 8000cee:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000d40 <__mulsc3+0x2c4>
 8000cf2:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8000d44 <__mulsc3+0x2c8>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bfb4      	ite	lt
 8000cfa:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000cfe:	eeb0 1a47 	vmovge.f32	s2, s14
 8000d02:	e728      	b.n	8000b56 <__mulsc3+0xda>
 8000d04:	ee10 3a90 	vmov	r3, s1
 8000d08:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000d40 <__mulsc3+0x2c4>
 8000d0c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8000d44 <__mulsc3+0x2c8>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bfb4      	ite	lt
 8000d14:	eef0 0a67 	vmovlt.f32	s1, s15
 8000d18:	eef0 0a47 	vmovge.f32	s1, s14
 8000d1c:	e715      	b.n	8000b4a <__mulsc3+0xce>
 8000d1e:	ee10 3a10 	vmov	r3, s0
 8000d22:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000d40 <__mulsc3+0x2c4>
 8000d26:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8000d44 <__mulsc3+0x2c8>
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	bfb4      	ite	lt
 8000d2e:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000d32:	eeb0 0a47 	vmovge.f32	s0, s14
 8000d36:	e702      	b.n	8000b3e <__mulsc3+0xc2>
 8000d38:	7f7fffff 	.word	0x7f7fffff
 8000d3c:	7f800000 	.word	0x7f800000
 8000d40:	00000000 	.word	0x00000000
 8000d44:	80000000 	.word	0x80000000

08000d48 <__aeabi_f2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	f7ff fc0d 	bl	8000568 <__aeabi_f2d>
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <__aeabi_f2ulz+0x38>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	4606      	mov	r6, r0
 8000d54:	460f      	mov	r7, r1
 8000d56:	f7ff fc5f 	bl	8000618 <__aeabi_dmul>
 8000d5a:	f7ff fe6f 	bl	8000a3c <__aeabi_d2uiz>
 8000d5e:	4604      	mov	r4, r0
 8000d60:	f7ff fbe0 	bl	8000524 <__aeabi_ui2d>
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <__aeabi_f2ulz+0x3c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f7ff fc56 	bl	8000618 <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4630      	mov	r0, r6
 8000d72:	4639      	mov	r1, r7
 8000d74:	f7ff fa98 	bl	80002a8 <__aeabi_dsub>
 8000d78:	f7ff fe60 	bl	8000a3c <__aeabi_d2uiz>
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d80:	3df00000 	.word	0x3df00000
 8000d84:	41f00000 	.word	0x41f00000

08000d88 <acc_example_detector_distance>:
static void print_distance_result(const acc_detector_distance_result_t *result);

int acc_example_detector_distance(int argc, char *argv[]);

int acc_example_detector_distance(int argc, char *argv[])
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0d6      	sub	sp, #344	@ 0x158
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8000d96:	6018      	str	r0, [r3, #0]
 8000d98:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d9c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8000da0:	6019      	str	r1, [r3, #0]
	(void)argc;
	(void)argv;
	distance_detector_resources_t resources = {0};
 8000da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000da6:	2224      	movs	r2, #36	@ 0x24
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f00f fd8a 	bl	80108c4 <memset>

	printf("Acconeer software version %s\n", acc_version_get());
 8000db0:	f007 fb14 	bl	80083dc <acc_version_get>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4881      	ldr	r0, [pc, #516]	@ (8000fc0 <acc_example_detector_distance+0x238>)
 8000dba:	f00f fbe1 	bl	8010580 <iprintf>

	const acc_hal_a121_t *hal = acc_hal_rss_integration_get_implementation();
 8000dbe:	f002 fe43 	bl	8003a48 <acc_hal_rss_integration_get_implementation>
 8000dc2:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

	if (!acc_rss_hal_register(hal))
 8000dc6:	f8d7 0154 	ldr.w	r0, [r7, #340]	@ 0x154
 8000dca:	f007 fb0b 	bl	80083e4 <acc_rss_hal_register>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f083 0301 	eor.w	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <acc_example_detector_distance+0x56>
	{
		return EXIT_FAILURE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e0eb      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
	}

	resources.config = acc_detector_distance_config_create();
 8000dde:	f002 ffb3 	bl	8003d48 <acc_detector_distance_config_create>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	if (resources.config == NULL)
 8000de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d109      	bne.n	8000e04 <acc_example_detector_distance+0x7c>
	{
		printf("acc_detector_distance_config_create() failed\n");
 8000df0:	4874      	ldr	r0, [pc, #464]	@ (8000fc4 <acc_example_detector_distance+0x23c>)
 8000df2:	f00f fc35 	bl	8010660 <puts>
		cleanup(&resources);
 8000df6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f8f4 	bl	8000fe8 <cleanup>
		return EXIT_FAILURE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e0d8      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
	}

	set_config(resources.config, DISTANCE_PRESET_CONFIG_BALANCED);
 8000e04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f917 	bl	800103e <set_config>

	if (!initialize_detector_resources(&resources))
 8000e10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f981 	bl	800111c <initialize_detector_resources>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f083 0301 	eor.w	r3, r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d009      	beq.n	8000e3a <acc_example_detector_distance+0xb2>
	{
		printf("Initializing detector resources failed\n");
 8000e26:	4868      	ldr	r0, [pc, #416]	@ (8000fc8 <acc_example_detector_distance+0x240>)
 8000e28:	f00f fc1a 	bl	8010660 <puts>
		cleanup(&resources);
 8000e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f8d9 	bl	8000fe8 <cleanup>
		return EXIT_FAILURE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0bd      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
	}

	// Print the configuration
	acc_detector_distance_config_log(resources.handle, resources.config);
 8000e3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000e3e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 fd97 	bl	8004978 <acc_detector_distance_config_log>

	/* Turn the sensor on */
	acc_hal_integration_sensor_supply_on(SENSOR_ID);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f002 fd60 	bl	8003910 <acc_hal_integration_sensor_supply_on>
	acc_hal_integration_sensor_enable(SENSOR_ID);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 fd7d 	bl	8003950 <acc_hal_integration_sensor_enable>

	resources.sensor = acc_sensor_create(SENSOR_ID);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f008 f926 	bl	80090a8 <acc_sensor_create>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	if (resources.sensor == NULL)
 8000e62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <acc_example_detector_distance+0xf6>
	{
		printf("acc_sensor_create() failed\n");
 8000e6a:	4858      	ldr	r0, [pc, #352]	@ (8000fcc <acc_example_detector_distance+0x244>)
 8000e6c:	f00f fbf8 	bl	8010660 <puts>
		cleanup(&resources);
 8000e70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f8b7 	bl	8000fe8 <cleanup>
		return EXIT_FAILURE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e09b      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
	}

	acc_cal_result_t sensor_cal_result;

	if (!do_sensor_calibration(resources.sensor, &sensor_cal_result, resources.buffer, resources.buffer_size))
 8000e7e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000e82:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000e86:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000e8a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000e8e:	f000 f99f 	bl	80011d0 <do_sensor_calibration>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d009      	beq.n	8000eb2 <acc_example_detector_distance+0x12a>
	{
		printf("Sensor calibration failed\n");
 8000e9e:	484c      	ldr	r0, [pc, #304]	@ (8000fd0 <acc_example_detector_distance+0x248>)
 8000ea0:	f00f fbde 	bl	8010660 <puts>
		cleanup(&resources);
 8000ea4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f89d 	bl	8000fe8 <cleanup>
		return EXIT_FAILURE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e081      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
	}

	if (!do_full_detector_calibration(&resources, &sensor_cal_result))
 8000eb2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000eb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f9dc 	bl	800127a <do_full_detector_calibration>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d009      	beq.n	8000ee2 <acc_example_detector_distance+0x15a>
	{
		printf("Detector calibration failed\n");
 8000ece:	4841      	ldr	r0, [pc, #260]	@ (8000fd4 <acc_example_detector_distance+0x24c>)
 8000ed0:	f00f fbc6 	bl	8010660 <puts>
		cleanup(&resources);
 8000ed4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f885 	bl	8000fe8 <cleanup>
		return EXIT_FAILURE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e069      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
	}

	while (true)
	{
		acc_detector_distance_result_t result = {0};
 8000ee2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ee6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000eea:	4618      	mov	r0, r3
 8000eec:	2364      	movs	r3, #100	@ 0x64
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f00f fce7 	bl	80108c4 <memset>

		if (!do_detector_get_next(&resources, &sensor_cal_result, &result))
 8000ef6:	f107 020c 	add.w	r2, r7, #12
 8000efa:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000efe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fa38 	bl	8001378 <do_detector_get_next>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d009      	beq.n	8000f28 <acc_example_detector_distance+0x1a0>
		{
			printf("Could not get next result\n");
 8000f14:	4830      	ldr	r0, [pc, #192]	@ (8000fd8 <acc_example_detector_distance+0x250>)
 8000f16:	f00f fba3 	bl	8010660 <puts>
			cleanup(&resources);
 8000f1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f862 	bl	8000fe8 <cleanup>
			return EXIT_FAILURE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e046      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
		}

		/* If "calibration needed" is indicated, the sensor needs to be recalibrated and the detector calibration updated */
		if (result.calibration_needed)
 8000f28:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f2c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000f30:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d038      	beq.n	8000faa <acc_example_detector_distance+0x222>
		{
			printf("Sensor recalibration and detector calibration update needed ... \n");
 8000f38:	4828      	ldr	r0, [pc, #160]	@ (8000fdc <acc_example_detector_distance+0x254>)
 8000f3a:	f00f fb91 	bl	8010660 <puts>

			if (!do_sensor_calibration(resources.sensor, &sensor_cal_result, resources.buffer, resources.buffer_size))
 8000f3e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000f42:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000f46:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000f4a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000f4e:	f000 f93f 	bl	80011d0 <do_sensor_calibration>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f083 0301 	eor.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d009      	beq.n	8000f72 <acc_example_detector_distance+0x1ea>
			{
				printf("Sensor calibration failed\n");
 8000f5e:	481c      	ldr	r0, [pc, #112]	@ (8000fd0 <acc_example_detector_distance+0x248>)
 8000f60:	f00f fb7e 	bl	8010660 <puts>
				cleanup(&resources);
 8000f64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f83d 	bl	8000fe8 <cleanup>
				return EXIT_FAILURE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e021      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
			}

			/* Once the sensor is recalibrated, the detector calibration should be updated and measuring can continue. */
			if (!do_detector_calibration_update(&resources, &sensor_cal_result))
 8000f72:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000f76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f9bf 	bl	8001300 <do_detector_calibration_update>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d009      	beq.n	8000fa2 <acc_example_detector_distance+0x21a>
			{
				printf("Detector calibration update failed\n");
 8000f8e:	4814      	ldr	r0, [pc, #80]	@ (8000fe0 <acc_example_detector_distance+0x258>)
 8000f90:	f00f fb66 	bl	8010660 <puts>
				cleanup(&resources);
 8000f94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f825 	bl	8000fe8 <cleanup>
				return EXIT_FAILURE;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e009      	b.n	8000fb6 <acc_example_detector_distance+0x22e>
			}

			printf("Sensor recalibration and detector calibration update done!\n");
 8000fa2:	4810      	ldr	r0, [pc, #64]	@ (8000fe4 <acc_example_detector_distance+0x25c>)
 8000fa4:	f00f fb5c 	bl	8010660 <puts>
 8000fa8:	e79b      	b.n	8000ee2 <acc_example_detector_distance+0x15a>
		}
		else
		{
			print_distance_result(&result);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fa6a 	bl	8001488 <print_distance_result>
	{
 8000fb4:	e795      	b.n	8000ee2 <acc_example_detector_distance+0x15a>
	cleanup(&resources);

	printf("Done!\n");

	return EXIT_SUCCESS;
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	08011628 	.word	0x08011628
 8000fc4:	08011648 	.word	0x08011648
 8000fc8:	08011678 	.word	0x08011678
 8000fcc:	080116a0 	.word	0x080116a0
 8000fd0:	080116bc 	.word	0x080116bc
 8000fd4:	080116d8 	.word	0x080116d8
 8000fd8:	080116f4 	.word	0x080116f4
 8000fdc:	08011710 	.word	0x08011710
 8000fe0:	08011754 	.word	0x08011754
 8000fe4:	08011778 	.word	0x08011778

08000fe8 <cleanup>:

static void cleanup(distance_detector_resources_t *resources)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	acc_hal_integration_sensor_disable(SENSOR_ID);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f002 fcc7 	bl	8003984 <acc_hal_integration_sensor_disable>
	acc_hal_integration_sensor_supply_off(SENSOR_ID);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f002 fc9a 	bl	8003930 <acc_hal_integration_sensor_supply_off>

	acc_detector_distance_config_destroy(resources->config);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	f002 febf 	bl	8003d84 <acc_detector_distance_config_destroy>
	acc_detector_distance_destroy(resources->handle);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fedc 	bl	8003dc8 <acc_detector_distance_destroy>

	acc_integration_mem_free(resources->buffer);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fddc 	bl	8003bd2 <acc_integration_mem_free>
	acc_integration_mem_free(resources->detector_cal_result_static);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fdd7 	bl	8003bd2 <acc_integration_mem_free>

	if (resources->sensor != NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <cleanup+0x4e>
	{
		acc_sensor_destroy(resources->sensor);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f008 f817 	bl	8009064 <acc_sensor_destroy>
	}
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <set_config>:

static void set_config(acc_detector_distance_config_t *detector_config, distance_preset_config_t preset)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
	// Add configuration of the detector here
	switch (preset)
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d033      	beq.n	80010b8 <set_config+0x7a>
 8001050:	2b02      	cmp	r3, #2
 8001052:	dc5f      	bgt.n	8001114 <set_config+0xd6>
 8001054:	2b00      	cmp	r3, #0
 8001056:	d05c      	beq.n	8001112 <set_config+0xd4>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d000      	beq.n	800105e <set_config+0x20>
			acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
			acc_detector_distance_config_signal_quality_set(detector_config, 20.0f);
			acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
			break;
	}
}
 800105c:	e05a      	b.n	8001114 <set_config+0xd6>
			acc_detector_distance_config_start_set(detector_config, 0.25f);
 800105e:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f003 fc10 	bl	8004888 <acc_detector_distance_config_start_set>
			acc_detector_distance_config_end_set(detector_config, 3.0f);
 8001068:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f003 fc17 	bl	80048a0 <acc_detector_distance_config_end_set>
			acc_detector_distance_config_max_step_length_set(detector_config, 0U);
 8001072:	2100      	movs	r1, #0
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f003 fc1f 	bl	80048b8 <acc_detector_distance_config_max_step_length_set>
			acc_detector_distance_config_max_profile_set(detector_config, ACC_CONFIG_PROFILE_5);
 800107a:	2105      	movs	r1, #5
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f003 fc3f 	bl	8004900 <acc_detector_distance_config_max_profile_set>
			acc_detector_distance_config_reflector_shape_set(detector_config, ACC_DETECTOR_DISTANCE_REFLECTOR_SHAPE_GENERIC);
 8001082:	2100      	movs	r1, #0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f003 fc6b 	bl	8004960 <acc_detector_distance_config_reflector_shape_set>
			acc_detector_distance_config_peak_sorting_set(detector_config, ACC_DETECTOR_DISTANCE_PEAK_SORTING_STRONGEST);
 800108a:	2101      	movs	r1, #1
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f003 fc4f 	bl	8004930 <acc_detector_distance_config_peak_sorting_set>
			acc_detector_distance_config_threshold_method_set(detector_config, ACC_DETECTOR_DISTANCE_THRESHOLD_METHOD_CFAR);
 8001092:	2103      	movs	r1, #3
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f003 fc3f 	bl	8004918 <acc_detector_distance_config_threshold_method_set>
			acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
 800109a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f003 fc52 	bl	8004948 <acc_detector_distance_config_threshold_sensitivity_set>
			acc_detector_distance_config_signal_quality_set(detector_config, 15.0f);
 80010a4:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f003 fc1d 	bl	80048e8 <acc_detector_distance_config_signal_quality_set>
			acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
 80010ae:	2100      	movs	r1, #0
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f003 fc0d 	bl	80048d0 <acc_detector_distance_config_close_range_leakage_cancellation_set>
			break;
 80010b6:	e02d      	b.n	8001114 <set_config+0xd6>
			acc_detector_distance_config_start_set(detector_config, 0.25f);
 80010b8:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f003 fbe3 	bl	8004888 <acc_detector_distance_config_start_set>
			acc_detector_distance_config_end_set(detector_config, 3.0f);
 80010c2:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f003 fbea 	bl	80048a0 <acc_detector_distance_config_end_set>
			acc_detector_distance_config_max_step_length_set(detector_config, 2U);
 80010cc:	2102      	movs	r1, #2
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f003 fbf2 	bl	80048b8 <acc_detector_distance_config_max_step_length_set>
			acc_detector_distance_config_max_profile_set(detector_config, ACC_CONFIG_PROFILE_3);
 80010d4:	2103      	movs	r1, #3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f003 fc12 	bl	8004900 <acc_detector_distance_config_max_profile_set>
			acc_detector_distance_config_reflector_shape_set(detector_config, ACC_DETECTOR_DISTANCE_REFLECTOR_SHAPE_GENERIC);
 80010dc:	2100      	movs	r1, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f003 fc3e 	bl	8004960 <acc_detector_distance_config_reflector_shape_set>
			acc_detector_distance_config_peak_sorting_set(detector_config, ACC_DETECTOR_DISTANCE_PEAK_SORTING_STRONGEST);
 80010e4:	2101      	movs	r1, #1
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f003 fc22 	bl	8004930 <acc_detector_distance_config_peak_sorting_set>
			acc_detector_distance_config_threshold_method_set(detector_config, ACC_DETECTOR_DISTANCE_THRESHOLD_METHOD_CFAR);
 80010ec:	2103      	movs	r1, #3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f003 fc12 	bl	8004918 <acc_detector_distance_config_threshold_method_set>
			acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
 80010f4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f003 fc25 	bl	8004948 <acc_detector_distance_config_threshold_sensitivity_set>
			acc_detector_distance_config_signal_quality_set(detector_config, 20.0f);
 80010fe:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f003 fbf0 	bl	80048e8 <acc_detector_distance_config_signal_quality_set>
			acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
 8001108:	2100      	movs	r1, #0
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f003 fbe0 	bl	80048d0 <acc_detector_distance_config_close_range_leakage_cancellation_set>
			break;
 8001110:	e000      	b.n	8001114 <set_config+0xd6>
			break;
 8001112:	bf00      	nop
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <initialize_detector_resources>:

static bool initialize_detector_resources(distance_detector_resources_t *resources)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	resources->handle = acc_detector_distance_create(resources->config);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fea3 	bl	8003e74 <acc_detector_distance_create>
 800112e:	4602      	mov	r2, r0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	609a      	str	r2, [r3, #8]
	if (resources->handle == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d104      	bne.n	8001146 <initialize_detector_resources+0x2a>
	{
		printf("acc_detector_distance_create() failed\n");
 800113c:	4820      	ldr	r0, [pc, #128]	@ (80011c0 <initialize_detector_resources+0xa4>)
 800113e:	f00f fa8f 	bl	8010660 <puts>
		return false;
 8001142:	2300      	movs	r3, #0
 8001144:	e037      	b.n	80011b6 <initialize_detector_resources+0x9a>
	}

	if (!acc_detector_distance_get_sizes(resources->handle, &(resources->buffer_size), &(resources->detector_cal_result_static_size)))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6898      	ldr	r0, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f103 0110 	add.w	r1, r3, #16
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3318      	adds	r3, #24
 8001154:	461a      	mov	r2, r3
 8001156:	f002 fe23 	bl	8003da0 <acc_detector_distance_get_sizes>
 800115a:	4603      	mov	r3, r0
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <initialize_detector_resources+0x54>
	{
		printf("acc_detector_distance_get_sizes() failed\n");
 8001166:	4817      	ldr	r0, [pc, #92]	@ (80011c4 <initialize_detector_resources+0xa8>)
 8001168:	f00f fa7a 	bl	8010660 <puts>
		return false;
 800116c:	2300      	movs	r3, #0
 800116e:	e022      	b.n	80011b6 <initialize_detector_resources+0x9a>
	}

	resources->buffer = acc_integration_mem_alloc(resources->buffer_size);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fd20 	bl	8003bba <acc_integration_mem_alloc>
 800117a:	4602      	mov	r2, r0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]
	if (resources->buffer == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d104      	bne.n	8001192 <initialize_detector_resources+0x76>
	{
		printf("sensor buffer allocation failed\n");
 8001188:	480f      	ldr	r0, [pc, #60]	@ (80011c8 <initialize_detector_resources+0xac>)
 800118a:	f00f fa69 	bl	8010660 <puts>
		return false;
 800118e:	2300      	movs	r3, #0
 8001190:	e011      	b.n	80011b6 <initialize_detector_resources+0x9a>
	}

	resources->detector_cal_result_static = acc_integration_mem_alloc(resources->detector_cal_result_static_size);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fd0f 	bl	8003bba <acc_integration_mem_alloc>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	615a      	str	r2, [r3, #20]
	if (resources->detector_cal_result_static == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <initialize_detector_resources+0x98>
	{
		printf("calibration buffer allocation failed\n");
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <initialize_detector_resources+0xb0>)
 80011ac:	f00f fa58 	bl	8010660 <puts>
		return false;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e000      	b.n	80011b6 <initialize_detector_resources+0x9a>
	}

	return true;
 80011b4:	2301      	movs	r3, #1
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	080117b4 	.word	0x080117b4
 80011c4:	080117dc 	.word	0x080117dc
 80011c8:	08011808 	.word	0x08011808
 80011cc:	08011828 	.word	0x08011828

080011d0 <do_sensor_calibration>:

static bool do_sensor_calibration(acc_sensor_t *sensor, acc_cal_result_t *sensor_cal_result, void *buffer, uint32_t buffer_size)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	603b      	str	r3, [r7, #0]
	bool           status              = false;
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]
	bool           cal_complete        = false;
 80011e2:	2300      	movs	r3, #0
 80011e4:	747b      	strb	r3, [r7, #17]
	const uint16_t calibration_retries = 1U;
 80011e6:	2301      	movs	r3, #1
 80011e8:	827b      	strh	r3, [r7, #18]

	// Random disturbances may cause the calibration to fail. At failure, retry at least once.
	for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	82bb      	strh	r3, [r7, #20]
 80011ee:	e02c      	b.n	800124a <do_sensor_calibration+0x7a>
	{
		// Reset sensor before calibration by disabling/enabling it
		acc_hal_integration_sensor_disable(SENSOR_ID);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f002 fbc7 	bl	8003984 <acc_hal_integration_sensor_disable>
		acc_hal_integration_sensor_enable(SENSOR_ID);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f002 fbaa 	bl	8003950 <acc_hal_integration_sensor_enable>

		do
		{
			status = acc_sensor_calibrate(sensor, &cal_complete, sensor_cal_result, buffer, buffer_size);
 80011fc:	f107 0111 	add.w	r1, r7, #17
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f007 ff97 	bl	800913c <acc_sensor_calibrate>
 800120e:	4603      	mov	r3, r0
 8001210:	75fb      	strb	r3, [r7, #23]

			if (status && !cal_complete)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00c      	beq.n	8001232 <do_sensor_calibration+0x62>
 8001218:	7c7b      	ldrb	r3, [r7, #17]
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <do_sensor_calibration+0x62>
			{
				status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 8001224:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001228:	2001      	movs	r0, #1
 800122a:	f002 fbc5 	bl	80039b8 <acc_hal_integration_wait_for_sensor_interrupt>
 800122e:	4603      	mov	r3, r0
 8001230:	75fb      	strb	r3, [r7, #23]
			}
		} while (status && !cal_complete);
 8001232:	7dfb      	ldrb	r3, [r7, #23]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <do_sensor_calibration+0x74>
 8001238:	7c7b      	ldrb	r3, [r7, #17]
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1db      	bne.n	80011fc <do_sensor_calibration+0x2c>
	for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8001244:	8abb      	ldrh	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	82bb      	strh	r3, [r7, #20]
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <do_sensor_calibration+0x8e>
 8001256:	8aba      	ldrh	r2, [r7, #20]
 8001258:	8a7b      	ldrh	r3, [r7, #18]
 800125a:	429a      	cmp	r2, r3
 800125c:	d9c8      	bls.n	80011f0 <do_sensor_calibration+0x20>
	}

	if (status)
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <do_sensor_calibration+0xa0>
	{
		/* Reset sensor after calibration by disabling/enabling it */
		acc_hal_integration_sensor_disable(SENSOR_ID);
 8001264:	2001      	movs	r0, #1
 8001266:	f002 fb8d 	bl	8003984 <acc_hal_integration_sensor_disable>
		acc_hal_integration_sensor_enable(SENSOR_ID);
 800126a:	2001      	movs	r0, #1
 800126c:	f002 fb70 	bl	8003950 <acc_hal_integration_sensor_enable>
	}

	return status;
 8001270:	7dfb      	ldrb	r3, [r7, #23]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <do_full_detector_calibration>:

static bool do_full_detector_calibration(distance_detector_resources_t *resources, const acc_cal_result_t *sensor_cal_result)
{
 800127a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127c:	b08d      	sub	sp, #52	@ 0x34
 800127e:	af06      	add	r7, sp, #24
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
	bool done = false;
 8001284:	2300      	movs	r3, #0
 8001286:	75bb      	strb	r3, [r7, #22]
	bool status;

	do
	{
		status = acc_detector_distance_calibrate(resources->sensor,
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681d      	ldr	r5, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	689e      	ldr	r6, [r3, #8]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6952      	ldr	r2, [r2, #20]
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	6989      	ldr	r1, [r1, #24]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	301c      	adds	r0, #28
 80012a6:	f107 0416 	add.w	r4, r7, #22
 80012aa:	9404      	str	r4, [sp, #16]
 80012ac:	9003      	str	r0, [sp, #12]
 80012ae:	9102      	str	r1, [sp, #8]
 80012b0:	9201      	str	r2, [sp, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	4631      	mov	r1, r6
 80012ba:	4628      	mov	r0, r5
 80012bc:	f002 ff10 	bl	80040e0 <acc_detector_distance_calibrate>
 80012c0:	4603      	mov	r3, r0
 80012c2:	75fb      	strb	r3, [r7, #23]
		                                         resources->detector_cal_result_static,
		                                         resources->detector_cal_result_static_size,
		                                         &resources->detector_cal_result_dynamic,
		                                         &done);

		if (status && !done)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00c      	beq.n	80012e4 <do_full_detector_calibration+0x6a>
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <do_full_detector_calibration+0x6a>
		{
			status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 80012d6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80012da:	2001      	movs	r0, #1
 80012dc:	f002 fb6c 	bl	80039b8 <acc_hal_integration_wait_for_sensor_interrupt>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
		}
	} while (status && !done);
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <do_full_detector_calibration+0x7c>
 80012ea:	7dbb      	ldrb	r3, [r7, #22]
 80012ec:	f083 0301 	eor.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1c8      	bne.n	8001288 <do_full_detector_calibration+0xe>

	return status;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001300 <do_detector_calibration_update>:

static bool do_detector_calibration_update(distance_detector_resources_t *resources, const acc_cal_result_t *sensor_cal_result)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af04      	add	r7, sp, #16
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	bool done = false;
 800130a:	2300      	movs	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]
	bool status;

	do
	{
		status = acc_detector_distance_update_calibration(resources->sensor,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689c      	ldr	r4, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68dd      	ldr	r5, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	321c      	adds	r2, #28
 8001322:	f107 010e 	add.w	r1, r7, #14
 8001326:	9102      	str	r1, [sp, #8]
 8001328:	9201      	str	r2, [sp, #4]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	462b      	mov	r3, r5
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4621      	mov	r1, r4
 8001332:	f003 f8cb 	bl	80044cc <acc_detector_distance_update_calibration>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
		                                                  resources->buffer,
		                                                  resources->buffer_size,
		                                                  &resources->detector_cal_result_dynamic,
		                                                  &done);

		if (status && !done)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <do_detector_calibration_update+0x5a>
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	f083 0301 	eor.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <do_detector_calibration_update+0x5a>
		{
			status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 800134c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001350:	2001      	movs	r0, #1
 8001352:	f002 fb31 	bl	80039b8 <acc_hal_integration_wait_for_sensor_interrupt>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
		}
	} while (status && !done);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <do_detector_calibration_update+0x6c>
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	f083 0301 	eor.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1d0      	bne.n	800130e <do_detector_calibration_update+0xe>

	return status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001378 <do_detector_get_next>:

static bool do_detector_get_next(distance_detector_resources_t  *resources,
                                 const acc_cal_result_t         *sensor_cal_result,
                                 acc_detector_distance_result_t *result)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b089      	sub	sp, #36	@ 0x24
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
	bool result_available = false;
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]

	do
	{
		if (!acc_detector_distance_prepare(
		        resources->handle, resources->config, resources->sensor, sensor_cal_result, resources->buffer, resources->buffer_size))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6898      	ldr	r0, [r3, #8]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6859      	ldr	r1, [r3, #4]
		if (!acc_detector_distance_prepare(
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681c      	ldr	r4, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	6912      	ldr	r2, [r2, #16]
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4622      	mov	r2, r4
 80013a4:	f003 f926 	bl	80045f4 <acc_detector_distance_prepare>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f083 0301 	eor.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <do_detector_get_next+0x46>
		{
			printf("acc_detector_distance_prepare() failed\n");
 80013b4:	482f      	ldr	r0, [pc, #188]	@ (8001474 <do_detector_get_next+0xfc>)
 80013b6:	f00f f953 	bl	8010660 <puts>
			return false;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e056      	b.n	800146c <do_detector_get_next+0xf4>
		}

		if (!acc_sensor_measure(resources->sensor))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 ff42 	bl	800924c <acc_sensor_measure>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <do_detector_get_next+0x66>
		{
			printf("acc_sensor_measure() failed\n");
 80013d4:	4828      	ldr	r0, [pc, #160]	@ (8001478 <do_detector_get_next+0x100>)
 80013d6:	f00f f943 	bl	8010660 <puts>
			return false;
 80013da:	2300      	movs	r3, #0
 80013dc:	e046      	b.n	800146c <do_detector_get_next+0xf4>
		}

		if (!acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS))
 80013de:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013e2:	2001      	movs	r0, #1
 80013e4:	f002 fae8 	bl	80039b8 <acc_hal_integration_wait_for_sensor_interrupt>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f083 0301 	eor.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <do_detector_get_next+0x86>
		{
			printf("Sensor interrupt timeout\n");
 80013f4:	4821      	ldr	r0, [pc, #132]	@ (800147c <do_detector_get_next+0x104>)
 80013f6:	f00f f933 	bl	8010660 <puts>
			return false;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e036      	b.n	800146c <do_detector_get_next+0xf4>
		}

		if (!acc_sensor_read(resources->sensor, resources->buffer, resources->buffer_size))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	68d9      	ldr	r1, [r3, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	461a      	mov	r2, r3
 800140c:	f007 ff46 	bl	800929c <acc_sensor_read>
 8001410:	4603      	mov	r3, r0
 8001412:	f083 0301 	eor.w	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <do_detector_get_next+0xae>
		{
			printf("acc_sensor_read() failed\n");
 800141c:	4818      	ldr	r0, [pc, #96]	@ (8001480 <do_detector_get_next+0x108>)
 800141e:	f00f f91f 	bl	8010660 <puts>
			return false;
 8001422:	2300      	movs	r3, #0
 8001424:	e022      	b.n	800146c <do_detector_get_next+0xf4>
		}

		if (!acc_detector_distance_process(resources->handle,
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6898      	ldr	r0, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f103 041c 	add.w	r4, r3, #28
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f107 0317 	add.w	r3, r7, #23
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4623      	mov	r3, r4
 8001444:	f003 f8fc 	bl	8004640 <acc_detector_distance_process>
 8001448:	4603      	mov	r3, r0
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <do_detector_get_next+0xe6>
		                                   resources->detector_cal_result_static,
		                                   &resources->detector_cal_result_dynamic,
		                                   &result_available,
		                                   result))
		{
			printf("acc_detector_distance_process() failed\n");
 8001454:	480b      	ldr	r0, [pc, #44]	@ (8001484 <do_detector_get_next+0x10c>)
 8001456:	f00f f903 	bl	8010660 <puts>
			return false;
 800145a:	2300      	movs	r3, #0
 800145c:	e006      	b.n	800146c <do_detector_get_next+0xf4>
		}
	} while (!result_available);
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	f083 0301 	eor.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d18e      	bne.n	8001388 <do_detector_get_next+0x10>

	return true;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	08011850 	.word	0x08011850
 8001478:	08011878 	.word	0x08011878
 800147c:	08011894 	.word	0x08011894
 8001480:	080118b0 	.word	0x080118b0
 8001484:	080118cc 	.word	0x080118cc

08001488 <print_distance_result>:

static void print_distance_result(const acc_detector_distance_result_t *result)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	printf("%d detected distances", result->num_distances);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001496:	4619      	mov	r1, r3
 8001498:	484b      	ldr	r0, [pc, #300]	@ (80015c8 <print_distance_result+0x140>)
 800149a:	f00f f871 	bl	8010580 <iprintf>
	if (result->num_distances > 0)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8087 	beq.w	80015b8 <print_distance_result+0x130>
	{
		printf(": ");
 80014aa:	4848      	ldr	r0, [pc, #288]	@ (80015cc <print_distance_result+0x144>)
 80014ac:	f00f f868 	bl	8010580 <iprintf>

		for (uint8_t i = 0; i < result->num_distances; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
 80014b4:	e079      	b.n	80015aa <print_distance_result+0x122>
		{
			printf("%" PRIfloat " m ", ACC_LOG_FLOAT_TO_INTEGER(result->distances[i]));
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d501      	bpl.n	80014d0 <print_distance_result+0x48>
 80014cc:	4940      	ldr	r1, [pc, #256]	@ (80015d0 <print_distance_result+0x148>)
 80014ce:	e000      	b.n	80014d2 <print_distance_result+0x4a>
 80014d0:	4940      	ldr	r1, [pc, #256]	@ (80015d4 <print_distance_result+0x14c>)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	d502      	bpl.n	80014fa <print_distance_result+0x72>
 80014f4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80014f8:	e001      	b.n	80014fe <print_distance_result+0x76>
 80014fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001502:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80015d8 <print_distance_result+0x150>
 8001506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800150a:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d502      	bpl.n	8001536 <print_distance_result+0xae>
 8001530:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001534:	e001      	b.n	800153a <print_distance_result+0xb2>
 8001536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800153a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80015d8 <print_distance_result+0x150>
 8001542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edd3 6a00 	vldr	s13, [r3]
 800155e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	d502      	bpl.n	800156e <print_distance_result+0xe6>
 8001568:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800156c:	e001      	b.n	8001572 <print_distance_result+0xea>
 800156e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001576:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80015d8 <print_distance_result+0x150>
 800157a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800157e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80015dc <print_distance_result+0x154>
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001596:	ee17 3a90 	vmov	r3, s15
 800159a:	ee16 2a10 	vmov	r2, s12
 800159e:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <print_distance_result+0x158>)
 80015a0:	f00e ffee 	bl	8010580 <iprintf>
		for (uint8_t i = 0; i < result->num_distances; i++)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	f4ff af7f 	bcc.w	80014b6 <print_distance_result+0x2e>
		}
	}

	printf("\n");
 80015b8:	200a      	movs	r0, #10
 80015ba:	f00e fff3 	bl	80105a4 <putchar>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	080118f4 	.word	0x080118f4
 80015cc:	0801190c 	.word	0x0801190c
 80015d0:	08011910 	.word	0x08011910
 80015d4:	08011914 	.word	0x08011914
 80015d8:	350637bd 	.word	0x350637bd
 80015dc:	49742400 	.word	0x49742400
 80015e0:	08011918 	.word	0x08011918

080015e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_GPIO_Init+0x2c>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <MX_GPIO_Init+0x2c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_GPIO_Init+0x2c>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001618:	f000 fa09 	bl	8001a2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161c:	f000 f809 	bl	8001632 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f7ff ffe0 	bl	80015e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001624:	f000 f852 	bl	80016cc <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  acc_example_detector_distance(0, NULL);
 8001628:	2100      	movs	r1, #0
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fbac 	bl	8000d88 <acc_example_detector_distance>
 8001630:	e7fa      	b.n	8001628 <main+0x14>

08001632 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b098      	sub	sp, #96	@ 0x60
 8001636:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	2248      	movs	r2, #72	@ 0x48
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f00f f93f 	bl	80108c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001654:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001658:	f000 fd4a 	bl	80020f0 <HAL_PWREx_ControlVoltageScaling>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001662:	f000 f82c 	bl	80016be <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001666:	2310      	movs	r3, #16
 8001668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800166a:	2301      	movs	r3, #1
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001672:	2360      	movs	r3, #96	@ 0x60
 8001674:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001676:	2300      	movs	r3, #0
 8001678:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fdda 	bl	8002238 <HAL_RCC_OscConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800168a:	f000 f818 	bl	80016be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168e:	230f      	movs	r3, #15
 8001690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 fa42 	bl	8002b30 <HAL_RCC_ClockConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80016b2:	f000 f804 	bl	80016be <Error_Handler>
  }
}
 80016b6:	bf00      	nop
 80016b8:	3760      	adds	r7, #96	@ 0x60
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c2:	b672      	cpsid	i
}
 80016c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c6:	bf00      	nop
 80016c8:	e7fd      	b.n	80016c6 <Error_Handler+0x8>
	...

080016cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <MX_SPI1_Init+0x74>)
 80016d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <MX_SPI1_Init+0x78>)
 80016d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_SPI1_Init+0x74>)
 80016d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_SPI1_Init+0x74>)
 80016e6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_SPI1_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <MX_SPI1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_SPI1_Init+0x74>)
 80016fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <MX_SPI1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_SPI1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_SPI1_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_SPI1_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_SPI1_Init+0x74>)
 800171a:	2207      	movs	r2, #7
 800171c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_SPI1_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_SPI1_Init+0x74>)
 8001726:	2208      	movs	r2, #8
 8001728:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_SPI1_Init+0x74>)
 800172c:	f001 fc86 	bl	800303c <HAL_SPI_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001736:	f7ff ffc2 	bl	80016be <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000228 	.word	0x20000228
 8001744:	40013000 	.word	0x40013000

08001748 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <HAL_SPI_MspInit+0x7c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d128      	bne.n	80017bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <HAL_SPI_MspInit+0x80>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <HAL_SPI_MspInit+0x80>)
 8001770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001774:	6613      	str	r3, [r2, #96]	@ 0x60
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_SPI_MspInit+0x80>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_SPI_MspInit+0x80>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <HAL_SPI_MspInit+0x80>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <HAL_SPI_MspInit+0x80>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800179a:	23c2      	movs	r3, #194	@ 0xc2
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017aa:	2305      	movs	r3, #5
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f000 fab8 	bl	8001d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	@ 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40013000 	.word	0x40013000
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <HAL_MspInit+0x44>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <HAL_MspInit+0x44>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186a:	f000 f935 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}

08001872 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e00a      	b.n	800189a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001884:	f3af 8000 	nop.w
 8001888:	4601      	mov	r1, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	60ba      	str	r2, [r7, #8]
 8001890:	b2ca      	uxtb	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	3301      	adds	r3, #1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dbf0      	blt.n	8001884 <_read+0x12>
  }

  return len;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e009      	b.n	80018d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf1      	blt.n	80018be <_write+0x12>
  }
  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_close>:

int _close(int file)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800190c:	605a      	str	r2, [r3, #4]
  return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_isatty>:

int _isatty(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	@ (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f00f f800 	bl	8010980 <__errno>
 8001980:	4603      	mov	r3, r0
 8001982:	220c      	movs	r2, #12
 8001984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20050000 	.word	0x20050000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	2000028c 	.word	0x2000028c
 80019b4:	20000408 	.word	0x20000408

080019b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <SystemInit+0x20>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c2:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <SystemInit+0x20>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e0:	f7ff ffea 	bl	80019b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	@ (8001a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	@ (8001a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <LoopForever+0xe>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a28 <LoopForever+0x16>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f00e ffbf 	bl	801098c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a0e:	f7ff fe01 	bl	8001614 <main>

08001a12 <LoopForever>:

LoopForever:
    b LoopForever
 8001a12:	e7fe      	b.n	8001a12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a14:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001a20:	08017664 	.word	0x08017664
  ldr r2, =_sbss
 8001a24:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001a28:	20000408 	.word	0x20000408

08001a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_2_IRQHandler>

08001a2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f943 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f80e 	bl	8001a60 <HAL_InitTick>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	e001      	b.n	8001a54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a50:	f7ff febc 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_InitTick+0x6c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d023      	beq.n	8001abc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a74:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <HAL_InitTick+0x70>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <HAL_InitTick+0x6c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f941 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d809      	bhi.n	8001ab0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 f919 	bl	8001cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_InitTick+0x74>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e007      	b.n	8001ac0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e004      	b.n	8001ac0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e001      	b.n	8001ac0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000290 	.word	0x20000290

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000290 	.word	0x20000290

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000008 	.word	0x20000008

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b92:	4a04      	ldr	r2, [pc, #16]	@ (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	@ (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff47 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff5c 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffb0 	bl	8001c80 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e166      	b.n	800200a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8158 	beq.w	8002004 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d005      	beq.n	8001d6c <HAL_GPIO_Init+0x40>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d130      	bne.n	8001dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da2:	2201      	movs	r2, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	f003 0201 	and.w	r2, r3, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d017      	beq.n	8001e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d123      	bne.n	8001e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0203 	and.w	r2, r3, #3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80b2 	beq.w	8002004 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea0:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <HAL_GPIO_Init+0x2fc>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea4:	4a60      	ldr	r2, [pc, #384]	@ (8002028 <HAL_GPIO_Init+0x2fc>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eac:	4b5e      	ldr	r3, [pc, #376]	@ (8002028 <HAL_GPIO_Init+0x2fc>)
 8001eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eb8:	4a5c      	ldr	r2, [pc, #368]	@ (800202c <HAL_GPIO_Init+0x300>)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ee2:	d02b      	beq.n	8001f3c <HAL_GPIO_Init+0x210>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a52      	ldr	r2, [pc, #328]	@ (8002030 <HAL_GPIO_Init+0x304>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d025      	beq.n	8001f38 <HAL_GPIO_Init+0x20c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a51      	ldr	r2, [pc, #324]	@ (8002034 <HAL_GPIO_Init+0x308>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d01f      	beq.n	8001f34 <HAL_GPIO_Init+0x208>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a50      	ldr	r2, [pc, #320]	@ (8002038 <HAL_GPIO_Init+0x30c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d019      	beq.n	8001f30 <HAL_GPIO_Init+0x204>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a4f      	ldr	r2, [pc, #316]	@ (800203c <HAL_GPIO_Init+0x310>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_GPIO_Init+0x200>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a4e      	ldr	r2, [pc, #312]	@ (8002040 <HAL_GPIO_Init+0x314>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00d      	beq.n	8001f28 <HAL_GPIO_Init+0x1fc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a4d      	ldr	r2, [pc, #308]	@ (8002044 <HAL_GPIO_Init+0x318>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x1f8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a4c      	ldr	r2, [pc, #304]	@ (8002048 <HAL_GPIO_Init+0x31c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_GPIO_Init+0x1f4>
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	e00e      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f20:	2308      	movs	r3, #8
 8001f22:	e00c      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f24:	2306      	movs	r3, #6
 8001f26:	e00a      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f28:	2305      	movs	r3, #5
 8001f2a:	e008      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	e006      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f30:	2303      	movs	r3, #3
 8001f32:	e004      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_GPIO_Init+0x212>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f002 0203 	and.w	r2, r2, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4093      	lsls	r3, r2
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4e:	4937      	ldr	r1, [pc, #220]	@ (800202c <HAL_GPIO_Init+0x300>)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f80:	4a32      	ldr	r2, [pc, #200]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f86:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001faa:	4a28      	ldr	r2, [pc, #160]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <HAL_GPIO_Init+0x320>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ffe:	4a13      	ldr	r2, [pc, #76]	@ (800204c <HAL_GPIO_Init+0x320>)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	f47f ae91 	bne.w	8001d3c <HAL_GPIO_Init+0x10>
  }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00
 800203c:	48001000 	.word	0x48001000
 8002040:	48001400 	.word	0x48001400
 8002044:	48001800 	.word	0x48001800
 8002048:	48001c00 	.word	0x48001c00
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e001      	b.n	8002072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c0:	d102      	bne.n	80020c8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80020c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020c6:	e00b      	b.n	80020e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <HAL_PWREx_GetVoltageRange+0x3c>)
 80020ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d6:	d102      	bne.n	80020de <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80020d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020dc:	e000      	b.n	80020e0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80020de:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40007000 	.word	0x40007000

080020f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d141      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020fe:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210a:	d131      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800210c:	4b47      	ldr	r3, [pc, #284]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002112:	4a46      	ldr	r2, [pc, #280]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002118:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800211c:	4b43      	ldr	r3, [pc, #268]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002124:	4a41      	ldr	r2, [pc, #260]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800212c:	4b40      	ldr	r3, [pc, #256]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2232      	movs	r2, #50	@ 0x32
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	4a3f      	ldr	r2, [pc, #252]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	3301      	adds	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002142:	e002      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3b01      	subs	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214a:	4b38      	ldr	r3, [pc, #224]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002156:	d102      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f2      	bne.n	8002144 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800215e:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216a:	d158      	bne.n	800221e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e057      	b.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002170:	4b2e      	ldr	r3, [pc, #184]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002176:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800217c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002180:	e04d      	b.n	800221e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002188:	d141      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800218a:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002196:	d131      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002198:	4b24      	ldr	r3, [pc, #144]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219e:	4a23      	ldr	r2, [pc, #140]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a8:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021b0:	4a1e      	ldr	r2, [pc, #120]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2232      	movs	r2, #50	@ 0x32
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0c9b      	lsrs	r3, r3, #18
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ce:	e002      	b.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e2:	d102      	bne.n	80021ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f2      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f6:	d112      	bne.n	800221e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e011      	b.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800220c:	e007      	b.n	800221e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002216:	4a05      	ldr	r2, [pc, #20]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002218:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800221c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40007000 	.word	0x40007000
 8002230:	20000000 	.word	0x20000000
 8002234:	431bde83 	.word	0x431bde83

08002238 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f000 bc68 	b.w	8002b1c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224c:	4b97      	ldr	r3, [pc, #604]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002256:	4b95      	ldr	r3, [pc, #596]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80e6 	beq.w	800243a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_RCC_OscConfig+0x4c>
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	f040 808d 	bne.w	8002396 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b01      	cmp	r3, #1
 8002280:	f040 8089 	bne.w	8002396 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002284:	4b89      	ldr	r3, [pc, #548]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <HAL_RCC_OscConfig+0x66>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	f000 bc3f 	b.w	8002b1c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022a2:	4b82      	ldr	r3, [pc, #520]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_RCC_OscConfig+0x80>
 80022ae:	4b7f      	ldr	r3, [pc, #508]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_OscConfig+0x8c>
 80022b8:	4b7c      	ldr	r3, [pc, #496]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d224      	bcs.n	8002312 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fdf5 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	f000 bc1f 	b.w	8002b1c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022de:	4b73      	ldr	r3, [pc, #460]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a72      	ldr	r2, [pc, #456]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b70      	ldr	r3, [pc, #448]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	496d      	ldr	r1, [pc, #436]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fc:	4b6b      	ldr	r3, [pc, #428]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4968      	ldr	r1, [pc, #416]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
 8002310:	e025      	b.n	800235e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002312:	4b66      	ldr	r3, [pc, #408]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a65      	ldr	r2, [pc, #404]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b63      	ldr	r3, [pc, #396]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	4960      	ldr	r1, [pc, #384]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002330:	4b5e      	ldr	r3, [pc, #376]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	495b      	ldr	r1, [pc, #364]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fdb4 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e3de      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800235e:	f000 fd21 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b51      	ldr	r3, [pc, #324]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4950      	ldr	r1, [pc, #320]	@ (80024b0 <HAL_RCC_OscConfig+0x278>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a4e      	ldr	r2, [pc, #312]	@ (80024b4 <HAL_RCC_OscConfig+0x27c>)
 800237c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800237e:	4b4e      	ldr	r3, [pc, #312]	@ (80024b8 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fb6c 	bl	8001a60 <HAL_InitTick>
 8002388:	4603      	mov	r3, r0
 800238a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d052      	beq.n	8002438 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	e3c2      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d032      	beq.n	8002404 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800239e:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a42      	ldr	r2, [pc, #264]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023aa:	f7ff fba9 	bl	8001b00 <HAL_GetTick>
 80023ae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b2:	f7ff fba5 	bl	8001b00 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e3ab      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d0:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a35      	ldr	r2, [pc, #212]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b33      	ldr	r3, [pc, #204]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	4930      	ldr	r1, [pc, #192]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ee:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	492b      	ldr	r1, [pc, #172]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
 8002402:	e01a      	b.n	800243a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002404:	4b29      	ldr	r3, [pc, #164]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a28      	ldr	r2, [pc, #160]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002410:	f7ff fb76 	bl	8001b00 <HAL_GetTick>
 8002414:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002418:	f7ff fb72 	bl	8001b00 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e378      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800242a:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1e0>
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d073      	beq.n	800252e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x220>
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d10e      	bne.n	8002470 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d063      	beq.n	800252c <HAL_RCC_OscConfig+0x2f4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d15f      	bne.n	800252c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e355      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x250>
 800247a:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0b      	ldr	r2, [pc, #44]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e025      	b.n	80024d4 <HAL_RCC_OscConfig+0x29c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002490:	d114      	bne.n	80024bc <HAL_RCC_OscConfig+0x284>
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a02      	ldr	r2, [pc, #8]	@ (80024ac <HAL_RCC_OscConfig+0x274>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e013      	b.n	80024d4 <HAL_RCC_OscConfig+0x29c>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	080119d4 	.word	0x080119d4
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004
 80024bc:	4b8f      	ldr	r3, [pc, #572]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a8e      	ldr	r2, [pc, #568]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b8c      	ldr	r3, [pc, #560]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a8b      	ldr	r2, [pc, #556]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fb10 	bl	8001b00 <HAL_GetTick>
 80024e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fb0c 	bl	8001b00 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	@ 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e312      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	4b81      	ldr	r3, [pc, #516]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2ac>
 8002502:	e014      	b.n	800252e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fafc 	bl	8001b00 <HAL_GetTick>
 8002508:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff faf8 	bl	8001b00 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	@ 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e2fe      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251e:	4b77      	ldr	r3, [pc, #476]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x2d4>
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d060      	beq.n	80025fc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d005      	beq.n	800254c <HAL_RCC_OscConfig+0x314>
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d119      	bne.n	800257a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b02      	cmp	r3, #2
 800254a:	d116      	bne.n	800257a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	4b6b      	ldr	r3, [pc, #428]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_OscConfig+0x32c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e2db      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b65      	ldr	r3, [pc, #404]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	4962      	ldr	r1, [pc, #392]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	e040      	b.n	80025fc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d023      	beq.n	80025ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002582:	4b5e      	ldr	r3, [pc, #376]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5d      	ldr	r2, [pc, #372]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7ff fab7 	bl	8001b00 <HAL_GetTick>
 8002592:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7ff fab3 	bl	8001b00 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e2b9      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a8:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b51      	ldr	r3, [pc, #324]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	494e      	ldr	r1, [pc, #312]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
 80025c8:	e018      	b.n	80025fc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b4c      	ldr	r3, [pc, #304]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4b      	ldr	r2, [pc, #300]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff fa93 	bl	8001b00 <HAL_GetTick>
 80025da:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025de:	f7ff fa8f 	bl	8001b00 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e295      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f0:	4b42      	ldr	r3, [pc, #264]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8082 	beq.w	800270e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d05f      	beq.n	80026d2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002612:	4b3a      	ldr	r3, [pc, #232]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002618:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	429a      	cmp	r2, r3
 8002626:	d037      	beq.n	8002698 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e26d      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01b      	beq.n	8002682 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800264a:	4b2c      	ldr	r3, [pc, #176]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002650:	4a2a      	ldr	r2, [pc, #168]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800265a:	f7ff fa51 	bl	8001b00 <HAL_GetTick>
 800265e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002662:	f7ff fa4d 	bl	8001b00 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b11      	cmp	r3, #17
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e253      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002674:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ef      	bne.n	8002662 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002688:	f023 0210 	bic.w	r2, r3, #16
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	491a      	ldr	r1, [pc, #104]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269e:	4a17      	ldr	r2, [pc, #92]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7ff fa2a 	bl	8001b00 <HAL_GetTick>
 80026ac:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7ff fa26 	bl	8001b00 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b11      	cmp	r3, #17
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e22c      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c2:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCC_OscConfig+0x478>
 80026d0:	e01d      	b.n	800270e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d8:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <HAL_RCC_OscConfig+0x4c4>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7ff fa0d 	bl	8001b00 <HAL_GetTick>
 80026e6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7ff fa09 	bl	8001b00 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b11      	cmp	r3, #17
 80026f6:	d903      	bls.n	8002700 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e20f      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
 80026fc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002700:	4b83      	ldr	r3, [pc, #524]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ed      	bne.n	80026ea <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80bd 	beq.w	8002896 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002722:	4b7b      	ldr	r3, [pc, #492]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10e      	bne.n	800274c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b78      	ldr	r3, [pc, #480]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	4a77      	ldr	r2, [pc, #476]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002738:	6593      	str	r3, [r2, #88]	@ 0x58
 800273a:	4b75      	ldr	r3, [pc, #468]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	4b71      	ldr	r3, [pc, #452]	@ (8002914 <HAL_RCC_OscConfig+0x6dc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d118      	bne.n	800278a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002758:	4b6e      	ldr	r3, [pc, #440]	@ (8002914 <HAL_RCC_OscConfig+0x6dc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6d      	ldr	r2, [pc, #436]	@ (8002914 <HAL_RCC_OscConfig+0x6dc>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002764:	f7ff f9cc 	bl	8001b00 <HAL_GetTick>
 8002768:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7ff f9c8 	bl	8001b00 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1ce      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b65      	ldr	r3, [pc, #404]	@ (8002914 <HAL_RCC_OscConfig+0x6dc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d02c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002796:	4b5e      	ldr	r3, [pc, #376]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a8:	4959      	ldr	r1, [pc, #356]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027bc:	4b54      	ldr	r3, [pc, #336]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	4a53      	ldr	r2, [pc, #332]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027cc:	4b50      	ldr	r3, [pc, #320]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027dc:	e018      	b.n	8002810 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027de:	4b4c      	ldr	r3, [pc, #304]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ee:	e00f      	b.n	8002810 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027f0:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	4a46      	ldr	r2, [pc, #280]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002800:	4b43      	ldr	r3, [pc, #268]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	4a42      	ldr	r2, [pc, #264]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d016      	beq.n	8002846 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7ff f972 	bl	8001b00 <HAL_GetTick>
 800281c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7ff f96e 	bl	8001b00 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e172      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002836:	4b36      	ldr	r3, [pc, #216]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ed      	beq.n	8002820 <HAL_RCC_OscConfig+0x5e8>
 8002844:	e01d      	b.n	8002882 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7ff f95b 	bl	8001b00 <HAL_GetTick>
 800284a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7ff f957 	bl	8001b00 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e15b      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002864:	4b2a      	ldr	r3, [pc, #168]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1ed      	bne.n	800284e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002872:	4b27      	ldr	r3, [pc, #156]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002878:	4a25      	ldr	r2, [pc, #148]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 800287a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800287e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002886:	2b01      	cmp	r3, #1
 8002888:	d105      	bne.n	8002896 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288a:	4b21      	ldr	r3, [pc, #132]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	4a20      	ldr	r2, [pc, #128]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 8002890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002894:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d041      	beq.n	8002926 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028aa:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80028ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b0:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7ff f921 	bl	8001b00 <HAL_GetTick>
 80028be:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c2:	f7ff f91d 	bl	8001b00 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e123      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80028d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ef      	beq.n	80028c2 <HAL_RCC_OscConfig+0x68a>
 80028e2:	e020      	b.n	8002926 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80028e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028ea:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <HAL_RCC_OscConfig+0x6d8>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7ff f904 	bl	8001b00 <HAL_GetTick>
 80028f8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028fa:	e00d      	b.n	8002918 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fc:	f7ff f900 	bl	8001b00 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d906      	bls.n	8002918 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e106      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002918:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 800291a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ea      	bne.n	80028fc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80f5 	beq.w	8002b1a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	2b02      	cmp	r3, #2
 8002936:	f040 80cb 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800293a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0203 	and.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	429a      	cmp	r2, r3
 800294c:	d12c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002958:	3b01      	subs	r3, #1
 800295a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d123      	bne.n	80029a8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d11b      	bne.n	80029a8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d113      	bne.n	80029a8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	3b01      	subs	r3, #1
 800298e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d06d      	beq.n	8002a84 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d068      	beq.n	8002a80 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0a8      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029ca:	4b56      	ldr	r3, [pc, #344]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a55      	ldr	r2, [pc, #340]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 80029d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d6:	f7ff f893 	bl	8001b00 <HAL_GetTick>
 80029da:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7ff f88f 	bl	8001b00 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e095      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fc:	4b49      	ldr	r3, [pc, #292]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_RCC_OscConfig+0x8f0>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a16:	0212      	lsls	r2, r2, #8
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a1e:	0852      	lsrs	r2, r2, #1
 8002a20:	3a01      	subs	r2, #1
 8002a22:	0552      	lsls	r2, r2, #21
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0652      	lsls	r2, r2, #25
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a36:	06d2      	lsls	r2, r2, #27
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	493a      	ldr	r1, [pc, #232]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a40:	4b38      	ldr	r3, [pc, #224]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a37      	ldr	r2, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a4c:	4b35      	ldr	r3, [pc, #212]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a34      	ldr	r2, [pc, #208]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a58:	f7ff f852 	bl	8001b00 <HAL_GetTick>
 8002a5c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7ff f84e 	bl	8001b00 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e054      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a72:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7e:	e04c      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e04b      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a84:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d144      	bne.n	8002b1a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a90:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a23      	ldr	r2, [pc, #140]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a9c:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a20      	ldr	r2, [pc, #128]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aa8:	f7ff f82a 	bl	8001b00 <HAL_GetTick>
 8002aac:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7ff f826 	bl	8001b00 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e02c      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x878>
 8002ace:	e024      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d01f      	beq.n	8002b16 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a12      	ldr	r2, [pc, #72]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002adc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f80d 	bl	8001b00 <HAL_GetTick>
 8002ae6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff f809 	bl	8001b00 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e00f      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afc:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b08:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	4905      	ldr	r1, [pc, #20]	@ (8002b24 <HAL_RCC_OscConfig+0x8ec>)
 8002b0e:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <HAL_RCC_OscConfig+0x8f4>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
 8002b14:	e001      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3728      	adds	r7, #40	@ 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	019d800c 	.word	0x019d800c
 8002b2c:	feeefffc 	.word	0xfeeefffc

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e11d      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b90      	ldr	r3, [pc, #576]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b8d      	ldr	r3, [pc, #564]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	498b      	ldr	r1, [pc, #556]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b89      	ldr	r3, [pc, #548]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e105      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b81      	ldr	r3, [pc, #516]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d908      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b7e      	ldr	r3, [pc, #504]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	497b      	ldr	r1, [pc, #492]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d079      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d11e      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	4b75      	ldr	r3, [pc, #468]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0dc      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002bca:	f000 f9d1 	bl	8002f70 <RCC_GetSysClockFreqFromPLLSource>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a70      	ldr	r2, [pc, #448]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d946      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d140      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002be2:	4b6b      	ldr	r3, [pc, #428]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bea:	4a69      	ldr	r2, [pc, #420]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e035      	b.n	8002c64 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c00:	4b63      	ldr	r3, [pc, #396]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b9      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c18:	4b5d      	ldr	r3, [pc, #372]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0ad      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0a5      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002c38:	f000 f8b4 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a55      	ldr	r2, [pc, #340]	@ (8002d94 <HAL_RCC_ClockConfig+0x264>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d90f      	bls.n	8002c64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c44:	4b52      	ldr	r3, [pc, #328]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c50:	4b4f      	ldr	r3, [pc, #316]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c58:	4a4d      	ldr	r2, [pc, #308]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c64:	4b4a      	ldr	r3, [pc, #296]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f023 0203 	bic.w	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4947      	ldr	r1, [pc, #284]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c76:	f7fe ff43 	bl	8001b00 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7e:	f7fe ff3f 	bl	8001b00 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e077      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c94:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 020c 	and.w	r2, r3, #12
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d1eb      	bne.n	8002c7e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b80      	cmp	r3, #128	@ 0x80
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002cac:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a37      	ldr	r2, [pc, #220]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cb6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b31      	ldr	r3, [pc, #196]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d208      	bcs.n	8002ce6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	492b      	ldr	r1, [pc, #172]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce6:	4b29      	ldr	r3, [pc, #164]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d210      	bcs.n	8002d16 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf4:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 020f 	bic.w	r2, r3, #15
 8002cfc:	4923      	ldr	r1, [pc, #140]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d04:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <HAL_RCC_ClockConfig+0x25c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e036      	b.n	8002d84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d22:	4b1b      	ldr	r3, [pc, #108]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4918      	ldr	r1, [pc, #96]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d40:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4910      	ldr	r1, [pc, #64]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d54:	f000 f826 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <HAL_RCC_ClockConfig+0x260>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	490c      	ldr	r1, [pc, #48]	@ (8002d98 <HAL_RCC_ClockConfig+0x268>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <HAL_RCC_ClockConfig+0x26c>)
 8002d72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d74:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x270>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fe71 	bl	8001a60 <HAL_InitTick>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	73fb      	strb	r3, [r7, #15]

  return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	04c4b400 	.word	0x04c4b400
 8002d98:	080119d4 	.word	0x080119d4
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	@ 0x24
 8002da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4b3e      	ldr	r3, [pc, #248]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d11e      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dd8:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e005      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e00:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d102      	bne.n	8002e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e004      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e28:	4b23      	ldr	r3, [pc, #140]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d134      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e32:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d003      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0xac>
 8002e48:	e005      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	e005      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e52:	617b      	str	r3, [r7, #20]
      break;
 8002e54:	e002      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3301      	adds	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	fb03 f202 	mul.w	r2, r3, r2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	0e5b      	lsrs	r3, r3, #25
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	080119e4 	.word	0x080119e4
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	007a1200 	.word	0x007a1200

08002ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ec8:	4b27      	ldr	r3, [pc, #156]	@ (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ed4:	f7ff f8ec 	bl	80020b0 <HAL_PWREx_GetVoltageRange>
 8002ed8:	6178      	str	r0, [r7, #20]
 8002eda:	e014      	b.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b22      	ldr	r3, [pc, #136]	@ (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	4a21      	ldr	r2, [pc, #132]	@ (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ef4:	f7ff f8dc 	bl	80020b0 <HAL_PWREx_GetVoltageRange>
 8002ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b1b      	ldr	r3, [pc, #108]	@ (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0c:	d10b      	bne.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	d913      	bls.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f18:	d902      	bls.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	e00d      	b.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e00a      	b.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f2a:	d902      	bls.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	e004      	b.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b70      	cmp	r3, #112	@ 0x70
 8002f36:	d101      	bne.n	8002f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f38:	2301      	movs	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 020f 	bic.w	r2, r3, #15
 8002f44:	4909      	ldr	r1, [pc, #36]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d001      	beq.n	8002f5e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40022000 	.word	0x40022000

08002f70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f76:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d00b      	beq.n	8002f9e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d825      	bhi.n	8002fd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d008      	beq.n	8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d11f      	bne.n	8002fd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002f98:	4b25      	ldr	r3, [pc, #148]	@ (8003030 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002f9a:	613b      	str	r3, [r7, #16]
    break;
 8002f9c:	e01f      	b.n	8002fde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002f9e:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002fa0:	613b      	str	r3, [r7, #16]
    break;
 8002fa2:	e01c      	b.n	8002fde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa4:	4b21      	ldr	r3, [pc, #132]	@ (800302c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d107      	bne.n	8002fc0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	e005      	b.n	8002fcc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003038 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd4:	613b      	str	r3, [r7, #16]
    break;
 8002fd6:	e002      	b.n	8002fde <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
    break;
 8002fdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fde:	4b13      	ldr	r3, [pc, #76]	@ (800302c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	fb03 f202 	mul.w	r2, r3, r2
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003004:	4b09      	ldr	r3, [pc, #36]	@ (800302c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	0e5b      	lsrs	r3, r3, #25
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	3301      	adds	r3, #1
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800301e:	683b      	ldr	r3, [r7, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40021000 	.word	0x40021000
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200
 8003038:	080119e4 	.word	0x080119e4

0800303c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e095      	b.n	800317a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800305e:	d009      	beq.n	8003074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	e005      	b.n	8003074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fb5a 	bl	8001748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030b4:	d902      	bls.n	80030bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e002      	b.n	80030c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80030ca:	d007      	beq.n	80030dc <HAL_SPI_Init+0xa0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	ea42 0103 	orr.w	r1, r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	f003 0204 	and.w	r2, r3, #4
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003158:	ea42 0103 	orr.w	r1, r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b08a      	sub	sp, #40	@ 0x28
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003194:	f7fe fcb4 	bl	8001b00 <HAL_GetTick>
 8003198:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d00c      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x4e>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031bc:	d106      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x4a>
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d001      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
 80031ce:	e1f3      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_SPI_TransmitReceive+0x60>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_SPI_TransmitReceive+0x60>
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1e8      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x72>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e1e1      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x436>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b04      	cmp	r3, #4
 8003206:	d003      	beq.n	8003210 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2205      	movs	r2, #5
 800320c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003252:	d802      	bhi.n	800325a <HAL_SPI_TransmitReceive+0xd8>
 8003254:	8abb      	ldrh	r3, [r7, #20]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d908      	bls.n	800326c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	e007      	b.n	800327c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800327a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d007      	beq.n	800329a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032a2:	f240 8083 	bls.w	80033ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x132>
 80032ae:	8afb      	ldrh	r3, [r7, #22]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d16f      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	1c9a      	adds	r2, r3, #2
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d8:	e05c      	b.n	8003394 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d11b      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x19e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_SPI_TransmitReceive+0x19e>
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d113      	bne.n	8003320 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d11c      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x1e6>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	b292      	uxth	r2, r2
 8003346:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003364:	2301      	movs	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003368:	f7fe fbca 	bl	8001b00 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003374:	429a      	cmp	r2, r3
 8003376:	d80d      	bhi.n	8003394 <HAL_SPI_TransmitReceive+0x212>
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d009      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e111      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d19d      	bne.n	80032da <HAL_SPI_TransmitReceive+0x158>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d197      	bne.n	80032da <HAL_SPI_TransmitReceive+0x158>
 80033aa:	e0e5      	b.n	8003578 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x23a>
 80033b4:	8afb      	ldrh	r3, [r7, #22]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f040 80d1 	bne.w	800355e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d912      	bls.n	80033ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b02      	subs	r3, #2
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033ea:	e0b8      	b.n	800355e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	7812      	ldrb	r2, [r2, #0]
 80033f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003412:	e0a4      	b.n	800355e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d134      	bne.n	800348c <HAL_SPI_TransmitReceive+0x30a>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02f      	beq.n	800348c <HAL_SPI_TransmitReceive+0x30a>
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	2b01      	cmp	r3, #1
 8003430:	d12c      	bne.n	800348c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d912      	bls.n	8003462 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	881a      	ldrh	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	1c9a      	adds	r2, r3, #2
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b02      	subs	r3, #2
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003460:	e012      	b.n	8003488 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	330c      	adds	r3, #12
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d148      	bne.n	800352c <HAL_SPI_TransmitReceive+0x3aa>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d042      	beq.n	800352c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d923      	bls.n	80034fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	b292      	uxth	r2, r2
 80034be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	1c9a      	adds	r2, r3, #2
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b02      	subs	r3, #2
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d81f      	bhi.n	8003528 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	e016      	b.n	8003528 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f103 020c 	add.w	r2, r3, #12
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	7812      	ldrb	r2, [r2, #0]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003528:	2301      	movs	r3, #1
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800352c:	f7fe fae8 	bl	8001b00 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003538:	429a      	cmp	r2, r3
 800353a:	d803      	bhi.n	8003544 <HAL_SPI_TransmitReceive+0x3c2>
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d102      	bne.n	800354a <HAL_SPI_TransmitReceive+0x3c8>
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e02c      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	f47f af55 	bne.w	8003414 <HAL_SPI_TransmitReceive+0x292>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	f47f af4e 	bne.w	8003414 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f93d 	bl	80037fc <SPI_EndRxTxTransaction>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00e      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3728      	adds	r7, #40	@ 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035d0:	f7fe fa96 	bl	8001b00 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	4413      	add	r3, r2
 80035de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035e0:	f7fe fa8e 	bl	8001b00 <HAL_GetTick>
 80035e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035e6:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	015b      	lsls	r3, r3, #5
 80035ec:	0d1b      	lsrs	r3, r3, #20
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f6:	e054      	b.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d050      	beq.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003600:	f7fe fa7e 	bl	8001b00 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	429a      	cmp	r2, r3
 800360e:	d902      	bls.n	8003616 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d13d      	bne.n	8003692 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003624:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800362e:	d111      	bne.n	8003654 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003638:	d004      	beq.n	8003644 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003642:	d107      	bne.n	8003654 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003652:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365c:	d10f      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800367c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e017      	b.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	3b01      	subs	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d19b      	bne.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000

080036d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036e2:	f7fe fa0d 	bl	8001b00 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036f2:	f7fe fa05 	bl	8001b00 <HAL_GetTick>
 80036f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003700:	4b3d      	ldr	r3, [pc, #244]	@ (80037f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00da      	lsls	r2, r3, #3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	0d1b      	lsrs	r3, r3, #20
 8003710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003718:	e060      	b.n	80037dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003720:	d107      	bne.n	8003732 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003730:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d050      	beq.n	80037dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800373a:	f7fe f9e1 	bl	8001b00 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003746:	429a      	cmp	r2, r3
 8003748:	d902      	bls.n	8003750 <SPI_WaitFifoStateUntilTimeout+0x80>
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d13d      	bne.n	80037cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800375e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003768:	d111      	bne.n	800378e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003772:	d004      	beq.n	800377e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377c:	d107      	bne.n	800378e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800378c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003796:	d10f      	bne.n	80037b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e010      	b.n	80037ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	3b01      	subs	r3, #1
 80037da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d196      	bne.n	800371a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3728      	adds	r7, #40	@ 0x28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000000 	.word	0x20000000

080037fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff ff5b 	bl	80036d0 <SPI_WaitFifoStateUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e027      	b.n	8003880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2200      	movs	r2, #0
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fec0 	bl	80035c0 <SPI_WaitFlagStateUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	f043 0220 	orr.w	r2, r3, #32
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e014      	b.n	8003880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2200      	movs	r2, #0
 800385e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff ff34 	bl	80036d0 <SPI_WaitFifoStateUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e000      	b.n	8003880 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <disable_interrupts>:
#define SEN_INT1_Pin GPIO_PIN_2 // REPLACE WITH REAL PIN
// END OF MOVE THESE LATER


static inline void disable_interrupts(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800388c:	b672      	cpsid	i
}
 800388e:	bf00      	nop
	__disable_irq();
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <enable_interrupts>:

static inline void enable_interrupts(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800389e:	b662      	cpsie	i
}
 80038a0:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80038a2:	f3bf 8f6f 	isb	sy
}
 80038a6:	bf00      	nop
	__enable_irq();
	__ISB();
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <acc_hal_integration_sensor_transfer>:
//----------------------------------------
// Implementation of RSS HAL handlers
//----------------------------------------

static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <acc_hal_integration_sensor_transfer+0x18>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d901      	bls.n	80038d0 <acc_hal_integration_sensor_transfer+0x1c>
	{
		Error_Handler();
 80038cc:	f7fd fef7 	bl	80016be <Error_Handler>

//	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SPI_SEL1_GPIO_Port, SPI_SEL1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SPI_SEL2_GPIO_Port, SPI_SEL2_Pin, GPIO_PIN_RESET);

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 80038d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038d4:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_RESET);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2101      	movs	r1, #1
 80038da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038de:	f7fe fbcf 	bl	8002080 <HAL_GPIO_WritePin>
		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

#else
	HAL_SPI_TransmitReceive(A121_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <acc_hal_integration_sensor_transfer+0x58>)
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	f7ff fc45 	bl	8003182 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 80038f8:	2201      	movs	r2, #1
 80038fa:	2101      	movs	r1, #1
 80038fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003900:	f7fe fbbe 	bl	8002080 <HAL_GPIO_WritePin>
}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2000000c 	.word	0x2000000c

08003910 <acc_hal_integration_sensor_supply_on>:

void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <acc_hal_integration_sensor_supply_on+0x14>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d901      	bls.n	8003928 <acc_hal_integration_sensor_supply_on+0x18>
	{
		Error_Handler();
 8003924:	f7fd fecb 	bl	80016be <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <acc_hal_integration_sensor_supply_off>:

void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <acc_hal_integration_sensor_supply_off+0x14>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d901      	bls.n	8003948 <acc_hal_integration_sensor_supply_off+0x18>
	{
		Error_Handler();
 8003944:	f7fd febb 	bl	80016be <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <acc_hal_integration_sensor_enable>:

void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <acc_hal_integration_sensor_enable+0x14>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d901      	bls.n	8003968 <acc_hal_integration_sensor_enable+0x18>
	{
		Error_Handler();
 8003964:	f7fd feab 	bl	80016be <Error_Handler>
	}

	HAL_GPIO_WritePin(SEN_EN1_GPIO_Port, SEN_EN1_Pin, GPIO_PIN_SET);
 8003968:	2201      	movs	r2, #1
 800396a:	2102      	movs	r1, #2
 800396c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003970:	f7fe fb86 	bl	8002080 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal has time to stabilize
	acc_integration_sleep_us(2000);
 8003974:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003978:	f000 f904 	bl	8003b84 <acc_integration_sleep_us>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <acc_hal_integration_sensor_disable>:

void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <acc_hal_integration_sensor_disable+0x14>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d901      	bls.n	800399c <acc_hal_integration_sensor_disable+0x18>
	{
		Error_Handler();
 8003998:	f7fd fe91 	bl	80016be <Error_Handler>
	}

	HAL_GPIO_WritePin(SEN_EN1_GPIO_Port, SEN_EN1_Pin, GPIO_PIN_RESET);
 800399c:	2200      	movs	r2, #0
 800399e:	2102      	movs	r1, #2
 80039a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039a4:	f7fe fb6c 	bl	8002080 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_us(2000);
 80039a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80039ac:	f000 f8ea 	bl	8003b84 <acc_integration_sleep_us>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <acc_hal_integration_wait_for_sensor_interrupt>:

bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	bool status = false;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d901      	bls.n	80039d6 <acc_hal_integration_wait_for_sensor_interrupt+0x1e>
	{
		Error_Handler();
 80039d2:	f7fd fe74 	bl	80016be <Error_Handler>
	}

	GPIO_TypeDef  *int_port      = SEN_INT1_GPIO_Port;
 80039d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039da:	613b      	str	r3, [r7, #16]
	uint32_t       int_pin_mask  = SEN_INT1_Pin;
 80039dc:	2304      	movs	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
	const uint32_t wait_begin_ms = HAL_GetTick();
 80039e0:	f7fe f88e 	bl	8001b00 <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]

	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) && (HAL_GetTick() - wait_begin_ms < timeout_ms))
 80039e6:	e00d      	b.n	8003a04 <acc_hal_integration_wait_for_sensor_interrupt+0x4c>
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80039e8:	f7ff ff4e 	bl	8003888 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	6938      	ldr	r0, [r7, #16]
 80039f4:	f7fe fb2c 	bl	8002050 <HAL_GPIO_ReadPin>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d000      	beq.n	8003a00 <acc_hal_integration_wait_for_sensor_interrupt+0x48>
		{
			__WFI();
 80039fe:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8003a00:	f7ff ff4b 	bl	800389a <enable_interrupts>
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) && (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6938      	ldr	r0, [r7, #16]
 8003a0c:	f7fe fb20 	bl	8002050 <HAL_GPIO_ReadPin>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d007      	beq.n	8003a26 <acc_hal_integration_wait_for_sensor_interrupt+0x6e>
 8003a16:	f7fe f873 	bl	8001b00 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d8e0      	bhi.n	80039e8 <acc_hal_integration_wait_for_sensor_interrupt+0x30>
	}

	status = HAL_GPIO_ReadPin(int_port, int_pin_mask) == GPIO_PIN_SET;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6938      	ldr	r0, [r7, #16]
 8003a2e:	f7fe fb0f 	bl	8002050 <HAL_GPIO_ReadPin>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]

	return status;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <acc_hal_rss_integration_get_implementation>:
{
	return SENSOR_COUNT;
}

const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
	    .log      = acc_integration_log,

	    .optimization.transfer16 = NULL,
	};

	return &val;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	@ (8003a58 <acc_hal_rss_integration_get_implementation+0x10>)
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	08011a14 	.word	0x08011a14

08003a5c <acc_integration_log>:
#define LOG_BUFFER_MAX_SIZE 150

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"

void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8003a5c:	b40c      	push	{r2, r3}
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b0b4      	sub	sp, #208	@ 0xd0
 8003a62:	af04      	add	r7, sp, #16
 8003a64:	4603      	mov	r3, r0
 8003a66:	6039      	str	r1, [r7, #0]
 8003a68:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8003a6a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003a6e:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8003a70:	f107 000c 	add.w	r0, r7, #12
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a7a:	2196      	movs	r1, #150	@ 0x96
 8003a7c:	f00c fe66 	bl	801074c <vsniprintf>
 8003a80:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8003a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a88:	2b95      	cmp	r3, #149	@ 0x95
 8003a8a:	dd0b      	ble.n	8003aa4 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8003a8c:	232e      	movs	r3, #46	@ 0x2e
 8003a8e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8003a92:	232e      	movs	r3, #46	@ 0x2e
 8003a94:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8003a98:	232e      	movs	r3, #46	@ 0x2e
 8003a9a:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8003aa4:	f000 f882 	bl	8003bac <acc_integration_get_time>
 8003aa8:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8003aac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8003ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b6c <acc_integration_log+0x110>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0d5b      	lsrs	r3, r3, #21
 8003ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8003ac4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ac8:	4a29      	ldr	r2, [pc, #164]	@ (8003b70 <acc_integration_log+0x114>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0b9a      	lsrs	r2, r3, #14
 8003ad0:	4b28      	ldr	r3, [pc, #160]	@ (8003b74 <acc_integration_log+0x118>)
 8003ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad6:	0959      	lsrs	r1, r3, #5
 8003ad8:	460b      	mov	r3, r1
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a5b      	subs	r3, r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 8003ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003aea:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <acc_integration_log+0x11c>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099a      	lsrs	r2, r3, #6
 8003af2:	4b20      	ldr	r3, [pc, #128]	@ (8003b74 <acc_integration_log+0x118>)
 8003af4:	fba3 1302 	umull	r1, r3, r3, r2
 8003af8:	0959      	lsrs	r1, r3, #5
 8003afa:	460b      	mov	r3, r1
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a5b      	subs	r3, r3, r1
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8003b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003b78 <acc_integration_log+0x11c>)
 8003b0e:	fba2 1203 	umull	r1, r2, r2, r3
 8003b12:	0992      	lsrs	r2, r2, #6
 8003b14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b18:	fb01 f202 	mul.w	r2, r1, r2
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d803      	bhi.n	8003b30 <acc_integration_log+0xd4>
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <acc_integration_log+0x120>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	e000      	b.n	8003b32 <acc_integration_log+0xd6>
 8003b30:	233f      	movs	r3, #63	@ 0x3f
 8003b32:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8003b36:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b3a:	f107 020c 	add.w	r2, r7, #12
 8003b3e:	9203      	str	r2, [sp, #12]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	9202      	str	r2, [sp, #8]
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b54:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8003b58:	4809      	ldr	r0, [pc, #36]	@ (8003b80 <acc_integration_log+0x124>)
 8003b5a:	f00c fd11 	bl	8010580 <iprintf>

	va_end(ap);
}
 8003b5e:	bf00      	nop
 8003b60:	37c0      	adds	r7, #192	@ 0xc0
 8003b62:	46bd      	mov	sp, r7
 8003b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b68:	b002      	add	sp, #8
 8003b6a:	4770      	bx	lr
 8003b6c:	95217cb1 	.word	0x95217cb1
 8003b70:	45e7b273 	.word	0x45e7b273
 8003b74:	88888889 	.word	0x88888889
 8003b78:	10624dd3 	.word	0x10624dd3
 8003b7c:	0801194c 	.word	0x0801194c
 8003b80:	08011928 	.word	0x08011928

08003b84 <acc_integration_sleep_us>:
{
	HAL_Delay(time_msec);
}

void acc_integration_sleep_us(uint32_t time_usec)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	uint32_t time_msec = (time_usec / 1000);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a06      	ldr	r2, [pc, #24]	@ (8003ba8 <acc_integration_sleep_us+0x24>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	60fb      	str	r3, [r7, #12]

	HAL_Delay(time_msec);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7fd ffbd 	bl	8001b18 <HAL_Delay>
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	10624dd3 	.word	0x10624dd3

08003bac <acc_integration_get_time>:

uint32_t acc_integration_get_time(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003bb0:	f7fd ffa6 	bl	8001b00 <HAL_GetTick>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <acc_integration_mem_alloc>:

void *acc_integration_mem_alloc(size_t size)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
	return malloc(size);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f00c fb5c 	bl	8010280 <malloc>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <acc_integration_mem_free>:
{
	return calloc(nmemb, size);
}

void acc_integration_mem_free(void *ptr)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
	free(ptr);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f00c fb58 	bl	8010290 <free>
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <create_measurement_resources>:
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	4605      	mov	r5, r0
 8003bf0:	4688      	mov	r8, r1
 8003bf2:	4616      	mov	r6, r2
 8003bf4:	461f      	mov	r7, r3
 8003bf6:	f004 fddd 	bl	80087b4 <acc_config_create>
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	b300      	cbz	r0, 8003c40 <create_measurement_resources+0x58>
 8003bfe:	2d01      	cmp	r5, #1
 8003c00:	f108 0004 	add.w	r0, r8, #4
 8003c04:	4621      	mov	r1, r4
 8003c06:	d10a      	bne.n	8003c1e <create_measurement_resources+0x36>
 8003c08:	f004 fbac 	bl	8008364 <acc_detector_distance_translation_get_far_range_sensor_config>
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	b95d      	cbnz	r5, 8003c28 <create_measurement_resources+0x40>
 8003c10:	4620      	mov	r0, r4
 8003c12:	f004 fde7 	bl	80087e4 <acc_config_destroy>
 8003c16:	4628      	mov	r0, r5
 8003c18:	b002      	add	sp, #8
 8003c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1e:	f004 facb 	bl	80081b8 <acc_detector_distance_translation_get_close_range_sensor_config>
 8003c22:	4605      	mov	r5, r0
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	d0f3      	beq.n	8003c10 <create_measurement_resources+0x28>
 8003c28:	9908      	ldr	r1, [sp, #32]
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f005 f96e 	bl	8008f0c <acc_processing_create>
 8003c30:	4603      	mov	r3, r0
 8003c32:	b150      	cbz	r0, 8003c4a <create_measurement_resources+0x62>
 8003c34:	4628      	mov	r0, r5
 8003c36:	6034      	str	r4, [r6, #0]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	b002      	add	sp, #8
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	4605      	mov	r5, r0
 8003c42:	4628      	mov	r0, r5
 8003c44:	b002      	add	sp, #8
 8003c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	f004 fdc9 	bl	80087e4 <acc_config_destroy>
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	461d      	mov	r5, r3
 8003c56:	e7de      	b.n	8003c16 <create_measurement_resources+0x2e>

08003c58 <create_noise_calibration_resources>:
 8003c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5c:	4606      	mov	r6, r0
 8003c5e:	4688      	mov	r8, r1
 8003c60:	4617      	mov	r7, r2
 8003c62:	461d      	mov	r5, r3
 8003c64:	f004 fda6 	bl	80087b4 <acc_config_create>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	b160      	cbz	r0, 8003c86 <create_noise_calibration_resources+0x2e>
 8003c6c:	4631      	mov	r1, r6
 8003c6e:	f002 fbff 	bl	8006470 <acc_detector_distance_calibration_noise_settings_set>
 8003c72:	4629      	mov	r1, r5
 8003c74:	4620      	mov	r0, r4
 8003c76:	f005 f949 	bl	8008f0c <acc_processing_create>
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	b128      	cbz	r0, 8003c8a <create_noise_calibration_resources+0x32>
 8003c7e:	f8c8 4000 	str.w	r4, [r8]
 8003c82:	2001      	movs	r0, #1
 8003c84:	603d      	str	r5, [r7, #0]
 8003c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	f004 fdaa 	bl	80087e4 <acc_config_destroy>
 8003c90:	4628      	mov	r0, r5
 8003c92:	e7f8      	b.n	8003c86 <create_noise_calibration_resources+0x2e>

08003c94 <prepare_and_measure>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	9c04      	ldr	r4, [sp, #16]
 8003c9a:	9400      	str	r4, [sp, #0]
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	f005 fa7f 	bl	80091a0 <acc_sensor_prepare>
 8003ca2:	b908      	cbnz	r0, 8003ca8 <prepare_and_measure+0x14>
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd10      	pop	{r4, pc}
 8003ca8:	4620      	mov	r0, r4
 8003caa:	b002      	add	sp, #8
 8003cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb0:	f005 bacc 	b.w	800924c <acc_sensor_measure>

08003cb4 <validate_distance_config.part.0>:
 8003cb4:	4b02      	ldr	r3, [pc, #8]	@ (8003cc0 <validate_distance_config.part.0+0xc>)
 8003cb6:	4a03      	ldr	r2, [pc, #12]	@ (8003cc4 <validate_distance_config.part.0+0x10>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	4903      	ldr	r1, [pc, #12]	@ (8003cc8 <validate_distance_config.part.0+0x14>)
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	4718      	bx	r3
 8003cc0:	200003f0 	.word	0x200003f0
 8003cc4:	08011a2c 	.word	0x08011a2c
 8003cc8:	08011a44 	.word	0x08011a44

08003ccc <validate_distance_handle.part.0>:
 8003ccc:	4b02      	ldr	r3, [pc, #8]	@ (8003cd8 <validate_distance_handle.part.0+0xc>)
 8003cce:	4a03      	ldr	r2, [pc, #12]	@ (8003cdc <validate_distance_handle.part.0+0x10>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4903      	ldr	r1, [pc, #12]	@ (8003ce0 <validate_distance_handle.part.0+0x14>)
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	4718      	bx	r3
 8003cd8:	200003f0 	.word	0x200003f0
 8003cdc:	08011a58 	.word	0x08011a58
 8003ce0:	08011a44 	.word	0x08011a44

08003ce4 <detector_has_close_range>:
 8003ce4:	b508      	push	{r3, lr}
 8003ce6:	b118      	cbz	r0, 8003cf0 <detector_has_close_range+0xc>
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <detector_has_close_range+0x20>)
 8003cea:	6802      	ldr	r2, [r0, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d003      	beq.n	8003cf8 <detector_has_close_range+0x14>
 8003cf0:	f7ff ffec 	bl	8003ccc <validate_distance_handle.part.0>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	bd08      	pop	{r3, pc}
 8003cf8:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8003cfa:	3800      	subs	r0, #0
 8003cfc:	bf18      	it	ne
 8003cfe:	2001      	movne	r0, #1
 8003d00:	bd08      	pop	{r3, pc}
 8003d02:	bf00      	nop
 8003d04:	acc0d130 	.word	0xacc0d130

08003d08 <detector_has_far_range>:
 8003d08:	b508      	push	{r3, lr}
 8003d0a:	b118      	cbz	r0, 8003d14 <detector_has_far_range+0xc>
 8003d0c:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <detector_has_far_range+0x20>)
 8003d0e:	6802      	ldr	r2, [r0, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d003      	beq.n	8003d1c <detector_has_far_range+0x14>
 8003d14:	f7ff ffda 	bl	8003ccc <validate_distance_handle.part.0>
 8003d18:	2000      	movs	r0, #0
 8003d1a:	bd08      	pop	{r3, pc}
 8003d1c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8003d1e:	3800      	subs	r0, #0
 8003d20:	bf18      	it	ne
 8003d22:	2001      	movne	r0, #1
 8003d24:	bd08      	pop	{r3, pc}
 8003d26:	bf00      	nop
 8003d28:	acc0d130 	.word	0xacc0d130

08003d2c <decide_next_measurement_type>:
 8003d2c:	b508      	push	{r3, lr}
 8003d2e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003d32:	b91b      	cbnz	r3, 8003d3c <decide_next_measurement_type+0x10>
 8003d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003d38:	f7ff bfe6 	b.w	8003d08 <detector_has_far_range>
 8003d3c:	f7ff ffd2 	bl	8003ce4 <detector_has_close_range>
 8003d40:	f080 0001 	eor.w	r0, r0, #1
 8003d44:	b2c0      	uxtb	r0, r0
 8003d46:	bd08      	pop	{r3, pc}

08003d48 <acc_detector_distance_config_create>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	490b      	ldr	r1, [pc, #44]	@ (8003d78 <acc_detector_distance_config_create+0x30>)
 8003d4c:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8003d50:	202c      	movs	r0, #44	@ 0x2c
 8003d52:	f007 f8d5 	bl	800af00 <acc_rss_integration_mem_alloc_debug>
 8003d56:	4606      	mov	r6, r0
 8003d58:	b160      	cbz	r0, 8003d74 <acc_detector_distance_config_create+0x2c>
 8003d5a:	4d08      	ldr	r5, [pc, #32]	@ (8003d7c <acc_detector_distance_config_create+0x34>)
 8003d5c:	4f08      	ldr	r7, [pc, #32]	@ (8003d80 <acc_detector_distance_config_create+0x38>)
 8003d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d60:	4634      	mov	r4, r6
 8003d62:	f844 7b04 	str.w	r7, [r4], #4
 8003d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d70:	e884 0003 	stmia.w	r4, {r0, r1}
 8003d74:	4630      	mov	r0, r6
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	08011a44 	.word	0x08011a44
 8003d7c:	08011954 	.word	0x08011954
 8003d80:	acc0d150 	.word	0xacc0d150

08003d84 <acc_detector_distance_config_destroy>:
 8003d84:	b118      	cbz	r0, 8003d8e <acc_detector_distance_config_destroy+0xa>
 8003d86:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <acc_detector_distance_config_destroy+0x18>)
 8003d88:	6801      	ldr	r1, [r0, #0]
 8003d8a:	4291      	cmp	r1, r2
 8003d8c:	d001      	beq.n	8003d92 <acc_detector_distance_config_destroy+0xe>
 8003d8e:	f7ff bf91 	b.w	8003cb4 <validate_distance_config.part.0>
 8003d92:	2200      	movs	r2, #0
 8003d94:	6002      	str	r2, [r0, #0]
 8003d96:	f007 b8f3 	b.w	800af80 <acc_rss_integration_mem_free>
 8003d9a:	bf00      	nop
 8003d9c:	acc0d150 	.word	0xacc0d150

08003da0 <acc_detector_distance_get_sizes>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	b118      	cbz	r0, 8003dac <acc_detector_distance_get_sizes+0xc>
 8003da4:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <acc_detector_distance_get_sizes+0x24>)
 8003da6:	6804      	ldr	r4, [r0, #0]
 8003da8:	429c      	cmp	r4, r3
 8003daa:	d003      	beq.n	8003db4 <acc_detector_distance_get_sizes+0x14>
 8003dac:	f7ff ff8e 	bl	8003ccc <validate_distance_handle.part.0>
 8003db0:	2000      	movs	r0, #0
 8003db2:	bd10      	pop	{r4, pc}
 8003db4:	6883      	ldr	r3, [r0, #8]
 8003db6:	6904      	ldr	r4, [r0, #16]
 8003db8:	4423      	add	r3, r4
 8003dba:	600b      	str	r3, [r1, #0]
 8003dbc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	bd10      	pop	{r4, pc}
 8003dc4:	acc0d130 	.word	0xacc0d130

08003dc8 <acc_detector_distance_destroy>:
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d04f      	beq.n	8003e6c <acc_detector_distance_destroy+0xa4>
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	6802      	ldr	r2, [r0, #0]
 8003dd0:	4b27      	ldr	r3, [pc, #156]	@ (8003e70 <acc_detector_distance_destroy+0xa8>)
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	d003      	beq.n	8003de0 <acc_detector_distance_destroy+0x18>
 8003dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ddc:	f7ff bf76 	b.w	8003ccc <validate_distance_handle.part.0>
 8003de0:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8003de2:	2500      	movs	r5, #0
 8003de4:	6025      	str	r5, [r4, #0]
 8003de6:	b110      	cbz	r0, 8003dee <acc_detector_distance_destroy+0x26>
 8003de8:	f004 fcfc 	bl	80087e4 <acc_config_destroy>
 8003dec:	6525      	str	r5, [r4, #80]	@ 0x50
 8003dee:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003df0:	b118      	cbz	r0, 8003dfa <acc_detector_distance_destroy+0x32>
 8003df2:	f005 f867 	bl	8008ec4 <acc_processing_destroy>
 8003df6:	2300      	movs	r3, #0
 8003df8:	6663      	str	r3, [r4, #100]	@ 0x64
 8003dfa:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003dfc:	b118      	cbz	r0, 8003e06 <acc_detector_distance_destroy+0x3e>
 8003dfe:	f004 fcf1 	bl	80087e4 <acc_config_destroy>
 8003e02:	2300      	movs	r3, #0
 8003e04:	6563      	str	r3, [r4, #84]	@ 0x54
 8003e06:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8003e08:	b118      	cbz	r0, 8003e12 <acc_detector_distance_destroy+0x4a>
 8003e0a:	f005 f85b 	bl	8008ec4 <acc_processing_destroy>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003e12:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003e14:	b118      	cbz	r0, 8003e1e <acc_detector_distance_destroy+0x56>
 8003e16:	f004 fce5 	bl	80087e4 <acc_config_destroy>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6463      	str	r3, [r4, #68]	@ 0x44
 8003e1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e20:	b118      	cbz	r0, 8003e2a <acc_detector_distance_destroy+0x62>
 8003e22:	f005 f84f 	bl	8008ec4 <acc_processing_destroy>
 8003e26:	2300      	movs	r3, #0
 8003e28:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003e2a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003e2c:	b118      	cbz	r0, 8003e36 <acc_detector_distance_destroy+0x6e>
 8003e2e:	f004 fcd9 	bl	80087e4 <acc_config_destroy>
 8003e32:	2300      	movs	r3, #0
 8003e34:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003e36:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8003e38:	b118      	cbz	r0, 8003e42 <acc_detector_distance_destroy+0x7a>
 8003e3a:	f005 f843 	bl	8008ec4 <acc_processing_destroy>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003e42:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8003e44:	b118      	cbz	r0, 8003e4e <acc_detector_distance_destroy+0x86>
 8003e46:	f004 fccd 	bl	80087e4 <acc_config_destroy>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8003e4e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003e50:	b118      	cbz	r0, 8003e5a <acc_detector_distance_destroy+0x92>
 8003e52:	f005 f837 	bl	8008ec4 <acc_processing_destroy>
 8003e56:	2300      	movs	r3, #0
 8003e58:	6623      	str	r3, [r4, #96]	@ 0x60
 8003e5a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003e5c:	b108      	cbz	r0, 8003e62 <acc_detector_distance_destroy+0x9a>
 8003e5e:	f001 f8cb 	bl	8004ff8 <acc_detector_distance_aggregator_destroy>
 8003e62:	4620      	mov	r0, r4
 8003e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e68:	f007 b88a 	b.w	800af80 <acc_rss_integration_mem_free>
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	acc0d130 	.word	0xacc0d130

08003e74 <acc_detector_distance_create>:
 8003e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	b0ac      	sub	sp, #176	@ 0xb0
 8003e7a:	b120      	cbz	r0, 8003e86 <acc_detector_distance_create+0x12>
 8003e7c:	4b93      	ldr	r3, [pc, #588]	@ (80040cc <acc_detector_distance_create+0x258>)
 8003e7e:	6802      	ldr	r2, [r0, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	4606      	mov	r6, r0
 8003e84:	d013      	beq.n	8003eae <acc_detector_distance_create+0x3a>
 8003e86:	f7ff ff15 	bl	8003cb4 <validate_distance_config.part.0>
 8003e8a:	2400      	movs	r4, #0
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003e92:	4b8f      	ldr	r3, [pc, #572]	@ (80040d0 <acc_detector_distance_create+0x25c>)
 8003e94:	4a8f      	ldr	r2, [pc, #572]	@ (80040d4 <acc_detector_distance_create+0x260>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	498f      	ldr	r1, [pc, #572]	@ (80040d8 <acc_detector_distance_create+0x264>)
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	4798      	blx	r3
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff ff92 	bl	8003dc8 <acc_detector_distance_destroy>
 8003ea4:	2400      	movs	r4, #0
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	b02c      	add	sp, #176	@ 0xb0
 8003eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eae:	4a8a      	ldr	r2, [pc, #552]	@ (80040d8 <acc_detector_distance_create+0x264>)
 8003eb0:	f44f 73be 	mov.w	r3, #380	@ 0x17c
 8003eb4:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f007 f845 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d0e3      	beq.n	8003e8c <acc_detector_distance_create+0x18>
 8003ec4:	4b85      	ldr	r3, [pc, #532]	@ (80040dc <acc_detector_distance_create+0x268>)
 8003ec6:	6023      	str	r3, [r4, #0]
 8003ec8:	2500      	movs	r5, #0
 8003eca:	4629      	mov	r1, r5
 8003ecc:	228c      	movs	r2, #140	@ 0x8c
 8003ece:	f106 0804 	add.w	r8, r6, #4
 8003ed2:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
 8003ed6:	f8a4 5106 	strh.w	r5, [r4, #262]	@ 0x106
 8003eda:	a809      	add	r0, sp, #36	@ 0x24
 8003edc:	f00c fcf2 	bl	80108c4 <memset>
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	f004 f8b1 	bl	8008048 <acc_detector_distance_translation_get_num_processor_specifications>
 8003ee6:	4607      	mov	r7, r0
 8003ee8:	463a      	mov	r2, r7
 8003eea:	4640      	mov	r0, r8
 8003eec:	a909      	add	r1, sp, #36	@ 0x24
 8003eee:	f004 f8b9 	bl	8008064 <acc_detector_distance_translation_get_processor_specifications>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d0ca      	beq.n	8003e8c <acc_detector_distance_create+0x18>
 8003ef6:	b1e7      	cbz	r7, 8003f32 <acc_detector_distance_create+0xbe>
 8003ef8:	1e7b      	subs	r3, r7, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	4629      	mov	r1, r5
 8003efe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003f02:	aa10      	add	r2, sp, #64	@ 0x40
 8003f04:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8003f08:	4688      	mov	r8, r1
 8003f0a:	ab09      	add	r3, sp, #36	@ 0x24
 8003f0c:	e005      	b.n	8003f1a <acc_detector_distance_create+0xa6>
 8003f0e:	331c      	adds	r3, #28
 8003f10:	2a01      	cmp	r2, #1
 8003f12:	bf08      	it	eq
 8003f14:	4601      	moveq	r1, r0
 8003f16:	429d      	cmp	r5, r3
 8003f18:	d006      	beq.n	8003f28 <acc_detector_distance_create+0xb4>
 8003f1a:	785a      	ldrb	r2, [r3, #1]
 8003f1c:	2a00      	cmp	r2, #0
 8003f1e:	d1f6      	bne.n	8003f0e <acc_detector_distance_create+0x9a>
 8003f20:	331c      	adds	r3, #28
 8003f22:	429d      	cmp	r5, r3
 8003f24:	4680      	mov	r8, r0
 8003f26:	d1f8      	bne.n	8003f1a <acc_detector_distance_create+0xa6>
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d12e      	bne.n	8003f8a <acc_detector_distance_create+0x116>
 8003f2c:	f1b8 0f00 	cmp.w	r8, #0
 8003f30:	d14a      	bne.n	8003fc8 <acc_detector_distance_create+0x154>
 8003f32:	f04f 0800 	mov.w	r8, #0
 8003f36:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 8003f3a:	9700      	str	r7, [sp, #0]
 8003f3c:	7d70      	ldrb	r0, [r6, #21]
 8003f3e:	ab09      	add	r3, sp, #36	@ 0x24
 8003f40:	f000 ffca 	bl	8004ed8 <acc_detector_distance_aggregator_create>
 8003f44:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d0a0      	beq.n	8003e8c <acc_detector_distance_create+0x18>
 8003f4a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	9004      	str	r0, [sp, #16]
 8003f52:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003f54:	9205      	str	r2, [sp, #20]
 8003f56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f58:	9206      	str	r2, [sp, #24]
 8003f5a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8003f5c:	9207      	str	r2, [sp, #28]
 8003f5e:	469a      	mov	sl, r3
 8003f60:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003f62:	9308      	str	r3, [sp, #32]
 8003f64:	46d1      	mov	r9, sl
 8003f66:	2501      	movs	r5, #1
 8003f68:	a903      	add	r1, sp, #12
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d04d      	beq.n	800400a <acc_detector_distance_create+0x196>
 8003f6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f72:	f004 fa3b 	bl	80083ec <acc_rss_get_buffer_size>
 8003f76:	4607      	mov	r7, r0
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d142      	bne.n	8004002 <acc_detector_distance_create+0x18e>
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	f006 ff53 	bl	800ae28 <acc_detector_utils_align_size_32bit>
 8003f82:	60a0      	str	r0, [r4, #8]
 8003f84:	e9cd 7703 	strd	r7, r7, [sp, #12]
 8003f88:	e783      	b.n	8003e92 <acc_detector_distance_create+0x1e>
 8003f8a:	f104 03dc 	add.w	r3, r4, #220	@ 0xdc
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8003f94:	f104 0254 	add.w	r2, r4, #84	@ 0x54
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8003fa0:	f7ff fe22 	bl	8003be8 <create_measurement_resources>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f43f af71 	beq.w	8003e8c <acc_detector_distance_create+0x18>
 8003faa:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8003fac:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8003fb0:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 8003fb4:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8003fb8:	f7ff fe4e 	bl	8003c58 <create_noise_calibration_resources>
 8003fbc:	2800      	cmp	r0, #0
 8003fbe:	f43f af65 	beq.w	8003e8c <acc_detector_distance_create+0x18>
 8003fc2:	f1b8 0f00 	cmp.w	r8, #0
 8003fc6:	d0b4      	beq.n	8003f32 <acc_detector_distance_create+0xbe>
 8003fc8:	f104 03c0 	add.w	r3, r4, #192	@ 0xc0
 8003fcc:	2000      	movs	r0, #0
 8003fce:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8003fd2:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	4631      	mov	r1, r6
 8003fda:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 8003fde:	f7ff fe03 	bl	8003be8 <create_measurement_resources>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	f43f af52 	beq.w	8003e8c <acc_detector_distance_create+0x18>
 8003fe8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003fea:	f104 0388 	add.w	r3, r4, #136	@ 0x88
 8003fee:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 8003ff2:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8003ff6:	f7ff fe2f 	bl	8003c58 <create_noise_calibration_resources>
 8003ffa:	4680      	mov	r8, r0
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d19a      	bne.n	8003f36 <acc_detector_distance_create+0xc2>
 8004000:	e744      	b.n	8003e8c <acc_detector_distance_create+0x18>
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	459a      	cmp	sl, r3
 8004006:	bf38      	it	cc
 8004008:	469a      	movcc	sl, r3
 800400a:	2d05      	cmp	r5, #5
 800400c:	d007      	beq.n	800401e <acc_detector_distance_create+0x1aa>
 800400e:	ab2c      	add	r3, sp, #176	@ 0xb0
 8004010:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004014:	3501      	adds	r5, #1
 8004016:	f853 0ca0 	ldr.w	r0, [r3, #-160]
 800401a:	b2ad      	uxth	r5, r5
 800401c:	e7a4      	b.n	8003f68 <acc_detector_distance_create+0xf4>
 800401e:	4650      	mov	r0, sl
 8004020:	f006 ff02 	bl	800ae28 <acc_detector_utils_align_size_32bit>
 8004024:	2700      	movs	r7, #0
 8004026:	60a0      	str	r0, [r4, #8]
 8004028:	a903      	add	r1, sp, #12
 800402a:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800402e:	aa04      	add	r2, sp, #16
 8004030:	60e0      	str	r0, [r4, #12]
 8004032:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004034:	f000 ff3c 	bl	8004eb0 <acc_detector_distance_aggregator_get_sizes>
 8004038:	4605      	mov	r5, r0
 800403a:	2800      	cmp	r0, #0
 800403c:	f43f af29 	beq.w	8003e92 <acc_detector_distance_create+0x1e>
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	7527      	strb	r7, [r4, #20]
 8004044:	f5b3 6fee 	cmp.w	r3, #1904	@ 0x770
 8004048:	bf38      	it	cc
 800404a:	f44f 63ee 	movcc.w	r3, #1904	@ 0x770
 800404e:	6123      	str	r3, [r4, #16]
 8004050:	4620      	mov	r0, r4
 8004052:	f7ff fe47 	bl	8003ce4 <detector_has_close_range>
 8004056:	4607      	mov	r7, r0
 8004058:	4620      	mov	r0, r4
 800405a:	f7ff fe55 	bl	8003d08 <detector_has_far_range>
 800405e:	b118      	cbz	r0, 8004068 <acc_detector_distance_create+0x1f4>
 8004060:	7d35      	ldrb	r5, [r6, #20]
 8004062:	3d02      	subs	r5, #2
 8004064:	bf18      	it	ne
 8004066:	2501      	movne	r5, #1
 8004068:	f087 0301 	eor.w	r3, r7, #1
 800406c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004070:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
 8004074:	4620      	mov	r0, r4
 8004076:	f7ff fe47 	bl	8003d08 <detector_has_far_range>
 800407a:	b9f0      	cbnz	r0, 80040ba <acc_detector_distance_create+0x246>
 800407c:	4602      	mov	r2, r0
 800407e:	9b04      	ldr	r3, [sp, #16]
 8004080:	4641      	mov	r1, r8
 8004082:	f104 0018 	add.w	r0, r4, #24
 8004086:	f002 f8e1 	bl	800624c <acc_detector_distance_cal_result_static_map_init>
 800408a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800408e:	f002 f8f3 	bl	8006278 <acc_detector_distance_cal_result_dynamic_map_init>
 8004092:	f004 fb8f 	bl	80087b4 <acc_config_create>
 8004096:	4605      	mov	r5, r0
 8004098:	2800      	cmp	r0, #0
 800409a:	f43f aefa 	beq.w	8003e92 <acc_detector_distance_create+0x1e>
 800409e:	f002 f931 	bl	8006304 <acc_detector_distance_calibration_offset_settings_set>
 80040a2:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80040a6:	4628      	mov	r0, r5
 80040a8:	f004 ff30 	bl	8008f0c <acc_processing_create>
 80040ac:	b150      	cbz	r0, 80040c4 <acc_detector_distance_create+0x250>
 80040ae:	65a0      	str	r0, [r4, #88]	@ 0x58
 80040b0:	4620      	mov	r0, r4
 80040b2:	6465      	str	r5, [r4, #68]	@ 0x44
 80040b4:	b02c      	add	sp, #176	@ 0xb0
 80040b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ba:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80040bc:	f004 fbc0 	bl	8008840 <acc_config_num_subsweeps_get>
 80040c0:	4602      	mov	r2, r0
 80040c2:	e7dc      	b.n	800407e <acc_detector_distance_create+0x20a>
 80040c4:	4628      	mov	r0, r5
 80040c6:	f004 fb8d 	bl	80087e4 <acc_config_destroy>
 80040ca:	e6e2      	b.n	8003e92 <acc_detector_distance_create+0x1e>
 80040cc:	acc0d150 	.word	0xacc0d150
 80040d0:	200003f0 	.word	0x200003f0
 80040d4:	08011a70 	.word	0x08011a70
 80040d8:	08011a44 	.word	0x08011a44
 80040dc:	acc0d130 	.word	0xacc0d130

080040e0 <acc_detector_distance_calibrate>:
 80040e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e4:	b08d      	sub	sp, #52	@ 0x34
 80040e6:	2400      	movs	r4, #0
 80040e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80040ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 80040ee:	b131      	cbz	r1, 80040fe <acc_detector_distance_calibrate+0x1e>
 80040f0:	4617      	mov	r7, r2
 80040f2:	4698      	mov	r8, r3
 80040f4:	680a      	ldr	r2, [r1, #0]
 80040f6:	4bb5      	ldr	r3, [pc, #724]	@ (80043cc <acc_detector_distance_calibrate+0x2ec>)
 80040f8:	429a      	cmp	r2, r3
 80040fa:	460d      	mov	r5, r1
 80040fc:	d005      	beq.n	800410a <acc_detector_distance_calibrate+0x2a>
 80040fe:	f7ff fde5 	bl	8003ccc <validate_distance_handle.part.0>
 8004102:	2000      	movs	r0, #0
 8004104:	b00d      	add	sp, #52	@ 0x34
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410a:	aa08      	add	r2, sp, #32
 800410c:	4606      	mov	r6, r0
 800410e:	a907      	add	r1, sp, #28
 8004110:	4628      	mov	r0, r5
 8004112:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004116:	f7ff fe43 	bl	8003da0 <acc_detector_distance_get_sizes>
 800411a:	9b07      	ldr	r3, [sp, #28]
 800411c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800411e:	4293      	cmp	r3, r2
 8004120:	d80d      	bhi.n	800413e <acc_detector_distance_calibrate+0x5e>
 8004122:	9b08      	ldr	r3, [sp, #32]
 8004124:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8004126:	429a      	cmp	r2, r3
 8004128:	d214      	bcs.n	8004154 <acc_detector_distance_calibrate+0x74>
 800412a:	4da9      	ldr	r5, [pc, #676]	@ (80043d0 <acc_detector_distance_calibrate+0x2f0>)
 800412c:	692b      	ldr	r3, [r5, #16]
 800412e:	4aa9      	ldr	r2, [pc, #676]	@ (80043d4 <acc_detector_distance_calibrate+0x2f4>)
 8004130:	49a9      	ldr	r1, [pc, #676]	@ (80043d8 <acc_detector_distance_calibrate+0x2f8>)
 8004132:	2000      	movs	r0, #0
 8004134:	4798      	blx	r3
 8004136:	2000      	movs	r0, #0
 8004138:	b00d      	add	sp, #52	@ 0x34
 800413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800413e:	4da4      	ldr	r5, [pc, #656]	@ (80043d0 <acc_detector_distance_calibrate+0x2f0>)
 8004140:	4aa6      	ldr	r2, [pc, #664]	@ (80043dc <acc_detector_distance_calibrate+0x2fc>)
 8004142:	692b      	ldr	r3, [r5, #16]
 8004144:	49a4      	ldr	r1, [pc, #656]	@ (80043d8 <acc_detector_distance_calibrate+0x2f8>)
 8004146:	4620      	mov	r0, r4
 8004148:	4798      	blx	r3
 800414a:	9b08      	ldr	r3, [sp, #32]
 800414c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800414e:	429a      	cmp	r2, r3
 8004150:	d3ec      	bcc.n	800412c <acc_detector_distance_calibrate+0x4c>
 8004152:	e7d6      	b.n	8004102 <acc_detector_distance_calibrate+0x22>
 8004154:	7d2b      	ldrb	r3, [r5, #20]
 8004156:	2b05      	cmp	r3, #5
 8004158:	f200 81a7 	bhi.w	80044aa <acc_detector_distance_calibrate+0x3ca>
 800415c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004160:	00fc0140 	.word	0x00fc0140
 8004164:	008000c1 	.word	0x008000c1
 8004168:	00060013 	.word	0x00060013
 800416c:	f006 ff1c 	bl	800afa8 <acc_rss_integration_log_level>
 8004170:	2800      	cmp	r0, #0
 8004172:	f040 814d 	bne.w	8004410 <acc_detector_distance_calibrate+0x330>
 8004176:	7d2b      	ldrb	r3, [r5, #20]
 8004178:	2b05      	cmp	r3, #5
 800417a:	f000 813f 	beq.w	80043fc <acc_detector_distance_calibrate+0x31c>
 800417e:	2001      	movs	r0, #1
 8004180:	b00d      	add	sp, #52	@ 0x34
 8004182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004186:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004188:	4641      	mov	r1, r8
 800418a:	4630      	mov	r0, r6
 800418c:	f005 f886 	bl	800929c <acc_sensor_read>
 8004190:	2800      	cmp	r0, #0
 8004192:	d0b6      	beq.n	8004102 <acc_detector_distance_calibrate+0x22>
 8004194:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8140 	bne.w	800441e <acc_detector_distance_calibrate+0x33e>
 800419e:	6e68      	ldr	r0, [r5, #100]	@ 0x64
 80041a0:	aa09      	add	r2, sp, #36	@ 0x24
 80041a2:	4641      	mov	r1, r8
 80041a4:	f004 fe52 	bl	8008e4c <acc_processing_execute>
 80041a8:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80041ac:	b143      	cbz	r3, 80041c0 <acc_detector_distance_calibrate+0xe0>
 80041ae:	f895 2040 	ldrb.w	r2, [r5, #64]	@ 0x40
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	f040 8138 	bne.w	8004428 <acc_detector_distance_calibrate+0x348>
 80041b8:	f105 01c0 	add.w	r1, r5, #192	@ 0xc0
 80041bc:	a809      	add	r0, sp, #36	@ 0x24
 80041be:	4798      	blx	r3
 80041c0:	f895 4040 	ldrb.w	r4, [r5, #64]	@ 0x40
 80041c4:	68eb      	ldr	r3, [r5, #12]
 80041c6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80041c8:	f8d5 a03c 	ldr.w	sl, [r5, #60]	@ 0x3c
 80041cc:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 80041d0:	f105 0918 	add.w	r9, r5, #24
 80041d4:	4622      	mov	r2, r4
 80041d6:	f04f 0c00 	mov.w	ip, #0
 80041da:	4443      	add	r3, r8
 80041dc:	4649      	mov	r1, r9
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	f88d c020 	strb.w	ip, [sp, #32]
 80041e4:	f002 f87a 	bl	80062dc <acc_detector_distance_cal_result_bg_noise_array_get>
 80041e8:	4649      	mov	r1, r9
 80041ea:	4603      	mov	r3, r0
 80041ec:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80041ee:	9305      	str	r3, [sp, #20]
 80041f0:	f002 f884 	bl	80062fc <acc_detector_distance_cal_result_aggregator_partition_get>
 80041f4:	9b04      	ldr	r3, [sp, #16]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4621      	mov	r1, r4
 80041fa:	ac08      	add	r4, sp, #32
 80041fc:	9001      	str	r0, [sp, #4]
 80041fe:	9b05      	ldr	r3, [sp, #20]
 8004200:	9402      	str	r4, [sp, #8]
 8004202:	465a      	mov	r2, fp
 8004204:	4650      	mov	r0, sl
 8004206:	f000 ff11 	bl	800502c <acc_detector_distance_aggregator_calibrate>
 800420a:	2800      	cmp	r0, #0
 800420c:	f43f af7a 	beq.w	8004104 <acc_detector_distance_calibrate+0x24>
 8004210:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8004214:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8004218:	442b      	add	r3, r5
 800421a:	4628      	mov	r0, r5
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004220:	f7ff fd84 	bl	8003d2c <decide_next_measurement_type>
 8004224:	182b      	adds	r3, r5, r0
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422a:	b90b      	cbnz	r3, 8004230 <acc_detector_distance_calibrate+0x150>
 800422c:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
 8004230:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
 8004234:	b123      	cbz	r3, 8004240 <acc_detector_distance_calibrate+0x160>
 8004236:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 8122 	bne.w	8004484 <acc_detector_distance_calibrate+0x3a4>
 8004240:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	f040 8109 	bne.w	800445c <acc_detector_distance_calibrate+0x37c>
 800424a:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800424c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	463a      	mov	r2, r7
 8004252:	4643      	mov	r3, r8
 8004254:	4630      	mov	r0, r6
 8004256:	f7ff fd1d 	bl	8003c94 <prepare_and_measure>
 800425a:	2800      	cmp	r0, #0
 800425c:	d18b      	bne.n	8004176 <acc_detector_distance_calibrate+0x96>
 800425e:	e750      	b.n	8004102 <acc_detector_distance_calibrate+0x22>
 8004260:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004262:	4641      	mov	r1, r8
 8004264:	4630      	mov	r0, r6
 8004266:	f005 f819 	bl	800929c <acc_sensor_read>
 800426a:	2800      	cmp	r0, #0
 800426c:	f43f af49 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 8004270:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 8004272:	aa09      	add	r2, sp, #36	@ 0x24
 8004274:	4641      	mov	r1, r8
 8004276:	f004 fde9 	bl	8008e4c <acc_processing_execute>
 800427a:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800427e:	b11b      	cbz	r3, 8004288 <acc_detector_distance_calibrate+0x1a8>
 8004280:	a809      	add	r0, sp, #36	@ 0x24
 8004282:	f105 01a4 	add.w	r1, r5, #164	@ 0xa4
 8004286:	4798      	blx	r3
 8004288:	f105 0418 	add.w	r4, r5, #24
 800428c:	4621      	mov	r1, r4
 800428e:	2201      	movs	r2, #1
 8004290:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004292:	f002 f823 	bl	80062dc <acc_detector_distance_cal_result_bg_noise_array_get>
 8004296:	68ea      	ldr	r2, [r5, #12]
 8004298:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800429a:	4603      	mov	r3, r0
 800429c:	4442      	add	r2, r8
 800429e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80042a0:	f002 f96e 	bl	8006580 <acc_detector_distance_calibration_noise_process>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	f43f af2c 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 80042aa:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80042ac:	f000 ff10 	bl	80050d0 <acc_detector_distance_aggregator_calibration_needed>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	f000 80da 	beq.w	800446a <acc_detector_distance_calibrate+0x38a>
 80042b6:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80d3 	beq.w	8004466 <acc_detector_distance_calibrate+0x386>
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 80f0 	bne.w	80044a6 <acc_detector_distance_calibrate+0x3c6>
 80042c6:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80042c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	463a      	mov	r2, r7
 80042ce:	4643      	mov	r3, r8
 80042d0:	4630      	mov	r0, r6
 80042d2:	f7ff fcdf 	bl	8003c94 <prepare_and_measure>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	f43f af13 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 80042dc:	2304      	movs	r3, #4
 80042de:	752b      	strb	r3, [r5, #20]
 80042e0:	e74d      	b.n	800417e <acc_detector_distance_calibrate+0x9e>
 80042e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80042e4:	4641      	mov	r1, r8
 80042e6:	4630      	mov	r0, r6
 80042e8:	f004 ffd8 	bl	800929c <acc_sensor_read>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	f43f af08 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 80042f2:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 80042f4:	aa09      	add	r2, sp, #36	@ 0x24
 80042f6:	4641      	mov	r1, r8
 80042f8:	f004 fda8 	bl	8008e4c <acc_processing_execute>
 80042fc:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8004300:	b11b      	cbz	r3, 800430a <acc_detector_distance_calibrate+0x22a>
 8004302:	a809      	add	r0, sp, #36	@ 0x24
 8004304:	f105 0188 	add.w	r1, r5, #136	@ 0x88
 8004308:	4798      	blx	r3
 800430a:	f105 0418 	add.w	r4, r5, #24
 800430e:	4621      	mov	r1, r4
 8004310:	2200      	movs	r2, #0
 8004312:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004314:	f001 ffe2 	bl	80062dc <acc_detector_distance_cal_result_bg_noise_array_get>
 8004318:	68ea      	ldr	r2, [r5, #12]
 800431a:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800431c:	4603      	mov	r3, r0
 800431e:	4442      	add	r2, r8
 8004320:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004322:	f002 f92d 	bl	8006580 <acc_detector_distance_calibration_noise_process>
 8004326:	2800      	cmp	r0, #0
 8004328:	f43f aeeb 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 800432c:	4628      	mov	r0, r5
 800432e:	f7ff fceb 	bl	8003d08 <detector_has_far_range>
 8004332:	4681      	mov	r9, r0
 8004334:	2800      	cmp	r0, #0
 8004336:	f040 8083 	bne.w	8004440 <acc_detector_distance_calibrate+0x360>
 800433a:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 800433c:	f000 fec8 	bl	80050d0 <acc_detector_distance_aggregator_calibration_needed>
 8004340:	2800      	cmp	r0, #0
 8004342:	f000 809c 	beq.w	800447e <acc_detector_distance_calibrate+0x39e>
 8004346:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 808b 	beq.w	8004466 <acc_detector_distance_calibrate+0x386>
 8004350:	2b01      	cmp	r3, #1
 8004352:	d0b8      	beq.n	80042c6 <acc_detector_distance_calibrate+0x1e6>
 8004354:	4649      	mov	r1, r9
 8004356:	e7b7      	b.n	80042c8 <acc_detector_distance_calibrate+0x1e8>
 8004358:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800435a:	4641      	mov	r1, r8
 800435c:	4630      	mov	r0, r6
 800435e:	f004 ff9d 	bl	800929c <acc_sensor_read>
 8004362:	2800      	cmp	r0, #0
 8004364:	f43f aecd 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 8004368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800436a:	aa09      	add	r2, sp, #36	@ 0x24
 800436c:	4641      	mov	r1, r8
 800436e:	f004 fd6d 	bl	8008e4c <acc_processing_execute>
 8004372:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8004376:	b11b      	cbz	r3, 8004380 <acc_detector_distance_calibrate+0x2a0>
 8004378:	a809      	add	r0, sp, #36	@ 0x24
 800437a:	f105 016c 	add.w	r1, r5, #108	@ 0x6c
 800437e:	4798      	blx	r3
 8004380:	f105 0938 	add.w	r9, r5, #56	@ 0x38
 8004384:	4649      	mov	r1, r9
 8004386:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004388:	f001 ffb4 	bl	80062f4 <acc_detector_distance_cal_result_loopback_peak_distance_get>
 800438c:	68e9      	ldr	r1, [r5, #12]
 800438e:	4604      	mov	r4, r0
 8004390:	4441      	add	r1, r8
 8004392:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004394:	f001 ffea 	bl	800636c <acc_detector_distance_calibration_offset_process>
 8004398:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800439a:	ed84 0a00 	vstr	s0, [r4]
 800439e:	4649      	mov	r1, r9
 80043a0:	f001 ff92 	bl	80062c8 <acc_detector_distance_cal_result_dynamic_crc_set>
 80043a4:	4628      	mov	r0, r5
 80043a6:	f7ff fc9d 	bl	8003ce4 <detector_has_close_range>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d042      	beq.n	8004434 <acc_detector_distance_calibrate+0x354>
 80043ae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 80043b4:	4643      	mov	r3, r8
 80043b6:	463a      	mov	r2, r7
 80043b8:	4630      	mov	r0, r6
 80043ba:	f7ff fc6b 	bl	8003c94 <prepare_and_measure>
 80043be:	2800      	cmp	r0, #0
 80043c0:	f43f ae9f 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 80043c4:	2302      	movs	r3, #2
 80043c6:	752b      	strb	r3, [r5, #20]
 80043c8:	e6d9      	b.n	800417e <acc_detector_distance_calibrate+0x9e>
 80043ca:	bf00      	nop
 80043cc:	acc0d130 	.word	0xacc0d130
 80043d0:	200003f0 	.word	0x200003f0
 80043d4:	08011aac 	.word	0x08011aac
 80043d8:	08011a44 	.word	0x08011a44
 80043dc:	08011a94 	.word	0x08011a94
 80043e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80043e6:	4643      	mov	r3, r8
 80043e8:	463a      	mov	r2, r7
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7ff fc52 	bl	8003c94 <prepare_and_measure>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	f43f ae86 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 80043f6:	2301      	movs	r3, #1
 80043f8:	752b      	strb	r3, [r5, #20]
 80043fa:	e6c0      	b.n	800417e <acc_detector_distance_calibrate+0x9e>
 80043fc:	f105 0418 	add.w	r4, r5, #24
 8004400:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004402:	4621      	mov	r1, r4
 8004404:	f001 ff58 	bl	80062b8 <acc_detector_distance_cal_result_static_crc_set>
 8004408:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800440a:	2001      	movs	r0, #1
 800440c:	7018      	strb	r0, [r3, #0]
 800440e:	e679      	b.n	8004104 <acc_detector_distance_calibrate+0x24>
 8004410:	4b2a      	ldr	r3, [pc, #168]	@ (80044bc <acc_detector_distance_calibrate+0x3dc>)
 8004412:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <acc_detector_distance_calibrate+0x3e0>)
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	492b      	ldr	r1, [pc, #172]	@ (80044c4 <acc_detector_distance_calibrate+0x3e4>)
 8004418:	2001      	movs	r0, #1
 800441a:	4798      	blx	r3
 800441c:	e6ab      	b.n	8004176 <acc_detector_distance_calibrate+0x96>
 800441e:	2b01      	cmp	r3, #1
 8004420:	bf0c      	ite	eq
 8004422:	6ea8      	ldreq	r0, [r5, #104]	@ 0x68
 8004424:	2000      	movne	r0, #0
 8004426:	e6bb      	b.n	80041a0 <acc_detector_distance_calibrate+0xc0>
 8004428:	2a01      	cmp	r2, #1
 800442a:	bf0c      	ite	eq
 800442c:	f105 01dc 	addeq.w	r1, r5, #220	@ 0xdc
 8004430:	2100      	movne	r1, #0
 8004432:	e6c3      	b.n	80041bc <acc_detector_distance_calibrate+0xdc>
 8004434:	4628      	mov	r0, r5
 8004436:	f7ff fc67 	bl	8003d08 <detector_has_far_range>
 800443a:	2800      	cmp	r0, #0
 800443c:	f43f ae61 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 8004440:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8004446:	4643      	mov	r3, r8
 8004448:	463a      	mov	r2, r7
 800444a:	4630      	mov	r0, r6
 800444c:	f7ff fc22 	bl	8003c94 <prepare_and_measure>
 8004450:	2800      	cmp	r0, #0
 8004452:	f43f ae56 	beq.w	8004102 <acc_detector_distance_calibrate+0x22>
 8004456:	2303      	movs	r3, #3
 8004458:	752b      	strb	r3, [r5, #20]
 800445a:	e690      	b.n	800417e <acc_detector_distance_calibrate+0x9e>
 800445c:	2b01      	cmp	r3, #1
 800445e:	bf0c      	ite	eq
 8004460:	6d69      	ldreq	r1, [r5, #84]	@ 0x54
 8004462:	2100      	movne	r1, #0
 8004464:	e6f2      	b.n	800424c <acc_detector_distance_calibrate+0x16c>
 8004466:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8004468:	e72e      	b.n	80042c8 <acc_detector_distance_calibrate+0x1e8>
 800446a:	2305      	movs	r3, #5
 800446c:	752b      	strb	r3, [r5, #20]
 800446e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004470:	4621      	mov	r1, r4
 8004472:	f001 ff3b 	bl	80062ec <acc_detector_distance_cal_result_reference_temperature_get>
 8004476:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800447a:	8003      	strh	r3, [r0, #0]
 800447c:	e67b      	b.n	8004176 <acc_detector_distance_calibrate+0x96>
 800447e:	2305      	movs	r3, #5
 8004480:	752b      	strb	r3, [r5, #20]
 8004482:	e7bd      	b.n	8004400 <acc_detector_distance_calibrate+0x320>
 8004484:	2305      	movs	r3, #5
 8004486:	752b      	strb	r3, [r5, #20]
 8004488:	4628      	mov	r0, r5
 800448a:	f7ff fc2b 	bl	8003ce4 <detector_has_close_range>
 800448e:	f080 0001 	eor.w	r0, r0, #1
 8004492:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
 8004496:	4649      	mov	r1, r9
 8004498:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800449a:	f001 ff27 	bl	80062ec <acc_detector_distance_cal_result_reference_temperature_get>
 800449e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80044a2:	8003      	strh	r3, [r0, #0]
 80044a4:	e667      	b.n	8004176 <acc_detector_distance_calibrate+0x96>
 80044a6:	2100      	movs	r1, #0
 80044a8:	e70e      	b.n	80042c8 <acc_detector_distance_calibrate+0x1e8>
 80044aa:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <acc_detector_distance_calibrate+0x3dc>)
 80044ac:	4a06      	ldr	r2, [pc, #24]	@ (80044c8 <acc_detector_distance_calibrate+0x3e8>)
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	4904      	ldr	r1, [pc, #16]	@ (80044c4 <acc_detector_distance_calibrate+0x3e4>)
 80044b2:	2000      	movs	r0, #0
 80044b4:	4798      	blx	r3
 80044b6:	2000      	movs	r0, #0
 80044b8:	e624      	b.n	8004104 <acc_detector_distance_calibrate+0x24>
 80044ba:	bf00      	nop
 80044bc:	200003f0 	.word	0x200003f0
 80044c0:	08011ad0 	.word	0x08011ad0
 80044c4:	08011a44 	.word	0x08011a44
 80044c8:	08011b10 	.word	0x08011b10

080044cc <acc_detector_distance_update_calibration>:
 80044cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d0:	b089      	sub	sp, #36	@ 0x24
 80044d2:	2400      	movs	r4, #0
 80044d4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80044d6:	9407      	str	r4, [sp, #28]
 80044d8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80044dc:	7034      	strb	r4, [r6, #0]
 80044de:	b131      	cbz	r1, 80044ee <acc_detector_distance_update_calibration+0x22>
 80044e0:	4691      	mov	r9, r2
 80044e2:	461f      	mov	r7, r3
 80044e4:	680a      	ldr	r2, [r1, #0]
 80044e6:	4b3d      	ldr	r3, [pc, #244]	@ (80045dc <acc_detector_distance_update_calibration+0x110>)
 80044e8:	429a      	cmp	r2, r3
 80044ea:	460d      	mov	r5, r1
 80044ec:	d006      	beq.n	80044fc <acc_detector_distance_update_calibration+0x30>
 80044ee:	f7ff fbed 	bl	8003ccc <validate_distance_handle.part.0>
 80044f2:	2400      	movs	r4, #0
 80044f4:	4620      	mov	r0, r4
 80044f6:	b009      	add	sp, #36	@ 0x24
 80044f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044fc:	aa04      	add	r2, sp, #16
 80044fe:	4680      	mov	r8, r0
 8004500:	a903      	add	r1, sp, #12
 8004502:	4628      	mov	r0, r5
 8004504:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004508:	f7ff fc4a 	bl	8003da0 <acc_detector_distance_get_sizes>
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004510:	4293      	cmp	r3, r2
 8004512:	d909      	bls.n	8004528 <acc_detector_distance_update_calibration+0x5c>
 8004514:	4b32      	ldr	r3, [pc, #200]	@ (80045e0 <acc_detector_distance_update_calibration+0x114>)
 8004516:	4a33      	ldr	r2, [pc, #204]	@ (80045e4 <acc_detector_distance_update_calibration+0x118>)
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	4933      	ldr	r1, [pc, #204]	@ (80045e8 <acc_detector_distance_update_calibration+0x11c>)
 800451c:	4620      	mov	r0, r4
 800451e:	4798      	blx	r3
 8004520:	4620      	mov	r0, r4
 8004522:	b009      	add	sp, #36	@ 0x24
 8004524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004528:	7d2b      	ldrb	r3, [r5, #20]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d84f      	bhi.n	80045ce <acc_detector_distance_update_calibration+0x102>
 800452e:	e8df f003 	tbb	[pc, r3]
 8004532:	1b0e      	.short	0x1b0e
 8004534:	0e030303 	.word	0x0e030303
 8004538:	f006 fd36 	bl	800afa8 <acc_rss_integration_log_level>
 800453c:	b1d8      	cbz	r0, 8004576 <acc_detector_distance_update_calibration+0xaa>
 800453e:	4b28      	ldr	r3, [pc, #160]	@ (80045e0 <acc_detector_distance_update_calibration+0x114>)
 8004540:	4a2a      	ldr	r2, [pc, #168]	@ (80045ec <acc_detector_distance_update_calibration+0x120>)
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	4928      	ldr	r1, [pc, #160]	@ (80045e8 <acc_detector_distance_update_calibration+0x11c>)
 8004546:	2001      	movs	r0, #1
 8004548:	4798      	blx	r3
 800454a:	2400      	movs	r4, #0
 800454c:	e7d2      	b.n	80044f4 <acc_detector_distance_update_calibration+0x28>
 800454e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8004554:	463b      	mov	r3, r7
 8004556:	464a      	mov	r2, r9
 8004558:	4640      	mov	r0, r8
 800455a:	f7ff fb9b 	bl	8003c94 <prepare_and_measure>
 800455e:	4604      	mov	r4, r0
 8004560:	b148      	cbz	r0, 8004576 <acc_detector_distance_update_calibration+0xaa>
 8004562:	2301      	movs	r3, #1
 8004564:	752b      	strb	r3, [r5, #20]
 8004566:	e7c5      	b.n	80044f4 <acc_detector_distance_update_calibration+0x28>
 8004568:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800456a:	4640      	mov	r0, r8
 800456c:	4639      	mov	r1, r7
 800456e:	f004 fe95 	bl	800929c <acc_sensor_read>
 8004572:	4604      	mov	r4, r0
 8004574:	b920      	cbnz	r0, 8004580 <acc_detector_distance_update_calibration+0xb4>
 8004576:	2400      	movs	r4, #0
 8004578:	4620      	mov	r0, r4
 800457a:	b009      	add	sp, #36	@ 0x24
 800457c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004582:	aa05      	add	r2, sp, #20
 8004584:	4639      	mov	r1, r7
 8004586:	f004 fc61 	bl	8008e4c <acc_processing_execute>
 800458a:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800458e:	b11b      	cbz	r3, 8004598 <acc_detector_distance_update_calibration+0xcc>
 8004590:	a805      	add	r0, sp, #20
 8004592:	f105 016c 	add.w	r1, r5, #108	@ 0x6c
 8004596:	4798      	blx	r3
 8004598:	f105 0838 	add.w	r8, r5, #56	@ 0x38
 800459c:	4641      	mov	r1, r8
 800459e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80045a0:	f001 fea8 	bl	80062f4 <acc_detector_distance_cal_result_loopback_peak_distance_get>
 80045a4:	68e9      	ldr	r1, [r5, #12]
 80045a6:	4603      	mov	r3, r0
 80045a8:	4439      	add	r1, r7
 80045aa:	9807      	ldr	r0, [sp, #28]
 80045ac:	461f      	mov	r7, r3
 80045ae:	f001 fedd 	bl	800636c <acc_detector_distance_calibration_offset_process>
 80045b2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80045b4:	ed87 0a00 	vstr	s0, [r7]
 80045b8:	4641      	mov	r1, r8
 80045ba:	f001 fe85 	bl	80062c8 <acc_detector_distance_cal_result_dynamic_crc_set>
 80045be:	2205      	movs	r2, #5
 80045c0:	2301      	movs	r3, #1
 80045c2:	4620      	mov	r0, r4
 80045c4:	752a      	strb	r2, [r5, #20]
 80045c6:	7033      	strb	r3, [r6, #0]
 80045c8:	b009      	add	sp, #36	@ 0x24
 80045ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045ce:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <acc_detector_distance_update_calibration+0x114>)
 80045d0:	4a07      	ldr	r2, [pc, #28]	@ (80045f0 <acc_detector_distance_update_calibration+0x124>)
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4904      	ldr	r1, [pc, #16]	@ (80045e8 <acc_detector_distance_update_calibration+0x11c>)
 80045d6:	2000      	movs	r0, #0
 80045d8:	4798      	blx	r3
 80045da:	e7cc      	b.n	8004576 <acc_detector_distance_update_calibration+0xaa>
 80045dc:	acc0d130 	.word	0xacc0d130
 80045e0:	200003f0 	.word	0x200003f0
 80045e4:	08011a94 	.word	0x08011a94
 80045e8:	08011a44 	.word	0x08011a44
 80045ec:	08011b30 	.word	0x08011b30
 80045f0:	08011b10 	.word	0x08011b10

080045f4 <acc_detector_distance_prepare>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4614      	mov	r4, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	e9dd 3504 	ldrd	r3, r5, [sp, #16]
 80045fe:	b118      	cbz	r0, 8004608 <acc_detector_distance_prepare+0x14>
 8004600:	490e      	ldr	r1, [pc, #56]	@ (800463c <acc_detector_distance_prepare+0x48>)
 8004602:	6806      	ldr	r6, [r0, #0]
 8004604:	428e      	cmp	r6, r1
 8004606:	d003      	beq.n	8004610 <acc_detector_distance_prepare+0x1c>
 8004608:	f7ff fb60 	bl	8003ccc <validate_distance_handle.part.0>
 800460c:	2000      	movs	r0, #0
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f890 1040 	ldrb.w	r1, [r0, #64]	@ 0x40
 8004614:	b151      	cbz	r1, 800462c <acc_detector_distance_prepare+0x38>
 8004616:	2901      	cmp	r1, #1
 8004618:	bf08      	it	eq
 800461a:	6d41      	ldreq	r1, [r0, #84]	@ 0x54
 800461c:	9504      	str	r5, [sp, #16]
 800461e:	4620      	mov	r0, r4
 8004620:	bf18      	it	ne
 8004622:	2100      	movne	r1, #0
 8004624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004628:	f004 bdba 	b.w	80091a0 <acc_sensor_prepare>
 800462c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800462e:	9504      	str	r5, [sp, #16]
 8004630:	4620      	mov	r0, r4
 8004632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004636:	f004 bdb3 	b.w	80091a0 <acc_sensor_prepare>
 800463a:	bf00      	nop
 800463c:	acc0d130 	.word	0xacc0d130

08004640 <acc_detector_distance_process>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	b0b7      	sub	sp, #220	@ 0xdc
 8004646:	4698      	mov	r8, r3
 8004648:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800464a:	2500      	movs	r5, #0
 800464c:	701d      	strb	r5, [r3, #0]
 800464e:	b128      	cbz	r0, 800465c <acc_detector_distance_process+0x1c>
 8004650:	4b87      	ldr	r3, [pc, #540]	@ (8004870 <acc_detector_distance_process+0x230>)
 8004652:	4616      	mov	r6, r2
 8004654:	6802      	ldr	r2, [r0, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	4604      	mov	r4, r0
 800465a:	d006      	beq.n	800466a <acc_detector_distance_process+0x2a>
 800465c:	f7ff fb36 	bl	8003ccc <validate_distance_handle.part.0>
 8004660:	2500      	movs	r5, #0
 8004662:	4628      	mov	r0, r5
 8004664:	b037      	add	sp, #220	@ 0xdc
 8004666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466a:	f100 0a18 	add.w	sl, r0, #24
 800466e:	460f      	mov	r7, r1
 8004670:	4630      	mov	r0, r6
 8004672:	4651      	mov	r1, sl
 8004674:	f001 fe06 	bl	8006284 <acc_detector_distance_cal_result_static_validate>
 8004678:	4605      	mov	r5, r0
 800467a:	b940      	cbnz	r0, 800468e <acc_detector_distance_process+0x4e>
 800467c:	4b7d      	ldr	r3, [pc, #500]	@ (8004874 <acc_detector_distance_process+0x234>)
 800467e:	4a7e      	ldr	r2, [pc, #504]	@ (8004878 <acc_detector_distance_process+0x238>)
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	497e      	ldr	r1, [pc, #504]	@ (800487c <acc_detector_distance_process+0x23c>)
 8004684:	4798      	blx	r3
 8004686:	4628      	mov	r0, r5
 8004688:	b037      	add	sp, #220	@ 0xdc
 800468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468e:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8004692:	4659      	mov	r1, fp
 8004694:	4640      	mov	r0, r8
 8004696:	f001 fe01 	bl	800629c <acc_detector_distance_cal_result_dynamic_validate>
 800469a:	4605      	mov	r5, r0
 800469c:	b940      	cbnz	r0, 80046b0 <acc_detector_distance_process+0x70>
 800469e:	4b75      	ldr	r3, [pc, #468]	@ (8004874 <acc_detector_distance_process+0x234>)
 80046a0:	4a77      	ldr	r2, [pc, #476]	@ (8004880 <acc_detector_distance_process+0x240>)
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4975      	ldr	r1, [pc, #468]	@ (800487c <acc_detector_distance_process+0x23c>)
 80046a6:	4798      	blx	r3
 80046a8:	4628      	mov	r0, r5
 80046aa:	b037      	add	sp, #220	@ 0xdc
 80046ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff fb3b 	bl	8003d2c <decide_next_measurement_type>
 80046b6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80046ba:	900b      	str	r0, [sp, #44]	@ 0x2c
 80046bc:	b91b      	cbnz	r3, 80046c6 <acc_detector_distance_process+0x86>
 80046be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046c0:	1e5d      	subs	r5, r3, #1
 80046c2:	bf18      	it	ne
 80046c4:	2501      	movne	r5, #1
 80046c6:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80046c8:	f04f 0900 	mov.w	r9, #0
 80046cc:	701d      	strb	r5, [r3, #0]
 80046ce:	22a4      	movs	r2, #164	@ 0xa4
 80046d0:	4649      	mov	r1, r9
 80046d2:	f8c4 90f8 	str.w	r9, [r4, #248]	@ 0xf8
 80046d6:	f8c4 90fc 	str.w	r9, [r4, #252]	@ 0xfc
 80046da:	f8c4 9100 	str.w	r9, [r4, #256]	@ 0x100
 80046de:	a80d      	add	r0, sp, #52	@ 0x34
 80046e0:	f00c f8f0 	bl	80108c4 <memset>
 80046e4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80046e8:	f104 02f8 	add.w	r2, r4, #248	@ 0xf8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d066      	beq.n	80047be <acc_detector_distance_process+0x17e>
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf0c      	ite	eq
 80046f4:	6ea0      	ldreq	r0, [r4, #104]	@ 0x68
 80046f6:	4648      	movne	r0, r9
 80046f8:	4639      	mov	r1, r7
 80046fa:	9206      	str	r2, [sp, #24]
 80046fc:	f004 fba6 	bl	8008e4c <acc_processing_execute>
 8004700:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004702:	9a06      	ldr	r2, [sp, #24]
 8004704:	659a      	str	r2, [r3, #88]	@ 0x58
 8004706:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 800470a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800470e:	f1b9 0f00 	cmp.w	r9, #0
 8004712:	d156      	bne.n	80047c2 <acc_detector_distance_process+0x182>
 8004714:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004716:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004718:	6601      	str	r1, [r0, #96]	@ 0x60
 800471a:	f104 01c0 	add.w	r1, r4, #192	@ 0xc0
 800471e:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8004720:	b11b      	cbz	r3, 800472a <acc_detector_distance_process+0xea>
 8004722:	4610      	mov	r0, r2
 8004724:	4798      	blx	r3
 8004726:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 800472a:	f894 20fa 	ldrb.w	r2, [r4, #250]	@ 0xfa
 800472e:	2a00      	cmp	r2, #0
 8004730:	f000 8083 	beq.w	800483a <acc_detector_distance_process+0x1fa>
 8004734:	f9b4 30fc 	ldrsh.w	r3, [r4, #252]	@ 0xfc
 8004738:	930a      	str	r3, [sp, #40]	@ 0x28
 800473a:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	464a      	mov	r2, r9
 8004748:	4651      	mov	r1, sl
 800474a:	9306      	str	r3, [sp, #24]
 800474c:	4630      	mov	r0, r6
 800474e:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 8004752:	9309      	str	r3, [sp, #36]	@ 0x24
 8004754:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 8004756:	f001 fdc1 	bl	80062dc <acc_detector_distance_cal_result_bg_noise_array_get>
 800475a:	4651      	mov	r1, sl
 800475c:	4602      	mov	r2, r0
 800475e:	4630      	mov	r0, r6
 8004760:	9208      	str	r2, [sp, #32]
 8004762:	f001 fdc3 	bl	80062ec <acc_detector_distance_cal_result_reference_temperature_get>
 8004766:	4684      	mov	ip, r0
 8004768:	4659      	mov	r1, fp
 800476a:	4640      	mov	r0, r8
 800476c:	f9bc 8000 	ldrsh.w	r8, [ip]
 8004770:	f001 fdc0 	bl	80062f4 <acc_detector_distance_cal_result_loopback_peak_distance_get>
 8004774:	ed90 0a00 	vldr	s0, [r0]
 8004778:	4651      	mov	r1, sl
 800477a:	4630      	mov	r0, r6
 800477c:	ed8d 0a07 	vstr	s0, [sp, #28]
 8004780:	f001 fdbc 	bl	80062fc <acc_detector_distance_cal_result_aggregator_partition_get>
 8004784:	9a08      	ldr	r2, [sp, #32]
 8004786:	9b06      	ldr	r3, [sp, #24]
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	aa0d      	add	r2, sp, #52	@ 0x34
 800478c:	9205      	str	r2, [sp, #20]
 800478e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004790:	9004      	str	r0, [sp, #16]
 8004792:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8004796:	9200      	str	r2, [sp, #0]
 8004798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800479a:	ed9d 0a07 	vldr	s0, [sp, #28]
 800479e:	4638      	mov	r0, r7
 80047a0:	4649      	mov	r1, r9
 80047a2:	462a      	mov	r2, r5
 80047a4:	f000 fcb6 	bl	8005114 <acc_detector_distance_aggregator_process>
 80047a8:	b9b8      	cbnz	r0, 80047da <acc_detector_distance_process+0x19a>
 80047aa:	4932      	ldr	r1, [pc, #200]	@ (8004874 <acc_detector_distance_process+0x234>)
 80047ac:	4a35      	ldr	r2, [pc, #212]	@ (8004884 <acc_detector_distance_process+0x244>)
 80047ae:	690c      	ldr	r4, [r1, #16]
 80047b0:	4932      	ldr	r1, [pc, #200]	@ (800487c <acc_detector_distance_process+0x23c>)
 80047b2:	4605      	mov	r5, r0
 80047b4:	47a0      	blx	r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	b037      	add	sp, #220	@ 0xdc
 80047ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047be:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80047c0:	e79a      	b.n	80046f8 <acc_detector_distance_process+0xb8>
 80047c2:	f1b9 0f01 	cmp.w	r9, #1
 80047c6:	d148      	bne.n	800485a <acc_detector_distance_process+0x21a>
 80047c8:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80047ca:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80047cc:	6601      	str	r1, [r0, #96]	@ 0x60
 80047ce:	f104 01dc 	add.w	r1, r4, #220	@ 0xdc
 80047d2:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1a4      	bne.n	8004722 <acc_detector_distance_process+0xe2>
 80047d8:	e7a7      	b.n	800472a <acc_detector_distance_process+0xea>
 80047da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047dc:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 80047e0:	2d00      	cmp	r5, #0
 80047e2:	d042      	beq.n	800486a <acc_detector_distance_process+0x22a>
 80047e4:	f8bd 70d4 	ldrh.w	r7, [sp, #212]	@ 0xd4
 80047e8:	2f09      	cmp	r7, #9
 80047ea:	d831      	bhi.n	8004850 <acc_detector_distance_process+0x210>
 80047ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80047ee:	f883 7050 	strb.w	r7, [r3, #80]	@ 0x50
 80047f2:	b167      	cbz	r7, 800480e <acc_detector_distance_process+0x1ce>
 80047f4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80047f6:	a90d      	add	r1, sp, #52	@ 0x34
 80047f8:	2300      	movs	r3, #0
 80047fa:	f851 0b04 	ldr.w	r0, [r1], #4
 80047fe:	f842 0b04 	str.w	r0, [r2], #4
 8004802:	3301      	adds	r3, #1
 8004804:	b298      	uxth	r0, r3
 8004806:	6cce      	ldr	r6, [r1, #76]	@ 0x4c
 8004808:	6256      	str	r6, [r2, #36]	@ 0x24
 800480a:	42b8      	cmp	r0, r7
 800480c:	d3f5      	bcc.n	80047fa <acc_detector_distance_process+0x1ba>
 800480e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004810:	f8b4 1106 	ldrh.w	r1, [r4, #262]	@ 0x106
 8004814:	f894 2104 	ldrb.w	r2, [r4, #260]	@ 0x104
 8004818:	f89d 30d6 	ldrb.w	r3, [sp, #214]	@ 0xd6
 800481c:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 8004820:	f8a0 1054 	strh.w	r1, [r0, #84]	@ 0x54
 8004824:	f880 2052 	strb.w	r2, [r0, #82]	@ 0x52
 8004828:	2300      	movs	r3, #0
 800482a:	4628      	mov	r0, r5
 800482c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 8004830:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 8004834:	b037      	add	sp, #220	@ 0xdc
 8004836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483a:	f894 2104 	ldrb.w	r2, [r4, #260]	@ 0x104
 800483e:	f9b4 30fc 	ldrsh.w	r3, [r4, #252]	@ 0xfc
 8004842:	930a      	str	r3, [sp, #40]	@ 0x28
 8004844:	2a00      	cmp	r2, #0
 8004846:	f47f af7a 	bne.w	800473e <acc_detector_distance_process+0xfe>
 800484a:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 800484e:	e776      	b.n	800473e <acc_detector_distance_process+0xfe>
 8004850:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004852:	270a      	movs	r7, #10
 8004854:	f883 7050 	strb.w	r7, [r3, #80]	@ 0x50
 8004858:	e7cc      	b.n	80047f4 <acc_detector_distance_process+0x1b4>
 800485a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800485c:	2100      	movs	r1, #0
 800485e:	e9c0 1117 	strd	r1, r1, [r0, #92]	@ 0x5c
 8004862:	2b00      	cmp	r3, #0
 8004864:	f47f af5d 	bne.w	8004722 <acc_detector_distance_process+0xe2>
 8004868:	e75f      	b.n	800472a <acc_detector_distance_process+0xea>
 800486a:	4605      	mov	r5, r0
 800486c:	e6f9      	b.n	8004662 <acc_detector_distance_process+0x22>
 800486e:	bf00      	nop
 8004870:	acc0d130 	.word	0xacc0d130
 8004874:	200003f0 	.word	0x200003f0
 8004878:	08011b54 	.word	0x08011b54
 800487c:	08011a44 	.word	0x08011a44
 8004880:	08011b7c 	.word	0x08011b7c
 8004884:	08011ba4 	.word	0x08011ba4

08004888 <acc_detector_distance_config_start_set>:
 8004888:	b118      	cbz	r0, 8004892 <acc_detector_distance_config_start_set+0xa>
 800488a:	4b04      	ldr	r3, [pc, #16]	@ (800489c <acc_detector_distance_config_start_set+0x14>)
 800488c:	6802      	ldr	r2, [r0, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <acc_detector_distance_config_start_set+0xe>
 8004892:	f7ff ba0f 	b.w	8003cb4 <validate_distance_config.part.0>
 8004896:	ed80 0a01 	vstr	s0, [r0, #4]
 800489a:	4770      	bx	lr
 800489c:	acc0d150 	.word	0xacc0d150

080048a0 <acc_detector_distance_config_end_set>:
 80048a0:	b118      	cbz	r0, 80048aa <acc_detector_distance_config_end_set+0xa>
 80048a2:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <acc_detector_distance_config_end_set+0x14>)
 80048a4:	6802      	ldr	r2, [r0, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d001      	beq.n	80048ae <acc_detector_distance_config_end_set+0xe>
 80048aa:	f7ff ba03 	b.w	8003cb4 <validate_distance_config.part.0>
 80048ae:	ed80 0a02 	vstr	s0, [r0, #8]
 80048b2:	4770      	bx	lr
 80048b4:	acc0d150 	.word	0xacc0d150

080048b8 <acc_detector_distance_config_max_step_length_set>:
 80048b8:	b118      	cbz	r0, 80048c2 <acc_detector_distance_config_max_step_length_set+0xa>
 80048ba:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <acc_detector_distance_config_max_step_length_set+0x14>)
 80048bc:	6802      	ldr	r2, [r0, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <acc_detector_distance_config_max_step_length_set+0xe>
 80048c2:	f7ff b9f7 	b.w	8003cb4 <validate_distance_config.part.0>
 80048c6:	8181      	strh	r1, [r0, #12]
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	acc0d150 	.word	0xacc0d150

080048d0 <acc_detector_distance_config_close_range_leakage_cancellation_set>:
 80048d0:	b118      	cbz	r0, 80048da <acc_detector_distance_config_close_range_leakage_cancellation_set+0xa>
 80048d2:	4b04      	ldr	r3, [pc, #16]	@ (80048e4 <acc_detector_distance_config_close_range_leakage_cancellation_set+0x14>)
 80048d4:	6802      	ldr	r2, [r0, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <acc_detector_distance_config_close_range_leakage_cancellation_set+0xe>
 80048da:	f7ff b9eb 	b.w	8003cb4 <validate_distance_config.part.0>
 80048de:	f880 1028 	strb.w	r1, [r0, #40]	@ 0x28
 80048e2:	4770      	bx	lr
 80048e4:	acc0d150 	.word	0xacc0d150

080048e8 <acc_detector_distance_config_signal_quality_set>:
 80048e8:	b118      	cbz	r0, 80048f2 <acc_detector_distance_config_signal_quality_set+0xa>
 80048ea:	4b04      	ldr	r3, [pc, #16]	@ (80048fc <acc_detector_distance_config_signal_quality_set+0x14>)
 80048ec:	6802      	ldr	r2, [r0, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d001      	beq.n	80048f6 <acc_detector_distance_config_signal_quality_set+0xe>
 80048f2:	f7ff b9df 	b.w	8003cb4 <validate_distance_config.part.0>
 80048f6:	ed80 0a04 	vstr	s0, [r0, #16]
 80048fa:	4770      	bx	lr
 80048fc:	acc0d150 	.word	0xacc0d150

08004900 <acc_detector_distance_config_max_profile_set>:
 8004900:	b118      	cbz	r0, 800490a <acc_detector_distance_config_max_profile_set+0xa>
 8004902:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <acc_detector_distance_config_max_profile_set+0x14>)
 8004904:	6802      	ldr	r2, [r0, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <acc_detector_distance_config_max_profile_set+0xe>
 800490a:	f7ff b9d3 	b.w	8003cb4 <validate_distance_config.part.0>
 800490e:	7381      	strb	r1, [r0, #14]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	acc0d150 	.word	0xacc0d150

08004918 <acc_detector_distance_config_threshold_method_set>:
 8004918:	b118      	cbz	r0, 8004922 <acc_detector_distance_config_threshold_method_set+0xa>
 800491a:	4b04      	ldr	r3, [pc, #16]	@ (800492c <acc_detector_distance_config_threshold_method_set+0x14>)
 800491c:	6802      	ldr	r2, [r0, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <acc_detector_distance_config_threshold_method_set+0xe>
 8004922:	f7ff b9c7 	b.w	8003cb4 <validate_distance_config.part.0>
 8004926:	7501      	strb	r1, [r0, #20]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	acc0d150 	.word	0xacc0d150

08004930 <acc_detector_distance_config_peak_sorting_set>:
 8004930:	b118      	cbz	r0, 800493a <acc_detector_distance_config_peak_sorting_set+0xa>
 8004932:	4b04      	ldr	r3, [pc, #16]	@ (8004944 <acc_detector_distance_config_peak_sorting_set+0x14>)
 8004934:	6802      	ldr	r2, [r0, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <acc_detector_distance_config_peak_sorting_set+0xe>
 800493a:	f7ff b9bb 	b.w	8003cb4 <validate_distance_config.part.0>
 800493e:	7541      	strb	r1, [r0, #21]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	acc0d150 	.word	0xacc0d150

08004948 <acc_detector_distance_config_threshold_sensitivity_set>:
 8004948:	b118      	cbz	r0, 8004952 <acc_detector_distance_config_threshold_sensitivity_set+0xa>
 800494a:	4b04      	ldr	r3, [pc, #16]	@ (800495c <acc_detector_distance_config_threshold_sensitivity_set+0x14>)
 800494c:	6802      	ldr	r2, [r0, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <acc_detector_distance_config_threshold_sensitivity_set+0xe>
 8004952:	f7ff b9af 	b.w	8003cb4 <validate_distance_config.part.0>
 8004956:	ed80 0a09 	vstr	s0, [r0, #36]	@ 0x24
 800495a:	4770      	bx	lr
 800495c:	acc0d150 	.word	0xacc0d150

08004960 <acc_detector_distance_config_reflector_shape_set>:
 8004960:	b118      	cbz	r0, 800496a <acc_detector_distance_config_reflector_shape_set+0xa>
 8004962:	4b04      	ldr	r3, [pc, #16]	@ (8004974 <acc_detector_distance_config_reflector_shape_set+0x14>)
 8004964:	6802      	ldr	r2, [r0, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d001      	beq.n	800496e <acc_detector_distance_config_reflector_shape_set+0xe>
 800496a:	f7ff b9a3 	b.w	8003cb4 <validate_distance_config.part.0>
 800496e:	7581      	strb	r1, [r0, #22]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	acc0d150 	.word	0xacc0d150

08004978 <acc_detector_distance_config_log>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4604      	mov	r4, r0
 800497c:	b082      	sub	sp, #8
 800497e:	b129      	cbz	r1, 800498c <acc_detector_distance_config_log+0x14>
 8004980:	4b37      	ldr	r3, [pc, #220]	@ (8004a60 <acc_detector_distance_config_log+0xe8>)
 8004982:	680a      	ldr	r2, [r1, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	460d      	mov	r5, r1
 8004988:	f000 8080 	beq.w	8004a8c <acc_detector_distance_config_log+0x114>
 800498c:	f7ff f992 	bl	8003cb4 <validate_distance_config.part.0>
 8004990:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <acc_detector_distance_config_log+0xec>)
 8004992:	4a35      	ldr	r2, [pc, #212]	@ (8004a68 <acc_detector_distance_config_log+0xf0>)
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	4935      	ldr	r1, [pc, #212]	@ (8004a6c <acc_detector_distance_config_log+0xf4>)
 8004998:	2000      	movs	r0, #0
 800499a:	4798      	blx	r3
 800499c:	2c00      	cmp	r4, #0
 800499e:	f000 824b 	beq.w	8004e38 <acc_detector_distance_config_log+0x4c0>
 80049a2:	4b33      	ldr	r3, [pc, #204]	@ (8004a70 <acc_detector_distance_config_log+0xf8>)
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d00a      	beq.n	80049c0 <acc_detector_distance_config_log+0x48>
 80049aa:	f7ff f98f 	bl	8003ccc <validate_distance_handle.part.0>
 80049ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004a64 <acc_detector_distance_config_log+0xec>)
 80049b0:	4a30      	ldr	r2, [pc, #192]	@ (8004a74 <acc_detector_distance_config_log+0xfc>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	492d      	ldr	r1, [pc, #180]	@ (8004a6c <acc_detector_distance_config_log+0xf4>)
 80049b6:	2000      	movs	r0, #0
 80049b8:	b002      	add	sp, #8
 80049ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049be:	4718      	bx	r3
 80049c0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80049c2:	b163      	cbz	r3, 80049de <acc_detector_distance_config_log+0x66>
 80049c4:	f006 faf0 	bl	800afa8 <acc_rss_integration_log_level>
 80049c8:	2801      	cmp	r0, #1
 80049ca:	d905      	bls.n	80049d8 <acc_detector_distance_config_log+0x60>
 80049cc:	4b25      	ldr	r3, [pc, #148]	@ (8004a64 <acc_detector_distance_config_log+0xec>)
 80049ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004a78 <acc_detector_distance_config_log+0x100>)
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	4926      	ldr	r1, [pc, #152]	@ (8004a6c <acc_detector_distance_config_log+0xf4>)
 80049d4:	2002      	movs	r0, #2
 80049d6:	4798      	blx	r3
 80049d8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80049da:	f003 fd31 	bl	8008440 <acc_config_log>
 80049de:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80049e0:	b163      	cbz	r3, 80049fc <acc_detector_distance_config_log+0x84>
 80049e2:	f006 fae1 	bl	800afa8 <acc_rss_integration_log_level>
 80049e6:	2801      	cmp	r0, #1
 80049e8:	d905      	bls.n	80049f6 <acc_detector_distance_config_log+0x7e>
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <acc_detector_distance_config_log+0xec>)
 80049ec:	4a23      	ldr	r2, [pc, #140]	@ (8004a7c <acc_detector_distance_config_log+0x104>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	491e      	ldr	r1, [pc, #120]	@ (8004a6c <acc_detector_distance_config_log+0xf4>)
 80049f2:	2002      	movs	r0, #2
 80049f4:	4798      	blx	r3
 80049f6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80049f8:	f003 fd22 	bl	8008440 <acc_config_log>
 80049fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80049fe:	b163      	cbz	r3, 8004a1a <acc_detector_distance_config_log+0xa2>
 8004a00:	f006 fad2 	bl	800afa8 <acc_rss_integration_log_level>
 8004a04:	2801      	cmp	r0, #1
 8004a06:	d905      	bls.n	8004a14 <acc_detector_distance_config_log+0x9c>
 8004a08:	4b16      	ldr	r3, [pc, #88]	@ (8004a64 <acc_detector_distance_config_log+0xec>)
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <acc_detector_distance_config_log+0x108>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	4917      	ldr	r1, [pc, #92]	@ (8004a6c <acc_detector_distance_config_log+0xf4>)
 8004a10:	2002      	movs	r0, #2
 8004a12:	4798      	blx	r3
 8004a14:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004a16:	f003 fd13 	bl	8008440 <acc_config_log>
 8004a1a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004a1c:	b163      	cbz	r3, 8004a38 <acc_detector_distance_config_log+0xc0>
 8004a1e:	f006 fac3 	bl	800afa8 <acc_rss_integration_log_level>
 8004a22:	2801      	cmp	r0, #1
 8004a24:	d905      	bls.n	8004a32 <acc_detector_distance_config_log+0xba>
 8004a26:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <acc_detector_distance_config_log+0xec>)
 8004a28:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <acc_detector_distance_config_log+0x10c>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	490f      	ldr	r1, [pc, #60]	@ (8004a6c <acc_detector_distance_config_log+0xf4>)
 8004a2e:	2002      	movs	r0, #2
 8004a30:	4798      	blx	r3
 8004a32:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004a34:	f003 fd04 	bl	8008440 <acc_config_log>
 8004a38:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 81fc 	beq.w	8004e38 <acc_detector_distance_config_log+0x4c0>
 8004a40:	f006 fab2 	bl	800afa8 <acc_rss_integration_log_level>
 8004a44:	2801      	cmp	r0, #1
 8004a46:	d905      	bls.n	8004a54 <acc_detector_distance_config_log+0xdc>
 8004a48:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <acc_detector_distance_config_log+0xec>)
 8004a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8004a88 <acc_detector_distance_config_log+0x110>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	4907      	ldr	r1, [pc, #28]	@ (8004a6c <acc_detector_distance_config_log+0xf4>)
 8004a50:	2002      	movs	r0, #2
 8004a52:	4798      	blx	r3
 8004a54:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004a56:	b002      	add	sp, #8
 8004a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a5c:	f003 bcf0 	b.w	8008440 <acc_config_log>
 8004a60:	acc0d150 	.word	0xacc0d150
 8004a64:	200003f0 	.word	0x200003f0
 8004a68:	08011dec 	.word	0x08011dec
 8004a6c:	08011a44 	.word	0x08011a44
 8004a70:	acc0d130 	.word	0xacc0d130
 8004a74:	08011dd4 	.word	0x08011dd4
 8004a78:	08011d6c 	.word	0x08011d6c
 8004a7c:	08011d88 	.word	0x08011d88
 8004a80:	08011da0 	.word	0x08011da0
 8004a84:	08011db8 	.word	0x08011db8
 8004a88:	08011dc8 	.word	0x08011dc8
 8004a8c:	f006 fa8c 	bl	800afa8 <acc_rss_integration_log_level>
 8004a90:	2801      	cmp	r0, #1
 8004a92:	d905      	bls.n	8004aa0 <acc_detector_distance_config_log+0x128>
 8004a94:	4bc9      	ldr	r3, [pc, #804]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004a96:	4aca      	ldr	r2, [pc, #808]	@ (8004dc0 <acc_detector_distance_config_log+0x448>)
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	49ca      	ldr	r1, [pc, #808]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004a9c:	2002      	movs	r0, #2
 8004a9e:	4798      	blx	r3
 8004aa0:	f006 fa82 	bl	800afa8 <acc_rss_integration_log_level>
 8004aa4:	2801      	cmp	r0, #1
 8004aa6:	d935      	bls.n	8004b14 <acc_detector_distance_config_log+0x19c>
 8004aa8:	edd5 7a01 	vldr	s15, [r5, #4]
 8004aac:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004ab0:	4bc2      	ldr	r3, [pc, #776]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004ab2:	ed9f 6ac5 	vldr	s12, [pc, #788]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004ab6:	691e      	ldr	r6, [r3, #16]
 8004ab8:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8004dcc <acc_detector_distance_config_log+0x454>
 8004abc:	49c1      	ldr	r1, [pc, #772]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac6:	bf48      	it	mi
 8004ac8:	eef1 7a67 	vnegmi.f32	s15, s15
 8004acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ad0:	bf4c      	ite	mi
 8004ad2:	4bbf      	ldrmi	r3, [pc, #764]	@ (8004dd0 <acc_detector_distance_config_log+0x458>)
 8004ad4:	4bbf      	ldrpl	r3, [pc, #764]	@ (8004dd4 <acc_detector_distance_config_log+0x45c>)
 8004ad6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	ee17 2a10 	vmov	r2, s14
 8004ae6:	bf4c      	ite	mi
 8004ae8:	eeb1 7a67 	vnegmi.f32	s14, s15
 8004aec:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004af0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004af4:	9200      	str	r2, [sp, #0]
 8004af6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004afa:	4ab7      	ldr	r2, [pc, #732]	@ (8004dd8 <acc_detector_distance_config_log+0x460>)
 8004afc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b00:	2002      	movs	r0, #2
 8004b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	edcd 7a01 	vstr	s15, [sp, #4]
 8004b12:	47b0      	blx	r6
 8004b14:	f006 fa48 	bl	800afa8 <acc_rss_integration_log_level>
 8004b18:	2801      	cmp	r0, #1
 8004b1a:	d935      	bls.n	8004b88 <acc_detector_distance_config_log+0x210>
 8004b1c:	edd5 7a02 	vldr	s15, [r5, #8]
 8004b20:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004b24:	4ba5      	ldr	r3, [pc, #660]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004b26:	ed9f 6aa8 	vldr	s12, [pc, #672]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004b2a:	691e      	ldr	r6, [r3, #16]
 8004b2c:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8004dcc <acc_detector_distance_config_log+0x454>
 8004b30:	49a4      	ldr	r1, [pc, #656]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004b32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	bf48      	it	mi
 8004b3c:	eef1 7a67 	vnegmi.f32	s15, s15
 8004b40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b44:	bf4c      	ite	mi
 8004b46:	4ba2      	ldrmi	r3, [pc, #648]	@ (8004dd0 <acc_detector_distance_config_log+0x458>)
 8004b48:	4ba2      	ldrpl	r3, [pc, #648]	@ (8004dd4 <acc_detector_distance_config_log+0x45c>)
 8004b4a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b56:	ee17 2a10 	vmov	r2, s14
 8004b5a:	bf4c      	ite	mi
 8004b5c:	eeb1 7a67 	vnegmi.f32	s14, s15
 8004b60:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004b64:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b68:	9200      	str	r2, [sp, #0]
 8004b6a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b6e:	4a9b      	ldr	r2, [pc, #620]	@ (8004ddc <acc_detector_distance_config_log+0x464>)
 8004b70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004b74:	2002      	movs	r0, #2
 8004b76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b82:	edcd 7a01 	vstr	s15, [sp, #4]
 8004b86:	47b0      	blx	r6
 8004b88:	f006 fa0e 	bl	800afa8 <acc_rss_integration_log_level>
 8004b8c:	2801      	cmp	r0, #1
 8004b8e:	d906      	bls.n	8004b9e <acc_detector_distance_config_log+0x226>
 8004b90:	4a8a      	ldr	r2, [pc, #552]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004b92:	89ab      	ldrh	r3, [r5, #12]
 8004b94:	6916      	ldr	r6, [r2, #16]
 8004b96:	498b      	ldr	r1, [pc, #556]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004b98:	4a91      	ldr	r2, [pc, #580]	@ (8004de0 <acc_detector_distance_config_log+0x468>)
 8004b9a:	2002      	movs	r0, #2
 8004b9c:	47b0      	blx	r6
 8004b9e:	f006 fa03 	bl	800afa8 <acc_rss_integration_log_level>
 8004ba2:	2801      	cmp	r0, #1
 8004ba4:	f200 814a 	bhi.w	8004e3c <acc_detector_distance_config_log+0x4c4>
 8004ba8:	f006 f9fe 	bl	800afa8 <acc_rss_integration_log_level>
 8004bac:	2801      	cmp	r0, #1
 8004bae:	f200 8154 	bhi.w	8004e5a <acc_detector_distance_config_log+0x4e2>
 8004bb2:	f006 f9f9 	bl	800afa8 <acc_rss_integration_log_level>
 8004bb6:	2801      	cmp	r0, #1
 8004bb8:	d935      	bls.n	8004c26 <acc_detector_distance_config_log+0x2ae>
 8004bba:	edd5 7a04 	vldr	s15, [r5, #16]
 8004bbe:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004bc2:	4b7e      	ldr	r3, [pc, #504]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004bc4:	ed9f 6a80 	vldr	s12, [pc, #512]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004bc8:	691e      	ldr	r6, [r3, #16]
 8004bca:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8004dcc <acc_detector_distance_config_log+0x454>
 8004bce:	497d      	ldr	r1, [pc, #500]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd8:	bf48      	it	mi
 8004bda:	eef1 7a67 	vnegmi.f32	s15, s15
 8004bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004be2:	bf4c      	ite	mi
 8004be4:	4b7a      	ldrmi	r3, [pc, #488]	@ (8004dd0 <acc_detector_distance_config_log+0x458>)
 8004be6:	4b7b      	ldrpl	r3, [pc, #492]	@ (8004dd4 <acc_detector_distance_config_log+0x45c>)
 8004be8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	ee17 2a10 	vmov	r2, s14
 8004bf8:	bf4c      	ite	mi
 8004bfa:	eeb1 7a67 	vnegmi.f32	s14, s15
 8004bfe:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004c02:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004c06:	9200      	str	r2, [sp, #0]
 8004c08:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004c0c:	4a75      	ldr	r2, [pc, #468]	@ (8004de4 <acc_detector_distance_config_log+0x46c>)
 8004c0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004c12:	2002      	movs	r0, #2
 8004c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c20:	edcd 7a01 	vstr	s15, [sp, #4]
 8004c24:	47b0      	blx	r6
 8004c26:	f006 f9bf 	bl	800afa8 <acc_rss_integration_log_level>
 8004c2a:	2801      	cmp	r0, #1
 8004c2c:	d90c      	bls.n	8004c48 <acc_detector_distance_config_log+0x2d0>
 8004c2e:	7d2b      	ldrb	r3, [r5, #20]
 8004c30:	4a62      	ldr	r2, [pc, #392]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004c32:	4964      	ldr	r1, [pc, #400]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004c34:	6916      	ldr	r6, [r2, #16]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	bf96      	itet	ls
 8004c3a:	4a6b      	ldrls	r2, [pc, #428]	@ (8004de8 <acc_detector_distance_config_log+0x470>)
 8004c3c:	4b6b      	ldrhi	r3, [pc, #428]	@ (8004dec <acc_detector_distance_config_log+0x474>)
 8004c3e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 8004c42:	4a6b      	ldr	r2, [pc, #428]	@ (8004df0 <acc_detector_distance_config_log+0x478>)
 8004c44:	2002      	movs	r0, #2
 8004c46:	47b0      	blx	r6
 8004c48:	f006 f9ae 	bl	800afa8 <acc_rss_integration_log_level>
 8004c4c:	2801      	cmp	r0, #1
 8004c4e:	d90e      	bls.n	8004c6e <acc_detector_distance_config_log+0x2f6>
 8004c50:	4b5a      	ldr	r3, [pc, #360]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004c52:	7d6a      	ldrb	r2, [r5, #21]
 8004c54:	691e      	ldr	r6, [r3, #16]
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	f000 8110 	beq.w	8004e7c <acc_detector_distance_config_log+0x504>
 8004c5c:	4b63      	ldr	r3, [pc, #396]	@ (8004dec <acc_detector_distance_config_log+0x474>)
 8004c5e:	4965      	ldr	r1, [pc, #404]	@ (8004df4 <acc_detector_distance_config_log+0x47c>)
 8004c60:	2a01      	cmp	r2, #1
 8004c62:	bf08      	it	eq
 8004c64:	460b      	moveq	r3, r1
 8004c66:	4a64      	ldr	r2, [pc, #400]	@ (8004df8 <acc_detector_distance_config_log+0x480>)
 8004c68:	4956      	ldr	r1, [pc, #344]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004c6a:	2002      	movs	r0, #2
 8004c6c:	47b0      	blx	r6
 8004c6e:	f006 f99b 	bl	800afa8 <acc_rss_integration_log_level>
 8004c72:	2801      	cmp	r0, #1
 8004c74:	d906      	bls.n	8004c84 <acc_detector_distance_config_log+0x30c>
 8004c76:	4a51      	ldr	r2, [pc, #324]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004c78:	8b2b      	ldrh	r3, [r5, #24]
 8004c7a:	6916      	ldr	r6, [r2, #16]
 8004c7c:	4951      	ldr	r1, [pc, #324]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8004dfc <acc_detector_distance_config_log+0x484>)
 8004c80:	2002      	movs	r0, #2
 8004c82:	47b0      	blx	r6
 8004c84:	f006 f990 	bl	800afa8 <acc_rss_integration_log_level>
 8004c88:	2801      	cmp	r0, #1
 8004c8a:	d935      	bls.n	8004cf8 <acc_detector_distance_config_log+0x380>
 8004c8c:	edd5 7a07 	vldr	s15, [r5, #28]
 8004c90:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004c94:	4b49      	ldr	r3, [pc, #292]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004c96:	ed9f 6a4c 	vldr	s12, [pc, #304]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004c9a:	691e      	ldr	r6, [r3, #16]
 8004c9c:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8004dcc <acc_detector_distance_config_log+0x454>
 8004ca0:	4948      	ldr	r1, [pc, #288]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004caa:	bf48      	it	mi
 8004cac:	eef1 7a67 	vnegmi.f32	s15, s15
 8004cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cb4:	bf4c      	ite	mi
 8004cb6:	4b46      	ldrmi	r3, [pc, #280]	@ (8004dd0 <acc_detector_distance_config_log+0x458>)
 8004cb8:	4b46      	ldrpl	r3, [pc, #280]	@ (8004dd4 <acc_detector_distance_config_log+0x45c>)
 8004cba:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	ee17 2a10 	vmov	r2, s14
 8004cca:	bf4c      	ite	mi
 8004ccc:	eeb1 7a67 	vnegmi.f32	s14, s15
 8004cd0:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004cd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004cd8:	9200      	str	r2, [sp, #0]
 8004cda:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004cde:	4a48      	ldr	r2, [pc, #288]	@ (8004e00 <acc_detector_distance_config_log+0x488>)
 8004ce0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ce4:	2002      	movs	r0, #2
 8004ce6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf2:	edcd 7a01 	vstr	s15, [sp, #4]
 8004cf6:	47b0      	blx	r6
 8004cf8:	f006 f956 	bl	800afa8 <acc_rss_integration_log_level>
 8004cfc:	2801      	cmp	r0, #1
 8004cfe:	d935      	bls.n	8004d6c <acc_detector_distance_config_log+0x3f4>
 8004d00:	edd5 7a08 	vldr	s15, [r5, #32]
 8004d04:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004d08:	4b2c      	ldr	r3, [pc, #176]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004d0a:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004d0e:	691e      	ldr	r6, [r3, #16]
 8004d10:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8004dcc <acc_detector_distance_config_log+0x454>
 8004d14:	492b      	ldr	r1, [pc, #172]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	bf48      	it	mi
 8004d20:	eef1 7a67 	vnegmi.f32	s15, s15
 8004d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d28:	bf4c      	ite	mi
 8004d2a:	4b29      	ldrmi	r3, [pc, #164]	@ (8004dd0 <acc_detector_distance_config_log+0x458>)
 8004d2c:	4b29      	ldrpl	r3, [pc, #164]	@ (8004dd4 <acc_detector_distance_config_log+0x45c>)
 8004d2e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3a:	ee17 2a10 	vmov	r2, s14
 8004d3e:	bf4c      	ite	mi
 8004d40:	eeb1 7a67 	vnegmi.f32	s14, s15
 8004d44:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004d48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004d4c:	9200      	str	r2, [sp, #0]
 8004d4e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004d52:	4a2c      	ldr	r2, [pc, #176]	@ (8004e04 <acc_detector_distance_config_log+0x48c>)
 8004d54:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d58:	2002      	movs	r0, #2
 8004d5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d66:	edcd 7a01 	vstr	s15, [sp, #4]
 8004d6a:	47b0      	blx	r6
 8004d6c:	f006 f91c 	bl	800afa8 <acc_rss_integration_log_level>
 8004d70:	2801      	cmp	r0, #1
 8004d72:	f67f ae13 	bls.w	800499c <acc_detector_distance_config_log+0x24>
 8004d76:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 8004d7a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <acc_detector_distance_config_log+0x444>)
 8004d80:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8004dc8 <acc_detector_distance_config_log+0x450>
 8004d84:	691d      	ldr	r5, [r3, #16]
 8004d86:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8004dcc <acc_detector_distance_config_log+0x454>
 8004d8a:	490e      	ldr	r1, [pc, #56]	@ (8004dc4 <acc_detector_distance_config_log+0x44c>)
 8004d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	bf48      	it	mi
 8004d96:	eef1 7a67 	vnegmi.f32	s15, s15
 8004d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d9e:	bf4c      	ite	mi
 8004da0:	4b0b      	ldrmi	r3, [pc, #44]	@ (8004dd0 <acc_detector_distance_config_log+0x458>)
 8004da2:	4b0c      	ldrpl	r3, [pc, #48]	@ (8004dd4 <acc_detector_distance_config_log+0x45c>)
 8004da4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8004da8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db0:	ee17 2a10 	vmov	r2, s14
 8004db4:	bf48      	it	mi
 8004db6:	eeb1 7a67 	vnegmi.f32	s14, s15
 8004dba:	e025      	b.n	8004e08 <acc_detector_distance_config_log+0x490>
 8004dbc:	200003f0 	.word	0x200003f0
 8004dc0:	08011be0 	.word	0x08011be0
 8004dc4:	08011a44 	.word	0x08011a44
 8004dc8:	350637bd 	.word	0x350637bd
 8004dcc:	49742400 	.word	0x49742400
 8004dd0:	08011bc0 	.word	0x08011bc0
 8004dd4:	08012dc8 	.word	0x08012dc8
 8004dd8:	08011bfc 	.word	0x08011bfc
 8004ddc:	08011c14 	.word	0x08011c14
 8004de0:	08011c28 	.word	0x08011c28
 8004de4:	08011c78 	.word	0x08011c78
 8004de8:	08011e38 	.word	0x08011e38
 8004dec:	08011bc4 	.word	0x08011bc4
 8004df0:	08011c94 	.word	0x08011c94
 8004df4:	08011bd4 	.word	0x08011bd4
 8004df8:	08011cac 	.word	0x08011cac
 8004dfc:	08011cc4 	.word	0x08011cc4
 8004e00:	08011cec 	.word	0x08011cec
 8004e04:	08011d1c 	.word	0x08011d1c
 8004e08:	bf58      	it	pl
 8004e0a:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004e0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004e12:	9200      	str	r2, [sp, #0]
 8004e14:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004e18:	4a19      	ldr	r2, [pc, #100]	@ (8004e80 <acc_detector_distance_config_log+0x508>)
 8004e1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e1e:	2002      	movs	r0, #2
 8004e20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2c:	edcd 7a01 	vstr	s15, [sp, #4]
 8004e30:	47a8      	blx	r5
 8004e32:	2c00      	cmp	r4, #0
 8004e34:	f47f adb5 	bne.w	80049a2 <acc_detector_distance_config_log+0x2a>
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <acc_detector_distance_config_log+0x50c>)
 8004e3e:	7ba8      	ldrb	r0, [r5, #14]
 8004e40:	691e      	ldr	r6, [r3, #16]
 8004e42:	f008 fa2b 	bl	800d29c <acc_utils_profile_to_str>
 8004e46:	4a10      	ldr	r2, [pc, #64]	@ (8004e88 <acc_detector_distance_config_log+0x510>)
 8004e48:	4910      	ldr	r1, [pc, #64]	@ (8004e8c <acc_detector_distance_config_log+0x514>)
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2002      	movs	r0, #2
 8004e4e:	47b0      	blx	r6
 8004e50:	f006 f8aa 	bl	800afa8 <acc_rss_integration_log_level>
 8004e54:	2801      	cmp	r0, #1
 8004e56:	f67f aeac 	bls.w	8004bb2 <acc_detector_distance_config_log+0x23a>
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <acc_detector_distance_config_log+0x50c>)
 8004e5c:	f895 0028 	ldrb.w	r0, [r5, #40]	@ 0x28
 8004e60:	691e      	ldr	r6, [r3, #16]
 8004e62:	f008 fa03 	bl	800d26c <acc_utils_bool_to_str>
 8004e66:	4a0a      	ldr	r2, [pc, #40]	@ (8004e90 <acc_detector_distance_config_log+0x518>)
 8004e68:	4908      	ldr	r1, [pc, #32]	@ (8004e8c <acc_detector_distance_config_log+0x514>)
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2002      	movs	r0, #2
 8004e6e:	47b0      	blx	r6
 8004e70:	f006 f89a 	bl	800afa8 <acc_rss_integration_log_level>
 8004e74:	2801      	cmp	r0, #1
 8004e76:	f63f aea0 	bhi.w	8004bba <acc_detector_distance_config_log+0x242>
 8004e7a:	e6d4      	b.n	8004c26 <acc_detector_distance_config_log+0x2ae>
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <acc_detector_distance_config_log+0x51c>)
 8004e7e:	e6f2      	b.n	8004c66 <acc_detector_distance_config_log+0x2ee>
 8004e80:	08011d48 	.word	0x08011d48
 8004e84:	200003f0 	.word	0x200003f0
 8004e88:	08011c40 	.word	0x08011c40
 8004e8c:	08011a44 	.word	0x08011a44
 8004e90:	08011c50 	.word	0x08011c50
 8004e94:	08011bcc 	.word	0x08011bcc

08004e98 <validate_aggregator_handle.part.0>:
 8004e98:	4b02      	ldr	r3, [pc, #8]	@ (8004ea4 <validate_aggregator_handle.part.0+0xc>)
 8004e9a:	4a03      	ldr	r2, [pc, #12]	@ (8004ea8 <validate_aggregator_handle.part.0+0x10>)
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	4903      	ldr	r1, [pc, #12]	@ (8004eac <validate_aggregator_handle.part.0+0x14>)
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	4718      	bx	r3
 8004ea4:	200003f0 	.word	0x200003f0
 8004ea8:	08011e48 	.word	0x08011e48
 8004eac:	08011e64 	.word	0x08011e64

08004eb0 <acc_detector_distance_aggregator_get_sizes>:
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	b118      	cbz	r0, 8004ebc <acc_detector_distance_aggregator_get_sizes+0xc>
 8004eb4:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <acc_detector_distance_aggregator_get_sizes+0x24>)
 8004eb6:	6804      	ldr	r4, [r0, #0]
 8004eb8:	429c      	cmp	r4, r3
 8004eba:	d003      	beq.n	8004ec4 <acc_detector_distance_aggregator_get_sizes+0x14>
 8004ebc:	f7ff ffec 	bl	8004e98 <validate_aggregator_handle.part.0>
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	bd10      	pop	{r4, pc}
 8004ec4:	f8d0 32cc 	ldr.w	r3, [r0, #716]	@ 0x2cc
 8004ec8:	600b      	str	r3, [r1, #0]
 8004eca:	f8d0 32d0 	ldr.w	r3, [r0, #720]	@ 0x2d0
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	bd10      	pop	{r4, pc}
 8004ed4:	acc0d152 	.word	0xacc0d152

08004ed8 <acc_detector_distance_aggregator_create>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	b08b      	sub	sp, #44	@ 0x2c
 8004ede:	4605      	mov	r5, r0
 8004ee0:	468a      	mov	sl, r1
 8004ee2:	4693      	mov	fp, r2
 8004ee4:	461c      	mov	r4, r3
 8004ee6:	4a40      	ldr	r2, [pc, #256]	@ (8004fe8 <acc_detector_distance_aggregator_create+0x110>)
 8004ee8:	f8bd 7050 	ldrh.w	r7, [sp, #80]	@ 0x50
 8004eec:	2380      	movs	r3, #128	@ 0x80
 8004eee:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f006 f828 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 8004ef8:	4606      	mov	r6, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d06b      	beq.n	8004fd6 <acc_detector_distance_aggregator_create+0xfe>
 8004efe:	4b3b      	ldr	r3, [pc, #236]	@ (8004fec <acc_detector_distance_aggregator_create+0x114>)
 8004f00:	f8a0 7044 	strh.w	r7, [r0, #68]	@ 0x44
 8004f04:	7105      	strb	r5, [r0, #4]
 8004f06:	6003      	str	r3, [r0, #0]
 8004f08:	46b8      	mov	r8, r7
 8004f0a:	2f00      	cmp	r7, #0
 8004f0c:	d05d      	beq.n	8004fca <acc_detector_distance_aggregator_create+0xf2>
 8004f0e:	3f01      	subs	r7, #1
 8004f10:	b2ba      	uxth	r2, r7
 8004f12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f16:	2700      	movs	r7, #0
 8004f18:	f102 030c 	add.w	r3, r2, #12
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	3414      	adds	r4, #20
 8004f20:	46b8      	mov	r8, r7
 8004f22:	46b9      	mov	r9, r7
 8004f24:	f100 0508 	add.w	r5, r0, #8
 8004f28:	9001      	str	r0, [sp, #4]
 8004f2a:	f1a4 0e14 	sub.w	lr, r4, #20
 8004f2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004f32:	f10d 0c14 	add.w	ip, sp, #20
 8004f36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004f3a:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8004f3e:	f8de 6000 	ldr.w	r6, [lr]
 8004f42:	7923      	ldrb	r3, [r4, #4]
 8004f44:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f48:	2900      	cmp	r1, #0
 8004f4a:	bf0c      	ite	eq
 8004f4c:	4651      	moveq	r1, sl
 8004f4e:	4659      	movne	r1, fp
 8004f50:	4622      	mov	r2, r4
 8004f52:	a805      	add	r0, sp, #20
 8004f54:	f8cd 9010 	str.w	r9, [sp, #16]
 8004f58:	f8cc 6000 	str.w	r6, [ip]
 8004f5c:	f001 fcec 	bl	8006938 <acc_detector_distance_processor_create>
 8004f60:	f845 0b04 	str.w	r0, [r5], #4
 8004f64:	b9c8      	cbnz	r0, 8004f9a <acc_detector_distance_aggregator_create+0xc2>
 8004f66:	9e01      	ldr	r6, [sp, #4]
 8004f68:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 8004f6c:	2400      	movs	r4, #0
 8004f6e:	6034      	str	r4, [r6, #0]
 8004f70:	b15b      	cbz	r3, 8004f8a <acc_detector_distance_aggregator_create+0xb2>
 8004f72:	1ca3      	adds	r3, r4, #2
 8004f74:	3401      	adds	r4, #1
 8004f76:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8004f7a:	f001 fe71 	bl	8006c60 <acc_detector_distance_processor_destroy>
 8004f7e:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 8004f82:	b2e3      	uxtb	r3, r4
 8004f84:	429a      	cmp	r2, r3
 8004f86:	461c      	mov	r4, r3
 8004f88:	d8f3      	bhi.n	8004f72 <acc_detector_distance_aggregator_create+0x9a>
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f005 fff8 	bl	800af80 <acc_rss_integration_mem_free>
 8004f90:	2600      	movs	r6, #0
 8004f92:	4630      	mov	r0, r6
 8004f94:	b00b      	add	sp, #44	@ 0x2c
 8004f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9a:	aa04      	add	r2, sp, #16
 8004f9c:	a903      	add	r1, sp, #12
 8004f9e:	f8c5 8010 	str.w	r8, [r5, #16]
 8004fa2:	626f      	str	r7, [r5, #36]	@ 0x24
 8004fa4:	f001 fcaa 	bl	80068fc <acc_detector_distance_processor_get_sizes>
 8004fa8:	4606      	mov	r6, r0
 8004faa:	9803      	ldr	r0, [sp, #12]
 8004fac:	f005 ff3c 	bl	800ae28 <acc_detector_utils_align_size_32bit>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	9804      	ldr	r0, [sp, #16]
 8004fb4:	4490      	add	r8, r2
 8004fb6:	f005 ff37 	bl	800ae28 <acc_detector_utils_align_size_32bit>
 8004fba:	341c      	adds	r4, #28
 8004fbc:	4407      	add	r7, r0
 8004fbe:	2e00      	cmp	r6, #0
 8004fc0:	d0d1      	beq.n	8004f66 <acc_detector_distance_aggregator_create+0x8e>
 8004fc2:	9b00      	ldr	r3, [sp, #0]
 8004fc4:	429d      	cmp	r5, r3
 8004fc6:	d1b0      	bne.n	8004f2a <acc_detector_distance_aggregator_create+0x52>
 8004fc8:	9e01      	ldr	r6, [sp, #4]
 8004fca:	4630      	mov	r0, r6
 8004fcc:	e9c6 87b3 	strd	r8, r7, [r6, #716]	@ 0x2cc
 8004fd0:	b00b      	add	sp, #44	@ 0x2c
 8004fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd6:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <acc_detector_distance_aggregator_create+0x118>)
 8004fd8:	4a06      	ldr	r2, [pc, #24]	@ (8004ff4 <acc_detector_distance_aggregator_create+0x11c>)
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	4902      	ldr	r1, [pc, #8]	@ (8004fe8 <acc_detector_distance_aggregator_create+0x110>)
 8004fde:	4798      	blx	r3
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	b00b      	add	sp, #44	@ 0x2c
 8004fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe8:	08011e64 	.word	0x08011e64
 8004fec:	acc0d152 	.word	0xacc0d152
 8004ff0:	200003f0 	.word	0x200003f0
 8004ff4:	08011e84 	.word	0x08011e84

08004ff8 <acc_detector_distance_aggregator_destroy>:
 8004ff8:	b1b8      	cbz	r0, 800502a <acc_detector_distance_aggregator_destroy+0x32>
 8004ffa:	b538      	push	{r3, r4, r5, lr}
 8004ffc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8005000:	2400      	movs	r4, #0
 8005002:	4605      	mov	r5, r0
 8005004:	6004      	str	r4, [r0, #0]
 8005006:	b15b      	cbz	r3, 8005020 <acc_detector_distance_aggregator_destroy+0x28>
 8005008:	1ca3      	adds	r3, r4, #2
 800500a:	3401      	adds	r4, #1
 800500c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8005010:	f001 fe26 	bl	8006c60 <acc_detector_distance_processor_destroy>
 8005014:	f8b5 2044 	ldrh.w	r2, [r5, #68]	@ 0x44
 8005018:	b2e3      	uxtb	r3, r4
 800501a:	429a      	cmp	r2, r3
 800501c:	461c      	mov	r4, r3
 800501e:	d8f3      	bhi.n	8005008 <acc_detector_distance_aggregator_destroy+0x10>
 8005020:	4628      	mov	r0, r5
 8005022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005026:	f005 bfab 	b.w	800af80 <acc_rss_integration_mem_free>
 800502a:	4770      	bx	lr

0800502c <acc_detector_distance_aggregator_calibrate>:
 800502c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	4606      	mov	r6, r0
 8005032:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
 8005036:	b087      	sub	sp, #28
 8005038:	2800      	cmp	r0, #0
 800503a:	d045      	beq.n	80050c8 <acc_detector_distance_aggregator_calibrate+0x9c>
 800503c:	469a      	mov	sl, r3
 800503e:	2400      	movs	r4, #0
 8005040:	2301      	movs	r3, #1
 8005042:	4688      	mov	r8, r1
 8005044:	4691      	mov	r9, r2
 8005046:	46a3      	mov	fp, r4
 8005048:	9303      	str	r3, [sp, #12]
 800504a:	e004      	b.n	8005056 <acc_detector_distance_aggregator_calibrate+0x2a>
 800504c:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 8005050:	b2a3      	uxth	r3, r4
 8005052:	429a      	cmp	r2, r3
 8005054:	d930      	bls.n	80050b8 <acc_detector_distance_aggregator_calibrate+0x8c>
 8005056:	b2a5      	uxth	r5, r4
 8005058:	1cab      	adds	r3, r5, #2
 800505a:	3401      	adds	r4, #1
 800505c:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 8005060:	4638      	mov	r0, r7
 8005062:	f001 fe03 	bl	8006c6c <acc_detector_distance_processor_calibration_needed>
 8005066:	2800      	cmp	r0, #0
 8005068:	d0f0      	beq.n	800504c <acc_detector_distance_aggregator_calibrate+0x20>
 800506a:	4638      	mov	r0, r7
 800506c:	f002 fa88 	bl	8007580 <acc_detector_distance_processor_measurement_type_get>
 8005070:	4686      	mov	lr, r0
 8005072:	45c6      	cmp	lr, r8
 8005074:	eb06 0c85 	add.w	ip, r6, r5, lsl #2
 8005078:	4652      	mov	r2, sl
 800507a:	4649      	mov	r1, r9
 800507c:	4638      	mov	r0, r7
 800507e:	d1e5      	bne.n	800504c <acc_detector_distance_aggregator_calibrate+0x20>
 8005080:	f10d 0717 	add.w	r7, sp, #23
 8005084:	f8dc 5030 	ldr.w	r5, [ip, #48]	@ 0x30
 8005088:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800508c:	9701      	str	r7, [sp, #4]
 800508e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8005090:	f88d b017 	strb.w	fp, [sp, #23]
 8005094:	443d      	add	r5, r7
 8005096:	9500      	str	r5, [sp, #0]
 8005098:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800509a:	442b      	add	r3, r5
 800509c:	f001 fe04 	bl	8006ca8 <acc_detector_distance_processor_calibrate>
 80050a0:	b178      	cbz	r0, 80050c2 <acc_detector_distance_aggregator_calibrate+0x96>
 80050a2:	9b03      	ldr	r3, [sp, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0d1      	beq.n	800504c <acc_detector_distance_aggregator_calibrate+0x20>
 80050a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80050ac:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 80050b0:	9303      	str	r3, [sp, #12]
 80050b2:	b2a3      	uxth	r3, r4
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d8ce      	bhi.n	8005056 <acc_detector_distance_aggregator_calibrate+0x2a>
 80050b8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80050ba:	461a      	mov	r2, r3
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	7013      	strb	r3, [r2, #0]
 80050c0:	2001      	movs	r0, #1
 80050c2:	b007      	add	sp, #28
 80050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c8:	2301      	movs	r3, #1
 80050ca:	9303      	str	r3, [sp, #12]
 80050cc:	e7f4      	b.n	80050b8 <acc_detector_distance_aggregator_calibrate+0x8c>
 80050ce:	bf00      	nop

080050d0 <acc_detector_distance_aggregator_calibration_needed>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	b120      	cbz	r0, 80050de <acc_detector_distance_aggregator_calibration_needed+0xe>
 80050d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <acc_detector_distance_aggregator_calibration_needed+0x40>)
 80050d6:	6802      	ldr	r2, [r0, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	4605      	mov	r5, r0
 80050dc:	d003      	beq.n	80050e6 <acc_detector_distance_aggregator_calibration_needed+0x16>
 80050de:	f7ff fedb 	bl	8004e98 <validate_aggregator_handle.part.0>
 80050e2:	2000      	movs	r0, #0
 80050e4:	bd38      	pop	{r3, r4, r5, pc}
 80050e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f9      	beq.n	80050e2 <acc_detector_distance_aggregator_calibration_needed+0x12>
 80050ee:	2400      	movs	r4, #0
 80050f0:	e003      	b.n	80050fa <acc_detector_distance_aggregator_calibration_needed+0x2a>
 80050f2:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d9f3      	bls.n	80050e2 <acc_detector_distance_aggregator_calibration_needed+0x12>
 80050fa:	b2a3      	uxth	r3, r4
 80050fc:	3302      	adds	r3, #2
 80050fe:	3401      	adds	r4, #1
 8005100:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8005104:	f001 fdb2 	bl	8006c6c <acc_detector_distance_processor_calibration_needed>
 8005108:	b2a2      	uxth	r2, r4
 800510a:	2800      	cmp	r0, #0
 800510c:	d0f1      	beq.n	80050f2 <acc_detector_distance_aggregator_calibration_needed+0x22>
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	acc0d152 	.word	0xacc0d152

08005114 <acc_detector_distance_aggregator_process>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	ed2d 8b02 	vpush	{d8}
 800511c:	f5ad 7d5b 	sub.w	sp, sp, #876	@ 0x36c
 8005120:	9209      	str	r2, [sp, #36]	@ 0x24
 8005122:	f9bd 2398 	ldrsh.w	r2, [sp, #920]	@ 0x398
 8005126:	9207      	str	r2, [sp, #28]
 8005128:	f9bd 23a0 	ldrsh.w	r2, [sp, #928]	@ 0x3a0
 800512c:	9105      	str	r1, [sp, #20]
 800512e:	9208      	str	r2, [sp, #32]
 8005130:	9306      	str	r3, [sp, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 80c1 	beq.w	80052ba <acc_detector_distance_aggregator_process+0x1a6>
 8005138:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800513c:	4605      	mov	r5, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80b0 	beq.w	80052a4 <acc_detector_distance_aggregator_process+0x190>
 8005144:	f04f 0a00 	mov.w	sl, #0
 8005148:	eeb0 8a40 	vmov.f32	s16, s0
 800514c:	46d3      	mov	fp, sl
 800514e:	f04f 0901 	mov.w	r9, #1
 8005152:	e008      	b.n	8005166 <acc_detector_distance_aggregator_process+0x52>
 8005154:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 8005158:	f10a 0a01 	add.w	sl, sl, #1
 800515c:	fa1f fb8a 	uxth.w	fp, sl
 8005160:	455b      	cmp	r3, fp
 8005162:	f240 809c 	bls.w	800529e <acc_detector_distance_aggregator_process+0x18a>
 8005166:	fa1f f88a 	uxth.w	r8, sl
 800516a:	f108 0302 	add.w	r3, r8, #2
 800516e:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 8005172:	4638      	mov	r0, r7
 8005174:	f002 fa04 	bl	8007580 <acc_detector_distance_processor_measurement_type_get>
 8005178:	9b05      	ldr	r3, [sp, #20]
 800517a:	4298      	cmp	r0, r3
 800517c:	d1ea      	bne.n	8005154 <acc_detector_distance_aggregator_process+0x40>
 800517e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8005180:	2100      	movs	r1, #0
 8005182:	2250      	movs	r2, #80	@ 0x50
 8005184:	6031      	str	r1, [r6, #0]
 8005186:	60b1      	str	r1, [r6, #8]
 8005188:	6131      	str	r1, [r6, #16]
 800518a:	61b1      	str	r1, [r6, #24]
 800518c:	a812      	add	r0, sp, #72	@ 0x48
 800518e:	f00b fb99 	bl	80108c4 <memset>
 8005192:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8005196:	2100      	movs	r1, #0
 8005198:	2250      	movs	r2, #80	@ 0x50
 800519a:	a826      	add	r0, sp, #152	@ 0x98
 800519c:	f00b fb92 	bl	80108c4 <memset>
 80051a0:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 80051a4:	2100      	movs	r1, #0
 80051a6:	4648      	mov	r0, r9
 80051a8:	2250      	movs	r2, #80	@ 0x50
 80051aa:	f00b fb8b 	bl	80108c4 <memset>
 80051ae:	9603      	str	r6, [sp, #12]
 80051b0:	9908      	ldr	r1, [sp, #32]
 80051b2:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80051b6:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80051ba:	9100      	str	r1, [sp, #0]
 80051bc:	99ea      	ldr	r1, [sp, #936]	@ 0x3a8
 80051be:	440a      	add	r2, r1
 80051c0:	99e9      	ldr	r1, [sp, #932]	@ 0x3a4
 80051c2:	ac26      	add	r4, sp, #152	@ 0x98
 80051c4:	440b      	add	r3, r1
 80051c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051ca:	f04f 0c14 	mov.w	ip, #20
 80051ce:	60f4      	str	r4, [r6, #12]
 80051d0:	ac12      	add	r4, sp, #72	@ 0x48
 80051d2:	9be7      	ldr	r3, [sp, #924]	@ 0x39c
 80051d4:	f8c6 9014 	str.w	r9, [r6, #20]
 80051d8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80051dc:	eeb0 0a48 	vmov.f32	s0, s16
 80051e0:	4638      	mov	r0, r7
 80051e2:	6074      	str	r4, [r6, #4]
 80051e4:	f8a6 c000 	strh.w	ip, [r6]
 80051e8:	f001 fe9c 	bl	8006f24 <acc_detector_distance_processor_process>
 80051ec:	8933      	ldrh	r3, [r6, #8]
 80051ee:	4681      	mov	r9, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d044      	beq.n	800527e <acc_detector_distance_aggregator_process+0x16a>
 80051f4:	6871      	ldr	r1, [r6, #4]
 80051f6:	68f2      	ldr	r2, [r6, #12]
 80051f8:	6973      	ldr	r3, [r6, #20]
 80051fa:	6809      	ldr	r1, [r1, #0]
 80051fc:	f8d2 e000 	ldr.w	lr, [r2]
 8005200:	f8d3 8000 	ldr.w	r8, [r3]
 8005204:	b398      	cbz	r0, 800526e <acc_detector_distance_aggregator_process+0x15a>
 8005206:	f8b5 c2c8 	ldrh.w	ip, [r5, #712]	@ 0x2c8
 800520a:	2400      	movs	r4, #0
 800520c:	e029      	b.n	8005262 <acc_detector_distance_aggregator_process+0x14e>
 800520e:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 8005212:	6499      	str	r1, [r3, #72]	@ 0x48
 8005214:	f8c3 e04c 	str.w	lr, [r3, #76]	@ 0x4c
 8005218:	f002 f9ca 	bl	80075b0 <acc_detector_distance_processor_profile_get>
 800521c:	f8b5 82c8 	ldrh.w	r8, [r5, #712]	@ 0x2c8
 8005220:	f005 fd22 	bl	800ac68 <acc_detector_utils_get_fwhm>
 8005224:	f8b5 c2c8 	ldrh.w	ip, [r5, #712]	@ 0x2c8
 8005228:	8933      	ldrh	r3, [r6, #8]
 800522a:	3401      	adds	r4, #1
 800522c:	f10c 0c01 	add.w	ip, ip, #1
 8005230:	b2a4      	uxth	r4, r4
 8005232:	eb05 1808 	add.w	r8, r5, r8, lsl #4
 8005236:	fa1f fc8c 	uxth.w	ip, ip
 800523a:	42a3      	cmp	r3, r4
 800523c:	ed88 0a15 	vstr	s0, [r8, #84]	@ 0x54
 8005240:	f8a5 c2c8 	strh.w	ip, [r5, #712]	@ 0x2c8
 8005244:	d91b      	bls.n	800527e <acc_detector_distance_aggregator_process+0x16a>
 8005246:	6871      	ldr	r1, [r6, #4]
 8005248:	68f2      	ldr	r2, [r6, #12]
 800524a:	6973      	ldr	r3, [r6, #20]
 800524c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005250:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005254:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005258:	6809      	ldr	r1, [r1, #0]
 800525a:	f8d2 e000 	ldr.w	lr, [r2]
 800525e:	f8d3 8000 	ldr.w	r8, [r3]
 8005262:	f1bc 0f27 	cmp.w	ip, #39	@ 0x27
 8005266:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800526a:	4638      	mov	r0, r7
 800526c:	d9cf      	bls.n	800520e <acc_detector_distance_aggregator_process+0xfa>
 800526e:	4b38      	ldr	r3, [pc, #224]	@ (8005350 <acc_detector_distance_aggregator_process+0x23c>)
 8005270:	4a38      	ldr	r2, [pc, #224]	@ (8005354 <acc_detector_distance_aggregator_process+0x240>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	4938      	ldr	r1, [pc, #224]	@ (8005358 <acc_detector_distance_aggregator_process+0x244>)
 8005276:	2000      	movs	r0, #0
 8005278:	4798      	blx	r3
 800527a:	f04f 0900 	mov.w	r9, #0
 800527e:	f1bb 0f00 	cmp.w	fp, #0
 8005282:	f47f af67 	bne.w	8005154 <acc_detector_distance_aggregator_process+0x40>
 8005286:	7eb3      	ldrb	r3, [r6, #26]
 8005288:	f885 32ca 	strb.w	r3, [r5, #714]	@ 0x2ca
 800528c:	f10a 0a01 	add.w	sl, sl, #1
 8005290:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 8005294:	fa1f fb8a 	uxth.w	fp, sl
 8005298:	455b      	cmp	r3, fp
 800529a:	f63f af64 	bhi.w	8005166 <acc_detector_distance_aggregator_process+0x52>
 800529e:	f1b9 0f00 	cmp.w	r9, #0
 80052a2:	d003      	beq.n	80052ac <acc_detector_distance_aggregator_process+0x198>
 80052a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a6:	b98b      	cbnz	r3, 80052cc <acc_detector_distance_aggregator_process+0x1b8>
 80052a8:	f04f 0901 	mov.w	r9, #1
 80052ac:	4648      	mov	r0, r9
 80052ae:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 80052b2:	ecbd 8b02 	vpop	{d8}
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ba:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80052be:	4648      	mov	r0, r9
 80052c0:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 80052c4:	ecbd 8b02 	vpop	{d8}
 80052c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052cc:	f8b5 12c8 	ldrh.w	r1, [r5, #712]	@ 0x2c8
 80052d0:	792e      	ldrb	r6, [r5, #4]
 80052d2:	ac26      	add	r4, sp, #152	@ 0x98
 80052d4:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80052d8:	2200      	movs	r2, #0
 80052da:	2700      	movs	r7, #0
 80052dc:	e9cd 0105 	strd	r0, r1, [sp, #20]
 80052e0:	f000 fcc6 	bl	8005c70 <acc_detector_distance_alg_peak_inplace_sort>
 80052e4:	9400      	str	r4, [sp, #0]
 80052e6:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80052ea:	aa3a      	add	r2, sp, #232	@ 0xe8
 80052ec:	2328      	movs	r3, #40	@ 0x28
 80052ee:	8027      	strh	r7, [r4, #0]
 80052f0:	f000 fd12 	bl	8005d18 <acc_detector_distance_alg_merge_peaks>
 80052f4:	2e01      	cmp	r6, #1
 80052f6:	d025      	beq.n	8005344 <acc_detector_distance_aggregator_process+0x230>
 80052f8:	8821      	ldrh	r1, [r4, #0]
 80052fa:	9beb      	ldr	r3, [sp, #940]	@ 0x3ac
 80052fc:	f8a3 10a0 	strh.w	r1, [r3, #160]	@ 0xa0
 8005300:	b179      	cbz	r1, 8005322 <acc_detector_distance_aggregator_process+0x20e>
 8005302:	9beb      	ldr	r3, [sp, #940]	@ 0x3ac
 8005304:	3901      	subs	r1, #1
 8005306:	b289      	uxth	r1, r1
 8005308:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800530c:	aa3a      	add	r2, sp, #232	@ 0xe8
 800530e:	6810      	ldr	r0, [r2, #0]
 8005310:	6018      	str	r0, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	3304      	adds	r3, #4
 8005316:	6894      	ldr	r4, [r2, #8]
 8005318:	64dc      	str	r4, [r3, #76]	@ 0x4c
 800531a:	4281      	cmp	r1, r0
 800531c:	f102 0210 	add.w	r2, r2, #16
 8005320:	d1f5      	bne.n	800530e <acc_detector_distance_aggregator_process+0x1fa>
 8005322:	9aeb      	ldr	r2, [sp, #940]	@ 0x3ac
 8005324:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8005328:	f895 32ca 	ldrb.w	r3, [r5, #714]	@ 0x2ca
 800532c:	f882 30a2 	strb.w	r3, [r2, #162]	@ 0xa2
 8005330:	4648      	mov	r0, r9
 8005332:	2300      	movs	r3, #0
 8005334:	f8a5 32c8 	strh.w	r3, [r5, #712]	@ 0x2c8
 8005338:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 800533c:	ecbd 8b02 	vpop	{d8}
 8005340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005344:	8821      	ldrh	r1, [r4, #0]
 8005346:	4632      	mov	r2, r6
 8005348:	a83a      	add	r0, sp, #232	@ 0xe8
 800534a:	f000 fc91 	bl	8005c70 <acc_detector_distance_alg_peak_inplace_sort>
 800534e:	e7d3      	b.n	80052f8 <acc_detector_distance_aggregator_process+0x1e4>
 8005350:	200003f0 	.word	0x200003f0
 8005354:	08011ea4 	.word	0x08011ea4
 8005358:	08011e64 	.word	0x08011e64

0800535c <reverse>:
 800535c:	ea5f 0c51 	movs.w	ip, r1, lsr #1
 8005360:	d01d      	beq.n	800539e <reverse+0x42>
 8005362:	b4f0      	push	{r4, r5, r6, r7}
 8005364:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005368:	fa1f f38c 	uxth.w	r3, ip
 800536c:	3901      	subs	r1, #1
 800536e:	f100 0c08 	add.w	ip, r0, #8
 8005372:	eb0c 0cc3 	add.w	ip, ip, r3, lsl #3
 8005376:	b28a      	uxth	r2, r1
 8005378:	4603      	mov	r3, r0
 800537a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800537e:	681d      	ldr	r5, [r3, #0]
 8005380:	680f      	ldr	r7, [r1, #0]
 8005382:	684e      	ldr	r6, [r1, #4]
 8005384:	685c      	ldr	r4, [r3, #4]
 8005386:	f843 7b08 	str.w	r7, [r3], #8
 800538a:	3a01      	subs	r2, #1
 800538c:	4563      	cmp	r3, ip
 800538e:	f843 6c04 	str.w	r6, [r3, #-4]
 8005392:	b292      	uxth	r2, r2
 8005394:	600d      	str	r5, [r1, #0]
 8005396:	604c      	str	r4, [r1, #4]
 8005398:	d1ef      	bne.n	800537a <reverse+0x1e>
 800539a:	bcf0      	pop	{r4, r5, r6, r7}
 800539c:	4770      	bx	lr
 800539e:	4770      	bx	lr

080053a0 <merge_peak_range.part.0>:
 80053a0:	b410      	push	{r4}
 80053a2:	2400      	movs	r4, #0
 80053a4:	ed92 7a03 	vldr	s14, [r2, #12]
 80053a8:	601c      	str	r4, [r3, #0]
 80053aa:	605c      	str	r4, [r3, #4]
 80053ac:	609c      	str	r4, [r3, #8]
 80053ae:	60dc      	str	r4, [r3, #12]
 80053b0:	2900      	cmp	r1, #0
 80053b2:	d042      	beq.n	800543a <merge_peak_range.part.0+0x9a>
 80053b4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8005448 <merge_peak_range.part.0+0xa8>
 80053b8:	1e4c      	subs	r4, r1, #1
 80053ba:	fa10 f484 	uxtah	r4, r0, r4
 80053be:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80053c2:	eef0 6a67 	vmov.f32	s13, s15
 80053c6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80053ca:	eeb0 6a67 	vmov.f32	s12, s15
 80053ce:	e000      	b.n	80053d2 <merge_peak_range.part.0+0x32>
 80053d0:	4602      	mov	r2, r0
 80053d2:	edd2 5a00 	vldr	s11, [r2]
 80053d6:	ee36 6a25 	vadd.f32	s12, s12, s11
 80053da:	f102 0010 	add.w	r0, r2, #16
 80053de:	ed83 6a00 	vstr	s12, [r3]
 80053e2:	edd2 5a01 	vldr	s11, [r2, #4]
 80053e6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80053ea:	edc3 6a01 	vstr	s13, [r3, #4]
 80053ee:	edd2 5a02 	vldr	s11, [r2, #8]
 80053f2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80053f6:	edc3 7a02 	vstr	s15, [r3, #8]
 80053fa:	edd2 5a03 	vldr	s11, [r2, #12]
 80053fe:	eef4 5a47 	vcmp.f32	s11, s14
 8005402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005406:	bfc8      	it	gt
 8005408:	eeb0 7a65 	vmovgt.f32	s14, s11
 800540c:	4294      	cmp	r4, r2
 800540e:	d1df      	bne.n	80053d0 <merge_peak_range.part.0+0x30>
 8005410:	ee05 1a90 	vmov	s11, r1
 8005414:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8005418:	ed83 7a03 	vstr	s14, [r3, #12]
 800541c:	ee86 5a25 	vdiv.f32	s10, s12, s11
 8005420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005424:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8005428:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800542c:	ed83 5a00 	vstr	s10, [r3]
 8005430:	ed83 6a01 	vstr	s12, [r3, #4]
 8005434:	ed83 7a02 	vstr	s14, [r3, #8]
 8005438:	4770      	bx	lr
 800543a:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8005448 <merge_peak_range.part.0+0xa8>
 800543e:	eef0 6a67 	vmov.f32	s13, s15
 8005442:	eeb0 6a67 	vmov.f32	s12, s15
 8005446:	e7e3      	b.n	8005410 <merge_peak_range.part.0+0x70>
 8005448:	00000000 	.word	0x00000000

0800544c <acc_detector_distance_alg_complex_filter>:
 800544c:	ed91 7a00 	vldr	s14, [r1]
 8005450:	ed92 6a00 	vldr	s12, [r2]
 8005454:	edd2 6a01 	vldr	s13, [r2, #4]
 8005458:	edd1 4a01 	vldr	s9, [r1, #4]
 800545c:	ee67 5a06 	vmul.f32	s11, s14, s12
 8005460:	ee26 4a24 	vmul.f32	s8, s12, s9
 8005464:	ee67 7a26 	vmul.f32	s15, s14, s13
 8005468:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800546c:	2b00      	cmp	r3, #0
 800546e:	d042      	beq.n	80054f6 <acc_detector_distance_alg_complex_filter+0xaa>
 8005470:	3b01      	subs	r3, #1
 8005472:	b29b      	uxth	r3, r3
 8005474:	ed2d 8b02 	vpush	{d8}
 8005478:	edd0 1a00 	vldr	s3, [r0]
 800547c:	ed90 2a01 	vldr	s4, [r0, #4]
 8005480:	edd0 2a02 	vldr	s5, [r0, #8]
 8005484:	ed90 3a03 	vldr	s6, [r0, #12]
 8005488:	edd0 3a04 	vldr	s7, [r0, #16]
 800548c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005490:	e004      	b.n	800549c <acc_detector_distance_alg_complex_filter+0x50>
 8005492:	edd2 6a03 	vldr	s13, [r2, #12]
 8005496:	ed92 6a02 	vldr	s12, [r2, #8]
 800549a:	3208      	adds	r2, #8
 800549c:	ee21 5a86 	vmul.f32	s10, s3, s12
 80054a0:	ee21 7aa6 	vmul.f32	s14, s3, s13
 80054a4:	ee35 5a25 	vadd.f32	s10, s10, s11
 80054a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054ac:	ee62 5a06 	vmul.f32	s11, s4, s12
 80054b0:	ee62 7a26 	vmul.f32	s15, s4, s13
 80054b4:	ee75 5a84 	vadd.f32	s11, s11, s8
 80054b8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80054bc:	ee23 8a05 	vmul.f32	s16, s6, s10
 80054c0:	ee23 0a85 	vmul.f32	s0, s7, s10
 80054c4:	ee22 6a86 	vmul.f32	s12, s5, s12
 80054c8:	ee63 0a07 	vmul.f32	s1, s6, s14
 80054cc:	ee23 1a87 	vmul.f32	s2, s7, s14
 80054d0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80054d4:	429a      	cmp	r2, r3
 80054d6:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80054da:	ee36 4a40 	vsub.f32	s8, s12, s0
 80054de:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80054e2:	ee76 4ac1 	vsub.f32	s9, s13, s2
 80054e6:	ed82 5a00 	vstr	s10, [r2]
 80054ea:	ed82 7a01 	vstr	s14, [r2, #4]
 80054ee:	d1d0      	bne.n	8005492 <acc_detector_distance_alg_complex_filter+0x46>
 80054f0:	ecbd 8b02 	vpop	{d8}
 80054f4:	4770      	bx	lr
 80054f6:	4770      	bx	lr

080054f8 <acc_detector_distance_alg_odd_padding_add>:
 80054f8:	b4f0      	push	{r4, r5, r6, r7}
 80054fa:	1e57      	subs	r7, r2, #1
 80054fc:	1a3f      	subs	r7, r7, r0
 80054fe:	2800      	cmp	r0, #0
 8005500:	d043      	beq.n	800558a <acc_detector_distance_alg_odd_padding_add+0x92>
 8005502:	b2bf      	uxth	r7, r7
 8005504:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
 8005508:	eb01 05c7 	add.w	r5, r1, r7, lsl #3
 800550c:	2401      	movs	r4, #1
 800550e:	1902      	adds	r2, r0, r4
 8005510:	ed96 7a01 	vldr	s14, [r6, #4]
 8005514:	edd6 7a00 	vldr	s15, [r6]
 8005518:	b292      	uxth	r2, r2
 800551a:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800551e:	0063      	lsls	r3, r4, #1
 8005520:	ed9c 6a01 	vldr	s12, [ip, #4]
 8005524:	eddc 6a00 	vldr	s13, [ip]
 8005528:	b29b      	uxth	r3, r3
 800552a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800552e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005532:	1ad2      	subs	r2, r2, r3
 8005534:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005538:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800553c:	b292      	uxth	r2, r2
 800553e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005542:	ed82 7a01 	vstr	s14, [r2, #4]
 8005546:	edc2 7a00 	vstr	s15, [r2]
 800554a:	1b3a      	subs	r2, r7, r4
 800554c:	ed95 7a01 	vldr	s14, [r5, #4]
 8005550:	edd5 7a00 	vldr	s15, [r5]
 8005554:	b292      	uxth	r2, r2
 8005556:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800555a:	ed9c 6a01 	vldr	s12, [ip, #4]
 800555e:	eddc 6a00 	vldr	s13, [ip]
 8005562:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005566:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800556a:	4413      	add	r3, r2
 800556c:	3401      	adds	r4, #1
 800556e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005572:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005576:	b29b      	uxth	r3, r3
 8005578:	b2a4      	uxth	r4, r4
 800557a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800557e:	42a0      	cmp	r0, r4
 8005580:	ed83 7a01 	vstr	s14, [r3, #4]
 8005584:	edc3 7a00 	vstr	s15, [r3]
 8005588:	d2c1      	bcs.n	800550e <acc_detector_distance_alg_odd_padding_add+0x16>
 800558a:	bcf0      	pop	{r4, r5, r6, r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <acc_detector_distance_alg_filter_steady_state_calculate>:
 8005590:	ed90 5a03 	vldr	s10, [r0, #12]
 8005594:	edd0 7a04 	vldr	s15, [r0, #16]
 8005598:	ed90 6a00 	vldr	s12, [r0]
 800559c:	ed90 7a01 	vldr	s14, [r0, #4]
 80055a0:	edd0 5a02 	vldr	s11, [r0, #8]
 80055a4:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80055a8:	ee75 6a04 	vadd.f32	s13, s10, s8
 80055ac:	ee65 4a06 	vmul.f32	s9, s10, s12
 80055b0:	ee76 3aa7 	vadd.f32	s7, s13, s15
 80055b4:	ee27 5a86 	vmul.f32	s10, s15, s12
 80055b8:	ee84 6a23 	vdiv.f32	s12, s8, s7
 80055bc:	ee37 7a64 	vsub.f32	s14, s14, s9
 80055c0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80055c4:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 80055c8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80055cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80055d4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80055d8:	ee25 6a86 	vmul.f32	s12, s11, s12
 80055dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80055e4:	edc1 7a01 	vstr	s15, [r1, #4]
 80055e8:	ed81 7a00 	vstr	s14, [r1]
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop

080055f0 <acc_detector_distance_alg_filtfilt>:
 80055f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	2b09      	cmp	r3, #9
 80055f6:	b084      	sub	sp, #16
 80055f8:	d80a      	bhi.n	8005610 <acc_detector_distance_alg_filtfilt+0x20>
 80055fa:	4924      	ldr	r1, [pc, #144]	@ (800568c <acc_detector_distance_alg_filtfilt+0x9c>)
 80055fc:	4a24      	ldr	r2, [pc, #144]	@ (8005690 <acc_detector_distance_alg_filtfilt+0xa0>)
 80055fe:	690c      	ldr	r4, [r1, #16]
 8005600:	4924      	ldr	r1, [pc, #144]	@ (8005694 <acc_detector_distance_alg_filtfilt+0xa4>)
 8005602:	200a      	movs	r0, #10
 8005604:	9000      	str	r0, [sp, #0]
 8005606:	2000      	movs	r0, #0
 8005608:	47a0      	blx	r4
 800560a:	b004      	add	sp, #16
 800560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005610:	1e5c      	subs	r4, r3, #1
 8005612:	4680      	mov	r8, r0
 8005614:	461f      	mov	r7, r3
 8005616:	4616      	mov	r6, r2
 8005618:	b2a4      	uxth	r4, r4
 800561a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800561e:	f104 0509 	add.w	r5, r4, #9
 8005622:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8005626:	b2ad      	uxth	r5, r5
 8005628:	3c01      	subs	r4, #1
 800562a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800562e:	b2a4      	uxth	r4, r4
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	606b      	str	r3, [r5, #4]
 8005636:	4284      	cmp	r4, r0
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	d1f0      	bne.n	800561e <acc_detector_distance_alg_filtfilt+0x2e>
 800563c:	f107 0412 	add.w	r4, r7, #18
 8005640:	b2a4      	uxth	r4, r4
 8005642:	4622      	mov	r2, r4
 8005644:	4631      	mov	r1, r6
 8005646:	2009      	movs	r0, #9
 8005648:	f7ff ff56 	bl	80054f8 <acc_detector_distance_alg_odd_padding_add>
 800564c:	4640      	mov	r0, r8
 800564e:	a902      	add	r1, sp, #8
 8005650:	f7ff ff9e 	bl	8005590 <acc_detector_distance_alg_filter_steady_state_calculate>
 8005654:	4623      	mov	r3, r4
 8005656:	4632      	mov	r2, r6
 8005658:	a902      	add	r1, sp, #8
 800565a:	f7ff fef7 	bl	800544c <acc_detector_distance_alg_complex_filter>
 800565e:	4621      	mov	r1, r4
 8005660:	4630      	mov	r0, r6
 8005662:	f7ff fe7b 	bl	800535c <reverse>
 8005666:	4632      	mov	r2, r6
 8005668:	4623      	mov	r3, r4
 800566a:	a902      	add	r1, sp, #8
 800566c:	4640      	mov	r0, r8
 800566e:	f7ff feed 	bl	800544c <acc_detector_distance_alg_complex_filter>
 8005672:	4621      	mov	r1, r4
 8005674:	4630      	mov	r0, r6
 8005676:	f7ff fe71 	bl	800535c <reverse>
 800567a:	00fa      	lsls	r2, r7, #3
 800567c:	f106 0148 	add.w	r1, r6, #72	@ 0x48
 8005680:	b004      	add	sp, #16
 8005682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005686:	f00b b903 	b.w	8010890 <memmove>
 800568a:	bf00      	nop
 800568c:	200003f0 	.word	0x200003f0
 8005690:	08011ebc 	.word	0x08011ebc
 8005694:	08011ef0 	.word	0x08011ef0

08005698 <acc_detector_distance_alg_get_distance_filter_edge_margin>:
 8005698:	b500      	push	{lr}
 800569a:	b083      	sub	sp, #12
 800569c:	9101      	str	r1, [sp, #4]
 800569e:	b919      	cbnz	r1, 80056a8 <acc_detector_distance_alg_get_distance_filter_edge_margin+0x10>
 80056a0:	2001      	movs	r0, #1
 80056a2:	b003      	add	sp, #12
 80056a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80056a8:	f005 fade 	bl	800ac68 <acc_detector_utils_get_fwhm>
 80056ac:	eddd 7a01 	vldr	s15, [sp, #4]
 80056b0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80056d0 <acc_detector_distance_alg_get_distance_filter_edge_margin+0x38>
 80056b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056bc:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80056c0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80056c4:	ee17 3a10 	vmov	r3, s14
 80056c8:	b298      	uxth	r0, r3
 80056ca:	b003      	add	sp, #12
 80056cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80056d0:	3b23d70a 	.word	0x3b23d70a

080056d4 <acc_detector_distance_alg_calculate_biquad_coeffs>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4604      	mov	r4, r0
 80056d8:	b3e8      	cbz	r0, 8005756 <acc_detector_distance_alg_calculate_biquad_coeffs+0x82>
 80056da:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800576c <acc_detector_distance_alg_calculate_biquad_coeffs+0x98>
 80056de:	eeb0 7ac0 	vabs.f32	s14, s0
 80056e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ea:	dc35      	bgt.n	8005758 <acc_detector_distance_alg_calculate_biquad_coeffs+0x84>
 80056ec:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8005770 <acc_detector_distance_alg_calculate_biquad_coeffs+0x9c>
 80056f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80056f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80056f8:	f009 f99e 	bl	800ea38 <cosf>
 80056fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005700:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005704:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005708:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8005774 <acc_detector_distance_alg_calculate_biquad_coeffs+0xa0>
 800570c:	eeb1 6ac7 	vsqrt.f32	s12, s14
 8005710:	ee37 5ac0 	vsub.f32	s10, s15, s0
 8005714:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005718:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800571c:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8005720:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005724:	ee65 5a25 	vmul.f32	s11, s10, s11
 8005728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800572c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005730:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005734:	eec0 6a06 	vdiv.f32	s13, s0, s12
 8005738:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800573c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8005740:	2001      	movs	r0, #1
 8005742:	edc4 7a00 	vstr	s15, [r4]
 8005746:	edc4 5a01 	vstr	s11, [r4, #4]
 800574a:	edc4 7a02 	vstr	s15, [r4, #8]
 800574e:	edc4 6a03 	vstr	s13, [r4, #12]
 8005752:	ed84 7a04 	vstr	s14, [r4, #16]
 8005756:	bd10      	pop	{r4, pc}
 8005758:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800575c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005760:	eef0 7a47 	vmov.f32	s15, s14
 8005764:	eef0 5a66 	vmov.f32	s11, s13
 8005768:	e7ea      	b.n	8005740 <acc_detector_distance_alg_calculate_biquad_coeffs+0x6c>
 800576a:	bf00      	nop
 800576c:	3effffde 	.word	0x3effffde
 8005770:	40490fdb 	.word	0x40490fdb
 8005774:	3fb504f3 	.word	0x3fb504f3

08005778 <acc_detector_distance_alg_get_distance_filter_coeffs>:
 8005778:	b510      	push	{r4, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	4614      	mov	r4, r2
 800577e:	9101      	str	r1, [sp, #4]
 8005780:	f005 fa72 	bl	800ac68 <acc_detector_utils_get_fwhm>
 8005784:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80057c0 <acc_detector_distance_alg_get_distance_filter_coeffs+0x48>
 8005788:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	dc02      	bgt.n	8005798 <acc_detector_distance_alg_get_distance_filter_coeffs+0x20>
 8005792:	2000      	movs	r0, #0
 8005794:	b002      	add	sp, #8
 8005796:	bd10      	pop	{r4, pc}
 8005798:	eddd 7a01 	vldr	s15, [sp, #4]
 800579c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80057c4 <acc_detector_distance_alg_get_distance_filter_coeffs+0x4c>
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	4620      	mov	r0, r4
 80057a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80057ae:	eec7 6a80 	vdiv.f32	s13, s15, s0
 80057b2:	ee26 0a87 	vmul.f32	s0, s13, s14
 80057b6:	b002      	add	sp, #8
 80057b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057bc:	f7ff bf8a 	b.w	80056d4 <acc_detector_distance_alg_calculate_biquad_coeffs>
 80057c0:	3727c5ac 	.word	0x3727c5ac
 80057c4:	3b23d70a 	.word	0x3b23d70a

080057c8 <acc_detector_distance_alg_calculate_cfar>:
 80057c8:	b430      	push	{r4, r5}
 80057ca:	18d4      	adds	r4, r2, r3
 80057cc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 80057d0:	b2a4      	uxth	r4, r4
 80057d2:	42ac      	cmp	r4, r5
 80057d4:	d82f      	bhi.n	8005836 <acc_detector_distance_alg_calculate_cfar+0x6e>
 80057d6:	1b09      	subs	r1, r1, r4
 80057d8:	b289      	uxth	r1, r1
 80057da:	42a9      	cmp	r1, r5
 80057dc:	d92b      	bls.n	8005836 <acc_detector_distance_alg_calculate_cfar+0x6e>
 80057de:	1aec      	subs	r4, r5, r3
 80057e0:	3501      	adds	r5, #1
 80057e2:	1aa4      	subs	r4, r4, r2
 80057e4:	442a      	add	r2, r5
 80057e6:	b2a4      	uxth	r4, r4
 80057e8:	b292      	uxth	r2, r2
 80057ea:	b343      	cbz	r3, 800583e <acc_detector_distance_alg_calculate_cfar+0x76>
 80057ec:	1e59      	subs	r1, r3, #1
 80057ee:	fa14 f581 	uxtah	r5, r4, r1
 80057f2:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005844 <acc_detector_distance_alg_calculate_cfar+0x7c>
 80057f6:	1d01      	adds	r1, r0, #4
 80057f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80057fc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005800:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8005804:	ecf0 6a01 	vldmia	r0!, {s13}
 8005808:	ecb2 7a01 	vldmia	r2!, {s14}
 800580c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005810:	4281      	cmp	r1, r0
 8005812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005816:	d1f5      	bne.n	8005804 <acc_detector_distance_alg_calculate_cfar+0x3c>
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	b29b      	uxth	r3, r3
 800581c:	b17b      	cbz	r3, 800583e <acc_detector_distance_alg_calculate_cfar+0x76>
 800581e:	ee07 3a10 	vmov	s14, r3
 8005822:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005826:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800582a:	bc30      	pop	{r4, r5}
 800582c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8005830:	ee30 0a26 	vadd.f32	s0, s0, s13
 8005834:	4770      	bx	lr
 8005836:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8005848 <acc_detector_distance_alg_calculate_cfar+0x80>
 800583a:	bc30      	pop	{r4, r5}
 800583c:	4770      	bx	lr
 800583e:	eddf 6a01 	vldr	s13, [pc, #4]	@ 8005844 <acc_detector_distance_alg_calculate_cfar+0x7c>
 8005842:	e7f2      	b.n	800582a <acc_detector_distance_alg_calculate_cfar+0x62>
 8005844:	00000000 	.word	0x00000000
 8005848:	7f7fffff 	.word	0x7f7fffff

0800584c <acc_detector_distance_alg_cfar_window_length>:
 800584c:	ee07 0a90 	vmov	s15, r0
 8005850:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8005894 <acc_detector_distance_alg_cfar_window_length+0x48>
 8005854:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005898 <acc_detector_distance_alg_cfar_window_length+0x4c>
 8005858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	dc01      	bgt.n	800586e <acc_detector_distance_alg_cfar_window_length+0x22>
 800586a:	2001      	movs	r0, #1
 800586c:	4770      	bx	lr
 800586e:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8005872:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800587e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	ddf0      	ble.n	800586a <acc_detector_distance_alg_cfar_window_length+0x1e>
 8005888:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800588c:	ee17 3a10 	vmov	r3, s14
 8005890:	b298      	uxth	r0, r3
 8005892:	4770      	bx	lr
 8005894:	3b23d70a 	.word	0x3b23d70a
 8005898:	3727c5ac 	.word	0x3727c5ac

0800589c <acc_detector_distance_alg_cfar_guard_half_length>:
 800589c:	ee07 0a90 	vmov	s15, r0
 80058a0:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80058e0 <acc_detector_distance_alg_cfar_guard_half_length+0x44>
 80058a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80058e4 <acc_detector_distance_alg_cfar_guard_half_length+0x48>
 80058a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80058b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b8:	dd0f      	ble.n	80058da <acc_detector_distance_alg_cfar_guard_half_length+0x3e>
 80058ba:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80058be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80058c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80058c6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80058ca:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80058ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80058d2:	ee17 3a90 	vmov	r3, s15
 80058d6:	b298      	uxth	r0, r3
 80058d8:	4770      	bx	lr
 80058da:	2001      	movs	r0, #1
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	3b23d70a 	.word	0x3b23d70a
 80058e4:	3727c5ac 	.word	0x3727c5ac

080058e8 <acc_detector_distance_alg_cfar_margin>:
 80058e8:	ee07 0a90 	vmov	s15, r0
 80058ec:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8005954 <acc_detector_distance_alg_cfar_margin+0x6c>
 80058f0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005958 <acc_detector_distance_alg_cfar_margin+0x70>
 80058f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80058fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005904:	dc01      	bgt.n	800590a <acc_detector_distance_alg_cfar_margin+0x22>
 8005906:	2002      	movs	r0, #2
 8005908:	4770      	bx	lr
 800590a:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 800590e:	ee60 6a26 	vmul.f32	s13, s0, s13
 8005912:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800591e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005922:	dd15      	ble.n	8005950 <acc_detector_distance_alg_cfar_margin+0x68>
 8005924:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8005928:	ee17 3a10 	vmov	r3, s14
 800592c:	b29b      	uxth	r3, r3
 800592e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005932:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005936:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800593a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800593e:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8005942:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005946:	ee17 0a90 	vmov	r0, s15
 800594a:	4418      	add	r0, r3
 800594c:	b280      	uxth	r0, r0
 800594e:	4770      	bx	lr
 8005950:	2301      	movs	r3, #1
 8005952:	e7ec      	b.n	800592e <acc_detector_distance_alg_cfar_margin+0x46>
 8005954:	3b23d70a 	.word	0x3b23d70a
 8005958:	3727c5ac 	.word	0x3727c5ac

0800595c <acc_detector_distance_alg_calculate_threshold_recording>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	b083      	sub	sp, #12
 8005962:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 8005966:	f8bd e038 	ldrh.w	lr, [sp, #56]	@ 0x38
 800596a:	2c00      	cmp	r4, #0
 800596c:	d065      	beq.n	8005a3a <acc_detector_distance_alg_calculate_threshold_recording+0xde>
 800596e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8005970:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8005a48 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 8005974:	ed9f 5a35 	vldr	s10, [pc, #212]	@ 8005a4c <acc_detector_distance_alg_calculate_threshold_recording+0xf0>
 8005978:	3c01      	subs	r4, #1
 800597a:	b2a4      	uxth	r4, r4
 800597c:	f107 0802 	add.w	r8, r7, #2
 8005980:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8005984:	1d0c      	adds	r4, r1, #4
 8005986:	f04f 0c00 	mov.w	ip, #0
 800598a:	9401      	str	r4, [sp, #4]
 800598c:	e003      	b.n	8005996 <acc_detector_distance_alg_calculate_threshold_recording+0x3a>
 800598e:	4547      	cmp	r7, r8
 8005990:	f10c 0c04 	add.w	ip, ip, #4
 8005994:	d051      	beq.n	8005a3a <acc_detector_distance_alg_calculate_threshold_recording+0xde>
 8005996:	f837 6f02 	ldrh.w	r6, [r7, #2]!
 800599a:	eba6 040e 	sub.w	r4, r6, lr
 800599e:	b2a4      	uxth	r4, r4
 80059a0:	4294      	cmp	r4, r2
 80059a2:	d8f4      	bhi.n	800598e <acc_detector_distance_alg_calculate_threshold_recording+0x32>
 80059a4:	f837 9c02 	ldrh.w	r9, [r7, #-2]
 80059a8:	eba9 050e 	sub.w	r5, r9, lr
 80059ac:	b2ad      	uxth	r5, r5
 80059ae:	42a5      	cmp	r5, r4
 80059b0:	d246      	bcs.n	8005a40 <acc_detector_distance_alg_calculate_threshold_recording+0xe4>
 80059b2:	ebae 0a09 	sub.w	sl, lr, r9
 80059b6:	eb03 0b0c 	add.w	fp, r3, ip
 80059ba:	3c01      	subs	r4, #1
 80059bc:	4454      	add	r4, sl
 80059be:	ed9b 6a00 	vldr	s12, [fp]
 80059c2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8005a48 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 80059c6:	fa15 fa84 	uxtah	sl, r5, r4
 80059ca:	9c01      	ldr	r4, [sp, #4]
 80059cc:	ee26 6a06 	vmul.f32	s12, s12, s12
 80059d0:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80059d4:	eb01 0a85 	add.w	sl, r1, r5, lsl #2
 80059d8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80059dc:	ecfa 7a01 	vldmia	sl!, {s15}
 80059e0:	ecb5 7a01 	vldmia	r5!, {s14}
 80059e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80059e8:	eef0 6ac7 	vabs.f32	s13, s14
 80059ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80059f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80059f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f8:	eef4 6ac5 	vcmpe.f32	s13, s10
 80059fc:	bfd8      	it	le
 80059fe:	eef0 7a64 	vmovle.f32	s15, s9
 8005a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a06:	dd05      	ble.n	8005a14 <acc_detector_distance_alg_calculate_threshold_recording+0xb8>
 8005a08:	eef1 6ae7 	vsqrt.f32	s13, s15
 8005a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a10:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005a14:	4554      	cmp	r4, sl
 8005a16:	d1e1      	bne.n	80059dc <acc_detector_distance_alg_calculate_threshold_recording+0x80>
 8005a18:	eba6 0609 	sub.w	r6, r6, r9
 8005a1c:	b2b6      	uxth	r6, r6
 8005a1e:	ee07 6a90 	vmov	s15, r6
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8005a28:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8005a2c:	4464      	add	r4, ip
 8005a2e:	4547      	cmp	r7, r8
 8005a30:	f10c 0c04 	add.w	ip, ip, #4
 8005a34:	ed84 7a00 	vstr	s14, [r4]
 8005a38:	d1ad      	bne.n	8005996 <acc_detector_distance_alg_calculate_threshold_recording+0x3a>
 8005a3a:	b003      	add	sp, #12
 8005a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a40:	eddf 5a01 	vldr	s11, [pc, #4]	@ 8005a48 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 8005a44:	e7e8      	b.n	8005a18 <acc_detector_distance_alg_calculate_threshold_recording+0xbc>
 8005a46:	bf00      	nop
 8005a48:	00000000 	.word	0x00000000
 8005a4c:	3727c5ac 	.word	0x3727c5ac

08005a50 <acc_detector_distance_alg_interpolate_peaks>:
 8005a50:	b4f0      	push	{r4, r5, r6, r7}
 8005a52:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8005a56:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8005a5a:	ee05 4a10 	vmov	s10, r4
 8005a5e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8086 	beq.w	8005b74 <acc_detector_distance_alg_interpolate_peaks+0x124>
 8005a68:	2f00      	cmp	r7, #0
 8005a6a:	f000 8083 	beq.w	8005b74 <acc_detector_distance_alg_interpolate_peaks+0x124>
 8005a6e:	3f01      	subs	r7, #1
 8005a70:	1e5e      	subs	r6, r3, #1
 8005a72:	b2bf      	uxth	r7, r7
 8005a74:	b2b6      	uxth	r6, r6
 8005a76:	ee04 4a10 	vmov	s8, r4
 8005a7a:	eb02 0747 	add.w	r7, r2, r7, lsl #1
 8005a7e:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8005a82:	f101 3cff 	add.w	ip, r1, #4294967295
 8005a86:	3a02      	subs	r2, #2
 8005a88:	e9dd 4107 	ldrd	r4, r1, [sp, #28]
 8005a8c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8005a90:	eefe 3a00 	vmov.f32	s7, #224	@ 0xbf000000 -0.5
 8005a94:	e00f      	b.n	8005ab6 <acc_detector_distance_alg_interpolate_peaks+0x66>
 8005a96:	eef8 7ac5 	vcvt.f32.s32	s15, s10
 8005a9a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005a9e:	edc4 7a00 	vstr	s15, [r4]
 8005aa2:	6803      	ldr	r3, [r0, #0]
 8005aa4:	600b      	str	r3, [r1, #0]
 8005aa6:	42b2      	cmp	r2, r6
 8005aa8:	f104 0404 	add.w	r4, r4, #4
 8005aac:	f101 0104 	add.w	r1, r1, #4
 8005ab0:	d060      	beq.n	8005b74 <acc_detector_distance_alg_interpolate_peaks+0x124>
 8005ab2:	42ba      	cmp	r2, r7
 8005ab4:	d05e      	beq.n	8005b74 <acc_detector_distance_alg_interpolate_peaks+0x124>
 8005ab6:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0eb      	beq.n	8005a96 <acc_detector_distance_alg_interpolate_peaks+0x46>
 8005abe:	1c5d      	adds	r5, r3, #1
 8005ac0:	4563      	cmp	r3, ip
 8005ac2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005ac6:	d2ee      	bcs.n	8005aa6 <acc_detector_distance_alg_interpolate_peaks+0x56>
 8005ac8:	ee07 3a90 	vmov	s15, r3
 8005acc:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005ad0:	edd5 5a00 	vldr	s11, [r5]
 8005ad4:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005adc:	ee35 7ae6 	vsub.f32	s14, s11, s13
 8005ae0:	ee37 3ae4 	vsub.f32	s6, s15, s9
 8005ae4:	ee76 5a65 	vsub.f32	s11, s12, s11
 8005ae8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8005aec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005af0:	ee77 2aa4 	vadd.f32	s5, s15, s9
 8005af4:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005af8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005afc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005b00:	ee62 5aa6 	vmul.f32	s11, s5, s13
 8005b04:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005b08:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005b0c:	eef8 5a44 	vcvt.f32.u32	s11, s8
 8005b10:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005b14:	42b2      	cmp	r2, r6
 8005b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b1a:	ee37 2a07 	vadd.f32	s4, s14, s14
 8005b1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b22:	ee63 6a07 	vmul.f32	s13, s6, s14
 8005b26:	eef1 1a67 	vneg.f32	s3, s15
 8005b2a:	eec1 2a82 	vdiv.f32	s5, s3, s4
 8005b2e:	f104 0404 	add.w	r4, r4, #4
 8005b32:	f101 0104 	add.w	r1, r1, #4
 8005b36:	ee66 6a83 	vmul.f32	s13, s13, s6
 8005b3a:	ee27 7a22 	vmul.f32	s14, s14, s5
 8005b3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8005b42:	ee23 3a27 	vmul.f32	s6, s6, s15
 8005b46:	ee27 7a22 	vmul.f32	s14, s14, s5
 8005b4a:	ee65 6aa2 	vmul.f32	s13, s11, s5
 8005b4e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005b52:	eef8 5ac5 	vcvt.f32.s32	s11, s10
 8005b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005b5e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005b62:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005b66:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005b6a:	ed04 7a01 	vstr	s14, [r4, #-4]
 8005b6e:	ed41 7a01 	vstr	s15, [r1, #-4]
 8005b72:	d19e      	bne.n	8005ab2 <acc_detector_distance_alg_interpolate_peaks+0x62>
 8005b74:	bcf0      	pop	{r4, r5, r6, r7}
 8005b76:	4770      	bx	lr

08005b78 <acc_detector_distance_alg_find_peaks>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	2901      	cmp	r1, #1
 8005b80:	f8bd b030 	ldrh.w	fp, [sp, #48]	@ 0x30
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	d96d      	bls.n	8005c64 <acc_detector_distance_alg_find_peaks+0xec>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	469a      	mov	sl, r3
 8005b8c:	f04f 0800 	mov.w	r8, #0
 8005b90:	f06f 4940 	mvn.w	r9, #3221225472	@ 0xc0000000
 8005b94:	1e4e      	subs	r6, r1, #1
 8005b96:	e010      	b.n	8005bba <acc_detector_distance_alg_find_peaks+0x42>
 8005b98:	eb03 0409 	add.w	r4, r3, r9
 8005b9c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005ba0:	ed94 7a00 	vldr	s14, [r4]
 8005ba4:	edd4 7a01 	vldr	s15, [r4, #4]
 8005ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	db21      	blt.n	8005bf6 <acc_detector_distance_alg_find_peaks+0x7e>
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	428b      	cmp	r3, r1
 8005bb8:	d216      	bcs.n	8005be8 <acc_detector_distance_alg_find_peaks+0x70>
 8005bba:	1e5c      	subs	r4, r3, #1
 8005bbc:	0965      	lsrs	r5, r4, #5
 8005bbe:	f004 041f 	and.w	r4, r4, #31
 8005bc2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8005bc6:	fa25 f404 	lsr.w	r4, r5, r4
 8005bca:	07e7      	lsls	r7, r4, #31
 8005bcc:	d5f1      	bpl.n	8005bb2 <acc_detector_distance_alg_find_peaks+0x3a>
 8005bce:	095d      	lsrs	r5, r3, #5
 8005bd0:	f003 041f 	and.w	r4, r3, #31
 8005bd4:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8005bd8:	fa25 f404 	lsr.w	r4, r5, r4
 8005bdc:	07e5      	lsls	r5, r4, #31
 8005bde:	d4db      	bmi.n	8005b98 <acc_detector_distance_alg_find_peaks+0x20>
 8005be0:	3302      	adds	r3, #2
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	428b      	cmp	r3, r1
 8005be6:	d3e8      	bcc.n	8005bba <acc_detector_distance_alg_find_peaks+0x42>
 8005be8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bea:	4650      	mov	r0, sl
 8005bec:	f8a3 8000 	strh.w	r8, [r3]
 8005bf0:	b003      	add	sp, #12
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf6:	1c5c      	adds	r4, r3, #1
 8005bf8:	469c      	mov	ip, r3
 8005bfa:	b2a3      	uxth	r3, r4
 8005bfc:	42b3      	cmp	r3, r6
 8005bfe:	ea4f 1453 	mov.w	r4, r3, lsr #5
 8005c02:	f003 0e1f 	and.w	lr, r3, #31
 8005c06:	d2d6      	bcs.n	8005bb6 <acc_detector_distance_alg_find_peaks+0x3e>
 8005c08:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8005c0c:	fa24 f40e 	lsr.w	r4, r4, lr
 8005c10:	07e4      	lsls	r4, r4, #31
 8005c12:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8005c16:	eb00 058c 	add.w	r5, r0, ip, lsl #2
 8005c1a:	d5cc      	bpl.n	8005bb6 <acc_detector_distance_alg_find_peaks+0x3e>
 8005c1c:	ed97 7a00 	vldr	s14, [r7]
 8005c20:	edd5 7a00 	vldr	s15, [r5]
 8005c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2c:	f103 0401 	add.w	r4, r3, #1
 8005c30:	dce2      	bgt.n	8005bf8 <acc_detector_distance_alg_find_peaks+0x80>
 8005c32:	d5e2      	bpl.n	8005bfa <acc_detector_distance_alg_find_peaks+0x82>
 8005c34:	f10c 0401 	add.w	r4, ip, #1
 8005c38:	0965      	lsrs	r5, r4, #5
 8005c3a:	f004 041f 	and.w	r4, r4, #31
 8005c3e:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8005c42:	fa25 f404 	lsr.w	r4, r5, r4
 8005c46:	07e4      	lsls	r4, r4, #31
 8005c48:	d5b5      	bpl.n	8005bb6 <acc_detector_distance_alg_find_peaks+0x3e>
 8005c4a:	45d8      	cmp	r8, fp
 8005c4c:	d207      	bcs.n	8005c5e <acc_detector_distance_alg_find_peaks+0xe6>
 8005c4e:	9d01      	ldr	r5, [sp, #4]
 8005c50:	f108 0401 	add.w	r4, r8, #1
 8005c54:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8005c58:	fa1f f884 	uxth.w	r8, r4
 8005c5c:	e7ab      	b.n	8005bb6 <acc_detector_distance_alg_find_peaks+0x3e>
 8005c5e:	f04f 0a00 	mov.w	sl, #0
 8005c62:	e7a8      	b.n	8005bb6 <acc_detector_distance_alg_find_peaks+0x3e>
 8005c64:	f04f 0800 	mov.w	r8, #0
 8005c68:	f04f 0a01 	mov.w	sl, #1
 8005c6c:	e7bc      	b.n	8005be8 <acc_detector_distance_alg_find_peaks+0x70>
 8005c6e:	bf00      	nop

08005c70 <acc_detector_distance_alg_peak_inplace_sort>:
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d045      	beq.n	8005d00 <acc_detector_distance_alg_peak_inplace_sort+0x90>
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d043      	beq.n	8005d00 <acc_detector_distance_alg_peak_inplace_sort+0x90>
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	f1b1 0a01 	subs.w	sl, r1, #1
 8005c80:	b084      	sub	sp, #16
 8005c82:	d03a      	beq.n	8005cfa <acc_detector_distance_alg_peak_inplace_sort+0x8a>
 8005c84:	f04f 0900 	mov.w	r9, #0
 8005c88:	4696      	mov	lr, r2
 8005c8a:	4684      	mov	ip, r0
 8005c8c:	46c8      	mov	r8, r9
 8005c8e:	466f      	mov	r7, sp
 8005c90:	ebba 0808 	subs.w	r8, sl, r8
 8005c94:	d02a      	beq.n	8005cec <acc_detector_distance_alg_peak_inplace_sort+0x7c>
 8005c96:	2600      	movs	r6, #0
 8005c98:	4634      	mov	r4, r6
 8005c9a:	eb0c 1504 	add.w	r5, ip, r4, lsl #4
 8005c9e:	eb0c 1404 	add.w	r4, ip, r4, lsl #4
 8005ca2:	3510      	adds	r5, #16
 8005ca4:	ed94 7a00 	vldr	s14, [r4]
 8005ca8:	ed94 6a02 	vldr	s12, [r4, #8]
 8005cac:	edd5 7a00 	vldr	s15, [r5]
 8005cb0:	edd5 6a02 	vldr	s13, [r5, #8]
 8005cb4:	f1be 0f00 	cmp.w	lr, #0
 8005cb8:	d123      	bne.n	8005d02 <acc_detector_distance_alg_peak_inplace_sort+0x92>
 8005cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc2:	bfcc      	ite	gt
 8005cc4:	2301      	movgt	r3, #1
 8005cc6:	2300      	movle	r3, #0
 8005cc8:	b15b      	cbz	r3, 8005ce2 <acc_detector_distance_alg_peak_inplace_sort+0x72>
 8005cca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005cce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8005cd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005cda:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8005cde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	b2b6      	uxth	r6, r6
 8005ce6:	4546      	cmp	r6, r8
 8005ce8:	4634      	mov	r4, r6
 8005cea:	d3d6      	bcc.n	8005c9a <acc_detector_distance_alg_peak_inplace_sort+0x2a>
 8005cec:	f109 0901 	add.w	r9, r9, #1
 8005cf0:	fa1f f989 	uxth.w	r9, r9
 8005cf4:	45d1      	cmp	r9, sl
 8005cf6:	46c8      	mov	r8, r9
 8005cf8:	d3ca      	bcc.n	8005c90 <acc_detector_distance_alg_peak_inplace_sort+0x20>
 8005cfa:	b004      	add	sp, #16
 8005cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d00:	4770      	bx	lr
 8005d02:	f1be 0f01 	cmp.w	lr, #1
 8005d06:	d1ec      	bne.n	8005ce2 <acc_detector_distance_alg_peak_inplace_sort+0x72>
 8005d08:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8005d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d10:	bf4c      	ite	mi
 8005d12:	2301      	movmi	r3, #1
 8005d14:	2300      	movpl	r3, #0
 8005d16:	e7d7      	b.n	8005cc8 <acc_detector_distance_alg_peak_inplace_sort+0x58>

08005d18 <acc_detector_distance_alg_merge_peaks>:
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d03e      	beq.n	8005d9a <acc_detector_distance_alg_merge_peaks+0x82>
 8005d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d20:	4691      	mov	r9, r2
 8005d22:	b3ba      	cbz	r2, 8005d94 <acc_detector_distance_alg_merge_peaks+0x7c>
 8005d24:	4698      	mov	r8, r3
 8005d26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d28:	b3a3      	cbz	r3, 8005d94 <acc_detector_distance_alg_merge_peaks+0x7c>
 8005d2a:	2901      	cmp	r1, #1
 8005d2c:	468a      	mov	sl, r1
 8005d2e:	4607      	mov	r7, r0
 8005d30:	d935      	bls.n	8005d9e <acc_detector_distance_alg_merge_peaks+0x86>
 8005d32:	2400      	movs	r4, #0
 8005d34:	4620      	mov	r0, r4
 8005d36:	4626      	mov	r6, r4
 8005d38:	4625      	mov	r5, r4
 8005d3a:	f101 3bff 	add.w	fp, r1, #4294967295
 8005d3e:	e00b      	b.n	8005d58 <acc_detector_distance_alg_merge_peaks+0x40>
 8005d40:	463a      	mov	r2, r7
 8005d42:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 8005d46:	b329      	cbz	r1, 8005d94 <acc_detector_distance_alg_merge_peaks+0x7c>
 8005d48:	3601      	adds	r6, #1
 8005d4a:	f7ff fb29 	bl	80053a0 <merge_peak_range.part.0>
 8005d4e:	b2b6      	uxth	r6, r6
 8005d50:	4620      	mov	r0, r4
 8005d52:	455c      	cmp	r4, fp
 8005d54:	4625      	mov	r5, r4
 8005d56:	d224      	bcs.n	8005da2 <acc_detector_distance_alg_merge_peaks+0x8a>
 8005d58:	eb07 1305 	add.w	r3, r7, r5, lsl #4
 8005d5c:	edd3 6a07 	vldr	s13, [r3, #28]
 8005d60:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d64:	ed93 7a04 	vldr	s14, [r3, #16]
 8005d68:	ed93 6a00 	vldr	s12, [r3]
 8005d6c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d74:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005d78:	bf58      	it	pl
 8005d7a:	eef0 7a66 	vmovpl.f32	s15, s13
 8005d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d82:	3401      	adds	r4, #1
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	b2a4      	uxth	r4, r4
 8005d8a:	d4e2      	bmi.n	8005d52 <acc_detector_distance_alg_merge_peaks+0x3a>
 8005d8c:	1a21      	subs	r1, r4, r0
 8005d8e:	45b0      	cmp	r8, r6
 8005d90:	b289      	uxth	r1, r1
 8005d92:	d8d5      	bhi.n	8005d40 <acc_detector_distance_alg_merge_peaks+0x28>
 8005d94:	2000      	movs	r0, #0
 8005d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	4770      	bx	lr
 8005d9e:	2000      	movs	r0, #0
 8005da0:	4606      	mov	r6, r0
 8005da2:	4582      	cmp	sl, r0
 8005da4:	d90b      	bls.n	8005dbe <acc_detector_distance_alg_merge_peaks+0xa6>
 8005da6:	45b0      	cmp	r8, r6
 8005da8:	d9f4      	bls.n	8005d94 <acc_detector_distance_alg_merge_peaks+0x7c>
 8005daa:	ebaa 0100 	sub.w	r1, sl, r0
 8005dae:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 8005db2:	b289      	uxth	r1, r1
 8005db4:	463a      	mov	r2, r7
 8005db6:	f7ff faf3 	bl	80053a0 <merge_peak_range.part.0>
 8005dba:	3601      	adds	r6, #1
 8005dbc:	b2b6      	uxth	r6, r6
 8005dbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	801e      	strh	r6, [r3, #0]
 8005dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005dc8 <acc_detector_distance_alg_get_loopback_peak_offset>:
 8005dc8:	3801      	subs	r0, #1
 8005dca:	f111 0f19 	cmn.w	r1, #25
 8005dce:	b2c0      	uxtb	r0, r0
 8005dd0:	da10      	bge.n	8005df4 <acc_detector_distance_alg_get_loopback_peak_offset+0x2c>
 8005dd2:	2804      	cmp	r0, #4
 8005dd4:	d82a      	bhi.n	8005e2c <acc_detector_distance_alg_get_loopback_peak_offset+0x64>
 8005dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8005e8c <acc_detector_distance_alg_get_loopback_peak_offset+0xc4>)
 8005dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005e90 <acc_detector_distance_alg_get_loopback_peak_offset+0xc8>)
 8005dda:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005dde:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005de2:	edd2 7a00 	vldr	s15, [r2]
 8005de6:	ed90 7a00 	vldr	s14, [r0]
 8005dea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005dee:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005df2:	4770      	bx	lr
 8005df4:	292c      	cmp	r1, #44	@ 0x2c
 8005df6:	dc0a      	bgt.n	8005e0e <acc_detector_distance_alg_get_loopback_peak_offset+0x46>
 8005df8:	2804      	cmp	r0, #4
 8005dfa:	d920      	bls.n	8005e3e <acc_detector_distance_alg_get_loopback_peak_offset+0x76>
 8005dfc:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005e94 <acc_detector_distance_alg_get_loopback_peak_offset+0xcc>
 8005e00:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8005e98 <acc_detector_distance_alg_get_loopback_peak_offset+0xd0>
 8005e04:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e08:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005e0c:	4770      	bx	lr
 8005e0e:	294f      	cmp	r1, #79	@ 0x4f
 8005e10:	dc24      	bgt.n	8005e5c <acc_detector_distance_alg_get_loopback_peak_offset+0x94>
 8005e12:	2804      	cmp	r0, #4
 8005e14:	d834      	bhi.n	8005e80 <acc_detector_distance_alg_get_loopback_peak_offset+0xb8>
 8005e16:	4a21      	ldr	r2, [pc, #132]	@ (8005e9c <acc_detector_distance_alg_get_loopback_peak_offset+0xd4>)
 8005e18:	4b21      	ldr	r3, [pc, #132]	@ (8005ea0 <acc_detector_distance_alg_get_loopback_peak_offset+0xd8>)
 8005e1a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005e1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e22:	edd2 7a00 	vldr	s15, [r2]
 8005e26:	ed90 7a00 	vldr	s14, [r0]
 8005e2a:	e7de      	b.n	8005dea <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 8005e2c:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8005ea4 <acc_detector_distance_alg_get_loopback_peak_offset+0xdc>
 8005e30:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005ea8 <acc_detector_distance_alg_get_loopback_peak_offset+0xe0>
 8005e34:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e38:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005e3c:	4770      	bx	lr
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eac <acc_detector_distance_alg_get_loopback_peak_offset+0xe4>)
 8005e40:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <acc_detector_distance_alg_get_loopback_peak_offset+0xe8>)
 8005e42:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005e46:	edd2 7a00 	vldr	s15, [r2]
 8005e4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e4e:	ed90 7a00 	vldr	s14, [r0]
 8005e52:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e56:	ee30 0a07 	vadd.f32	s0, s0, s14
 8005e5a:	4770      	bx	lr
 8005e5c:	2803      	cmp	r0, #3
 8005e5e:	d80a      	bhi.n	8005e76 <acc_detector_distance_alg_get_loopback_peak_offset+0xae>
 8005e60:	4a14      	ldr	r2, [pc, #80]	@ (8005eb4 <acc_detector_distance_alg_get_loopback_peak_offset+0xec>)
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <acc_detector_distance_alg_get_loopback_peak_offset+0xf0>)
 8005e64:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8005e68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e6c:	edd2 7a00 	vldr	s15, [r2]
 8005e70:	ed90 7a00 	vldr	s14, [r0]
 8005e74:	e7b9      	b.n	8005dea <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 8005e76:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005ebc <acc_detector_distance_alg_get_loopback_peak_offset+0xf4>
 8005e7a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005ec0 <acc_detector_distance_alg_get_loopback_peak_offset+0xf8>
 8005e7e:	e7b4      	b.n	8005dea <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 8005e80:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005ec4 <acc_detector_distance_alg_get_loopback_peak_offset+0xfc>
 8005e84:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8005ec8 <acc_detector_distance_alg_get_loopback_peak_offset+0x100>
 8005e88:	e7af      	b.n	8005dea <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 8005e8a:	bf00      	nop
 8005e8c:	08011f08 	.word	0x08011f08
 8005e90:	08011f1c 	.word	0x08011f1c
 8005e94:	3f0e255f 	.word	0x3f0e255f
 8005e98:	3bcebc3b 	.word	0x3bcebc3b
 8005e9c:	08011f58 	.word	0x08011f58
 8005ea0:	08011f6c 	.word	0x08011f6c
 8005ea4:	3f505015 	.word	0x3f505015
 8005ea8:	3c4276c8 	.word	0x3c4276c8
 8005eac:	08011f30 	.word	0x08011f30
 8005eb0:	08011f44 	.word	0x08011f44
 8005eb4:	08011f80 	.word	0x08011f80
 8005eb8:	08011f90 	.word	0x08011f90
 8005ebc:	bc0085e2 	.word	0xbc0085e2
 8005ec0:	3ea52be3 	.word	0x3ea52be3
 8005ec4:	3b225c36 	.word	0x3b225c36
 8005ec8:	3ececaf1 	.word	0x3ececaf1

08005ecc <acc_detector_distance_alg_phase_comp_mean_sweep>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	ed2d 8b08 	vpush	{d8-d11}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	469b      	mov	fp, r3
 8005ed8:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8005edc:	9104      	str	r1, [sp, #16]
 8005ede:	460c      	mov	r4, r1
 8005ee0:	9305      	str	r3, [sp, #20]
 8005ee2:	f89d 1070 	ldrb.w	r1, [sp, #112]	@ 0x70
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f000 80b9 	beq.w	800605e <acc_detector_distance_alg_phase_comp_mean_sweep+0x192>
 8005eec:	4681      	mov	r9, r0
 8005eee:	4690      	mov	r8, r2
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	1e62      	subs	r2, r4, #1
 8005ef4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8005ef6:	f8cd b00c 	str.w	fp, [sp, #12]
 8005efa:	444b      	add	r3, r9
 8005efc:	ee07 0a90 	vmov	s15, r0
 8005f00:	fa1f fb83 	uxth.w	fp, r3
 8005f04:	b292      	uxth	r2, r2
 8005f06:	2300      	movs	r3, #0
 8005f08:	3404      	adds	r4, #4
 8005f0a:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 8005f0e:	9302      	str	r3, [sp, #8]
 8005f10:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 8005f14:	465b      	mov	r3, fp
 8005f16:	eddf 8a7a 	vldr	s17, [pc, #488]	@ 8006100 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 8005f1a:	46d3      	mov	fp, sl
 8005f1c:	46ca      	mov	sl, r9
 8005f1e:	4699      	mov	r9, r3
 8005f20:	ed9f aa77 	vldr	s20, [pc, #476]	@ 8006100 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	eef0 aa4a 	vmov.f32	s21, s20
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d077      	beq.n	800601e <acc_detector_distance_alg_phase_comp_mean_sweep+0x152>
 8005f2e:	9b05      	ldr	r3, [sp, #20]
 8005f30:	9d02      	ldr	r5, [sp, #8]
 8005f32:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	@ 0x60
 8005f36:	195c      	adds	r4, r3, r5
 8005f38:	eef0 aa4a 	vmov.f32	s21, s20
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	b2a4      	uxth	r4, r4
 8005f40:	4689      	mov	r9, r1
 8005f42:	f1b9 0f00 	cmp.w	r9, #0
 8005f46:	f040 808f 	bne.w	8006068 <acc_detector_distance_alg_phase_comp_mean_sweep+0x19c>
 8005f4a:	ed97 0a00 	vldr	s0, [r7]
 8005f4e:	edd6 7a00 	vldr	s15, [r6]
 8005f52:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005f56:	ee27 0aa8 	vmul.f32	s0, s15, s17
 8005f5a:	ee78 0ae7 	vsub.f32	s1, s17, s15
 8005f5e:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005f62:	eef4 0a40 	vcmp.f32	s1, s0
 8005f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6a:	f180 8090 	bvs.w	800608e <acc_detector_distance_alg_phase_comp_mean_sweep+0x1c2>
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	f008 fe7a 	bl	800ec68 <cexpf>
 8005f74:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005f76:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 8005f7a:	eeb0 ba60 	vmov.f32	s22, s1
 8005f7e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8005f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f8c:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 8005f90:	ee27 7aa8 	vmul.f32	s14, s15, s17
 8005f94:	ee77 1aa8 	vadd.f32	s3, s15, s17
 8005f98:	ee08 3a10 	vmov	s16, r3
 8005f9c:	eeb4 7a61 	vcmp.f32	s14, s3
 8005fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8005fa8:	9b01      	ldr	r3, [sp, #4]
 8005faa:	eef0 9a40 	vmov.f32	s19, s0
 8005fae:	f180 808a 	bvs.w	80060c6 <acc_detector_distance_alg_phase_comp_mean_sweep+0x1fa>
 8005fb2:	ee38 8a07 	vadd.f32	s16, s16, s14
 8005fb6:	ee71 1aa8 	vadd.f32	s3, s3, s17
 8005fba:	ee29 7a88 	vmul.f32	s14, s19, s16
 8005fbe:	ee2b 6a21 	vmul.f32	s12, s22, s3
 8005fc2:	ee69 7aa1 	vmul.f32	s15, s19, s3
 8005fc6:	ee6b 6a08 	vmul.f32	s13, s22, s16
 8005fca:	ee37 6a46 	vsub.f32	s12, s14, s12
 8005fce:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005fd2:	eeb4 6a66 	vcmp.f32	s12, s13
 8005fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fda:	d665      	bvs.n	80060a8 <acc_detector_distance_alg_phase_comp_mean_sweep+0x1dc>
 8005fdc:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8005fe0:	f938 1024 	ldrsh.w	r1, [r8, r4, lsl #2]
 8005fe4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8005fe8:	ee07 1a10 	vmov	s14, r1
 8005fec:	ee07 2a90 	vmov	s15, r2
 8005ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff8:	ee37 7a46 	vsub.f32	s14, s14, s12
 8005ffc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006000:	ee7a aa87 	vadd.f32	s21, s21, s14
 8006004:	ee3a aa27 	vadd.f32	s20, s20, s15
 8006008:	3604      	adds	r6, #4
 800600a:	441c      	add	r4, r3
 800600c:	4455      	add	r5, sl
 800600e:	45b3      	cmp	fp, r6
 8006010:	b2a4      	uxth	r4, r4
 8006012:	b2ad      	uxth	r5, r5
 8006014:	f107 0704 	add.w	r7, r7, #4
 8006018:	d193      	bne.n	8005f42 <acc_detector_distance_alg_phase_comp_mean_sweep+0x76>
 800601a:	4649      	mov	r1, r9
 800601c:	4699      	mov	r9, r3
 800601e:	ee8a 0a09 	vdiv.f32	s0, s20, s18
 8006022:	ee8a 8a89 	vdiv.f32	s16, s21, s18
 8006026:	ee60 7a28 	vmul.f32	s15, s0, s17
 800602a:	ee70 0a28 	vadd.f32	s1, s0, s17
 800602e:	eef4 7a60 	vcmp.f32	s15, s1
 8006032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006036:	d656      	bvs.n	80060e6 <acc_detector_distance_alg_phase_comp_mean_sweep+0x21a>
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	3301      	adds	r3, #1
 800603c:	b298      	uxth	r0, r3
 800603e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	9002      	str	r0, [sp, #8]
 8006046:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800604a:	ed83 8a00 	vstr	s16, [r3]
 800604e:	edc3 0a01 	vstr	s1, [r3, #4]
 8006052:	4582      	cmp	sl, r0
 8006054:	f103 0308 	add.w	r3, r3, #8
 8006058:	9303      	str	r3, [sp, #12]
 800605a:	f47f af61 	bne.w	8005f20 <acc_detector_distance_alg_phase_comp_mean_sweep+0x54>
 800605e:	b007      	add	sp, #28
 8006060:	ecbd 8b08 	vpop	{d8-d11}
 8006064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 800606c:	f938 1024 	ldrsh.w	r1, [r8, r4, lsl #2]
 8006070:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8006074:	ee07 1a10 	vmov	s14, r1
 8006078:	ee07 2a90 	vmov	s15, r2
 800607c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006084:	ee7a aa87 	vadd.f32	s21, s21, s14
 8006088:	ee3a aa27 	vadd.f32	s20, s20, s15
 800608c:	e7bc      	b.n	8006008 <acc_detector_distance_alg_phase_comp_mean_sweep+0x13c>
 800608e:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006100 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	eeb0 0a67 	vmov.f32	s0, s15
 8006098:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 800609c:	eeb0 1a68 	vmov.f32	s2, s17
 80060a0:	f7fa fcec 	bl	8000a7c <__mulsc3>
 80060a4:	9b01      	ldr	r3, [sp, #4]
 80060a6:	e762      	b.n	8005f6e <acc_detector_distance_alg_phase_comp_mean_sweep+0xa2>
 80060a8:	eeb0 1a48 	vmov.f32	s2, s16
 80060ac:	eef0 0a4b 	vmov.f32	s1, s22
 80060b0:	eeb0 0a69 	vmov.f32	s0, s19
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	f7fa fce1 	bl	8000a7c <__mulsc3>
 80060ba:	9b01      	ldr	r3, [sp, #4]
 80060bc:	eeb0 6a40 	vmov.f32	s12, s0
 80060c0:	eef0 6a60 	vmov.f32	s13, s1
 80060c4:	e78a      	b.n	8005fdc <acc_detector_distance_alg_phase_comp_mean_sweep+0x110>
 80060c6:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80060ca:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8006100 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 80060ce:	eeb0 0a67 	vmov.f32	s0, s15
 80060d2:	eeb0 1a68 	vmov.f32	s2, s17
 80060d6:	f7fa fcd1 	bl	8000a7c <__mulsc3>
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	eeb0 7a40 	vmov.f32	s14, s0
 80060e0:	eef0 1a60 	vmov.f32	s3, s1
 80060e4:	e765      	b.n	8005fb2 <acc_detector_distance_alg_phase_comp_mean_sweep+0xe6>
 80060e6:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8006100 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 80060ea:	9101      	str	r1, [sp, #4]
 80060ec:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80060f0:	eeb0 1a68 	vmov.f32	s2, s17
 80060f4:	f7fa fcc2 	bl	8000a7c <__mulsc3>
 80060f8:	9901      	ldr	r1, [sp, #4]
 80060fa:	eef0 7a40 	vmov.f32	s15, s0
 80060fe:	e79b      	b.n	8006038 <acc_detector_distance_alg_phase_comp_mean_sweep+0x16c>
 8006100:	00000000 	.word	0x00000000

08006104 <acc_detector_distance_alg_argmaxf>:
 8006104:	b1c9      	cbz	r1, 800613a <acc_detector_distance_alg_argmaxf+0x36>
 8006106:	2300      	movs	r3, #0
 8006108:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8006140 <acc_detector_distance_alg_argmaxf+0x3c>
 800610c:	b410      	push	{r4}
 800610e:	461a      	mov	r2, r3
 8006110:	4604      	mov	r4, r0
 8006112:	4618      	mov	r0, r3
 8006114:	ecf4 7a01 	vldmia	r4!, {s15}
 8006118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800611c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006120:	f103 0301 	add.w	r3, r3, #1
 8006124:	bfc8      	it	gt
 8006126:	4610      	movgt	r0, r2
 8006128:	b29a      	uxth	r2, r3
 800612a:	bfc8      	it	gt
 800612c:	eeb0 7a67 	vmovgt.f32	s14, s15
 8006130:	4291      	cmp	r1, r2
 8006132:	d8ef      	bhi.n	8006114 <acc_detector_distance_alg_argmaxf+0x10>
 8006134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	4608      	mov	r0, r1
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	00000000 	.word	0x00000000

08006144 <acc_detector_distance_alg_zero_mean_stdf>:
 8006144:	b1b9      	cbz	r1, 8006176 <acc_detector_distance_alg_zero_mean_stdf+0x32>
 8006146:	1e4b      	subs	r3, r1, #1
 8006148:	1d02      	adds	r2, r0, #4
 800614a:	b29b      	uxth	r3, r3
 800614c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800617c <acc_detector_distance_alg_zero_mean_stdf+0x38>
 8006150:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006154:	ecf0 7a01 	vldmia	r0!, {s15}
 8006158:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800615c:	4283      	cmp	r3, r0
 800615e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006162:	d1f7      	bne.n	8006154 <acc_detector_distance_alg_zero_mean_stdf+0x10>
 8006164:	ee07 1a90 	vmov	s15, r1
 8006168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006170:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006174:	4770      	bx	lr
 8006176:	ed9f 7a01 	vldr	s14, [pc, #4]	@ 800617c <acc_detector_distance_alg_zero_mean_stdf+0x38>
 800617a:	e7f3      	b.n	8006164 <acc_detector_distance_alg_zero_mean_stdf+0x20>
 800617c:	00000000 	.word	0x00000000

08006180 <acc_detector_distance_alg_calc_processing_gain>:
 8006180:	b508      	push	{r3, lr}
 8006182:	ed2d 8b02 	vpush	{d8}
 8006186:	ee08 1a10 	vmov	s16, r1
 800618a:	f004 fd6d 	bl	800ac68 <acc_detector_utils_get_fwhm>
 800618e:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8006244 <acc_detector_distance_alg_calc_processing_gain+0xc4>
 8006192:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8006196:	ee30 0a00 	vadd.f32	s0, s0, s0
 800619a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800619e:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80061a2:	f008 fd99 	bl	800ecd8 <floorf>
 80061a6:	eeb0 8a00 	vmov.f32	s16, #0	@ 0x40000000  2.0
 80061aa:	ee30 8a08 	vadd.f32	s16, s0, s16
 80061ae:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80061b2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80061b6:	f008 fd8f 	bl	800ecd8 <floorf>
 80061ba:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 80061be:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80061c2:	ee17 3a10 	vmov	r3, s14
 80061c6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80061ca:	ee70 5a46 	vsub.f32	s11, s0, s12
 80061ce:	b298      	uxth	r0, r3
 80061d0:	ee17 3a90 	vmov	r3, s15
 80061d4:	eec6 6a25 	vdiv.f32	s13, s12, s11
 80061d8:	b299      	uxth	r1, r3
 80061da:	b380      	cbz	r0, 800623e <acc_detector_distance_alg_calc_processing_gain+0xbe>
 80061dc:	2200      	movs	r2, #0
 80061de:	4613      	mov	r3, r2
 80061e0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006248 <acc_detector_distance_alg_calc_processing_gain+0xc8>
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ec:	3201      	adds	r2, #1
 80061ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80061f2:	b293      	uxth	r3, r2
 80061f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80061f8:	4283      	cmp	r3, r0
 80061fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061fe:	d3f1      	bcc.n	80061e4 <acc_detector_distance_alg_calc_processing_gain+0x64>
 8006200:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006204:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006208:	ee38 8a67 	vsub.f32	s16, s16, s15
 800620c:	1a09      	subs	r1, r1, r0
 800620e:	2900      	cmp	r1, #0
 8006210:	eec7 6a88 	vdiv.f32	s13, s15, s16
 8006214:	dd0e      	ble.n	8006234 <acc_detector_distance_alg_calc_processing_gain+0xb4>
 8006216:	2300      	movs	r3, #0
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	b293      	uxth	r3, r2
 8006224:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006228:	428b      	cmp	r3, r1
 800622a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800622e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006232:	dbf1      	blt.n	8006218 <acc_detector_distance_alg_calc_processing_gain+0x98>
 8006234:	ecbd 8b02 	vpop	{d8}
 8006238:	eeb0 0a47 	vmov.f32	s0, s14
 800623c:	bd08      	pop	{r3, pc}
 800623e:	ed9f 7a02 	vldr	s14, [pc, #8]	@ 8006248 <acc_detector_distance_alg_calc_processing_gain+0xc8>
 8006242:	e7dd      	b.n	8006200 <acc_detector_distance_alg_calc_processing_gain+0x80>
 8006244:	3b23d70a 	.word	0x3b23d70a
 8006248:	00000000 	.word	0x00000000

0800624c <acc_detector_distance_cal_result_static_map_init>:
 800624c:	b410      	push	{r4}
 800624e:	b121      	cbz	r1, 800625a <acc_detector_distance_cal_result_static_map_init+0xe>
 8006250:	2100      	movs	r1, #0
 8006252:	2401      	movs	r4, #1
 8006254:	6001      	str	r1, [r0, #0]
 8006256:	8084      	strh	r4, [r0, #4]
 8006258:	2104      	movs	r1, #4
 800625a:	b11a      	cbz	r2, 8006264 <acc_detector_distance_cal_result_static_map_init+0x18>
 800625c:	6081      	str	r1, [r0, #8]
 800625e:	8182      	strh	r2, [r0, #12]
 8006260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006264:	1d0a      	adds	r2, r1, #4
 8006266:	4413      	add	r3, r2
 8006268:	1d1c      	adds	r4, r3, #4
 800626a:	e9c0 3406 	strd	r3, r4, [r0, #24]
 800626e:	6101      	str	r1, [r0, #16]
 8006270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006274:	6142      	str	r2, [r0, #20]
 8006276:	4770      	bx	lr

08006278 <acc_detector_distance_cal_result_dynamic_map_init>:
 8006278:	2200      	movs	r2, #0
 800627a:	2301      	movs	r3, #1
 800627c:	8002      	strh	r2, [r0, #0]
 800627e:	8043      	strh	r3, [r0, #2]
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop

08006284 <acc_detector_distance_cal_result_static_validate>:
 8006284:	b148      	cbz	r0, 800629a <acc_detector_distance_cal_result_static_validate+0x16>
 8006286:	6989      	ldr	r1, [r1, #24]
 8006288:	b510      	push	{r4, lr}
 800628a:	5844      	ldr	r4, [r0, r1]
 800628c:	f007 fbf8 	bl	800da80 <acc_alg_basic_util_crc32>
 8006290:	1a20      	subs	r0, r4, r0
 8006292:	fab0 f080 	clz	r0, r0
 8006296:	0940      	lsrs	r0, r0, #5
 8006298:	bd10      	pop	{r4, pc}
 800629a:	4770      	bx	lr

0800629c <acc_detector_distance_cal_result_dynamic_validate>:
 800629c:	b158      	cbz	r0, 80062b6 <acc_detector_distance_cal_result_dynamic_validate+0x1a>
 800629e:	8849      	ldrh	r1, [r1, #2]
 80062a0:	b510      	push	{r4, lr}
 80062a2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 80062a6:	0089      	lsls	r1, r1, #2
 80062a8:	f007 fbea 	bl	800da80 <acc_alg_basic_util_crc32>
 80062ac:	1a20      	subs	r0, r4, r0
 80062ae:	fab0 f080 	clz	r0, r0
 80062b2:	0940      	lsrs	r0, r0, #5
 80062b4:	bd10      	pop	{r4, pc}
 80062b6:	4770      	bx	lr

080062b8 <acc_detector_distance_cal_result_static_crc_set>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	698d      	ldr	r5, [r1, #24]
 80062bc:	4629      	mov	r1, r5
 80062be:	4604      	mov	r4, r0
 80062c0:	f007 fbde 	bl	800da80 <acc_alg_basic_util_crc32>
 80062c4:	5160      	str	r0, [r4, r5]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}

080062c8 <acc_detector_distance_cal_result_dynamic_crc_set>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	884d      	ldrh	r5, [r1, #2]
 80062cc:	00a9      	lsls	r1, r5, #2
 80062ce:	4604      	mov	r4, r0
 80062d0:	f007 fbd6 	bl	800da80 <acc_alg_basic_util_crc32>
 80062d4:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 80062d8:	bd38      	pop	{r3, r4, r5, pc}
 80062da:	bf00      	nop

080062dc <acc_detector_distance_cal_result_bg_noise_array_get>:
 80062dc:	b912      	cbnz	r2, 80062e4 <acc_detector_distance_cal_result_bg_noise_array_get+0x8>
 80062de:	680b      	ldr	r3, [r1, #0]
 80062e0:	4418      	add	r0, r3
 80062e2:	4770      	bx	lr
 80062e4:	688b      	ldr	r3, [r1, #8]
 80062e6:	4418      	add	r0, r3
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop

080062ec <acc_detector_distance_cal_result_reference_temperature_get>:
 80062ec:	690b      	ldr	r3, [r1, #16]
 80062ee:	4418      	add	r0, r3
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop

080062f4 <acc_detector_distance_cal_result_loopback_peak_distance_get>:
 80062f4:	880b      	ldrh	r3, [r1, #0]
 80062f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80062fa:	4770      	bx	lr

080062fc <acc_detector_distance_cal_result_aggregator_partition_get>:
 80062fc:	694b      	ldr	r3, [r1, #20]
 80062fe:	4418      	add	r0, r3
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop

08006304 <acc_detector_distance_calibration_offset_settings_set>:
 8006304:	b510      	push	{r4, lr}
 8006306:	f06f 011d 	mvn.w	r1, #29
 800630a:	4604      	mov	r4, r0
 800630c:	f002 fcb0 	bl	8008c70 <acc_config_start_point_set>
 8006310:	4620      	mov	r0, r4
 8006312:	2132      	movs	r1, #50	@ 0x32
 8006314:	f002 fcb0 	bl	8008c78 <acc_config_num_points_set>
 8006318:	4620      	mov	r0, r4
 800631a:	2101      	movs	r1, #1
 800631c:	f002 fcb0 	bl	8008c80 <acc_config_step_length_set>
 8006320:	4620      	mov	r0, r4
 8006322:	2140      	movs	r1, #64	@ 0x40
 8006324:	f002 fcb4 	bl	8008c90 <acc_config_hwaas_set>
 8006328:	4620      	mov	r0, r4
 800632a:	2110      	movs	r1, #16
 800632c:	f002 fcb4 	bl	8008c98 <acc_config_receiver_gain_set>
 8006330:	4620      	mov	r0, r4
 8006332:	2101      	movs	r1, #1
 8006334:	f002 fcb4 	bl	8008ca0 <acc_config_enable_tx_set>
 8006338:	4620      	mov	r0, r4
 800633a:	2101      	movs	r1, #1
 800633c:	f002 fcb4 	bl	8008ca8 <acc_config_phase_enhancement_set>
 8006340:	4620      	mov	r0, r4
 8006342:	2101      	movs	r1, #1
 8006344:	f002 fd6e 	bl	8008e24 <acc_config_enable_loopback_set>
 8006348:	4620      	mov	r0, r4
 800634a:	2101      	movs	r1, #1
 800634c:	f002 fc9c 	bl	8008c88 <acc_config_profile_set>
 8006350:	4620      	mov	r0, r4
 8006352:	2102      	movs	r1, #2
 8006354:	f002 fd40 	bl	8008dd8 <acc_config_prf_set>
 8006358:	4620      	mov	r0, r4
 800635a:	2101      	movs	r1, #1
 800635c:	f002 fca8 	bl	8008cb0 <acc_config_sweeps_per_frame_set>
 8006360:	4620      	mov	r0, r4
 8006362:	2101      	movs	r1, #1
 8006364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006368:	f002 ba54 	b.w	8008814 <acc_config_num_subsweeps_set>

0800636c <acc_detector_distance_calibration_offset_process>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	ed2d 8b02 	vpush	{d8}
 8006372:	460d      	mov	r5, r1
 8006374:	b08e      	sub	sp, #56	@ 0x38
 8006376:	2101      	movs	r1, #1
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	aa09      	add	r2, sp, #36	@ 0x24
 800637e:	4608      	mov	r0, r1
 8006380:	ed9f 8a28 	vldr	s16, [pc, #160]	@ 8006424 <acc_detector_distance_calibration_offset_process+0xb8>
 8006384:	930d      	str	r3, [sp, #52]	@ 0x34
 8006386:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 800638a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800638e:	f7ff f9f3 	bl	8005778 <acc_detector_distance_alg_get_distance_filter_coeffs>
 8006392:	4620      	mov	r0, r4
 8006394:	f104 02c8 	add.w	r2, r4, #200	@ 0xc8
 8006398:	462b      	mov	r3, r5
 800639a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800639e:	ee07 1a10 	vmov	s14, r1
 80063a2:	f930 1b04 	ldrsh.w	r1, [r0], #4
 80063a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063aa:	ee07 1a90 	vmov	s15, r1
 80063ae:	ee67 6a08 	vmul.f32	s13, s14, s16
 80063b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063b6:	4282      	cmp	r2, r0
 80063b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063bc:	ed83 7a01 	vstr	s14, [r3, #4]
 80063c0:	edc3 7a00 	vstr	s15, [r3]
 80063c4:	f103 0308 	add.w	r3, r3, #8
 80063c8:	d1e7      	bne.n	800639a <acc_detector_distance_calibration_offset_process+0x2e>
 80063ca:	a809      	add	r0, sp, #36	@ 0x24
 80063cc:	462a      	mov	r2, r5
 80063ce:	4629      	mov	r1, r5
 80063d0:	2332      	movs	r3, #50	@ 0x32
 80063d2:	f7ff f90d 	bl	80055f0 <acc_detector_distance_alg_filtfilt>
 80063d6:	462a      	mov	r2, r5
 80063d8:	2332      	movs	r3, #50	@ 0x32
 80063da:	4628      	mov	r0, r5
 80063dc:	2100      	movs	r1, #0
 80063de:	f004 fcb5 	bl	800ad4c <acc_detector_utils_get_abs_sweep>
 80063e2:	2132      	movs	r1, #50	@ 0x32
 80063e4:	4628      	mov	r0, r5
 80063e6:	f7ff fe8d 	bl	8006104 <acc_detector_distance_alg_argmaxf>
 80063ea:	ae08      	add	r6, sp, #32
 80063ec:	4602      	mov	r2, r0
 80063ee:	2301      	movs	r3, #1
 80063f0:	ac07      	add	r4, sp, #28
 80063f2:	f06f 011d 	mvn.w	r1, #29
 80063f6:	9100      	str	r1, [sp, #0]
 80063f8:	f8ad 201a 	strh.w	r2, [sp, #26]
 80063fc:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8006400:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006404:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006428 <acc_detector_distance_calibration_offset_process+0xbc>
 8006408:	ed8d 8a07 	vstr	s16, [sp, #28]
 800640c:	4628      	mov	r0, r5
 800640e:	f10d 021a 	add.w	r2, sp, #26
 8006412:	2132      	movs	r1, #50	@ 0x32
 8006414:	f7ff fb1c 	bl	8005a50 <acc_detector_distance_alg_interpolate_peaks>
 8006418:	ed9d 0a07 	vldr	s0, [sp, #28]
 800641c:	b00e      	add	sp, #56	@ 0x38
 800641e:	ecbd 8b02 	vpop	{d8}
 8006422:	bd70      	pop	{r4, r5, r6, pc}
 8006424:	00000000 	.word	0x00000000
 8006428:	3b23d70a 	.word	0x3b23d70a

0800642c <get_noise_points>:
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	4607      	mov	r7, r0
 8006432:	f002 fa05 	bl	8008840 <acc_config_num_subsweeps_get>
 8006436:	b1c0      	cbz	r0, 800646a <get_noise_points+0x3e>
 8006438:	2600      	movs	r6, #0
 800643a:	4680      	mov	r8, r0
 800643c:	4634      	mov	r4, r6
 800643e:	e001      	b.n	8006444 <get_noise_points+0x18>
 8006440:	45a0      	cmp	r8, r4
 8006442:	d912      	bls.n	800646a <get_noise_points+0x3e>
 8006444:	4621      	mov	r1, r4
 8006446:	4638      	mov	r0, r7
 8006448:	f002 fb02 	bl	8008a50 <acc_config_subsweep_profile_get>
 800644c:	4621      	mov	r1, r4
 800644e:	4605      	mov	r5, r0
 8006450:	4638      	mov	r0, r7
 8006452:	f002 fab9 	bl	80089c8 <acc_config_subsweep_step_length_get>
 8006456:	3601      	adds	r6, #1
 8006458:	2d05      	cmp	r5, #5
 800645a:	b2f4      	uxtb	r4, r6
 800645c:	d1f0      	bne.n	8006440 <get_noise_points+0x14>
 800645e:	2801      	cmp	r0, #1
 8006460:	d1ee      	bne.n	8006440 <get_noise_points+0x14>
 8006462:	f44f 70b0 	mov.w	r0, #352	@ 0x160
 8006466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646a:	20dc      	movs	r0, #220	@ 0xdc
 800646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006470 <acc_detector_distance_calibration_noise_settings_set>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ed2d 8b02 	vpush	{d8}
 8006478:	460e      	mov	r6, r1
 800647a:	b085      	sub	sp, #20
 800647c:	2101      	movs	r1, #1
 800647e:	4605      	mov	r5, r0
 8006480:	f002 fc16 	bl	8008cb0 <acc_config_sweeps_per_frame_set>
 8006484:	4630      	mov	r0, r6
 8006486:	f002 f9db 	bl	8008840 <acc_config_num_subsweeps_get>
 800648a:	2100      	movs	r1, #0
 800648c:	4603      	mov	r3, r0
 800648e:	4630      	mov	r0, r6
 8006490:	461f      	mov	r7, r3
 8006492:	9303      	str	r3, [sp, #12]
 8006494:	f002 fc5c 	bl	8008d50 <acc_config_subsweep_enable_loopback_get>
 8006498:	1a39      	subs	r1, r7, r0
 800649a:	4604      	mov	r4, r0
 800649c:	b2c9      	uxtb	r1, r1
 800649e:	4628      	mov	r0, r5
 80064a0:	f002 f9b8 	bl	8008814 <acc_config_num_subsweeps_set>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff ffc1 	bl	800642c <get_noise_points>
 80064aa:	42a7      	cmp	r7, r4
 80064ac:	d963      	bls.n	8006576 <acc_detector_distance_calibration_noise_settings_set+0x106>
 80064ae:	2300      	movs	r3, #0
 80064b0:	ee08 0a90 	vmov	s17, r0
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	4621      	mov	r1, r4
 80064b8:	4630      	mov	r0, r6
 80064ba:	f002 fb0d 	bl	8008ad8 <acc_config_subsweep_hwaas_get>
 80064be:	4621      	mov	r1, r4
 80064c0:	4603      	mov	r3, r0
 80064c2:	4630      	mov	r0, r6
 80064c4:	9302      	str	r3, [sp, #8]
 80064c6:	f002 fb4b 	bl	8008b60 <acc_config_subsweep_receiver_gain_get>
 80064ca:	4621      	mov	r1, r4
 80064cc:	4683      	mov	fp, r0
 80064ce:	4630      	mov	r0, r6
 80064d0:	f002 fbac 	bl	8008c2c <acc_config_subsweep_phase_enhancement_get>
 80064d4:	4621      	mov	r1, r4
 80064d6:	4682      	mov	sl, r0
 80064d8:	4630      	mov	r0, r6
 80064da:	f002 fc39 	bl	8008d50 <acc_config_subsweep_enable_loopback_get>
 80064de:	4621      	mov	r1, r4
 80064e0:	4681      	mov	r9, r0
 80064e2:	4630      	mov	r0, r6
 80064e4:	ee08 9a10 	vmov	s16, r9
 80064e8:	f89d 9004 	ldrb.w	r9, [sp, #4]
 80064ec:	f002 fab0 	bl	8008a50 <acc_config_subsweep_profile_get>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4680      	mov	r8, r0
 80064f4:	4630      	mov	r0, r6
 80064f6:	f002 fc73 	bl	8008de0 <acc_config_subsweep_prf_get>
 80064fa:	464a      	mov	r2, r9
 80064fc:	4607      	mov	r7, r0
 80064fe:	2100      	movs	r1, #0
 8006500:	4628      	mov	r0, r5
 8006502:	f002 fb4f 	bl	8008ba4 <acc_config_subsweep_enable_tx_set>
 8006506:	464a      	mov	r2, r9
 8006508:	2101      	movs	r1, #1
 800650a:	4628      	mov	r0, r5
 800650c:	f002 fa3a 	bl	8008984 <acc_config_subsweep_step_length_set>
 8006510:	464a      	mov	r2, r9
 8006512:	2100      	movs	r1, #0
 8006514:	4628      	mov	r0, r5
 8006516:	f002 f9ad 	bl	8008874 <acc_config_subsweep_start_point_set>
 800651a:	ee18 1a90 	vmov	r1, s17
 800651e:	464a      	mov	r2, r9
 8006520:	4628      	mov	r0, r5
 8006522:	f002 f9eb 	bl	80088fc <acc_config_subsweep_num_points_set>
 8006526:	9b02      	ldr	r3, [sp, #8]
 8006528:	464a      	mov	r2, r9
 800652a:	4619      	mov	r1, r3
 800652c:	4628      	mov	r0, r5
 800652e:	f002 fab1 	bl	8008a94 <acc_config_subsweep_hwaas_set>
 8006532:	464a      	mov	r2, r9
 8006534:	4659      	mov	r1, fp
 8006536:	4628      	mov	r0, r5
 8006538:	f002 faf0 	bl	8008b1c <acc_config_subsweep_receiver_gain_set>
 800653c:	464a      	mov	r2, r9
 800653e:	4651      	mov	r1, sl
 8006540:	4628      	mov	r0, r5
 8006542:	f002 fb51 	bl	8008be8 <acc_config_subsweep_phase_enhancement_set>
 8006546:	ee18 1a10 	vmov	r1, s16
 800654a:	464a      	mov	r2, r9
 800654c:	4628      	mov	r0, r5
 800654e:	f002 fbdd 	bl	8008d0c <acc_config_subsweep_enable_loopback_set>
 8006552:	464a      	mov	r2, r9
 8006554:	4641      	mov	r1, r8
 8006556:	4628      	mov	r0, r5
 8006558:	f002 fa58 	bl	8008a0c <acc_config_subsweep_profile_set>
 800655c:	464a      	mov	r2, r9
 800655e:	4639      	mov	r1, r7
 8006560:	4628      	mov	r0, r5
 8006562:	f002 fc17 	bl	8008d94 <acc_config_subsweep_prf_set>
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	3301      	adds	r3, #1
 800656a:	3401      	adds	r4, #1
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	b2e4      	uxtb	r4, r4
 8006572:	42a3      	cmp	r3, r4
 8006574:	d19f      	bne.n	80064b6 <acc_detector_distance_calibration_noise_settings_set+0x46>
 8006576:	b005      	add	sp, #20
 8006578:	ecbd 8b02 	vpop	{d8}
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006580 <acc_detector_distance_calibration_noise_process>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	ed2d 8b02 	vpush	{d8}
 8006588:	4607      	mov	r7, r0
 800658a:	b08b      	sub	sp, #44	@ 0x2c
 800658c:	4608      	mov	r0, r1
 800658e:	468a      	mov	sl, r1
 8006590:	4616      	mov	r6, r2
 8006592:	469b      	mov	fp, r3
 8006594:	f002 f954 	bl	8008840 <acc_config_num_subsweeps_get>
 8006598:	2100      	movs	r1, #0
 800659a:	4603      	mov	r3, r0
 800659c:	4650      	mov	r0, sl
 800659e:	461c      	mov	r4, r3
 80065a0:	9302      	str	r3, [sp, #8]
 80065a2:	f002 fbd5 	bl	8008d50 <acc_config_subsweep_enable_loopback_get>
 80065a6:	4605      	mov	r5, r0
 80065a8:	4650      	mov	r0, sl
 80065aa:	f7ff ff3f 	bl	800642c <get_noise_points>
 80065ae:	42ac      	cmp	r4, r5
 80065b0:	d95f      	bls.n	8006672 <acc_detector_distance_calibration_noise_process+0xf2>
 80065b2:	1e43      	subs	r3, r0, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f106 0408 	add.w	r4, r6, #8
 80065ba:	1cba      	adds	r2, r7, #2
 80065bc:	ed9f 8a30 	vldr	s16, [pc, #192]	@ 8006680 <acc_detector_distance_calibration_noise_process+0x100>
 80065c0:	9203      	str	r2, [sp, #12]
 80065c2:	4680      	mov	r8, r0
 80065c4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80065c8:	f04f 0900 	mov.w	r9, #0
 80065cc:	4629      	mov	r1, r5
 80065ce:	4650      	mov	r0, sl
 80065d0:	f002 fa3e 	bl	8008a50 <acc_config_subsweep_profile_get>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4607      	mov	r7, r0
 80065d8:	4650      	mov	r0, sl
 80065da:	f002 f9f5 	bl	80089c8 <acc_config_subsweep_step_length_get>
 80065de:	4601      	mov	r1, r0
 80065e0:	9001      	str	r0, [sp, #4]
 80065e2:	4638      	mov	r0, r7
 80065e4:	f7ff f858 	bl	8005698 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 80065e8:	9901      	ldr	r1, [sp, #4]
 80065ea:	4603      	mov	r3, r0
 80065ec:	aa05      	add	r2, sp, #20
 80065ee:	4638      	mov	r0, r7
 80065f0:	461f      	mov	r7, r3
 80065f2:	f7ff f8c1 	bl	8005778 <acc_detector_distance_alg_get_distance_filter_coeffs>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d03c      	beq.n	8006674 <acc_detector_distance_calibration_noise_process+0xf4>
 80065fa:	f1b8 0f00 	cmp.w	r8, #0
 80065fe:	d01c      	beq.n	800663a <acc_detector_distance_calibration_noise_process+0xba>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006606:	4633      	mov	r3, r6
 8006608:	f9b2 1000 	ldrsh.w	r1, [r2]
 800660c:	ee07 1a10 	vmov	s14, r1
 8006610:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 8006614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006618:	ee07 1a90 	vmov	s15, r1
 800661c:	ee67 6a08 	vmul.f32	s13, s14, s16
 8006620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006624:	ed83 7a01 	vstr	s14, [r3, #4]
 8006628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662c:	3308      	adds	r3, #8
 800662e:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006632:	429c      	cmp	r4, r3
 8006634:	f102 0204 	add.w	r2, r2, #4
 8006638:	d1e6      	bne.n	8006608 <acc_detector_distance_calibration_noise_process+0x88>
 800663a:	4643      	mov	r3, r8
 800663c:	4632      	mov	r2, r6
 800663e:	4631      	mov	r1, r6
 8006640:	a805      	add	r0, sp, #20
 8006642:	f7fe ffd5 	bl	80055f0 <acc_detector_distance_alg_filtfilt>
 8006646:	eba8 0347 	sub.w	r3, r8, r7, lsl #1
 800664a:	b29b      	uxth	r3, r3
 800664c:	4639      	mov	r1, r7
 800664e:	4632      	mov	r2, r6
 8006650:	4630      	mov	r0, r6
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	f004 fb7a 	bl	800ad4c <acc_detector_utils_get_abs_sweep>
 8006658:	9b01      	ldr	r3, [sp, #4]
 800665a:	4630      	mov	r0, r6
 800665c:	4619      	mov	r1, r3
 800665e:	f7ff fd71 	bl	8006144 <acc_detector_distance_alg_zero_mean_stdf>
 8006662:	3501      	adds	r5, #1
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	ecab 0a01 	vstmia	fp!, {s0}
 800666a:	b2ed      	uxtb	r5, r5
 800666c:	42ab      	cmp	r3, r5
 800666e:	44c1      	add	r9, r8
 8006670:	d8ac      	bhi.n	80065cc <acc_detector_distance_calibration_noise_process+0x4c>
 8006672:	2001      	movs	r0, #1
 8006674:	b00b      	add	sp, #44	@ 0x2c
 8006676:	ecbd 8b02 	vpop	{d8}
 800667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667e:	bf00      	nop
 8006680:	00000000 	.word	0x00000000

08006684 <get_radar_equation_parameters_for_distance>:
 8006684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006688:	4607      	mov	r7, r0
 800668a:	ed2d 8b02 	vpush	{d8}
 800668e:	460d      	mov	r5, r1
 8006690:	461e      	mov	r6, r3
 8006692:	b982      	cbnz	r2, 80066b6 <get_radar_equation_parameters_for_distance+0x32>
 8006694:	3210      	adds	r2, #16
 8006696:	2001      	movs	r0, #1
 8006698:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 800669c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	ecbd 8b02 	vpop	{d8}
 80066a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066aa:	edc6 7a00 	vstr	s15, [r6]
 80066ae:	682b      	ldr	r3, [r5, #0]
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b6:	f04f 0900 	mov.w	r9, #0
 80066ba:	f890 801d 	ldrb.w	r8, [r0, #29]
 80066be:	eeb0 8a40 	vmov.f32	s16, s0
 80066c2:	464c      	mov	r4, r9
 80066c4:	2001      	movs	r0, #1
 80066c6:	f002 fc93 	bl	8008ff0 <acc_processing_points_to_meter>
 80066ca:	eb07 0344 	add.w	r3, r7, r4, lsl #1
 80066ce:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80066d0:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80066d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d4:	fb12 f201 	smulbb	r2, r2, r1
 80066d8:	fa13 f282 	uxtah	r2, r3, r2
 80066dc:	ee07 2a90 	vmov	s15, r2
 80066e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066e4:	f109 0901 	add.w	r9, r9, #1
 80066e8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80066ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80066f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f4:	d40e      	bmi.n	8006714 <get_radar_equation_parameters_for_distance+0x90>
 80066f6:	fa5f f489 	uxtb.w	r4, r9
 80066fa:	45a0      	cmp	r8, r4
 80066fc:	d2e2      	bcs.n	80066c4 <get_radar_equation_parameters_for_distance+0x40>
 80066fe:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <get_radar_equation_parameters_for_distance+0xa8>)
 8006700:	4a0b      	ldr	r2, [pc, #44]	@ (8006730 <get_radar_equation_parameters_for_distance+0xac>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	490b      	ldr	r1, [pc, #44]	@ (8006734 <get_radar_equation_parameters_for_distance+0xb0>)
 8006706:	2000      	movs	r0, #0
 8006708:	4798      	blx	r3
 800670a:	ecbd 8b02 	vpop	{d8}
 800670e:	2000      	movs	r0, #0
 8006710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006714:	2c00      	cmp	r4, #0
 8006716:	d0f2      	beq.n	80066fe <get_radar_equation_parameters_for_distance+0x7a>
 8006718:	1e62      	subs	r2, r4, #1
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	2a03      	cmp	r2, #3
 800671e:	d8ee      	bhi.n	80066fe <get_radar_equation_parameters_for_distance+0x7a>
 8006720:	18bb      	adds	r3, r7, r2
 8006722:	7e5b      	ldrb	r3, [r3, #25]
 8006724:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8006728:	e7b4      	b.n	8006694 <get_radar_equation_parameters_for_distance+0x10>
 800672a:	bf00      	nop
 800672c:	200003f0 	.word	0x200003f0
 8006730:	08011fa0 	.word	0x08011fa0
 8006734:	08011fc4 	.word	0x08011fc4

08006738 <map_cal_result_data>:
 8006738:	7903      	ldrb	r3, [r0, #4]
 800673a:	2b02      	cmp	r3, #2
 800673c:	b430      	push	{r4, r5}
 800673e:	d113      	bne.n	8006768 <map_cal_result_data+0x30>
 8006740:	f8d0 5098 	ldr.w	r5, [r0, #152]	@ 0x98
 8006744:	f8d0 40a4 	ldr.w	r4, [r0, #164]	@ 0xa4
 8006748:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800674c:	f8d0 30d4 	ldr.w	r3, [r0, #212]	@ 0xd4
 8006750:	440d      	add	r5, r1
 8006752:	440c      	add	r4, r1
 8006754:	440a      	add	r2, r1
 8006756:	440b      	add	r3, r1
 8006758:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
 800675c:	f8c0 40a8 	str.w	r4, [r0, #168]	@ 0xa8
 8006760:	f8c0 20cc 	str.w	r2, [r0, #204]	@ 0xcc
 8006764:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
 8006768:	7943      	ldrb	r3, [r0, #5]
 800676a:	b94b      	cbnz	r3, 8006780 <map_cal_result_data+0x48>
 800676c:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 8006770:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
 8006774:	440b      	add	r3, r1
 8006776:	4411      	add	r1, r2
 8006778:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
 800677c:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 8006780:	bc30      	pop	{r4, r5}
 8006782:	4770      	bx	lr

08006784 <reset_calibration_state.part.0>:
 8006784:	b430      	push	{r4, r5}
 8006786:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8006788:	b18d      	cbz	r5, 80067ae <reset_calibration_state.part.0+0x2a>
 800678a:	f8d0 20cc 	ldr.w	r2, [r0, #204]	@ 0xcc
 800678e:	f8d0 40d8 	ldr.w	r4, [r0, #216]	@ 0xd8
 8006792:	3d01      	subs	r5, #1
 8006794:	b2ad      	uxth	r5, r5
 8006796:	1d13      	adds	r3, r2, #4
 8006798:	2100      	movs	r1, #0
 800679a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800679e:	e000      	b.n	80067a2 <reset_calibration_state.part.0+0x1e>
 80067a0:	3304      	adds	r3, #4
 80067a2:	42ab      	cmp	r3, r5
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	f844 1b04 	str.w	r1, [r4], #4
 80067aa:	461a      	mov	r2, r3
 80067ac:	d1f8      	bne.n	80067a0 <reset_calibration_state.part.0+0x1c>
 80067ae:	2201      	movs	r2, #1
 80067b0:	2300      	movs	r3, #0
 80067b2:	bc30      	pop	{r4, r5}
 80067b4:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
 80067b8:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <process_subsweeps>:
 80067c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067c4:	f8b0 4066 	ldrh.w	r4, [r0, #102]	@ 0x66
 80067c8:	b091      	sub	sp, #68	@ 0x44
 80067ca:	4605      	mov	r5, r0
 80067cc:	7940      	ldrb	r0, [r0, #5]
 80067ce:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80067d2:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80067d6:	b388      	cbz	r0, 800683c <process_subsweeps+0x7c>
 80067d8:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80067da:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 80067dc:	b303      	cbz	r3, 8006820 <process_subsweeps+0x60>
 80067de:	1e58      	subs	r0, r3, #1
 80067e0:	b280      	uxth	r0, r0
 80067e2:	3001      	adds	r0, #1
 80067e4:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 80068f4 <process_subsweeps+0x134>
 80067e8:	4621      	mov	r1, r4
 80067ea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80067ee:	4614      	mov	r4, r2
 80067f0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80067f4:	ee07 6a10 	vmov	s14, r6
 80067f8:	f931 6b04 	ldrsh.w	r6, [r1], #4
 80067fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006800:	ee07 6a90 	vmov	s15, r6
 8006804:	ee67 6a06 	vmul.f32	s13, s14, s12
 8006808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800680c:	4288      	cmp	r0, r1
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ed84 7a01 	vstr	s14, [r4, #4]
 8006816:	edc4 7a00 	vstr	s15, [r4]
 800681a:	f104 0408 	add.w	r4, r4, #8
 800681e:	d1e7      	bne.n	80067f0 <process_subsweeps+0x30>
 8006820:	4611      	mov	r1, r2
 8006822:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8006826:	f7fe fee3 	bl	80055f0 <acc_detector_distance_alg_filtfilt>
 800682a:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 800682c:	8f2b      	ldrh	r3, [r5, #56]	@ 0x38
 800682e:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
 8006830:	4610      	mov	r0, r2
 8006832:	f004 fa8b 	bl	800ad4c <acc_detector_utils_get_abs_sweep>
 8006836:	b011      	add	sp, #68	@ 0x44
 8006838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800683c:	f8b5 c030 	ldrh.w	ip, [r5, #48]	@ 0x30
 8006840:	f10c 0c01 	add.w	ip, ip, #1
 8006844:	4698      	mov	r8, r3
 8006846:	4617      	mov	r7, r2
 8006848:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800684c:	2301      	movs	r3, #1
 800684e:	aa06      	add	r2, sp, #24
 8006850:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006854:	3301      	adds	r3, #1
 8006856:	6808      	ldr	r0, [r1, #0]
 8006858:	f842 0c04 	str.w	r0, [r2, #-4]
 800685c:	2b0b      	cmp	r3, #11
 800685e:	4461      	add	r1, ip
 8006860:	d1f5      	bne.n	800684e <process_subsweeps+0x8e>
 8006862:	a806      	add	r0, sp, #24
 8006864:	220a      	movs	r2, #10
 8006866:	4639      	mov	r1, r7
 8006868:	f004 fa88 	bl	800ad7c <acc_detector_utils_get_complex_angle>
 800686c:	b186      	cbz	r6, 8006890 <process_subsweeps+0xd0>
 800686e:	ed95 7a17 	vldr	s14, [r5, #92]	@ 0x5c
 8006872:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80068f8 <process_subsweeps+0x138>
 8006876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800687a:	463b      	mov	r3, r7
 800687c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006880:	edd3 7a00 	vldr	s15, [r3]
 8006884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006888:	ece3 7a01 	vstmia	r3!, {s15}
 800688c:	429a      	cmp	r2, r3
 800688e:	d1f7      	bne.n	8006880 <process_subsweeps+0xc0>
 8006890:	f1b8 0f00 	cmp.w	r8, #0
 8006894:	d019      	beq.n	80068ca <process_subsweeps+0x10a>
 8006896:	f04f 0900 	mov.w	r9, #0
 800689a:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800689c:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 80068a0:	1c51      	adds	r1, r2, #1
 80068a2:	fb11 f109 	smulbb	r1, r1, r9
 80068a6:	b289      	uxth	r1, r1
 80068a8:	eba1 0009 	sub.w	r0, r1, r9
 80068ac:	3101      	adds	r1, #1
 80068ae:	b280      	uxth	r0, r0
 80068b0:	b289      	uxth	r1, r1
 80068b2:	0092      	lsls	r2, r2, #2
 80068b4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80068b8:	f109 0901 	add.w	r9, r9, #1
 80068bc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80068c0:	f00a f88b 	bl	80109da <memcpy>
 80068c4:	f1b9 0f0a 	cmp.w	r9, #10
 80068c8:	d1e7      	bne.n	800689a <process_subsweeps+0xda>
 80068ca:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 80068ce:	f8cd 8010 	str.w	r8, [sp, #16]
 80068d2:	2001      	movs	r0, #1
 80068d4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80068de:	9701      	str	r7, [sp, #4]
 80068e0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80068e2:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 80068e4:	4622      	mov	r2, r4
 80068e6:	210a      	movs	r1, #10
 80068e8:	f7ff faf0 	bl	8005ecc <acc_detector_distance_alg_phase_comp_mean_sweep>
 80068ec:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 80068ee:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80068f0:	e796      	b.n	8006820 <process_subsweeps+0x60>
 80068f2:	bf00      	nop
 80068f4:	00000000 	.word	0x00000000
 80068f8:	3d4ccccd 	.word	0x3d4ccccd

080068fc <acc_detector_distance_processor_get_sizes>:
 80068fc:	b510      	push	{r4, lr}
 80068fe:	b118      	cbz	r0, 8006908 <acc_detector_distance_processor_get_sizes+0xc>
 8006900:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <acc_detector_distance_processor_get_sizes+0x2c>)
 8006902:	6804      	ldr	r4, [r0, #0]
 8006904:	429c      	cmp	r4, r3
 8006906:	d007      	beq.n	8006918 <acc_detector_distance_processor_get_sizes+0x1c>
 8006908:	4b08      	ldr	r3, [pc, #32]	@ (800692c <acc_detector_distance_processor_get_sizes+0x30>)
 800690a:	4a09      	ldr	r2, [pc, #36]	@ (8006930 <acc_detector_distance_processor_get_sizes+0x34>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	4909      	ldr	r1, [pc, #36]	@ (8006934 <acc_detector_distance_processor_get_sizes+0x38>)
 8006910:	2000      	movs	r0, #0
 8006912:	4798      	blx	r3
 8006914:	2000      	movs	r0, #0
 8006916:	bd10      	pop	{r4, pc}
 8006918:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 800691c:	600b      	str	r3, [r1, #0]
 800691e:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	2001      	movs	r0, #1
 8006926:	bd10      	pop	{r4, pc}
 8006928:	0fa1afe1 	.word	0x0fa1afe1
 800692c:	200003f0 	.word	0x200003f0
 8006930:	08011fe0 	.word	0x08011fe0
 8006934:	08011fc4 	.word	0x08011fc4

08006938 <acc_detector_distance_processor_create>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	2b04      	cmp	r3, #4
 800693e:	ed2d 8b02 	vpush	{d8}
 8006942:	d90b      	bls.n	800695c <acc_detector_distance_processor_create+0x24>
 8006944:	4bbc      	ldr	r3, [pc, #752]	@ (8006c38 <acc_detector_distance_processor_create+0x300>)
 8006946:	4abd      	ldr	r2, [pc, #756]	@ (8006c3c <acc_detector_distance_processor_create+0x304>)
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	49bd      	ldr	r1, [pc, #756]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 800694c:	2000      	movs	r0, #0
 800694e:	4798      	blx	r3
 8006950:	2400      	movs	r4, #0
 8006952:	ecbd 8b02 	vpop	{d8}
 8006956:	4620      	mov	r0, r4
 8006958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695c:	461f      	mov	r7, r3
 800695e:	4680      	mov	r8, r0
 8006960:	460d      	mov	r5, r1
 8006962:	4616      	mov	r6, r2
 8006964:	f44f 73ea 	mov.w	r3, #468	@ 0x1d4
 8006968:	4ab5      	ldr	r2, [pc, #724]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 800696a:	21e4      	movs	r1, #228	@ 0xe4
 800696c:	2001      	movs	r0, #1
 800696e:	f004 faeb 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 8006972:	4604      	mov	r4, r0
 8006974:	2800      	cmp	r0, #0
 8006976:	f000 814f 	beq.w	8006c18 <acc_detector_distance_processor_create+0x2e0>
 800697a:	46c6      	mov	lr, r8
 800697c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006980:	46a4      	mov	ip, r4
 8006982:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 8006c5c <acc_detector_distance_processor_create+0x324>
 8006986:	f84c 9b04 	str.w	r9, [ip], #4
 800698a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800698e:	f8de 3000 	ldr.w	r3, [lr]
 8006992:	f8cc 3000 	str.w	r3, [ip]
 8006996:	7767      	strb	r7, [r4, #29]
 8006998:	b15f      	cbz	r7, 80069b2 <acc_detector_distance_processor_create+0x7a>
 800699a:	1e78      	subs	r0, r7, #1
 800699c:	fa56 f080 	uxtab	r0, r6, r0
 80069a0:	1e72      	subs	r2, r6, #1
 80069a2:	f104 0319 	add.w	r3, r4, #25
 80069a6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80069aa:	f803 1b01 	strb.w	r1, [r3], #1
 80069ae:	4290      	cmp	r0, r2
 80069b0:	d1f9      	bne.n	80069a6 <acc_detector_distance_processor_create+0x6e>
 80069b2:	7966      	ldrb	r6, [r4, #5]
 80069b4:	2e00      	cmp	r6, #0
 80069b6:	d160      	bne.n	8006a7a <acc_detector_distance_processor_create+0x142>
 80069b8:	7ea1      	ldrb	r1, [r4, #26]
 80069ba:	4628      	mov	r0, r5
 80069bc:	f001 ff7c 	bl	80088b8 <acc_config_subsweep_start_point_get>
 80069c0:	7ea1      	ldrb	r1, [r4, #26]
 80069c2:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80069c4:	4628      	mov	r0, r5
 80069c6:	f001 ffff 	bl	80089c8 <acc_config_subsweep_step_length_get>
 80069ca:	7ea1      	ldrb	r1, [r4, #26]
 80069cc:	8520      	strh	r0, [r4, #40]	@ 0x28
 80069ce:	4628      	mov	r0, r5
 80069d0:	f002 f83e 	bl	8008a50 <acc_config_subsweep_profile_get>
 80069d4:	f104 091a 	add.w	r9, r4, #26
 80069d8:	77a0      	strb	r0, [r4, #30]
 80069da:	8626      	strh	r6, [r4, #48]	@ 0x30
 80069dc:	2701      	movs	r7, #1
 80069de:	f109 39ff 	add.w	r9, r9, #4294967295
 80069e2:	f104 0a20 	add.w	sl, r4, #32
 80069e6:	2600      	movs	r6, #0
 80069e8:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80069ec:	4628      	mov	r0, r5
 80069ee:	f001 ffa7 	bl	8008940 <acc_config_subsweep_num_points_get>
 80069f2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80069f4:	4418      	add	r0, r3
 80069f6:	8620      	strh	r0, [r4, #48]	@ 0x30
 80069f8:	f899 1000 	ldrb.w	r1, [r9]
 80069fc:	4628      	mov	r0, r5
 80069fe:	f002 f86b 	bl	8008ad8 <acc_config_subsweep_hwaas_get>
 8006a02:	3601      	adds	r6, #1
 8006a04:	f82a 0b02 	strh.w	r0, [sl], #2
 8006a08:	b2f6      	uxtb	r6, r6
 8006a0a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8006a0c:	f8aa 301c 	strh.w	r3, [sl, #28]
 8006a10:	42be      	cmp	r6, r7
 8006a12:	d3e9      	bcc.n	80069e8 <acc_detector_distance_processor_create+0xb0>
 8006a14:	7962      	ldrb	r2, [r4, #5]
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	d15b      	bne.n	8006ad2 <acc_detector_distance_processor_create+0x19a>
 8006a1a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8006a1c:	f8a4 2066 	strh.w	r2, [r4, #102]	@ 0x66
 8006a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 8006a2a:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8006a2c:	7fa0      	ldrb	r0, [r4, #30]
 8006a2e:	f7fe fe33 	bl	8005698 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 8006a32:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8006a34:	8760      	strh	r0, [r4, #58]	@ 0x3a
 8006a36:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	ea4f 0540 	mov.w	r5, r0, lsl #1
 8006a40:	d931      	bls.n	8006aa6 <acc_detector_distance_processor_create+0x16e>
 8006a42:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8006a46:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8006a48:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8006a4a:	4288      	cmp	r0, r1
 8006a4c:	d85a      	bhi.n	8006b04 <acc_detector_distance_processor_create+0x1cc>
 8006a4e:	1a09      	subs	r1, r1, r0
 8006a50:	87b9      	strh	r1, [r7, #60]	@ 0x3c
 8006a52:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8006a54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a56:	7fa0      	ldrb	r0, [r4, #30]
 8006a58:	1b52      	subs	r2, r2, r5
 8006a5a:	fb01 6303 	mla	r3, r1, r3, r6
 8006a5e:	8722      	strh	r2, [r4, #56]	@ 0x38
 8006a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a62:	f104 0248 	add.w	r2, r4, #72	@ 0x48
 8006a66:	f7fe fe87 	bl	8005778 <acc_detector_distance_alg_get_distance_filter_coeffs>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d151      	bne.n	8006b12 <acc_detector_distance_processor_create+0x1da>
 8006a6e:	4d72      	ldr	r5, [pc, #456]	@ (8006c38 <acc_detector_distance_processor_create+0x300>)
 8006a70:	4a74      	ldr	r2, [pc, #464]	@ (8006c44 <acc_detector_distance_processor_create+0x30c>)
 8006a72:	692b      	ldr	r3, [r5, #16]
 8006a74:	4972      	ldr	r1, [pc, #456]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 8006a76:	4798      	blx	r3
 8006a78:	e01b      	b.n	8006ab2 <acc_detector_distance_processor_create+0x17a>
 8006a7a:	7e61      	ldrb	r1, [r4, #25]
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f001 ff1b 	bl	80088b8 <acc_config_subsweep_start_point_get>
 8006a82:	7e61      	ldrb	r1, [r4, #25]
 8006a84:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8006a86:	4628      	mov	r0, r5
 8006a88:	f001 ff9e 	bl	80089c8 <acc_config_subsweep_step_length_get>
 8006a8c:	7e61      	ldrb	r1, [r4, #25]
 8006a8e:	8520      	strh	r0, [r4, #40]	@ 0x28
 8006a90:	4628      	mov	r0, r5
 8006a92:	f001 ffdd 	bl	8008a50 <acc_config_subsweep_profile_get>
 8006a96:	2300      	movs	r3, #0
 8006a98:	77a0      	strb	r0, [r4, #30]
 8006a9a:	8623      	strh	r3, [r4, #48]	@ 0x30
 8006a9c:	2f00      	cmp	r7, #0
 8006a9e:	d0b9      	beq.n	8006a14 <acc_detector_distance_processor_create+0xdc>
 8006aa0:	f104 0919 	add.w	r9, r4, #25
 8006aa4:	e79b      	b.n	80069de <acc_detector_distance_processor_create+0xa6>
 8006aa6:	4d64      	ldr	r5, [pc, #400]	@ (8006c38 <acc_detector_distance_processor_create+0x300>)
 8006aa8:	4a67      	ldr	r2, [pc, #412]	@ (8006c48 <acc_detector_distance_processor_create+0x310>)
 8006aaa:	692b      	ldr	r3, [r5, #16]
 8006aac:	4964      	ldr	r1, [pc, #400]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 8006aae:	2000      	movs	r0, #0
 8006ab0:	4798      	blx	r3
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	692b      	ldr	r3, [r5, #16]
 8006ab6:	4a65      	ldr	r2, [pc, #404]	@ (8006c4c <acc_detector_distance_processor_create+0x314>)
 8006ab8:	4961      	ldr	r1, [pc, #388]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 8006aba:	4605      	mov	r5, r0
 8006abc:	4798      	blx	r3
 8006abe:	4620      	mov	r0, r4
 8006ac0:	6025      	str	r5, [r4, #0]
 8006ac2:	f004 fa5d 	bl	800af80 <acc_rss_integration_mem_free>
 8006ac6:	ecbd 8b02 	vpop	{d8}
 8006aca:	462c      	mov	r4, r5
 8006acc:	4620      	mov	r0, r4
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad2:	f894 9019 	ldrb.w	r9, [r4, #25]
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	f8a4 6066 	strh.w	r6, [r4, #102]	@ 0x66
 8006adc:	4631      	mov	r1, r6
 8006ade:	f1b9 0f00 	cmp.w	r9, #0
 8006ae2:	d00b      	beq.n	8006afc <acc_detector_distance_processor_create+0x1c4>
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f001 ff2b 	bl	8008940 <acc_config_subsweep_num_points_get>
 8006aea:	3601      	adds	r6, #1
 8006aec:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8006af0:	b2f1      	uxtb	r1, r6
 8006af2:	4403      	add	r3, r0
 8006af4:	4589      	cmp	r9, r1
 8006af6:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
 8006afa:	d8f3      	bhi.n	8006ae4 <acc_detector_distance_processor_create+0x1ac>
 8006afc:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8006afe:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 8006b02:	e792      	b.n	8006a2a <acc_detector_distance_processor_create+0xf2>
 8006b04:	4d4c      	ldr	r5, [pc, #304]	@ (8006c38 <acc_detector_distance_processor_create+0x300>)
 8006b06:	4a52      	ldr	r2, [pc, #328]	@ (8006c50 <acc_detector_distance_processor_create+0x318>)
 8006b08:	692b      	ldr	r3, [r5, #16]
 8006b0a:	494d      	ldr	r1, [pc, #308]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	4798      	blx	r3
 8006b10:	e7cf      	b.n	8006ab2 <acc_detector_distance_processor_create+0x17a>
 8006b12:	edd4 7a02 	vldr	s15, [r4, #8]
 8006b16:	7923      	ldrb	r3, [r4, #4]
 8006b18:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8006b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b20:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8006b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
 8006b2e:	d917      	bls.n	8006b60 <acc_detector_distance_processor_create+0x228>
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d17a      	bne.n	8006c2a <acc_detector_distance_processor_create+0x2f2>
 8006b34:	7fa0      	ldrb	r0, [r4, #30]
 8006b36:	f004 f897 	bl	800ac68 <acc_detector_utils_get_fwhm>
 8006b3a:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8006b3c:	eeb0 8a40 	vmov.f32	s16, s0
 8006b40:	f7fe fe84 	bl	800584c <acc_detector_distance_alg_cfar_window_length>
 8006b44:	eeb0 0a48 	vmov.f32	s0, s16
 8006b48:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
 8006b4c:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8006b4e:	f7fe fea5 	bl	800589c <acc_detector_distance_alg_cfar_guard_half_length>
 8006b52:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 8006b56:	f8a4 0062 	strh.w	r0, [r4, #98]	@ 0x62
 8006b5a:	4403      	add	r3, r0
 8006b5c:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8006b60:	f898 3000 	ldrb.w	r3, [r8]
 8006b64:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d03b      	beq.n	8006be2 <acc_detector_distance_processor_create+0x2aa>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006b70:	b32b      	cbz	r3, 8006bbe <acc_detector_distance_processor_create+0x286>
 8006b72:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8006b74:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 8006b78:	3312      	adds	r3, #18
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	ecbd 8b02 	vpop	{d8}
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f101 001f 	add.w	r0, r1, #31
 8006b86:	084a      	lsrs	r2, r1, #1
 8006b88:	0940      	lsrs	r0, r0, #5
 8006b8a:	009d      	lsls	r5, r3, #2
 8006b8c:	0789      	lsls	r1, r1, #30
 8006b8e:	bf48      	it	mi
 8006b90:	3201      	addmi	r2, #1
 8006b92:	f8a4 3078 	strh.w	r3, [r4, #120]	@ 0x78
 8006b96:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8006b9a:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8006b9c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8006ba0:	2500      	movs	r5, #0
 8006ba2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	f8a4 0084 	strh.w	r0, [r4, #132]	@ 0x84
 8006bac:	6725      	str	r5, [r4, #112]	@ 0x70
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8006bb4:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 8006bb8:	7621      	strb	r1, [r4, #24]
 8006bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbe:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8006bc0:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0
 8006bc4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006bc8:	0040      	lsls	r0, r0, #1
 8006bca:	b280      	uxth	r0, r0
 8006bcc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006bd0:	250a      	movs	r5, #10
 8006bd2:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
 8006bd6:	f8a4 00b8 	strh.w	r0, [r4, #184]	@ 0xb8
 8006bda:	3228      	adds	r2, #40	@ 0x28
 8006bdc:	f8a4 50c4 	strh.w	r5, [r4, #196]	@ 0xc4
 8006be0:	e7c8      	b.n	8006b74 <acc_detector_distance_processor_create+0x23c>
 8006be2:	7963      	ldrb	r3, [r4, #5]
 8006be4:	f8a4 10a0 	strh.w	r1, [r4, #160]	@ 0xa0
 8006be8:	008a      	lsls	r2, r1, #2
 8006bea:	2000      	movs	r0, #0
 8006bec:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
 8006bf0:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
 8006bf4:	b1b3      	cbz	r3, 8006c24 <acc_detector_distance_processor_create+0x2ec>
 8006bf6:	7f63      	ldrb	r3, [r4, #29]
 8006bf8:	b29d      	uxth	r5, r3
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	18d0      	adds	r0, r2, r3
 8006c00:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8006c04:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 8006c08:	4402      	add	r2, r0
 8006c0a:	f8a4 50ac 	strh.w	r5, [r4, #172]	@ 0xac
 8006c0e:	f8a4 10d0 	strh.w	r1, [r4, #208]	@ 0xd0
 8006c12:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 8006c16:	e7a9      	b.n	8006b6c <acc_detector_distance_processor_create+0x234>
 8006c18:	4b07      	ldr	r3, [pc, #28]	@ (8006c38 <acc_detector_distance_processor_create+0x300>)
 8006c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8006c54 <acc_detector_distance_processor_create+0x31c>)
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	4908      	ldr	r1, [pc, #32]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 8006c20:	4798      	blx	r3
 8006c22:	e696      	b.n	8006952 <acc_detector_distance_processor_create+0x1a>
 8006c24:	2304      	movs	r3, #4
 8006c26:	2501      	movs	r5, #1
 8006c28:	e7e8      	b.n	8006bfc <acc_detector_distance_processor_create+0x2c4>
 8006c2a:	4d03      	ldr	r5, [pc, #12]	@ (8006c38 <acc_detector_distance_processor_create+0x300>)
 8006c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c58 <acc_detector_distance_processor_create+0x320>)
 8006c2e:	692b      	ldr	r3, [r5, #16]
 8006c30:	4903      	ldr	r1, [pc, #12]	@ (8006c40 <acc_detector_distance_processor_create+0x308>)
 8006c32:	2000      	movs	r0, #0
 8006c34:	4798      	blx	r3
 8006c36:	e73c      	b.n	8006ab2 <acc_detector_distance_processor_create+0x17a>
 8006c38:	200003f0 	.word	0x200003f0
 8006c3c:	08011ffc 	.word	0x08011ffc
 8006c40:	08011fc4 	.word	0x08011fc4
 8006c44:	080120a8 	.word	0x080120a8
 8006c48:	08012040 	.word	0x08012040
 8006c4c:	080120ec 	.word	0x080120ec
 8006c50:	08012078 	.word	0x08012078
 8006c54:	08012018 	.word	0x08012018
 8006c58:	080120d0 	.word	0x080120d0
 8006c5c:	0fa1afe1 	.word	0x0fa1afe1

08006c60 <acc_detector_distance_processor_destroy>:
 8006c60:	b118      	cbz	r0, 8006c6a <acc_detector_distance_processor_destroy+0xa>
 8006c62:	2200      	movs	r2, #0
 8006c64:	6002      	str	r2, [r0, #0]
 8006c66:	f004 b98b 	b.w	800af80 <acc_rss_integration_mem_free>
 8006c6a:	4770      	bx	lr

08006c6c <acc_detector_distance_processor_calibration_needed>:
 8006c6c:	b508      	push	{r3, lr}
 8006c6e:	b118      	cbz	r0, 8006c78 <acc_detector_distance_processor_calibration_needed+0xc>
 8006c70:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <acc_detector_distance_processor_calibration_needed+0x2c>)
 8006c72:	6802      	ldr	r2, [r0, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d007      	beq.n	8006c88 <acc_detector_distance_processor_calibration_needed+0x1c>
 8006c78:	4b08      	ldr	r3, [pc, #32]	@ (8006c9c <acc_detector_distance_processor_calibration_needed+0x30>)
 8006c7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ca0 <acc_detector_distance_processor_calibration_needed+0x34>)
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	4909      	ldr	r1, [pc, #36]	@ (8006ca4 <acc_detector_distance_processor_calibration_needed+0x38>)
 8006c80:	2000      	movs	r0, #0
 8006c82:	4798      	blx	r3
 8006c84:	2000      	movs	r0, #0
 8006c86:	bd08      	pop	{r3, pc}
 8006c88:	7900      	ldrb	r0, [r0, #4]
 8006c8a:	f1a0 0002 	sub.w	r0, r0, #2
 8006c8e:	fab0 f080 	clz	r0, r0
 8006c92:	0940      	lsrs	r0, r0, #5
 8006c94:	bd08      	pop	{r3, pc}
 8006c96:	bf00      	nop
 8006c98:	0fa1afe1 	.word	0x0fa1afe1
 8006c9c:	200003f0 	.word	0x200003f0
 8006ca0:	08011fe0 	.word	0x08011fe0
 8006ca4:	08011fc4 	.word	0x08011fc4

08006ca8 <acc_detector_distance_processor_calibrate>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	b092      	sub	sp, #72	@ 0x48
 8006cae:	b130      	cbz	r0, 8006cbe <acc_detector_distance_processor_calibrate+0x16>
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	4616      	mov	r6, r2
 8006cb4:	6801      	ldr	r1, [r0, #0]
 8006cb6:	4a96      	ldr	r2, [pc, #600]	@ (8006f10 <acc_detector_distance_processor_calibrate+0x268>)
 8006cb8:	4291      	cmp	r1, r2
 8006cba:	4604      	mov	r4, r0
 8006cbc:	d009      	beq.n	8006cd2 <acc_detector_distance_processor_calibrate+0x2a>
 8006cbe:	4b95      	ldr	r3, [pc, #596]	@ (8006f14 <acc_detector_distance_processor_calibrate+0x26c>)
 8006cc0:	4a95      	ldr	r2, [pc, #596]	@ (8006f18 <acc_detector_distance_processor_calibrate+0x270>)
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	4995      	ldr	r1, [pc, #596]	@ (8006f1c <acc_detector_distance_processor_calibrate+0x274>)
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	4798      	blx	r3
 8006cca:	2000      	movs	r0, #0
 8006ccc:	b012      	add	sp, #72	@ 0x48
 8006cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd2:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8006cd6:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8006cd8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8006cda:	441f      	add	r7, r3
 8006cdc:	441a      	add	r2, r3
 8006cde:	440b      	add	r3, r1
 8006ce0:	6747      	str	r7, [r0, #116]	@ 0x74
 8006ce2:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 8006ce6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ce8:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 8006cec:	f7ff fd24 	bl	8006738 <map_cal_result_data>
 8006cf0:	7e03      	ldrb	r3, [r0, #24]
 8006cf2:	7947      	ldrb	r7, [r0, #5]
 8006cf4:	b15b      	cbz	r3, 8006d0e <acc_detector_distance_processor_calibrate+0x66>
 8006cf6:	b90f      	cbnz	r7, 8006cfc <acc_detector_distance_processor_calibrate+0x54>
 8006cf8:	f880 706d 	strb.w	r7, [r0, #109]	@ 0x6d
 8006cfc:	7923      	ldrb	r3, [r4, #4]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d103      	bne.n	8006d0a <acc_detector_distance_processor_calibrate+0x62>
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7ff fd3e 	bl	8006784 <reset_calibration_state.part.0>
 8006d08:	7967      	ldrb	r7, [r4, #5]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	7623      	strb	r3, [r4, #24]
 8006d0e:	bb2f      	cbnz	r7, 8006d5c <acc_detector_distance_processor_calibrate+0xb4>
 8006d10:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8006d14:	bb13      	cbnz	r3, 8006d5c <acc_detector_distance_processor_calibrate+0xb4>
 8006d16:	2228      	movs	r2, #40	@ 0x28
 8006d18:	4639      	mov	r1, r7
 8006d1a:	a808      	add	r0, sp, #32
 8006d1c:	f009 fdd2 	bl	80108c4 <memset>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4629      	mov	r1, r5
 8006d24:	aa08      	add	r2, sp, #32
 8006d26:	4620      	mov	r0, r4
 8006d28:	9700      	str	r7, [sp, #0]
 8006d2a:	f7ff fd49 	bl	80067c0 <process_subsweeps>
 8006d2e:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	@ 0xc4
 8006d32:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	a908      	add	r1, sp, #32
 8006d3a:	f009 fe4e 	bl	80109da <memcpy>
 8006d3e:	7963      	ldrb	r3, [r4, #5]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f884 206d 	strb.w	r2, [r4, #109]	@ 0x6d
 8006d46:	b34b      	cbz	r3, 8006d9c <acc_detector_distance_processor_calibrate+0xf4>
 8006d48:	7923      	ldrb	r3, [r4, #4]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d026      	beq.n	8006d9c <acc_detector_distance_processor_calibrate+0xf4>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006d52:	2001      	movs	r0, #1
 8006d54:	7013      	strb	r3, [r2, #0]
 8006d56:	b012      	add	sp, #72	@ 0x48
 8006d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5c:	7923      	ldrb	r3, [r4, #4]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d021      	beq.n	8006da6 <acc_detector_distance_processor_calibrate+0xfe>
 8006d62:	2228      	movs	r2, #40	@ 0x28
 8006d64:	2100      	movs	r1, #0
 8006d66:	a808      	add	r0, sp, #32
 8006d68:	f009 fdac 	bl	80108c4 <memset>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	aa08      	add	r2, sp, #32
 8006d70:	4629      	mov	r1, r5
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7ff fd23 	bl	80067c0 <process_subsweeps>
 8006d7a:	f004 f915 	bl	800afa8 <acc_rss_integration_log_level>
 8006d7e:	2801      	cmp	r0, #1
 8006d80:	d905      	bls.n	8006d8e <acc_detector_distance_processor_calibrate+0xe6>
 8006d82:	4b64      	ldr	r3, [pc, #400]	@ (8006f14 <acc_detector_distance_processor_calibrate+0x26c>)
 8006d84:	4a66      	ldr	r2, [pc, #408]	@ (8006f20 <acc_detector_distance_processor_calibrate+0x278>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	4964      	ldr	r1, [pc, #400]	@ (8006f1c <acc_detector_distance_processor_calibrate+0x274>)
 8006d8a:	2002      	movs	r0, #2
 8006d8c:	4798      	blx	r3
 8006d8e:	7961      	ldrb	r1, [r4, #5]
 8006d90:	2900      	cmp	r1, #0
 8006d92:	d1d9      	bne.n	8006d48 <acc_detector_distance_processor_calibrate+0xa0>
 8006d94:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0d5      	beq.n	8006d48 <acc_detector_distance_processor_calibrate+0xa0>
 8006d9c:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1d5      	bne.n	8006d50 <acc_detector_distance_processor_calibrate+0xa8>
 8006da4:	e7d3      	b.n	8006d4e <acc_detector_distance_processor_calibrate+0xa6>
 8006da6:	f894 706c 	ldrb.w	r7, [r4, #108]	@ 0x6c
 8006daa:	2f00      	cmp	r7, #0
 8006dac:	d1d9      	bne.n	8006d62 <acc_detector_distance_processor_calibrate+0xba>
 8006dae:	2228      	movs	r2, #40	@ 0x28
 8006db0:	4639      	mov	r1, r7
 8006db2:	a808      	add	r0, sp, #32
 8006db4:	f04f 0801 	mov.w	r8, #1
 8006db8:	f009 fd84 	bl	80108c4 <memset>
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	aa08      	add	r2, sp, #32
 8006dc0:	f8cd 8000 	str.w	r8, [sp]
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7ff fcfa 	bl	80067c0 <process_subsweeps>
 8006dcc:	7961      	ldrb	r1, [r4, #5]
 8006dce:	e9cd 7704 	strd	r7, r7, [sp, #16]
 8006dd2:	e9cd 7706 	strd	r7, r7, [sp, #24]
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	f000 808c 	beq.w	8006ef4 <acc_detector_distance_processor_calibrate+0x24c>
 8006ddc:	f894 801d 	ldrb.w	r8, [r4, #29]
 8006de0:	fa1f f588 	uxth.w	r5, r8
 8006de4:	f1b8 0f00 	cmp.w	r8, #0
 8006de8:	f000 808f 	beq.w	8006f0a <acc_detector_distance_processor_calibrate+0x262>
 8006dec:	3d01      	subs	r5, #1
 8006dee:	f104 031a 	add.w	r3, r4, #26
 8006df2:	fa13 f585 	uxtah	r5, r3, r5
 8006df6:	f104 0219 	add.w	r2, r4, #25
 8006dfa:	a804      	add	r0, sp, #16
 8006dfc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006e00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e04:	42aa      	cmp	r2, r5
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f840 3b04 	str.w	r3, [r0], #4
 8006e0c:	d1f6      	bne.n	8006dfc <acc_detector_distance_processor_calibrate+0x154>
 8006e0e:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	d072      	beq.n	8006efa <acc_detector_distance_processor_calibrate+0x252>
 8006e14:	f8d4 70cc 	ldr.w	r7, [r4, #204]	@ 0xcc
 8006e18:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8006e1a:	f8d4 c0d8 	ldr.w	ip, [r4, #216]	@ 0xd8
 8006e1e:	f102 39ff 	add.w	r9, r2, #4294967295
 8006e22:	fa1f f989 	uxth.w	r9, r9
 8006e26:	1d3e      	adds	r6, r7, #4
 8006e28:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8006e32:	468e      	mov	lr, r1
 8006e34:	460d      	mov	r5, r1
 8006e36:	4660      	mov	r0, ip
 8006e38:	ed95 7a00 	vldr	s14, [r5]
 8006e3c:	edd3 7a00 	vldr	s15, [r3]
 8006e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e44:	ece3 7a01 	vstmia	r3!, {s15}
 8006e48:	ecf5 7a01 	vldmia	r5!, {s15}
 8006e4c:	ed90 7a00 	vldr	s14, [r0]
 8006e50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e54:	459a      	cmp	sl, r3
 8006e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e5a:	ece0 7a01 	vstmia	r0!, {s15}
 8006e5e:	d1eb      	bne.n	8006e38 <acc_detector_distance_processor_calibrate+0x190>
 8006e60:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d939      	bls.n	8006edc <acc_detector_distance_processor_calibrate+0x234>
 8006e68:	1e58      	subs	r0, r3, #1
 8006e6a:	b280      	uxth	r0, r0
 8006e6c:	ee07 0a90 	vmov	s15, r0
 8006e70:	ee07 3a10 	vmov	s14, r3
 8006e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e78:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006e7c:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8006e80:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 8006e84:	1d03      	adds	r3, r0, #4
 8006e86:	4499      	add	r9, r3
 8006e88:	4603      	mov	r3, r0
 8006e8a:	edd7 7a00 	vldr	s15, [r7]
 8006e8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006e92:	4637      	mov	r7, r6
 8006e94:	3604      	adds	r6, #4
 8006e96:	eca3 7a01 	vstmia	r3!, {s14}
 8006e9a:	ecbc 6a01 	vldmia	ip!, {s12}
 8006e9e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006ea2:	4599      	cmp	r9, r3
 8006ea4:	ee27 7a07 	vmul.f32	s14, s14, s14
 8006ea8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006eac:	eef0 7ae7 	vabs.f32	s15, s15
 8006eb0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006eb4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8006eb8:	ecae 7a01 	vstmia	lr!, {s14}
 8006ebc:	d1e5      	bne.n	8006e8a <acc_detector_distance_processor_calibrate+0x1e2>
 8006ebe:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 8006ec2:	f8cd 8000 	str.w	r8, [sp]
 8006ec6:	8f66      	ldrh	r6, [r4, #58]	@ 0x3a
 8006ec8:	9303      	str	r3, [sp, #12]
 8006eca:	f104 053c 	add.w	r5, r4, #60	@ 0x3c
 8006ece:	ab04      	add	r3, sp, #16
 8006ed0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006ed4:	f7fe fd42 	bl	800595c <acc_detector_distance_alg_calculate_threshold_recording>
 8006ed8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006edc:	7961      	ldrb	r1, [r4, #5]
 8006ede:	8aa2      	ldrh	r2, [r4, #20]
 8006ee0:	1c58      	adds	r0, r3, #1
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	fab3 f383 	clz	r3, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8006eee:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 8006ef2:	e74d      	b.n	8006d90 <acc_detector_distance_processor_calibrate+0xe8>
 8006ef4:	6833      	ldr	r3, [r6, #0]
 8006ef6:	9304      	str	r3, [sp, #16]
 8006ef8:	e789      	b.n	8006e0e <acc_detector_distance_processor_calibrate+0x166>
 8006efa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d9ed      	bls.n	8006ede <acc_detector_distance_processor_calibrate+0x236>
 8006f02:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8006f06:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8006f08:	e7d9      	b.n	8006ebe <acc_detector_distance_processor_calibrate+0x216>
 8006f0a:	46a8      	mov	r8, r5
 8006f0c:	e77f      	b.n	8006e0e <acc_detector_distance_processor_calibrate+0x166>
 8006f0e:	bf00      	nop
 8006f10:	0fa1afe1 	.word	0x0fa1afe1
 8006f14:	200003f0 	.word	0x200003f0
 8006f18:	08011fe0 	.word	0x08011fe0
 8006f1c:	08011fc4 	.word	0x08011fc4
 8006f20:	08012110 	.word	0x08012110

08006f24 <acc_detector_distance_processor_process>:
 8006f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f28:	ed2d 8b0a 	vpush	{d8-d12}
 8006f2c:	b09b      	sub	sp, #108	@ 0x6c
 8006f2e:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	@ 0xb8
 8006f32:	9207      	str	r2, [sp, #28]
 8006f34:	b128      	cbz	r0, 8006f42 <acc_detector_distance_processor_process+0x1e>
 8006f36:	6802      	ldr	r2, [r0, #0]
 8006f38:	461f      	mov	r7, r3
 8006f3a:	4ba4      	ldr	r3, [pc, #656]	@ (80071cc <acc_detector_distance_processor_process+0x2a8>)
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	4604      	mov	r4, r0
 8006f40:	d00b      	beq.n	8006f5a <acc_detector_distance_processor_process+0x36>
 8006f42:	4ba3      	ldr	r3, [pc, #652]	@ (80071d0 <acc_detector_distance_processor_process+0x2ac>)
 8006f44:	4aa3      	ldr	r2, [pc, #652]	@ (80071d4 <acc_detector_distance_processor_process+0x2b0>)
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	49a3      	ldr	r1, [pc, #652]	@ (80071d8 <acc_detector_distance_processor_process+0x2b4>)
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	4798      	blx	r3
 8006f4e:	2000      	movs	r0, #0
 8006f50:	b01b      	add	sp, #108	@ 0x6c
 8006f52:	ecbd 8b0a 	vpop	{d8-d12}
 8006f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 8006f5c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006f5e:	f8d0 5088 	ldr.w	r5, [r0, #136]	@ 0x88
 8006f62:	4689      	mov	r9, r1
 8006f64:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8006f66:	440b      	add	r3, r1
 8006f68:	440a      	add	r2, r1
 8006f6a:	440d      	add	r5, r1
 8006f6c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8006f70:	6742      	str	r2, [r0, #116]	@ 0x74
 8006f72:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8006f74:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
 8006f78:	eeb0 9a40 	vmov.f32	s18, s0
 8006f7c:	f7ff fbdc 	bl	8006738 <map_cal_result_data>
 8006f80:	2100      	movs	r1, #0
 8006f82:	460e      	mov	r6, r1
 8006f84:	2228      	movs	r2, #40	@ 0x28
 8006f86:	a810      	add	r0, sp, #64	@ 0x40
 8006f88:	f009 fc9c 	bl	80108c4 <memset>
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	aa10      	add	r2, sp, #64	@ 0x40
 8006f90:	9600      	str	r6, [sp, #0]
 8006f92:	4633      	mov	r3, r6
 8006f94:	4620      	mov	r0, r4
 8006f96:	f7ff fc13 	bl	80067c0 <process_subsweeps>
 8006f9a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8006f9c:	f8ad 602e 	strh.w	r6, [sp, #46]	@ 0x2e
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	f000 811d 	beq.w	80071e0 <acc_detector_distance_processor_process+0x2bc>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	eddf 9a8c 	vldr	s19, [pc, #560]	@ 80071dc <acc_detector_distance_processor_process+0x2b8>
 8006fac:	9308      	str	r3, [sp, #32]
 8006fae:	4635      	mov	r5, r6
 8006fb0:	7923      	ldrb	r3, [r4, #4]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	f200 82cc 	bhi.w	8007550 <acc_detector_distance_processor_process+0x62c>
 8006fb8:	e8df f003 	tbb	[pc, r3]
 8006fbc:	02257bc9 	.word	0x02257bc9
 8006fc0:	7963      	ldrb	r3, [r4, #5]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80ef 	beq.w	80071a6 <acc_detector_distance_processor_process+0x282>
 8006fc8:	f894 c01d 	ldrb.w	ip, [r4, #29]
 8006fcc:	eeb0 0a69 	vmov.f32	s0, s19
 8006fd0:	f1bc 0f00 	cmp.w	ip, #0
 8006fd4:	f000 80e9 	beq.w	80071aa <acc_detector_distance_processor_process+0x286>
 8006fd8:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f104 0e19 	add.w	lr, r4, #25
 8006fe2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8006fe6:	42a8      	cmp	r0, r5
 8006fe8:	d808      	bhi.n	8006ffc <acc_detector_distance_processor_process+0xd8>
 8006fea:	8810      	ldrh	r0, [r2, #0]
 8006fec:	42a8      	cmp	r0, r5
 8006fee:	d905      	bls.n	8006ffc <acc_detector_distance_processor_process+0xd8>
 8006ff0:	f81e 0003 	ldrb.w	r0, [lr, r3]
 8006ff4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006ff8:	ed90 0a00 	vldr	s0, [r0]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	b298      	uxth	r0, r3
 8007000:	4584      	cmp	ip, r0
 8007002:	d8ee      	bhi.n	8006fe2 <acc_detector_distance_processor_process+0xbe>
 8007004:	e0d1      	b.n	80071aa <acc_detector_distance_processor_process+0x286>
 8007006:	ab0d      	add	r3, sp, #52	@ 0x34
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	7fa2      	ldrb	r2, [r4, #30]
 800700c:	9907      	ldr	r1, [sp, #28]
 800700e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007010:	4640      	mov	r0, r8
 8007012:	f001 ffef 	bl	8008ff4 <acc_processing_get_temperature_adjustment_factors>
 8007016:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800701a:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800701c:	ed9d 0a0c 	vldr	s0, [sp, #48]	@ 0x30
 8007020:	7960      	ldrb	r0, [r4, #5]
 8007022:	ed9d 6a0d 	vldr	s12, [sp, #52]	@ 0x34
 8007026:	b2b3      	uxth	r3, r6
 8007028:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800702c:	edd1 7a00 	vldr	s15, [r1]
 8007030:	442a      	add	r2, r5
 8007032:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007036:	b292      	uxth	r2, r2
 8007038:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800703c:	2800      	cmp	r0, #0
 800703e:	f040 808c 	bne.w	800715a <acc_detector_distance_processor_process+0x236>
 8007042:	edd7 7a00 	vldr	s15, [r7]
 8007046:	f894 901d 	ldrb.w	r9, [r4, #29]
 800704a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800704e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007052:	f1b9 0f00 	cmp.w	r9, #0
 8007056:	f000 8224 	beq.w	80074a2 <acc_detector_distance_processor_process+0x57e>
 800705a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800705e:	eeb0 7a69 	vmov.f32	s14, s19
 8007062:	f04f 0e00 	mov.w	lr, #0
 8007066:	f831 bb02 	ldrh.w	fp, [r1], #2
 800706a:	f10e 0e01 	add.w	lr, lr, #1
 800706e:	455a      	cmp	r2, fp
 8007070:	fa1f fa8e 	uxth.w	sl, lr
 8007074:	d305      	bcc.n	8007082 <acc_detector_distance_processor_process+0x15e>
 8007076:	f8b1 b000 	ldrh.w	fp, [r1]
 800707a:	4593      	cmp	fp, r2
 800707c:	bf88      	it	hi
 800707e:	ed90 7a00 	vldrhi	s14, [r0]
 8007082:	45d1      	cmp	r9, sl
 8007084:	f100 0004 	add.w	r0, r0, #4
 8007088:	d8ed      	bhi.n	8007066 <acc_detector_distance_processor_process+0x142>
 800708a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800708e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007092:	ee66 6a26 	vmul.f32	s13, s12, s13
 8007096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800709a:	ed94 6a17 	vldr	s12, [r4, #92]	@ 0x5c
 800709e:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80070a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80070a4:	eef1 7ac7 	vsqrt.f32	s15, s14
 80070a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80070ac:	ee77 7a80 	vadd.f32	s15, s15, s0
 80070b0:	e024      	b.n	80070fc <acc_detector_distance_processor_process+0x1d8>
 80070b2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80070b4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80070b6:	fb13 f305 	smulbb	r3, r3, r5
 80070ba:	fa12 f383 	uxtah	r3, r2, r3
 80070be:	ee08 3a10 	vmov	s16, r3
 80070c2:	2001      	movs	r0, #1
 80070c4:	f001 ff94 	bl	8008ff0 <acc_processing_points_to_meter>
 80070c8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80070cc:	ab0e      	add	r3, sp, #56	@ 0x38
 80070ce:	ee28 8a00 	vmul.f32	s16, s16, s0
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	7962      	ldrb	r2, [r4, #5]
 80070d6:	edd4 aa04 	vldr	s21, [r4, #16]
 80070da:	eeb0 0a48 	vmov.f32	s0, s16
 80070de:	ab0f      	add	r3, sp, #60	@ 0x3c
 80070e0:	4639      	mov	r1, r7
 80070e2:	4620      	mov	r0, r4
 80070e4:	f7ff face 	bl	8006684 <get_radar_equation_parameters_for_distance>
 80070e8:	9008      	str	r0, [sp, #32]
 80070ea:	2800      	cmp	r0, #0
 80070ec:	f040 8130 	bne.w	8007350 <acc_detector_distance_processor_process+0x42c>
 80070f0:	eef0 7a69 	vmov.f32	s15, s19
 80070f4:	b2b3      	uxth	r3, r6
 80070f6:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80070f8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80070fc:	f8d4 e074 	ldr.w	lr, [r4, #116]	@ 0x74
 8007100:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8007104:	44f4      	add	ip, lr
 8007106:	ed9c 7a00 	vldr	s14, [ip]
 800710a:	095b      	lsrs	r3, r3, #5
 800710c:	f005 0c1f 	and.w	ip, r5, #31
 8007110:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007118:	2501      	movs	r5, #1
 800711a:	fa05 f50c 	lsl.w	r5, r5, ip
 800711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007122:	bfcc      	ite	gt
 8007124:	4305      	orrgt	r5, r0
 8007126:	ea20 0505 	bicle.w	r5, r0, r5
 800712a:	3601      	adds	r6, #1
 800712c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8007130:	b2b5      	uxth	r5, r6
 8007132:	42a9      	cmp	r1, r5
 8007134:	f63f af3c 	bhi.w	8006fb0 <acc_detector_distance_processor_process+0x8c>
 8007138:	4613      	mov	r3, r2
 800713a:	9a08      	ldr	r2, [sp, #32]
 800713c:	4670      	mov	r0, lr
 800713e:	2a00      	cmp	r2, #0
 8007140:	d151      	bne.n	80071e6 <acc_detector_distance_processor_process+0x2c2>
 8007142:	2001      	movs	r0, #1
 8007144:	b01b      	add	sp, #108	@ 0x6c
 8007146:	ecbd 8b0a 	vpop	{d8-d12}
 800714a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714e:	b2b3      	uxth	r3, r6
 8007150:	edd4 7a03 	vldr	s15, [r4, #12]
 8007154:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8007158:	e7d0      	b.n	80070fc <acc_detector_distance_processor_process+0x1d8>
 800715a:	f894 901d 	ldrb.w	r9, [r4, #29]
 800715e:	f1b9 0f00 	cmp.w	r9, #0
 8007162:	f000 81a1 	beq.w	80074a8 <acc_detector_distance_processor_process+0x584>
 8007166:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800716a:	eef0 7a69 	vmov.f32	s15, s19
 800716e:	468e      	mov	lr, r1
 8007170:	2000      	movs	r0, #0
 8007172:	f104 0b19 	add.w	fp, r4, #25
 8007176:	f83e ab02 	ldrh.w	sl, [lr], #2
 800717a:	4552      	cmp	r2, sl
 800717c:	d309      	bcc.n	8007192 <acc_detector_distance_processor_process+0x26e>
 800717e:	f8be a000 	ldrh.w	sl, [lr]
 8007182:	4592      	cmp	sl, r2
 8007184:	d905      	bls.n	8007192 <acc_detector_distance_processor_process+0x26e>
 8007186:	f81b a000 	ldrb.w	sl, [fp, r0]
 800718a:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
 800718e:	edda 7a00 	vldr	s15, [sl]
 8007192:	3001      	adds	r0, #1
 8007194:	fa1f fa80 	uxth.w	sl, r0
 8007198:	45d1      	cmp	r9, sl
 800719a:	d8ec      	bhi.n	8007176 <acc_detector_distance_processor_process+0x252>
 800719c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80071a0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80071a4:	e75b      	b.n	800705e <acc_detector_distance_processor_process+0x13a>
 80071a6:	ed97 0a00 	vldr	s0, [r7]
 80071aa:	9500      	str	r5, [sp, #0]
 80071ac:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 80071b0:	edd4 0a17 	vldr	s1, [r4, #92]	@ 0x5c
 80071b4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 80071b8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80071ba:	f7fe fb05 	bl	80057c8 <acc_detector_distance_alg_calculate_cfar>
 80071be:	b2b3      	uxth	r3, r6
 80071c0:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80071c2:	eef0 7a40 	vmov.f32	s15, s0
 80071c6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80071ca:	e797      	b.n	80070fc <acc_detector_distance_processor_process+0x1d8>
 80071cc:	0fa1afe1 	.word	0x0fa1afe1
 80071d0:	200003f0 	.word	0x200003f0
 80071d4:	08011fe0 	.word	0x08011fe0
 80071d8:	08011fc4 	.word	0x08011fc4
 80071dc:	00000000 	.word	0x00000000
 80071e0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80071e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80071e6:	f8b4 5090 	ldrh.w	r5, [r4, #144]	@ 0x90
 80071ea:	9500      	str	r5, [sp, #0]
 80071ec:	f10d 022e 	add.w	r2, sp, #46	@ 0x2e
 80071f0:	9201      	str	r2, [sp, #4]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80071f8:	f7fe fcbe 	bl	8005b78 <acc_detector_distance_alg_find_peaks>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	f000 810e 	beq.w	800741e <acc_detector_distance_processor_process+0x4fa>
 8007202:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8007204:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800720c:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8007210:	8d26      	ldrh	r6, [r4, #40]	@ 0x28
 8007212:	f8d4 9074 	ldr.w	r9, [r4, #116]	@ 0x74
 8007216:	f9b4 a034 	ldrsh.w	sl, [r4, #52]	@ 0x34
 800721a:	9108      	str	r1, [sp, #32]
 800721c:	42ab      	cmp	r3, r5
 800721e:	f04f 0001 	mov.w	r0, #1
 8007222:	bf3c      	itt	cc
 8007224:	461d      	movcc	r5, r3
 8007226:	f8ad 302e 	strhcc.w	r3, [sp, #46]	@ 0x2e
 800722a:	9207      	str	r2, [sp, #28]
 800722c:	f001 fee0 	bl	8008ff0 <acc_processing_points_to_meter>
 8007230:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8007232:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8007236:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800723a:	9601      	str	r6, [sp, #4]
 800723c:	881e      	ldrh	r6, [r3, #0]
 800723e:	9602      	str	r6, [sp, #8]
 8007240:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 8007244:	462b      	mov	r3, r5
 8007246:	e9cd ce03 	strd	ip, lr, [sp, #12]
 800724a:	f8cd a000 	str.w	sl, [sp]
 800724e:	4648      	mov	r0, r9
 8007250:	f7fe fbfe 	bl	8005a50 <acc_detector_distance_alg_interpolate_peaks>
 8007254:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8007258:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800725a:	8113      	strh	r3, [r2, #8]
 800725c:	8213      	strh	r3, [r2, #16]
 800725e:	8313      	strh	r3, [r2, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d036      	beq.n	80072d2 <acc_detector_distance_processor_process+0x3ae>
 8007264:	4613      	mov	r3, r2
 8007266:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800726a:	6852      	ldr	r2, [r2, #4]
 800726c:	ed5f 9a25 	vldr	s19, [pc, #-148]	@ 80071dc <acc_detector_distance_processor_process+0x2b8>
 8007270:	f8cd a01c 	str.w	sl, [sp, #28]
 8007274:	2600      	movs	r6, #0
 8007276:	eeb3 aa04 	vmov.f32	s20, #52	@ 0x41a00000  20.0
 800727a:	4699      	mov	r9, r3
 800727c:	46ba      	mov	sl, r7
 800727e:	b2b5      	uxth	r5, r6
 8007280:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007284:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8007288:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800728c:	ed92 8a00 	vldr	s16, [r2]
 8007290:	7962      	ldrb	r2, [r4, #5]
 8007292:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8007296:	edd3 8a00 	vldr	s17, [r3]
 800729a:	9b07      	ldr	r3, [sp, #28]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	eeb0 0a48 	vmov.f32	s0, s16
 80072a2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80072a4:	4651      	mov	r1, sl
 80072a6:	4620      	mov	r0, r4
 80072a8:	00ad      	lsls	r5, r5, #2
 80072aa:	f7ff f9eb 	bl	8006684 <get_radar_equation_parameters_for_distance>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f040 80bb 	bne.w	800742a <acc_detector_distance_processor_process+0x506>
 80072b4:	7fa0      	ldrb	r0, [r4, #30]
 80072b6:	4641      	mov	r1, r8
 80072b8:	eeb0 0a49 	vmov.f32	s0, s18
 80072bc:	f7fe fd84 	bl	8005dc8 <acc_detector_distance_alg_get_loopback_peak_offset>
 80072c0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	441d      	add	r5, r3
 80072c6:	edd5 7a00 	vldr	s15, [r5]
 80072ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80072ce:	ed85 0a00 	vstr	s0, [r5]
 80072d2:	7923      	ldrb	r3, [r4, #4]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	f000 8136 	beq.w	8007546 <acc_detector_distance_processor_process+0x622>
 80072da:	2100      	movs	r1, #0
 80072dc:	4608      	mov	r0, r1
 80072de:	460a      	mov	r2, r1
 80072e0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80072e2:	1a5b      	subs	r3, r3, r1
 80072e4:	2b05      	cmp	r3, #5
 80072e6:	f240 80e4 	bls.w	80074b2 <acc_detector_distance_processor_process+0x58e>
 80072ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80072ee:	0940      	lsrs	r0, r0, #5
 80072f0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80072f4:	f002 031f 	and.w	r3, r2, #31
 80072f8:	40d9      	lsrs	r1, r3
 80072fa:	f011 0101 	ands.w	r1, r1, #1
 80072fe:	d024      	beq.n	800734a <acc_detector_distance_processor_process+0x426>
 8007300:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007302:	ed1f 7a4a 	vldr	s14, [pc, #-296]	@ 80071dc <acc_detector_distance_processor_process+0x2b8>
 8007306:	f103 000c 	add.w	r0, r3, #12
 800730a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800730e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8007312:	0094      	lsls	r4, r2, #2
 8007314:	ecf1 7a01 	vldmia	r1!, {s15}
 8007318:	4288      	cmp	r0, r1
 800731a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800731e:	d1f9      	bne.n	8007314 <acc_detector_distance_processor_process+0x3f0>
 8007320:	3203      	adds	r2, #3
 8007322:	f103 0118 	add.w	r1, r3, #24
 8007326:	ed5f 7a53 	vldr	s15, [pc, #-332]	@ 80071dc <acc_detector_distance_processor_process+0x2b8>
 800732a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800732e:	190a      	adds	r2, r1, r4
 8007330:	ecf3 6a01 	vldmia	r3!, {s13}
 8007334:	429a      	cmp	r2, r3
 8007336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733a:	d1f9      	bne.n	8007330 <acc_detector_distance_processor_process+0x40c>
 800733c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007344:	bfac      	ite	ge
 8007346:	2101      	movge	r1, #1
 8007348:	2100      	movlt	r1, #0
 800734a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800734c:	7699      	strb	r1, [r3, #26]
 800734e:	e6f8      	b.n	8007142 <acc_detector_distance_processor_process+0x21e>
 8007350:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8007352:	79a0      	ldrb	r0, [r4, #6]
 8007354:	f894 901e 	ldrb.w	r9, [r4, #30]
 8007358:	9109      	str	r1, [sp, #36]	@ 0x24
 800735a:	f001 f823 	bl	80083a4 <acc_detector_distance_utils_reflector_shape_exponent_get>
 800735e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007360:	ed9d ba0e 	vldr	s22, [sp, #56]	@ 0x38
 8007364:	4648      	mov	r0, r9
 8007366:	eeb0 aa40 	vmov.f32	s20, s0
 800736a:	f7fe ff09 	bl	8006180 <acc_detector_distance_alg_calc_processing_gain>
 800736e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007376:	f77f aebb 	ble.w	80070f0 <acc_detector_distance_processor_process+0x1cc>
 800737a:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800737e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007382:	f77f aeb5 	ble.w	80070f0 <acc_detector_distance_processor_process+0x1cc>
 8007386:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800738a:	f007 fbf7 	bl	800eb7c <fmaxf>
 800738e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007392:	eef0 8a40 	vmov.f32	s17, s0
 8007396:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 800739a:	f007 fbef 	bl	800eb7c <fmaxf>
 800739e:	eeb0 ca40 	vmov.f32	s24, s0
 80073a2:	eeb0 0a68 	vmov.f32	s0, s17
 80073a6:	f007 f9ed 	bl	800e784 <log10f>
 80073aa:	eef0 8a40 	vmov.f32	s17, s0
 80073ae:	eeb0 0a4b 	vmov.f32	s0, s22
 80073b2:	f007 f9e7 	bl	800e784 <log10f>
 80073b6:	4648      	mov	r0, r9
 80073b8:	eeb0 ba40 	vmov.f32	s22, s0
 80073bc:	f003 fc64 	bl	800ac88 <acc_detector_utils_radar_loop_gain_per_hwaas>
 80073c0:	eef0 ba40 	vmov.f32	s23, s0
 80073c4:	eeb0 0a4c 	vmov.f32	s0, s24
 80073c8:	f007 f9dc 	bl	800e784 <log10f>
 80073cc:	eef0 6a40 	vmov.f32	s13, s0
 80073d0:	eeb0 0a48 	vmov.f32	s0, s16
 80073d4:	eeb0 8a66 	vmov.f32	s16, s13
 80073d8:	f007 f9d4 	bl	800e784 <log10f>
 80073dc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80073e0:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80073e4:	ee68 6a06 	vmul.f32	s13, s16, s12
 80073e8:	ee68 8a86 	vmul.f32	s17, s17, s12
 80073ec:	ee2b ba20 	vmul.f32	s22, s22, s1
 80073f0:	ee36 8aab 	vadd.f32	s16, s13, s23
 80073f4:	ee78 8a8b 	vadd.f32	s17, s17, s22
 80073f8:	ee6a 6a06 	vmul.f32	s13, s20, s12
 80073fc:	ee78 7a88 	vadd.f32	s15, s17, s16
 8007400:	ee26 7a80 	vmul.f32	s14, s13, s0
 8007404:	eeb0 0a46 	vmov.f32	s0, s12
 8007408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800740c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8007410:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8007414:	f007 f9e4 	bl	800e7e0 <powf>
 8007418:	eef0 7a40 	vmov.f32	s15, s0
 800741c:	e66a      	b.n	80070f4 <acc_detector_distance_processor_process+0x1d0>
 800741e:	4b54      	ldr	r3, [pc, #336]	@ (8007570 <acc_detector_distance_processor_process+0x64c>)
 8007420:	4a54      	ldr	r2, [pc, #336]	@ (8007574 <acc_detector_distance_processor_process+0x650>)
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	4954      	ldr	r1, [pc, #336]	@ (8007578 <acc_detector_distance_processor_process+0x654>)
 8007426:	4798      	blx	r3
 8007428:	e68b      	b.n	8007142 <acc_detector_distance_processor_process+0x21e>
 800742a:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800742c:	79a0      	ldrb	r0, [r4, #6]
 800742e:	f894 b01e 	ldrb.w	fp, [r4, #30]
 8007432:	9108      	str	r1, [sp, #32]
 8007434:	f000 ffb6 	bl	80083a4 <acc_detector_distance_utils_reflector_shape_exponent_get>
 8007438:	9908      	ldr	r1, [sp, #32]
 800743a:	ed9d ba0e 	vldr	s22, [sp, #56]	@ 0x38
 800743e:	4658      	mov	r0, fp
 8007440:	eef0 aa40 	vmov.f32	s21, s0
 8007444:	f7fe fe9c 	bl	8006180 <acc_detector_distance_alg_calc_processing_gain>
 8007448:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007450:	dd0b      	ble.n	800746a <acc_detector_distance_processor_process+0x546>
 8007452:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745a:	dd06      	ble.n	800746a <acc_detector_distance_processor_process+0x546>
 800745c:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007468:	dc25      	bgt.n	80074b6 <acc_detector_distance_processor_process+0x592>
 800746a:	eeb0 0a69 	vmov.f32	s0, s19
 800746e:	442f      	add	r7, r5
 8007470:	ed87 0a00 	vstr	s0, [r7]
 8007474:	4641      	mov	r1, r8
 8007476:	7fa0      	ldrb	r0, [r4, #30]
 8007478:	eeb0 0a49 	vmov.f32	s0, s18
 800747c:	f7fe fca4 	bl	8005dc8 <acc_detector_distance_alg_get_loopback_peak_offset>
 8007480:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007484:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8007488:	4415      	add	r5, r2
 800748a:	edd5 7a00 	vldr	s15, [r5]
 800748e:	3601      	adds	r6, #1
 8007490:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007494:	b2b3      	uxth	r3, r6
 8007496:	4299      	cmp	r1, r3
 8007498:	ed85 0a00 	vstr	s0, [r5]
 800749c:	f63f aeef 	bhi.w	800727e <acc_detector_distance_processor_process+0x35a>
 80074a0:	e717      	b.n	80072d2 <acc_detector_distance_processor_process+0x3ae>
 80074a2:	eeb0 7a69 	vmov.f32	s14, s19
 80074a6:	e5f2      	b.n	800708e <acc_detector_distance_processor_process+0x16a>
 80074a8:	eeb0 7a69 	vmov.f32	s14, s19
 80074ac:	eef0 6a69 	vmov.f32	s13, s19
 80074b0:	e5ed      	b.n	800708e <acc_detector_distance_processor_process+0x16a>
 80074b2:	2100      	movs	r1, #0
 80074b4:	e749      	b.n	800734a <acc_detector_distance_processor_process+0x426>
 80074b6:	f007 fb61 	bl	800eb7c <fmaxf>
 80074ba:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80074be:	eef0 ba40 	vmov.f32	s23, s0
 80074c2:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 80074c6:	f007 fb59 	bl	800eb7c <fmaxf>
 80074ca:	eef0 ca40 	vmov.f32	s25, s0
 80074ce:	eeb0 0a6b 	vmov.f32	s0, s23
 80074d2:	f007 f957 	bl	800e784 <log10f>
 80074d6:	eef0 ba40 	vmov.f32	s23, s0
 80074da:	eeb0 0a68 	vmov.f32	s0, s17
 80074de:	f007 f951 	bl	800e784 <log10f>
 80074e2:	eef0 8a40 	vmov.f32	s17, s0
 80074e6:	eeb0 0a4b 	vmov.f32	s0, s22
 80074ea:	f007 f94b 	bl	800e784 <log10f>
 80074ee:	4658      	mov	r0, fp
 80074f0:	eeb0 ba40 	vmov.f32	s22, s0
 80074f4:	f003 fbc8 	bl	800ac88 <acc_detector_utils_radar_loop_gain_per_hwaas>
 80074f8:	eeb0 ca40 	vmov.f32	s24, s0
 80074fc:	eeb0 0a6c 	vmov.f32	s0, s25
 8007500:	f007 f940 	bl	800e784 <log10f>
 8007504:	eef0 7a40 	vmov.f32	s15, s0
 8007508:	eeb0 0a48 	vmov.f32	s0, s16
 800750c:	eeb0 8a67 	vmov.f32	s16, s15
 8007510:	f007 f938 	bl	800e784 <log10f>
 8007514:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8007518:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800751c:	ee2b ba0a 	vmul.f32	s22, s22, s20
 8007520:	ee28 8a26 	vmul.f32	s16, s16, s13
 8007524:	ee77 7acb 	vsub.f32	s15, s15, s22
 8007528:	ee38 7a0c 	vadd.f32	s14, s16, s24
 800752c:	ee6a aaa6 	vmul.f32	s21, s21, s13
 8007530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007534:	ee6a aa80 	vmul.f32	s21, s21, s0
 8007538:	ee2b 0aa6 	vmul.f32	s0, s23, s13
 800753c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8007540:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007544:	e793      	b.n	800746e <acc_detector_distance_processor_process+0x54a>
 8007546:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
 800754a:	4610      	mov	r0, r2
 800754c:	0051      	lsls	r1, r2, #1
 800754e:	e6c7      	b.n	80072e0 <acc_detector_distance_processor_process+0x3bc>
 8007550:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <acc_detector_distance_processor_process+0x64c>)
 8007552:	4a0a      	ldr	r2, [pc, #40]	@ (800757c <acc_detector_distance_processor_process+0x658>)
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	4908      	ldr	r1, [pc, #32]	@ (8007578 <acc_detector_distance_processor_process+0x654>)
 8007558:	2000      	movs	r0, #0
 800755a:	4798      	blx	r3
 800755c:	b2b3      	uxth	r3, r6
 800755e:	2200      	movs	r2, #0
 8007560:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8007562:	9208      	str	r2, [sp, #32]
 8007564:	eef0 7a69 	vmov.f32	s15, s19
 8007568:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800756c:	e5c6      	b.n	80070fc <acc_detector_distance_processor_process+0x1d8>
 800756e:	bf00      	nop
 8007570:	200003f0 	.word	0x200003f0
 8007574:	08012128 	.word	0x08012128
 8007578:	08011fc4 	.word	0x08011fc4
 800757c:	080120d0 	.word	0x080120d0

08007580 <acc_detector_distance_processor_measurement_type_get>:
 8007580:	b508      	push	{r3, lr}
 8007582:	b118      	cbz	r0, 800758c <acc_detector_distance_processor_measurement_type_get+0xc>
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <acc_detector_distance_processor_measurement_type_get+0x20>)
 8007586:	6802      	ldr	r2, [r0, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d007      	beq.n	800759c <acc_detector_distance_processor_measurement_type_get+0x1c>
 800758c:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <acc_detector_distance_processor_measurement_type_get+0x24>)
 800758e:	4a06      	ldr	r2, [pc, #24]	@ (80075a8 <acc_detector_distance_processor_measurement_type_get+0x28>)
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	4906      	ldr	r1, [pc, #24]	@ (80075ac <acc_detector_distance_processor_measurement_type_get+0x2c>)
 8007594:	2000      	movs	r0, #0
 8007596:	4798      	blx	r3
 8007598:	2000      	movs	r0, #0
 800759a:	bd08      	pop	{r3, pc}
 800759c:	7940      	ldrb	r0, [r0, #5]
 800759e:	bd08      	pop	{r3, pc}
 80075a0:	0fa1afe1 	.word	0x0fa1afe1
 80075a4:	200003f0 	.word	0x200003f0
 80075a8:	08011fe0 	.word	0x08011fe0
 80075ac:	08011fc4 	.word	0x08011fc4

080075b0 <acc_detector_distance_processor_profile_get>:
 80075b0:	b508      	push	{r3, lr}
 80075b2:	b118      	cbz	r0, 80075bc <acc_detector_distance_processor_profile_get+0xc>
 80075b4:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <acc_detector_distance_processor_profile_get+0x20>)
 80075b6:	6802      	ldr	r2, [r0, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d007      	beq.n	80075cc <acc_detector_distance_processor_profile_get+0x1c>
 80075bc:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <acc_detector_distance_processor_profile_get+0x24>)
 80075be:	4a06      	ldr	r2, [pc, #24]	@ (80075d8 <acc_detector_distance_processor_profile_get+0x28>)
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	4906      	ldr	r1, [pc, #24]	@ (80075dc <acc_detector_distance_processor_profile_get+0x2c>)
 80075c4:	2000      	movs	r0, #0
 80075c6:	4798      	blx	r3
 80075c8:	2001      	movs	r0, #1
 80075ca:	bd08      	pop	{r3, pc}
 80075cc:	7f80      	ldrb	r0, [r0, #30]
 80075ce:	bd08      	pop	{r3, pc}
 80075d0:	0fa1afe1 	.word	0x0fa1afe1
 80075d4:	200003f0 	.word	0x200003f0
 80075d8:	08011fe0 	.word	0x08011fe0
 80075dc:	08011fc4 	.word	0x08011fc4

080075e0 <validate_distance_settings>:
 80075e0:	edd0 7a00 	vldr	s15, [r0]
 80075e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ec:	b510      	push	{r4, lr}
 80075ee:	4604      	mov	r4, r0
 80075f0:	d45c      	bmi.n	80076ac <validate_distance_settings+0xcc>
 80075f2:	2001      	movs	r0, #1
 80075f4:	edd4 7a01 	vldr	s15, [r4, #4]
 80075f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007600:	d508      	bpl.n	8007614 <validate_distance_settings+0x34>
 8007602:	4b2e      	ldr	r3, [pc, #184]	@ (80076bc <validate_distance_settings+0xdc>)
 8007604:	4a2e      	ldr	r2, [pc, #184]	@ (80076c0 <validate_distance_settings+0xe0>)
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	492e      	ldr	r1, [pc, #184]	@ (80076c4 <validate_distance_settings+0xe4>)
 800760a:	2000      	movs	r0, #0
 800760c:	4798      	blx	r3
 800760e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007612:	2000      	movs	r0, #0
 8007614:	ed94 7a00 	vldr	s14, [r4]
 8007618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800761c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007620:	dd08      	ble.n	8007634 <validate_distance_settings+0x54>
 8007622:	4b26      	ldr	r3, [pc, #152]	@ (80076bc <validate_distance_settings+0xdc>)
 8007624:	4a28      	ldr	r2, [pc, #160]	@ (80076c8 <validate_distance_settings+0xe8>)
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	4926      	ldr	r1, [pc, #152]	@ (80076c4 <validate_distance_settings+0xe4>)
 800762a:	2000      	movs	r0, #0
 800762c:	4798      	blx	r3
 800762e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007632:	2000      	movs	r0, #0
 8007634:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8007638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007640:	dd06      	ble.n	8007650 <validate_distance_settings+0x70>
 8007642:	4b1e      	ldr	r3, [pc, #120]	@ (80076bc <validate_distance_settings+0xdc>)
 8007644:	4a21      	ldr	r2, [pc, #132]	@ (80076cc <validate_distance_settings+0xec>)
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	491e      	ldr	r1, [pc, #120]	@ (80076c4 <validate_distance_settings+0xe4>)
 800764a:	2000      	movs	r0, #0
 800764c:	4798      	blx	r3
 800764e:	2000      	movs	r0, #0
 8007650:	edd4 7a03 	vldr	s15, [r4, #12]
 8007654:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8007658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007660:	d41c      	bmi.n	800769c <validate_distance_settings+0xbc>
 8007662:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80076d0 <validate_distance_settings+0xf0>
 8007666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800766a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766e:	dc15      	bgt.n	800769c <validate_distance_settings+0xbc>
 8007670:	edd4 7a08 	vldr	s15, [r4, #32]
 8007674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767c:	d406      	bmi.n	800768c <validate_distance_settings+0xac>
 800767e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768a:	dd06      	ble.n	800769a <validate_distance_settings+0xba>
 800768c:	4b0b      	ldr	r3, [pc, #44]	@ (80076bc <validate_distance_settings+0xdc>)
 800768e:	4a11      	ldr	r2, [pc, #68]	@ (80076d4 <validate_distance_settings+0xf4>)
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	490c      	ldr	r1, [pc, #48]	@ (80076c4 <validate_distance_settings+0xe4>)
 8007694:	2000      	movs	r0, #0
 8007696:	4798      	blx	r3
 8007698:	2000      	movs	r0, #0
 800769a:	bd10      	pop	{r4, pc}
 800769c:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <validate_distance_settings+0xdc>)
 800769e:	4a0e      	ldr	r2, [pc, #56]	@ (80076d8 <validate_distance_settings+0xf8>)
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	4908      	ldr	r1, [pc, #32]	@ (80076c4 <validate_distance_settings+0xe4>)
 80076a4:	2000      	movs	r0, #0
 80076a6:	4798      	blx	r3
 80076a8:	2000      	movs	r0, #0
 80076aa:	e7e1      	b.n	8007670 <validate_distance_settings+0x90>
 80076ac:	4b03      	ldr	r3, [pc, #12]	@ (80076bc <validate_distance_settings+0xdc>)
 80076ae:	4a0b      	ldr	r2, [pc, #44]	@ (80076dc <validate_distance_settings+0xfc>)
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	4904      	ldr	r1, [pc, #16]	@ (80076c4 <validate_distance_settings+0xe4>)
 80076b4:	2000      	movs	r0, #0
 80076b6:	4798      	blx	r3
 80076b8:	2000      	movs	r0, #0
 80076ba:	e79b      	b.n	80075f4 <validate_distance_settings+0x14>
 80076bc:	200003f0 	.word	0x200003f0
 80076c0:	08012180 	.word	0x08012180
 80076c4:	0801215c 	.word	0x0801215c
 80076c8:	08012198 	.word	0x08012198
 80076cc:	080121b4 	.word	0x080121b4
 80076d0:	420c0000 	.word	0x420c0000
 80076d4:	08012208 	.word	0x08012208
 80076d8:	080121dc 	.word	0x080121dc
 80076dc:	08012140 	.word	0x08012140

080076e0 <sg_get_breakpoint_margin.constprop.0>:
 80076e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e4:	460d      	mov	r5, r1
 80076e6:	4617      	mov	r7, r2
 80076e8:	461e      	mov	r6, r3
 80076ea:	4680      	mov	r8, r0
 80076ec:	f7fd ffd4 	bl	8005698 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 80076f0:	fb15 f400 	smulbb	r4, r5, r0
 80076f4:	b2a4      	uxth	r4, r4
 80076f6:	b10f      	cbz	r7, 80076fc <sg_get_breakpoint_margin.constprop.0+0x1c>
 80076f8:	0064      	lsls	r4, r4, #1
 80076fa:	b2a4      	uxth	r4, r4
 80076fc:	2e03      	cmp	r6, #3
 80076fe:	d002      	beq.n	8007706 <sg_get_breakpoint_margin.constprop.0+0x26>
 8007700:	4620      	mov	r0, r4
 8007702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007706:	4640      	mov	r0, r8
 8007708:	f003 faae 	bl	800ac68 <acc_detector_utils_get_fwhm>
 800770c:	4628      	mov	r0, r5
 800770e:	f7fe f8eb 	bl	80058e8 <acc_detector_distance_alg_cfar_margin>
 8007712:	fb15 4000 	smlabb	r0, r5, r0, r4
 8007716:	b284      	uxth	r4, r0
 8007718:	4620      	mov	r0, r4
 800771a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771e:	bf00      	nop

08007720 <acc_detector_distance_translation_limit_step_length>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	f003 faa0 	bl	800ac68 <acc_detector_utils_get_fwhm>
 8007728:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007790 <acc_detector_distance_translation_limit_step_length+0x70>
 800772c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8007730:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8007734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773c:	ee17 3a90 	vmov	r3, s15
 8007740:	b298      	uxth	r0, r3
 8007742:	b114      	cbz	r4, 800774a <acc_detector_distance_translation_limit_step_length+0x2a>
 8007744:	42a0      	cmp	r0, r4
 8007746:	bf28      	it	cs
 8007748:	4620      	movcs	r0, r4
 800774a:	2818      	cmp	r0, #24
 800774c:	d817      	bhi.n	800777e <acc_detector_distance_translation_limit_step_length+0x5e>
 800774e:	b1a0      	cbz	r0, 800777a <acc_detector_distance_translation_limit_step_length+0x5a>
 8007750:	2218      	movs	r2, #24
 8007752:	fbb2 f3f0 	udiv	r3, r2, r0
 8007756:	fb00 f303 	mul.w	r3, r0, r3
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	b29b      	uxth	r3, r3
 800775e:	b943      	cbnz	r3, 8007772 <acc_detector_distance_translation_limit_step_length+0x52>
 8007760:	e00c      	b.n	800777c <acc_detector_distance_translation_limit_step_length+0x5c>
 8007762:	fbb2 f3f0 	udiv	r3, r2, r0
 8007766:	fb00 f303 	mul.w	r3, r0, r3
 800776a:	f1c3 0318 	rsb	r3, r3, #24
 800776e:	b29b      	uxth	r3, r3
 8007770:	b123      	cbz	r3, 800777c <acc_detector_distance_translation_limit_step_length+0x5c>
 8007772:	3801      	subs	r0, #1
 8007774:	b280      	uxth	r0, r0
 8007776:	2800      	cmp	r0, #0
 8007778:	d1f3      	bne.n	8007762 <acc_detector_distance_translation_limit_step_length+0x42>
 800777a:	2001      	movs	r0, #1
 800777c:	bd10      	pop	{r4, pc}
 800777e:	4b05      	ldr	r3, [pc, #20]	@ (8007794 <acc_detector_distance_translation_limit_step_length+0x74>)
 8007780:	fba3 3000 	umull	r3, r0, r3, r0
 8007784:	0900      	lsrs	r0, r0, #4
 8007786:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800778a:	00c0      	lsls	r0, r0, #3
 800778c:	b280      	uxth	r0, r0
 800778e:	bd10      	pop	{r4, pc}
 8007790:	3b23d70a 	.word	0x3b23d70a
 8007794:	aaaaaaab 	.word	0xaaaaaaab

08007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	ed2d 8b02 	vpush	{d8}
 800779e:	4614      	mov	r4, r2
 80077a0:	460e      	mov	r6, r1
 80077a2:	4605      	mov	r5, r0
 80077a4:	f003 fac2 	bl	800ad2c <acc_detector_utils_min_leakage_free_dist>
 80077a8:	2c03      	cmp	r4, #3
 80077aa:	eeb0 8a40 	vmov.f32	s16, s0
 80077ae:	d004      	beq.n	80077ba <acc_detector_distance_translation_calc_leakage_free_min_dist+0x22>
 80077b0:	eeb0 0a48 	vmov.f32	s0, s16
 80077b4:	ecbd 8b02 	vpop	{d8}
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	f7ff ffaf 	bl	8007720 <acc_detector_distance_translation_limit_step_length>
 80077c2:	4604      	mov	r4, r0
 80077c4:	4628      	mov	r0, r5
 80077c6:	f003 fa4f 	bl	800ac68 <acc_detector_utils_get_fwhm>
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7fe f88c 	bl	80058e8 <acc_detector_distance_alg_cfar_margin>
 80077d0:	ee07 4a90 	vmov	s15, r4
 80077d4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80077fc <acc_detector_distance_translation_calc_leakage_free_min_dist+0x64>
 80077d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077dc:	ee07 0a10 	vmov	s14, r0
 80077e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80077e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80077e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077ec:	ee38 8a27 	vadd.f32	s16, s16, s15
 80077f0:	eeb0 0a48 	vmov.f32	s0, s16
 80077f4:	ecbd 8b02 	vpop	{d8}
 80077f8:	bd70      	pop	{r4, r5, r6, pc}
 80077fa:	bf00      	nop
 80077fc:	3b23d70a 	.word	0x3b23d70a

08007800 <will_have_transition>:
 8007800:	b510      	push	{r4, lr}
 8007802:	ed2d 8b02 	vpush	{d8}
 8007806:	4604      	mov	r4, r0
 8007808:	7c02      	ldrb	r2, [r0, #16]
 800780a:	8901      	ldrh	r1, [r0, #8]
 800780c:	7a80      	ldrb	r0, [r0, #10]
 800780e:	f7ff ffc3 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007812:	7c22      	ldrb	r2, [r4, #16]
 8007814:	8921      	ldrh	r1, [r4, #8]
 8007816:	2001      	movs	r0, #1
 8007818:	eeb0 8a40 	vmov.f32	s16, s0
 800781c:	f7ff ffbc 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007820:	edd4 7a01 	vldr	s15, [r4, #4]
 8007824:	eef4 7ac0 	vcmpe.f32	s15, s0
 8007828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782c:	dc06      	bgt.n	800783c <will_have_transition+0x3c>
 800782e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007832:	b11b      	cbz	r3, 800783c <will_have_transition+0x3c>
 8007834:	ecbd 8b02 	vpop	{d8}
 8007838:	2000      	movs	r0, #0
 800783a:	bd10      	pop	{r4, pc}
 800783c:	edd4 7a00 	vldr	s15, [r4]
 8007840:	eef4 7ac8 	vcmpe.f32	s15, s16
 8007844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007848:	d5f4      	bpl.n	8007834 <will_have_transition+0x34>
 800784a:	ecbd 8b02 	vpop	{d8}
 800784e:	7aa0      	ldrb	r0, [r4, #10]
 8007850:	3801      	subs	r0, #1
 8007852:	bf18      	it	ne
 8007854:	2001      	movne	r0, #1
 8007856:	bd10      	pop	{r4, pc}

08007858 <acc_detector_distance_translation_calculate_hwaas>:
 8007858:	b500      	push	{lr}
 800785a:	ed2d 8b04 	vpush	{d8-d9}
 800785e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8007862:	b083      	sub	sp, #12
 8007864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007868:	9001      	str	r0, [sp, #4]
 800786a:	d80b      	bhi.n	8007884 <acc_detector_distance_translation_calculate_hwaas+0x2c>
 800786c:	4b2a      	ldr	r3, [pc, #168]	@ (8007918 <acc_detector_distance_translation_calculate_hwaas+0xc0>)
 800786e:	4a2b      	ldr	r2, [pc, #172]	@ (800791c <acc_detector_distance_translation_calculate_hwaas+0xc4>)
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	492b      	ldr	r1, [pc, #172]	@ (8007920 <acc_detector_distance_translation_calculate_hwaas+0xc8>)
 8007874:	2000      	movs	r0, #0
 8007876:	4798      	blx	r3
 8007878:	2000      	movs	r0, #0
 800787a:	b003      	add	sp, #12
 800787c:	ecbd 8b04 	vpop	{d8-d9}
 8007880:	f85d fb04 	ldr.w	pc, [sp], #4
 8007884:	4608      	mov	r0, r1
 8007886:	eeb0 9a41 	vmov.f32	s18, s2
 800788a:	eef0 8a60 	vmov.f32	s17, s1
 800788e:	eef0 9a40 	vmov.f32	s19, s0
 8007892:	f000 fd87 	bl	80083a4 <acc_detector_distance_utils_reflector_shape_exponent_get>
 8007896:	eddd 7a01 	vldr	s15, [sp, #4]
 800789a:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8007924 <acc_detector_distance_translation_calculate_hwaas+0xcc>
 800789e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078a2:	eeb0 8a40 	vmov.f32	s16, s0
 80078a6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80078aa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80078ae:	f007 f965 	bl	800eb7c <fmaxf>
 80078b2:	f006 ff67 	bl	800e784 <log10f>
 80078b6:	eeb0 7a40 	vmov.f32	s14, s0
 80078ba:	eeb0 0a68 	vmov.f32	s0, s17
 80078be:	eef0 8a47 	vmov.f32	s17, s14
 80078c2:	f006 ff5f 	bl	800e784 <log10f>
 80078c6:	eeb0 1a40 	vmov.f32	s2, s0
 80078ca:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80078ce:	ee68 6a00 	vmul.f32	s13, s16, s0
 80078d2:	ee26 7aa8 	vmul.f32	s14, s13, s17
 80078d6:	ee77 7a29 	vadd.f32	s15, s14, s19
 80078da:	ee37 8ac1 	vsub.f32	s16, s15, s2
 80078de:	ee78 0a49 	vsub.f32	s1, s16, s18
 80078e2:	eec0 0a80 	vdiv.f32	s1, s1, s0
 80078e6:	f006 ff7b 	bl	800e7e0 <powf>
 80078ea:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80078ee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80078f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80078f6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80078fa:	ee10 2a10 	vmov	r2, s0
 80078fe:	b290      	uxth	r0, r2
 8007900:	2801      	cmp	r0, #1
 8007902:	bf38      	it	cc
 8007904:	2001      	movcc	r0, #1
 8007906:	4298      	cmp	r0, r3
 8007908:	bf28      	it	cs
 800790a:	4618      	movcs	r0, r3
 800790c:	b003      	add	sp, #12
 800790e:	ecbd 8b04 	vpop	{d8-d9}
 8007912:	f85d fb04 	ldr.w	pc, [sp], #4
 8007916:	bf00      	nop
 8007918:	200003f0 	.word	0x200003f0
 800791c:	08012238 	.word	0x08012238
 8007920:	0801215c 	.word	0x0801215c
 8007924:	3b23d70a 	.word	0x3b23d70a

08007928 <create_group_plans>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	ed2d 8b08 	vpush	{d8-d11}
 8007930:	4604      	mov	r4, r0
 8007932:	ed90 8a00 	vldr	s16, [r0]
 8007936:	7c02      	ldrb	r2, [r0, #16]
 8007938:	b08b      	sub	sp, #44	@ 0x2c
 800793a:	460d      	mov	r5, r1
 800793c:	8901      	ldrh	r1, [r0, #8]
 800793e:	2001      	movs	r0, #1
 8007940:	f7ff ff2a 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007944:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8007948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794c:	d52b      	bpl.n	80079a6 <create_group_plans+0x7e>
 800794e:	f894 b024 	ldrb.w	fp, [r4, #36]	@ 0x24
 8007952:	f1bb 0f00 	cmp.w	fp, #0
 8007956:	d148      	bne.n	80079ea <create_group_plans+0xc2>
 8007958:	4620      	mov	r0, r4
 800795a:	f7ff ff51 	bl	8007800 <will_have_transition>
 800795e:	f894 a00a 	ldrb.w	sl, [r4, #10]
 8007962:	4607      	mov	r7, r0
 8007964:	bb48      	cbnz	r0, 80079ba <create_group_plans+0x92>
 8007966:	4606      	mov	r6, r0
 8007968:	4650      	mov	r0, sl
 800796a:	7c22      	ldrb	r2, [r4, #16]
 800796c:	8921      	ldrh	r1, [r4, #8]
 800796e:	f7ff ff13 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007972:	edd4 7a01 	vldr	s15, [r4, #4]
 8007976:	7aa0      	ldrb	r0, [r4, #10]
 8007978:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800797c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007980:	d527      	bpl.n	80079d2 <create_group_plans+0xaa>
 8007982:	7c22      	ldrb	r2, [r4, #16]
 8007984:	8921      	ldrh	r1, [r4, #8]
 8007986:	f7ff ff07 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800798a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800798e:	eef0 0a40 	vmov.f32	s1, s0
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 809b 	bne.w	8007ace <create_group_plans+0x1a6>
 8007998:	7aa3      	ldrb	r3, [r4, #10]
 800799a:	2b01      	cmp	r3, #1
 800799c:	f040 8097 	bne.w	8007ace <create_group_plans+0x1a6>
 80079a0:	ed94 0a00 	vldr	s0, [r4]
 80079a4:	e097      	b.n	8007ad6 <create_group_plans+0x1ae>
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff ff2a 	bl	8007800 <will_have_transition>
 80079ac:	f04f 0b00 	mov.w	fp, #0
 80079b0:	f894 a00a 	ldrb.w	sl, [r4, #10]
 80079b4:	4607      	mov	r7, r0
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d0d5      	beq.n	8007966 <create_group_plans+0x3e>
 80079ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079be:	2b04      	cmp	r3, #4
 80079c0:	f200 82aa 	bhi.w	8007f18 <create_group_plans+0x5f0>
 80079c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80079c8:	0183017b 	.word	0x0183017b
 80079cc:	026c0270 	.word	0x026c0270
 80079d0:	0260      	.short	0x0260
 80079d2:	2801      	cmp	r0, #1
 80079d4:	d0d5      	beq.n	8007982 <create_group_plans+0x5a>
 80079d6:	f1bb 0f00 	cmp.w	fp, #0
 80079da:	d000      	beq.n	80079de <create_group_plans+0xb6>
 80079dc:	2701      	movs	r7, #1
 80079de:	4638      	mov	r0, r7
 80079e0:	b00b      	add	sp, #44	@ 0x2c
 80079e2:	ecbd 8b08 	vpop	{d8-d11}
 80079e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ea:	8921      	ldrh	r1, [r4, #8]
 80079ec:	2001      	movs	r0, #1
 80079ee:	f7ff fe97 	bl	8007720 <acc_detector_distance_translation_limit_step_length>
 80079f2:	4606      	mov	r6, r0
 80079f4:	4601      	mov	r1, r0
 80079f6:	2001      	movs	r0, #1
 80079f8:	f7fe fbc2 	bl	8006180 <acc_detector_distance_alg_calc_processing_gain>
 80079fc:	2001      	movs	r0, #1
 80079fe:	4680      	mov	r8, r0
 8007a00:	eeb0 8a40 	vmov.f32	s16, s0
 8007a04:	f003 f940 	bl	800ac88 <acc_detector_utils_radar_loop_gain_per_hwaas>
 8007a08:	f885 8002 	strb.w	r8, [r5, #2]
 8007a0c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8007a10:	75eb      	strb	r3, [r5, #23]
 8007a12:	802e      	strh	r6, [r5, #0]
 8007a14:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8007a18:	762b      	strb	r3, [r5, #24]
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	eef0 8a40 	vmov.f32	s17, s0
 8007a22:	f7fd fe39 	bl	8005698 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 8007a26:	4607      	mov	r7, r0
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f7ff fee9 	bl	8007800 <will_have_transition>
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4681      	mov	r9, r0
 8007a32:	4640      	mov	r0, r8
 8007a34:	f7fd fe30 	bl	8005698 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 8007a38:	fb16 f000 	smulbb	r0, r6, r0
 8007a3c:	fa1f f880 	uxth.w	r8, r0
 8007a40:	f1b9 0f00 	cmp.w	r9, #0
 8007a44:	d003      	beq.n	8007a4e <create_group_plans+0x126>
 8007a46:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8007a4a:	fa1f f888 	uxth.w	r8, r8
 8007a4e:	7c22      	ldrb	r2, [r4, #16]
 8007a50:	8921      	ldrh	r1, [r4, #8]
 8007a52:	ed94 9a01 	vldr	s18, [r4, #4]
 8007a56:	2001      	movs	r0, #1
 8007a58:	f7ff fe9e 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007a5c:	eef0 0a40 	vmov.f32	s1, s0
 8007a60:	eeb0 0a49 	vmov.f32	s0, s18
 8007a64:	f007 f8a7 	bl	800ebb6 <fminf>
 8007a68:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8007cf4 <create_group_plans+0x3cc>
 8007a6c:	ed94 6a00 	vldr	s12, [r4]
 8007a70:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8007a74:	2302      	movs	r3, #2
 8007a76:	75ab      	strb	r3, [r5, #22]
 8007a78:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a80:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007a84:	ee17 3a90 	vmov	r3, s15
 8007a88:	ee17 2a10 	vmov	r2, s14
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	fbb3 f3f6 	udiv	r3, r3, r6
 8007a92:	fb13 f306 	smulbb	r3, r3, r6
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	b290      	uxth	r0, r2
 8007a9a:	fbb0 f0f6 	udiv	r0, r0, r6
 8007a9e:	1bc7      	subs	r7, r0, r7
 8007aa0:	4498      	add	r8, r3
 8007aa2:	fb17 f606 	smulbb	r6, r7, r6
 8007aa6:	f8a5 8006 	strh.w	r8, [r5, #6]
 8007aaa:	80ae      	strh	r6, [r5, #4]
 8007aac:	b218      	sxth	r0, r3
 8007aae:	7ca1      	ldrb	r1, [r4, #18]
 8007ab0:	ed94 0a03 	vldr	s0, [r4, #12]
 8007ab4:	eeb0 1a68 	vmov.f32	s2, s17
 8007ab8:	eef0 0a48 	vmov.f32	s1, s16
 8007abc:	f7ff fecc 	bl	8007858 <acc_detector_distance_translation_calculate_hwaas>
 8007ac0:	f895 30d0 	ldrb.w	r3, [r5, #208]	@ 0xd0
 8007ac4:	81e8      	strh	r0, [r5, #14]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	f885 30d0 	strb.w	r3, [r5, #208]	@ 0xd0
 8007acc:	e744      	b.n	8007958 <create_group_plans+0x30>
 8007ace:	ed94 0a00 	vldr	s0, [r4]
 8007ad2:	f007 f853 	bl	800eb7c <fmaxf>
 8007ad6:	edd4 6a01 	vldr	s13, [r4, #4]
 8007ada:	eef4 6ac0 	vcmpe.f32	s13, s0
 8007ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae2:	f100 80d7 	bmi.w	8007c94 <create_group_plans+0x36c>
 8007ae6:	f1c6 0a05 	rsb	sl, r6, #5
 8007aea:	fa5f fa8a 	uxtb.w	sl, sl
 8007aee:	f1ba 0f01 	cmp.w	sl, #1
 8007af2:	f240 80cf 	bls.w	8007c94 <create_group_plans+0x36c>
 8007af6:	ee07 aa90 	vmov	s15, sl
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b06:	ee36 6ac0 	vsub.f32	s12, s13, s0
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8007b10:	4613      	mov	r3, r2
 8007b12:	f10a 31ff 	add.w	r1, sl, #4294967295
 8007b16:	a80a      	add	r0, sp, #40	@ 0x28
 8007b18:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b24:	3301      	adds	r3, #1
 8007b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007b30:	428b      	cmp	r3, r1
 8007b32:	ed42 7a05 	vstr	s15, [r2, #-20]	@ 0xffffffec
 8007b36:	461a      	mov	r2, r3
 8007b38:	d3ed      	bcc.n	8007b16 <create_group_plans+0x1ee>
 8007b3a:	eb00 038a 	add.w	r3, r0, sl, lsl #2
 8007b3e:	ed43 6a06 	vstr	s13, [r3, #-24]	@ 0xffffffe8
 8007b42:	8921      	ldrh	r1, [r4, #8]
 8007b44:	7aa0      	ldrb	r0, [r4, #10]
 8007b46:	f7ff fdeb 	bl	8007720 <acc_detector_distance_translation_limit_step_length>
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	7aa0      	ldrb	r0, [r4, #10]
 8007b50:	f7fe fb16 	bl	8006180 <acc_detector_distance_alg_calc_processing_gain>
 8007b54:	7aa0      	ldrb	r0, [r4, #10]
 8007b56:	eef0 8a40 	vmov.f32	s17, s0
 8007b5a:	f003 f895 	bl	800ac88 <acc_detector_utils_radar_loop_gain_per_hwaas>
 8007b5e:	221a      	movs	r2, #26
 8007b60:	fb02 5306 	mla	r3, r2, r6, r5
 8007b64:	f894 900a 	ldrb.w	r9, [r4, #10]
 8007b68:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 8007b6c:	f883 906a 	strb.w	r9, [r3, #106]	@ 0x6a
 8007b70:	f8a3 8068 	strh.w	r8, [r3, #104]	@ 0x68
 8007b74:	f883 a07e 	strb.w	sl, [r3, #126]	@ 0x7e
 8007b78:	f883 107f 	strb.w	r1, [r3, #127]	@ 0x7f
 8007b7c:	f894 1026 	ldrb.w	r1, [r4, #38]	@ 0x26
 8007b80:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
 8007b84:	f1c6 0304 	rsb	r3, r6, #4
 8007b88:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8007b8c:	eeb0 9a40 	vmov.f32	s18, s0
 8007b90:	d043      	beq.n	8007c1a <create_group_plans+0x2f2>
 8007b92:	f1c6 0903 	rsb	r9, r6, #3
 8007b96:	fa5f f989 	uxtb.w	r9, r9
 8007b9a:	ab06      	add	r3, sp, #24
 8007b9c:	fb02 5a06 	mla	sl, r2, r6, r5
 8007ba0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007ba4:	ed9f 8a53 	vldr	s16, [pc, #332]	@ 8007cf4 <create_group_plans+0x3cc>
 8007ba8:	9501      	str	r5, [sp, #4]
 8007baa:	f10d 0914 	add.w	r9, sp, #20
 8007bae:	4625      	mov	r5, r4
 8007bb0:	f10a 0a6c 	add.w	sl, sl, #108	@ 0x6c
 8007bb4:	464c      	mov	r4, r9
 8007bb6:	4699      	mov	r9, r3
 8007bb8:	edd4 6a00 	vldr	s13, [r4]
 8007bbc:	ed95 0a03 	vldr	s0, [r5, #12]
 8007bc0:	ed94 7a01 	vldr	s14, [r4, #4]
 8007bc4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8007bc8:	3404      	adds	r4, #4
 8007bca:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8007bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007bd6:	ee17 3a90 	vmov	r3, s15
 8007bda:	b298      	uxth	r0, r3
 8007bdc:	ee17 3a10 	vmov	r3, s14
 8007be0:	fbb0 f0f8 	udiv	r0, r0, r8
 8007be4:	fb10 f008 	smulbb	r0, r0, r8
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	b200      	sxth	r0, r0
 8007bec:	fbb2 f2f8 	udiv	r2, r2, r8
 8007bf0:	fb12 f208 	smulbb	r2, r2, r8
 8007bf4:	f8aa 2000 	strh.w	r2, [sl]
 8007bf8:	f82a 0f02 	strh.w	r0, [sl, #2]!
 8007bfc:	eeb0 1a49 	vmov.f32	s2, s18
 8007c00:	7ca9      	ldrb	r1, [r5, #18]
 8007c02:	eef0 0a68 	vmov.f32	s1, s17
 8007c06:	f7ff fe27 	bl	8007858 <acc_detector_distance_translation_calculate_hwaas>
 8007c0a:	454c      	cmp	r4, r9
 8007c0c:	f8aa 0008 	strh.w	r0, [sl, #8]
 8007c10:	d1d2      	bne.n	8007bb8 <create_group_plans+0x290>
 8007c12:	462c      	mov	r4, r5
 8007c14:	9d01      	ldr	r5, [sp, #4]
 8007c16:	f894 900a 	ldrb.w	r9, [r4, #10]
 8007c1a:	f04f 0e1a 	mov.w	lr, #26
 8007c1e:	fb0e 5e06 	mla	lr, lr, r6, r5
 8007c22:	f89e 007e 	ldrb.w	r0, [lr, #126]	@ 0x7e
 8007c26:	2802      	cmp	r0, #2
 8007c28:	f240 814d 	bls.w	8007ec6 <create_group_plans+0x59e>
 8007c2c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8007c30:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 8007c34:	2102      	movs	r1, #2
 8007c36:	e009      	b.n	8007c4c <create_group_plans+0x324>
 8007c38:	3101      	adds	r1, #1
 8007c3a:	f89e 007e 	ldrb.w	r0, [lr, #126]	@ 0x7e
 8007c3e:	b289      	uxth	r1, r1
 8007c40:	4288      	cmp	r0, r1
 8007c42:	f240 8140 	bls.w	8007ec6 <create_group_plans+0x59e>
 8007c46:	2802      	cmp	r0, #2
 8007c48:	f240 813d 	bls.w	8007ec6 <create_group_plans+0x59e>
 8007c4c:	eb0c 0301 	add.w	r3, ip, r1
 8007c50:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8007c54:	f9b2 a06c 	ldrsh.w	sl, [r2, #108]	@ 0x6c
 8007c58:	f9b2 306a 	ldrsh.w	r3, [r2, #106]	@ 0x6a
 8007c5c:	459a      	cmp	sl, r3
 8007c5e:	460a      	mov	r2, r1
 8007c60:	d1ea      	bne.n	8007c38 <create_group_plans+0x310>
 8007c62:	3801      	subs	r0, #1
 8007c64:	4281      	cmp	r1, r0
 8007c66:	bf38      	it	cc
 8007c68:	460b      	movcc	r3, r1
 8007c6a:	d20f      	bcs.n	8007c8c <create_group_plans+0x364>
 8007c6c:	4462      	add	r2, ip
 8007c6e:	eb0c 0a03 	add.w	sl, ip, r3
 8007c72:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8007c76:	3301      	adds	r3, #1
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	eb05 0a4a 	add.w	sl, r5, sl, lsl #1
 8007c7e:	f9b2 206e 	ldrsh.w	r2, [r2, #110]	@ 0x6e
 8007c82:	f8aa 206c 	strh.w	r2, [sl, #108]	@ 0x6c
 8007c86:	4283      	cmp	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	d3ef      	bcc.n	8007c6c <create_group_plans+0x344>
 8007c8c:	b2c0      	uxtb	r0, r0
 8007c8e:	f88e 007e 	strb.w	r0, [lr, #126]	@ 0x7e
 8007c92:	e7d5      	b.n	8007c40 <create_group_plans+0x318>
 8007c94:	4b18      	ldr	r3, [pc, #96]	@ (8007cf8 <create_group_plans+0x3d0>)
 8007c96:	4a19      	ldr	r2, [pc, #100]	@ (8007cfc <create_group_plans+0x3d4>)
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	4919      	ldr	r1, [pc, #100]	@ (8007d00 <create_group_plans+0x3d8>)
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	4798      	blx	r3
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f895 30d1 	ldrb.w	r3, [r5, #209]	@ 0xd1
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	f885 30d1 	strb.w	r3, [r5, #209]	@ 0xd1
 8007cac:	f1bb 0f00 	cmp.w	fp, #0
 8007cb0:	f47f ae94 	bne.w	80079dc <create_group_plans+0xb4>
 8007cb4:	2f00      	cmp	r7, #0
 8007cb6:	f47f ae91 	bne.w	80079dc <create_group_plans+0xb4>
 8007cba:	4617      	mov	r7, r2
 8007cbc:	e68f      	b.n	80079de <create_group_plans+0xb6>
 8007cbe:	2700      	movs	r7, #0
 8007cc0:	463e      	mov	r6, r7
 8007cc2:	f895 30d1 	ldrb.w	r3, [r5, #209]	@ 0xd1
 8007cc6:	4433      	add	r3, r6
 8007cc8:	f885 30d1 	strb.w	r3, [r5, #209]	@ 0xd1
 8007ccc:	e64c      	b.n	8007968 <create_group_plans+0x40>
 8007cce:	f240 2301 	movw	r3, #513	@ 0x201
 8007cd2:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	2600      	movs	r6, #0
 8007cdc:	f105 0368 	add.w	r3, r5, #104	@ 0x68
 8007ce0:	f8cd b008 	str.w	fp, [sp, #8]
 8007ce4:	eddf aa03 	vldr	s21, [pc, #12]	@ 8007cf4 <create_group_plans+0x3cc>
 8007ce8:	9503      	str	r5, [sp, #12]
 8007cea:	46b1      	mov	r9, r6
 8007cec:	f04f 0801 	mov.w	r8, #1
 8007cf0:	469b      	mov	fp, r3
 8007cf2:	e0a5      	b.n	8007e40 <create_group_plans+0x518>
 8007cf4:	3b23d70a 	.word	0x3b23d70a
 8007cf8:	200003f0 	.word	0x200003f0
 8007cfc:	08012260 	.word	0x08012260
 8007d00:	0801215c 	.word	0x0801215c
 8007d04:	edd4 9a01 	vldr	s19, [r4, #4]
 8007d08:	eeb4 9ae9 	vcmpe.f32	s18, s19
 8007d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d10:	f140 80ac 	bpl.w	8007e6c <create_group_plans+0x544>
 8007d14:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007d18:	b903      	cbnz	r3, 8007d1c <create_group_plans+0x3f4>
 8007d1a:	b13e      	cbz	r6, 8007d2c <create_group_plans+0x404>
 8007d1c:	eeb0 0a68 	vmov.f32	s0, s17
 8007d20:	eef0 0a49 	vmov.f32	s1, s18
 8007d24:	f006 ff2a 	bl	800eb7c <fmaxf>
 8007d28:	eef0 8a40 	vmov.f32	s17, s0
 8007d2c:	eef0 0a48 	vmov.f32	s1, s16
 8007d30:	eeb0 0a69 	vmov.f32	s0, s19
 8007d34:	f006 ff3f 	bl	800ebb6 <fminf>
 8007d38:	8921      	ldrh	r1, [r4, #8]
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	eeb0 9a40 	vmov.f32	s18, s0
 8007d40:	f7ff fcee 	bl	8007720 <acc_detector_distance_translation_limit_step_length>
 8007d44:	4601      	mov	r1, r0
 8007d46:	4607      	mov	r7, r0
 8007d48:	4640      	mov	r0, r8
 8007d4a:	f7fe fa19 	bl	8006180 <acc_detector_distance_alg_calc_processing_gain>
 8007d4e:	4640      	mov	r0, r8
 8007d50:	eef0 9a40 	vmov.f32	s19, s0
 8007d54:	f002 ff98 	bl	800ac88 <acc_detector_utils_radar_loop_gain_per_hwaas>
 8007d58:	7c22      	ldrb	r2, [r4, #16]
 8007d5a:	8921      	ldrh	r1, [r4, #8]
 8007d5c:	ed94 ba00 	vldr	s22, [r4]
 8007d60:	2001      	movs	r0, #1
 8007d62:	eeb0 aa40 	vmov.f32	s20, s0
 8007d66:	f7ff fd17 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007d6a:	eeb4 bac0 	vcmpe.f32	s22, s0
 8007d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d72:	d502      	bpl.n	8007d7a <create_group_plans+0x452>
 8007d74:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 8007d78:	b912      	cbnz	r2, 8007d80 <create_group_plans+0x458>
 8007d7a:	1e32      	subs	r2, r6, #0
 8007d7c:	bf18      	it	ne
 8007d7e:	2201      	movne	r2, #1
 8007d80:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	4639      	mov	r1, r7
 8007d8a:	7c23      	ldrb	r3, [r4, #16]
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	bf4c      	ite	mi
 8007d90:	f04f 0a01 	movmi.w	sl, #1
 8007d94:	f04f 0a00 	movpl.w	sl, #0
 8007d98:	f7ff fca2 	bl	80076e0 <sg_get_breakpoint_margin.constprop.0>
 8007d9c:	4652      	mov	r2, sl
 8007d9e:	4684      	mov	ip, r0
 8007da0:	4639      	mov	r1, r7
 8007da2:	7c23      	ldrb	r3, [r4, #16]
 8007da4:	4640      	mov	r0, r8
 8007da6:	46e2      	mov	sl, ip
 8007da8:	f7ff fc9a 	bl	80076e0 <sg_get_breakpoint_margin.constprop.0>
 8007dac:	ee89 7a2a 	vdiv.f32	s14, s18, s21
 8007db0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007db4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007db8:	eb0b 0543 	add.w	r5, fp, r3, lsl #1
 8007dbc:	f82b 7013 	strh.w	r7, [fp, r3, lsl #1]
 8007dc0:	f04f 0302 	mov.w	r3, #2
 8007dc4:	f885 8002 	strb.w	r8, [r5, #2]
 8007dc8:	75ab      	strb	r3, [r5, #22]
 8007dca:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8007dce:	75eb      	strb	r3, [r5, #23]
 8007dd0:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8007dd4:	762b      	strb	r3, [r5, #24]
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	eec8 7aaa 	vdiv.f32	s15, s17, s21
 8007ddc:	b2f6      	uxtb	r6, r6
 8007dde:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de6:	ee17 3a10 	vmov	r3, s14
 8007dea:	ee17 2a90 	vmov	r2, s15
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	fbb3 f3f7 	udiv	r3, r3, r7
 8007df4:	fb13 f307 	smulbb	r3, r3, r7
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	b291      	uxth	r1, r2
 8007dfc:	fbb1 f1f7 	udiv	r1, r1, r7
 8007e00:	fb11 f707 	smulbb	r7, r1, r7
 8007e04:	4418      	add	r0, r3
 8007e06:	eba7 0a0a 	sub.w	sl, r7, sl
 8007e0a:	80e8      	strh	r0, [r5, #6]
 8007e0c:	f8a5 a004 	strh.w	sl, [r5, #4]
 8007e10:	7ca1      	ldrb	r1, [r4, #18]
 8007e12:	ed94 0a03 	vldr	s0, [r4, #12]
 8007e16:	b218      	sxth	r0, r3
 8007e18:	eeb0 1a4a 	vmov.f32	s2, s20
 8007e1c:	eef0 0a69 	vmov.f32	s1, s19
 8007e20:	f7ff fd1a 	bl	8007858 <acc_detector_distance_translation_calculate_hwaas>
 8007e24:	81e8      	strh	r0, [r5, #14]
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	f109 0901 	add.w	r9, r9, #1
 8007e2c:	fa1f f989 	uxth.w	r9, r9
 8007e30:	4599      	cmp	r9, r3
 8007e32:	d240      	bcs.n	8007eb6 <create_group_plans+0x58e>
 8007e34:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e36:	444b      	add	r3, r9
 8007e38:	f813 8c14 	ldrb.w	r8, [r3, #-20]
 8007e3c:	f813 ac13 	ldrb.w	sl, [r3, #-19]
 8007e40:	7c22      	ldrb	r2, [r4, #16]
 8007e42:	8921      	ldrh	r1, [r4, #8]
 8007e44:	4640      	mov	r0, r8
 8007e46:	f7ff fca7 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007e4a:	7c22      	ldrb	r2, [r4, #16]
 8007e4c:	8921      	ldrh	r1, [r4, #8]
 8007e4e:	4650      	mov	r0, sl
 8007e50:	eeb0 9a40 	vmov.f32	s18, s0
 8007e54:	f7ff fca0 	bl	8007798 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8007e58:	edd4 8a00 	vldr	s17, [r4]
 8007e5c:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8007e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e64:	eeb0 8a40 	vmov.f32	s16, s0
 8007e68:	f73f af4c 	bgt.w	8007d04 <create_group_plans+0x3dc>
 8007e6c:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1d8      	bne.n	8007e26 <create_group_plans+0x4fe>
 8007e74:	2e00      	cmp	r6, #0
 8007e76:	d1d6      	bne.n	8007e26 <create_group_plans+0x4fe>
 8007e78:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e80:	ddd1      	ble.n	8007e26 <create_group_plans+0x4fe>
 8007e82:	edd4 9a01 	vldr	s19, [r4, #4]
 8007e86:	e751      	b.n	8007d2c <create_group_plans+0x404>
 8007e88:	f240 3201 	movw	r2, #769	@ 0x301
 8007e8c:	2305      	movs	r3, #5
 8007e8e:	f88d 3016 	strb.w	r3, [sp, #22]
 8007e92:	2302      	movs	r3, #2
 8007e94:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e98:	f04f 0a03 	mov.w	sl, #3
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	e71c      	b.n	8007cda <create_group_plans+0x3b2>
 8007ea0:	f240 3201 	movw	r2, #769	@ 0x301
 8007ea4:	2304      	movs	r3, #4
 8007ea6:	e7f2      	b.n	8007e8e <create_group_plans+0x566>
 8007ea8:	f240 3301 	movw	r3, #769	@ 0x301
 8007eac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	e711      	b.n	8007cda <create_group_plans+0x3b2>
 8007eb6:	1e37      	subs	r7, r6, #0
 8007eb8:	e9dd b502 	ldrd	fp, r5, [sp, #8]
 8007ebc:	f894 a00a 	ldrb.w	sl, [r4, #10]
 8007ec0:	bf18      	it	ne
 8007ec2:	2701      	movne	r7, #1
 8007ec4:	e6fd      	b.n	8007cc2 <create_group_plans+0x39a>
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f7ff fc9a 	bl	8007800 <will_have_transition>
 8007ecc:	7c23      	ldrb	r3, [r4, #16]
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	4648      	mov	r0, r9
 8007ed4:	f7ff fc04 	bl	80076e0 <sg_get_breakpoint_margin.constprop.0>
 8007ed8:	7c23      	ldrb	r3, [r4, #16]
 8007eda:	4684      	mov	ip, r0
 8007edc:	4641      	mov	r1, r8
 8007ede:	7aa0      	ldrb	r0, [r4, #10]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	4664      	mov	r4, ip
 8007ee4:	f7ff fbfc 	bl	80076e0 <sg_get_breakpoint_margin.constprop.0>
 8007ee8:	221a      	movs	r2, #26
 8007eea:	fb02 5206 	mla	r2, r2, r6, r5
 8007eee:	230d      	movs	r3, #13
 8007ef0:	f892 c07e 	ldrb.w	ip, [r2, #126]	@ 0x7e
 8007ef4:	f8b2 106c 	ldrh.w	r1, [r2, #108]	@ 0x6c
 8007ef8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007efc:	fb13 c606 	smlabb	r6, r3, r6, ip
 8007f00:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8007f04:	1b0c      	subs	r4, r1, r4
 8007f06:	f8a2 406c 	strh.w	r4, [r2, #108]	@ 0x6c
 8007f0a:	f8b6 306c 	ldrh.w	r3, [r6, #108]	@ 0x6c
 8007f0e:	4418      	add	r0, r3
 8007f10:	f8a6 006c 	strh.w	r0, [r6, #108]	@ 0x6c
 8007f14:	2201      	movs	r2, #1
 8007f16:	e6c4      	b.n	8007ca2 <create_group_plans+0x37a>
 8007f18:	4b05      	ldr	r3, [pc, #20]	@ (8007f30 <create_group_plans+0x608>)
 8007f1a:	4a06      	ldr	r2, [pc, #24]	@ (8007f34 <create_group_plans+0x60c>)
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	4906      	ldr	r1, [pc, #24]	@ (8007f38 <create_group_plans+0x610>)
 8007f20:	2000      	movs	r0, #0
 8007f22:	4607      	mov	r7, r0
 8007f24:	463e      	mov	r6, r7
 8007f26:	4798      	blx	r3
 8007f28:	f894 a00a 	ldrb.w	sl, [r4, #10]
 8007f2c:	e6c9      	b.n	8007cc2 <create_group_plans+0x39a>
 8007f2e:	bf00      	nop
 8007f30:	200003f0 	.word	0x200003f0
 8007f34:	08012250 	.word	0x08012250
 8007f38:	0801215c 	.word	0x0801215c

08007f3c <processor_specs_translate>:
 8007f3c:	2a00      	cmp	r2, #0
 8007f3e:	d07a      	beq.n	8008036 <processor_specs_translate+0xfa>
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	b0b7      	sub	sp, #220	@ 0xdc
 8007f46:	4617      	mov	r7, r2
 8007f48:	4606      	mov	r6, r0
 8007f4a:	4688      	mov	r8, r1
 8007f4c:	a801      	add	r0, sp, #4
 8007f4e:	2100      	movs	r1, #0
 8007f50:	22d2      	movs	r2, #210	@ 0xd2
 8007f52:	f008 fcb7 	bl	80108c4 <memset>
 8007f56:	a901      	add	r1, sp, #4
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f7ff fce5 	bl	8007928 <create_group_plans>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d065      	beq.n	800802e <processor_specs_translate+0xf2>
 8007f62:	f89d 00d4 	ldrb.w	r0, [sp, #212]	@ 0xd4
 8007f66:	b1a0      	cbz	r0, 8007f92 <processor_specs_translate+0x56>
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	d066      	beq.n	800803a <processor_specs_translate+0xfe>
 8007f6c:	4540      	cmp	r0, r8
 8007f6e:	d864      	bhi.n	800803a <processor_specs_translate+0xfe>
 8007f70:	2302      	movs	r3, #2
 8007f72:	8033      	strh	r3, [r6, #0]
 8007f74:	6a3a      	ldr	r2, [r7, #32]
 8007f76:	6072      	str	r2, [r6, #4]
 8007f78:	7cba      	ldrb	r2, [r7, #18]
 8007f7a:	70b2      	strb	r2, [r6, #2]
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	60b1      	str	r1, [r6, #8]
 8007f82:	8ab9      	ldrh	r1, [r7, #20]
 8007f84:	60f2      	str	r2, [r6, #12]
 8007f86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f8a:	7633      	strb	r3, [r6, #24]
 8007f8c:	8231      	strh	r1, [r6, #16]
 8007f8e:	82b2      	strh	r2, [r6, #20]
 8007f90:	2001      	movs	r0, #1
 8007f92:	f89d 30d5 	ldrb.w	r3, [sp, #213]	@ 0xd5
 8007f96:	b1e3      	cbz	r3, 8007fd2 <processor_specs_translate+0x96>
 8007f98:	f103 3cff 	add.w	ip, r3, #4294967295
 8007f9c:	221a      	movs	r2, #26
 8007f9e:	fa1f fc8c 	uxth.w	ip, ip
 8007fa2:	f10d 011e 	add.w	r1, sp, #30
 8007fa6:	fb02 1c0c 	mla	ip, r2, ip, r1
 8007faa:	ab01      	add	r3, sp, #4
 8007fac:	2200      	movs	r2, #0
 8007fae:	f04f 0e01 	mov.w	lr, #1
 8007fb2:	b10e      	cbz	r6, 8007fb8 <processor_specs_translate+0x7c>
 8007fb4:	4580      	cmp	r8, r0
 8007fb6:	d90c      	bls.n	8007fd2 <processor_specs_translate+0x96>
 8007fb8:	f893 107e 	ldrb.w	r1, [r3, #126]	@ 0x7e
 8007fbc:	b131      	cbz	r1, 8007fcc <processor_specs_translate+0x90>
 8007fbe:	1e4c      	subs	r4, r1, #1
 8007fc0:	f014 05ff 	ands.w	r5, r4, #255	@ 0xff
 8007fc4:	d002      	beq.n	8007fcc <processor_specs_translate+0x90>
 8007fc6:	b93e      	cbnz	r6, 8007fd8 <processor_specs_translate+0x9c>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	b280      	uxth	r0, r0
 8007fcc:	331a      	adds	r3, #26
 8007fce:	459c      	cmp	ip, r3
 8007fd0:	d1ef      	bne.n	8007fb2 <processor_specs_translate+0x76>
 8007fd2:	b037      	add	sp, #220	@ 0xdc
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	ebc0 0ac0 	rsb	sl, r0, r0, lsl #3
 8007fdc:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 8007fe0:	f102 39ff 	add.w	r9, r2, #4294967295
 8007fe4:	f884 e001 	strb.w	lr, [r4, #1]
 8007fe8:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8007fec:	f8c4 b004 	str.w	fp, [r4, #4]
 8007ff0:	f897 b012 	ldrb.w	fp, [r7, #18]
 8007ff4:	f884 b002 	strb.w	fp, [r4, #2]
 8007ff8:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8007ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8008000:	f8c4 b00c 	str.w	fp, [r4, #12]
 8008004:	f8b7 b014 	ldrh.w	fp, [r7, #20]
 8008008:	edc4 7a02 	vstr	s15, [r4, #8]
 800800c:	f8a4 b010 	strh.w	fp, [r4, #16]
 8008010:	f897 b010 	ldrb.w	fp, [r7, #16]
 8008014:	f806 b02a 	strb.w	fp, [r6, sl, lsl #2]
 8008018:	4449      	add	r1, r9
 800801a:	7625      	strb	r5, [r4, #24]
 800801c:	b2c9      	uxtb	r1, r1
 800801e:	3414      	adds	r4, #20
 8008020:	1c55      	adds	r5, r2, #1
 8008022:	f804 2b01 	strb.w	r2, [r4], #1
 8008026:	b2ea      	uxtb	r2, r5
 8008028:	428a      	cmp	r2, r1
 800802a:	d1f9      	bne.n	8008020 <processor_specs_translate+0xe4>
 800802c:	e7cc      	b.n	8007fc8 <processor_specs_translate+0x8c>
 800802e:	2000      	movs	r0, #0
 8008030:	b037      	add	sp, #220	@ 0xdc
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	2000      	movs	r0, #0
 8008038:	4770      	bx	lr
 800803a:	f89d 30d5 	ldrb.w	r3, [sp, #213]	@ 0xd5
 800803e:	2001      	movs	r0, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1a9      	bne.n	8007f98 <processor_specs_translate+0x5c>
 8008044:	e7c5      	b.n	8007fd2 <processor_specs_translate+0x96>
 8008046:	bf00      	nop

08008048 <acc_detector_distance_translation_get_num_processor_specifications>:
 8008048:	b510      	push	{r4, lr}
 800804a:	4604      	mov	r4, r0
 800804c:	f7ff fac8 	bl	80075e0 <validate_distance_settings>
 8008050:	b900      	cbnz	r0, 8008054 <acc_detector_distance_translation_get_num_processor_specifications+0xc>
 8008052:	bd10      	pop	{r4, pc}
 8008054:	2100      	movs	r1, #0
 8008056:	4622      	mov	r2, r4
 8008058:	4608      	mov	r0, r1
 800805a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800805e:	f7ff bf6d 	b.w	8007f3c <processor_specs_translate>
 8008062:	bf00      	nop

08008064 <acc_detector_distance_translation_get_processor_specifications>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	460d      	mov	r5, r1
 8008068:	4616      	mov	r6, r2
 800806a:	4607      	mov	r7, r0
 800806c:	f7ff fab8 	bl	80075e0 <validate_distance_settings>
 8008070:	4604      	mov	r4, r0
 8008072:	b908      	cbnz	r0, 8008078 <acc_detector_distance_translation_get_processor_specifications+0x14>
 8008074:	4620      	mov	r0, r4
 8008076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008078:	463a      	mov	r2, r7
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	f7ff ff5d 	bl	8007f3c <processor_specs_translate>
 8008082:	4620      	mov	r0, r4
 8008084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008086:	bf00      	nop

08008088 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config>:
 8008088:	2900      	cmp	r1, #0
 800808a:	d059      	beq.n	8008140 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xb8>
 800808c:	4603      	mov	r3, r0
 800808e:	2800      	cmp	r0, #0
 8008090:	d056      	beq.n	8008140 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xb8>
 8008092:	f890 20d0 	ldrb.w	r2, [r0, #208]	@ 0xd0
 8008096:	2a00      	cmp	r2, #0
 8008098:	d052      	beq.n	8008140 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xb8>
 800809a:	7d82      	ldrb	r2, [r0, #22]
 800809c:	2a01      	cmp	r2, #1
 800809e:	d94f      	bls.n	8008140 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xb8>
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80080a8:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 80080ac:	42b5      	cmp	r5, r6
 80080ae:	b083      	sub	sp, #12
 80080b0:	da42      	bge.n	8008138 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xb0>
 80080b2:	460c      	mov	r4, r1
 80080b4:	4620      	mov	r0, r4
 80080b6:	210a      	movs	r1, #10
 80080b8:	89df      	ldrh	r7, [r3, #14]
 80080ba:	f8b3 8000 	ldrh.w	r8, [r3]
 80080be:	f893 9002 	ldrb.w	r9, [r3, #2]
 80080c2:	f893 a017 	ldrb.w	sl, [r3, #23]
 80080c6:	f893 b018 	ldrb.w	fp, [r3, #24]
 80080ca:	f000 fdf1 	bl	8008cb0 <acc_config_sweeps_per_frame_set>
 80080ce:	2102      	movs	r1, #2
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fb9f 	bl	8008814 <acc_config_num_subsweeps_set>
 80080d6:	2200      	movs	r2, #0
 80080d8:	4611      	mov	r1, r2
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fbca 	bl	8008874 <acc_config_subsweep_start_point_set>
 80080e0:	2200      	movs	r2, #0
 80080e2:	2101      	movs	r1, #1
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fc09 	bl	80088fc <acc_config_subsweep_num_points_set>
 80080ea:	2200      	movs	r2, #0
 80080ec:	2101      	movs	r1, #1
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 fc48 	bl	8008984 <acc_config_subsweep_step_length_set>
 80080f4:	2200      	movs	r2, #0
 80080f6:	2104      	movs	r1, #4
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 fc87 	bl	8008a0c <acc_config_subsweep_profile_set>
 80080fe:	4639      	mov	r1, r7
 8008100:	2200      	movs	r2, #0
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fcc6 	bl	8008a94 <acc_config_subsweep_hwaas_set>
 8008108:	2200      	movs	r2, #0
 800810a:	210f      	movs	r1, #15
 800810c:	4620      	mov	r0, r4
 800810e:	f000 fd05 	bl	8008b1c <acc_config_subsweep_receiver_gain_set>
 8008112:	2200      	movs	r2, #0
 8008114:	2101      	movs	r1, #1
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fd66 	bl	8008be8 <acc_config_subsweep_phase_enhancement_set>
 800811c:	2200      	movs	r2, #0
 800811e:	2101      	movs	r1, #1
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fdf3 	bl	8008d0c <acc_config_subsweep_enable_loopback_set>
 8008126:	2102      	movs	r1, #2
 8008128:	2200      	movs	r2, #0
 800812a:	4620      	mov	r0, r4
 800812c:	f000 fe32 	bl	8008d94 <acc_config_subsweep_prf_set>
 8008130:	1b73      	subs	r3, r6, r5
 8008132:	b299      	uxth	r1, r3
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	d505      	bpl.n	8008144 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xbc>
 8008138:	2000      	movs	r0, #0
 800813a:	b003      	add	sp, #12
 800813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008140:	2000      	movs	r0, #0
 8008142:	4770      	bx	lr
 8008144:	fbb1 f3f8 	udiv	r3, r1, r8
 8008148:	2201      	movs	r2, #1
 800814a:	4629      	mov	r1, r5
 800814c:	4620      	mov	r0, r4
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	f000 fb90 	bl	8008874 <acc_config_subsweep_start_point_set>
 8008154:	9b01      	ldr	r3, [sp, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	4619      	mov	r1, r3
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fbce 	bl	80088fc <acc_config_subsweep_num_points_set>
 8008160:	4641      	mov	r1, r8
 8008162:	2201      	movs	r2, #1
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fc0d 	bl	8008984 <acc_config_subsweep_step_length_set>
 800816a:	2201      	movs	r2, #1
 800816c:	4649      	mov	r1, r9
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fc4c 	bl	8008a0c <acc_config_subsweep_profile_set>
 8008174:	4639      	mov	r1, r7
 8008176:	2201      	movs	r2, #1
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fc8b 	bl	8008a94 <acc_config_subsweep_hwaas_set>
 800817e:	2201      	movs	r2, #1
 8008180:	2105      	movs	r1, #5
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fcca 	bl	8008b1c <acc_config_subsweep_receiver_gain_set>
 8008188:	2201      	movs	r2, #1
 800818a:	4611      	mov	r1, r2
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fd2b 	bl	8008be8 <acc_config_subsweep_phase_enhancement_set>
 8008192:	f1ba 0f00 	cmp.w	sl, #0
 8008196:	d008      	beq.n	80081aa <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0x122>
 8008198:	4620      	mov	r0, r4
 800819a:	4659      	mov	r1, fp
 800819c:	2201      	movs	r2, #1
 800819e:	f000 fdf9 	bl	8008d94 <acc_config_subsweep_prf_set>
 80081a2:	2001      	movs	r0, #1
 80081a4:	b003      	add	sp, #12
 80081a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081aa:	4649      	mov	r1, r9
 80081ac:	4630      	mov	r0, r6
 80081ae:	f002 fd7b 	bl	800aca8 <acc_detector_utils_select_prf>
 80081b2:	4683      	mov	fp, r0
 80081b4:	e7f0      	b.n	8008198 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0x110>
 80081b6:	bf00      	nop

080081b8 <acc_detector_distance_translation_get_close_range_sensor_config>:
 80081b8:	b530      	push	{r4, r5, lr}
 80081ba:	b0b7      	sub	sp, #220	@ 0xdc
 80081bc:	460d      	mov	r5, r1
 80081be:	4604      	mov	r4, r0
 80081c0:	f7ff fa0e 	bl	80075e0 <validate_distance_settings>
 80081c4:	2300      	movs	r3, #0
 80081c6:	f8ad 30d4 	strh.w	r3, [sp, #212]	@ 0xd4
 80081ca:	b910      	cbnz	r0, 80081d2 <acc_detector_distance_translation_get_close_range_sensor_config+0x1a>
 80081cc:	2000      	movs	r0, #0
 80081ce:	b037      	add	sp, #220	@ 0xdc
 80081d0:	bd30      	pop	{r4, r5, pc}
 80081d2:	4620      	mov	r0, r4
 80081d4:	a901      	add	r1, sp, #4
 80081d6:	f7ff fba7 	bl	8007928 <create_group_plans>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d0f6      	beq.n	80081cc <acc_detector_distance_translation_get_close_range_sensor_config+0x14>
 80081de:	f89d 30d4 	ldrb.w	r3, [sp, #212]	@ 0xd4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0f2      	beq.n	80081cc <acc_detector_distance_translation_get_close_range_sensor_config+0x14>
 80081e6:	4629      	mov	r1, r5
 80081e8:	a801      	add	r0, sp, #4
 80081ea:	f7ff ff4d 	bl	8008088 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config>
 80081ee:	b037      	add	sp, #220	@ 0xdc
 80081f0:	bd30      	pop	{r4, r5, pc}
 80081f2:	bf00      	nop

080081f4 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	b08f      	sub	sp, #60	@ 0x3c
 80081fa:	468a      	mov	sl, r1
 80081fc:	9005      	str	r0, [sp, #20]
 80081fe:	2800      	cmp	r0, #0
 8008200:	f000 80ac 	beq.w	800835c <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x168>
 8008204:	2900      	cmp	r1, #0
 8008206:	d043      	beq.n	8008290 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x9c>
 8008208:	f890 b0d1 	ldrb.w	fp, [r0, #209]	@ 0xd1
 800820c:	f1bb 0f00 	cmp.w	fp, #0
 8008210:	d035      	beq.n	800827e <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8a>
 8008212:	2300      	movs	r3, #0
 8008214:	2101      	movs	r1, #1
 8008216:	4650      	mov	r0, sl
 8008218:	461c      	mov	r4, r3
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	f000 fd48 	bl	8008cb0 <acc_config_sweeps_per_frame_set>
 8008220:	9b05      	ldr	r3, [sp, #20]
 8008222:	46a3      	mov	fp, r4
 8008224:	f893 40d1 	ldrb.w	r4, [r3, #209]	@ 0xd1
 8008228:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800822c:	42a3      	cmp	r3, r4
 800822e:	f080 8093 	bcs.w	8008358 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x164>
 8008232:	221a      	movs	r2, #26
 8008234:	fb02 f503 	mul.w	r5, r2, r3
 8008238:	9b05      	ldr	r3, [sp, #20]
 800823a:	eb03 0c05 	add.w	ip, r3, r5
 800823e:	ae07      	add	r6, sp, #28
 8008240:	f85c 0f68 	ldr.w	r0, [ip, #104]!
 8008244:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008248:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800824c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8008250:	f8bc 7018 	ldrh.w	r7, [ip, #24]
 8008254:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008256:	9a05      	ldr	r2, [sp, #20]
 8008258:	f8dc 1014 	ldr.w	r1, [ip, #20]
 800825c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8008260:	f105 0368 	add.w	r3, r5, #104	@ 0x68
 8008264:	c603      	stmia	r6!, {r0, r1}
 8008266:	f832 8003 	ldrh.w	r8, [r2, r3]
 800826a:	8037      	strh	r7, [r6, #0]
 800826c:	4413      	add	r3, r2
 800826e:	7d9a      	ldrb	r2, [r3, #22]
 8008270:	7dd9      	ldrb	r1, [r3, #23]
 8008272:	f893 9002 	ldrb.w	r9, [r3, #2]
 8008276:	7e1b      	ldrb	r3, [r3, #24]
 8008278:	9102      	str	r1, [sp, #8]
 800827a:	9303      	str	r3, [sp, #12]
 800827c:	b95a      	cbnz	r2, 8008296 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xa2>
 800827e:	2400      	movs	r4, #0
 8008280:	4650      	mov	r0, sl
 8008282:	4659      	mov	r1, fp
 8008284:	f000 fac6 	bl	8008814 <acc_config_num_subsweeps_set>
 8008288:	4620      	mov	r0, r4
 800828a:	b00f      	add	sp, #60	@ 0x3c
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	468b      	mov	fp, r1
 8008292:	460c      	mov	r4, r1
 8008294:	e7f4      	b.n	8008280 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8c>
 8008296:	3a01      	subs	r2, #1
 8008298:	f012 0fff 	tst.w	r2, #255	@ 0xff
 800829c:	b2d7      	uxtb	r7, r2
 800829e:	d053      	beq.n	8008348 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x154>
 80082a0:	f1bb 0f03 	cmp.w	fp, #3
 80082a4:	d8eb      	bhi.n	800827e <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8a>
 80082a6:	3f01      	subs	r7, #1
 80082a8:	b2bf      	uxth	r7, r7
 80082aa:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 80082ae:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80082b2:	ac08      	add	r4, sp, #32
 80082b4:	e00d      	b.n	80082d2 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xde>
 80082b6:	9903      	ldr	r1, [sp, #12]
 80082b8:	465a      	mov	r2, fp
 80082ba:	4650      	mov	r0, sl
 80082bc:	f000 fd6a 	bl	8008d94 <acc_config_subsweep_prf_set>
 80082c0:	f10b 0b01 	add.w	fp, fp, #1
 80082c4:	42a7      	cmp	r7, r4
 80082c6:	fa5f fb8b 	uxtb.w	fp, fp
 80082ca:	d03a      	beq.n	8008342 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x14e>
 80082cc:	f1bb 0f04 	cmp.w	fp, #4
 80082d0:	d0d5      	beq.n	800827e <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8a>
 80082d2:	f9b4 5000 	ldrsh.w	r5, [r4]
 80082d6:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	1b59      	subs	r1, r3, r5
 80082de:	040b      	lsls	r3, r1, #16
 80082e0:	465a      	mov	r2, fp
 80082e2:	4650      	mov	r0, sl
 80082e4:	b28e      	uxth	r6, r1
 80082e6:	d4ca      	bmi.n	800827e <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8a>
 80082e8:	fbb6 f6f8 	udiv	r6, r6, r8
 80082ec:	8921      	ldrh	r1, [r4, #8]
 80082ee:	f000 fbd1 	bl	8008a94 <acc_config_subsweep_hwaas_set>
 80082f2:	465a      	mov	r2, fp
 80082f4:	4629      	mov	r1, r5
 80082f6:	4650      	mov	r0, sl
 80082f8:	f000 fabc 	bl	8008874 <acc_config_subsweep_start_point_set>
 80082fc:	465a      	mov	r2, fp
 80082fe:	4631      	mov	r1, r6
 8008300:	4650      	mov	r0, sl
 8008302:	f000 fafb 	bl	80088fc <acc_config_subsweep_num_points_set>
 8008306:	465a      	mov	r2, fp
 8008308:	4641      	mov	r1, r8
 800830a:	4650      	mov	r0, sl
 800830c:	f000 fb3a 	bl	8008984 <acc_config_subsweep_step_length_set>
 8008310:	465a      	mov	r2, fp
 8008312:	4649      	mov	r1, r9
 8008314:	4650      	mov	r0, sl
 8008316:	f000 fb79 	bl	8008a0c <acc_config_subsweep_profile_set>
 800831a:	465a      	mov	r2, fp
 800831c:	210a      	movs	r1, #10
 800831e:	4650      	mov	r0, sl
 8008320:	f000 fbfc 	bl	8008b1c <acc_config_subsweep_receiver_gain_set>
 8008324:	465a      	mov	r2, fp
 8008326:	2101      	movs	r1, #1
 8008328:	4650      	mov	r0, sl
 800832a:	f000 fc5d 	bl	8008be8 <acc_config_subsweep_phase_enhancement_set>
 800832e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8008332:	2a00      	cmp	r2, #0
 8008334:	d1bf      	bne.n	80082b6 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xc2>
 8008336:	4649      	mov	r1, r9
 8008338:	4618      	mov	r0, r3
 800833a:	f002 fcb5 	bl	800aca8 <acc_detector_utils_select_prf>
 800833e:	4601      	mov	r1, r0
 8008340:	e7ba      	b.n	80082b8 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xc4>
 8008342:	9b05      	ldr	r3, [sp, #20]
 8008344:	f893 40d1 	ldrb.w	r4, [r3, #209]	@ 0xd1
 8008348:	9b04      	ldr	r3, [sp, #16]
 800834a:	3301      	adds	r3, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008352:	42a3      	cmp	r3, r4
 8008354:	f4ff af6d 	bcc.w	8008232 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x3e>
 8008358:	2401      	movs	r4, #1
 800835a:	e791      	b.n	8008280 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8c>
 800835c:	f8dd b014 	ldr.w	fp, [sp, #20]
 8008360:	465c      	mov	r4, fp
 8008362:	e78d      	b.n	8008280 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8c>

08008364 <acc_detector_distance_translation_get_far_range_sensor_config>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	b0b6      	sub	sp, #216	@ 0xd8
 8008368:	460e      	mov	r6, r1
 800836a:	4605      	mov	r5, r0
 800836c:	f7ff f938 	bl	80075e0 <validate_distance_settings>
 8008370:	22d2      	movs	r2, #210	@ 0xd2
 8008372:	4604      	mov	r4, r0
 8008374:	2100      	movs	r1, #0
 8008376:	a801      	add	r0, sp, #4
 8008378:	f008 faa4 	bl	80108c4 <memset>
 800837c:	b914      	cbnz	r4, 8008384 <acc_detector_distance_translation_get_far_range_sensor_config+0x20>
 800837e:	2000      	movs	r0, #0
 8008380:	b036      	add	sp, #216	@ 0xd8
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	4628      	mov	r0, r5
 8008386:	a901      	add	r1, sp, #4
 8008388:	f7ff face 	bl	8007928 <create_group_plans>
 800838c:	2800      	cmp	r0, #0
 800838e:	d0f6      	beq.n	800837e <acc_detector_distance_translation_get_far_range_sensor_config+0x1a>
 8008390:	f89d 30d5 	ldrb.w	r3, [sp, #213]	@ 0xd5
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0f2      	beq.n	800837e <acc_detector_distance_translation_get_far_range_sensor_config+0x1a>
 8008398:	4631      	mov	r1, r6
 800839a:	a801      	add	r0, sp, #4
 800839c:	f7ff ff2a 	bl	80081f4 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config>
 80083a0:	b036      	add	sp, #216	@ 0xd8
 80083a2:	bd70      	pop	{r4, r5, r6, pc}

080083a4 <acc_detector_distance_utils_reflector_shape_exponent_get>:
 80083a4:	b170      	cbz	r0, 80083c4 <acc_detector_distance_utils_reflector_shape_exponent_get+0x20>
 80083a6:	2801      	cmp	r0, #1
 80083a8:	d009      	beq.n	80083be <acc_detector_distance_utils_reflector_shape_exponent_get+0x1a>
 80083aa:	b508      	push	{r3, lr}
 80083ac:	4b07      	ldr	r3, [pc, #28]	@ (80083cc <acc_detector_distance_utils_reflector_shape_exponent_get+0x28>)
 80083ae:	4a08      	ldr	r2, [pc, #32]	@ (80083d0 <acc_detector_distance_utils_reflector_shape_exponent_get+0x2c>)
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	4908      	ldr	r1, [pc, #32]	@ (80083d4 <acc_detector_distance_utils_reflector_shape_exponent_get+0x30>)
 80083b4:	2000      	movs	r0, #0
 80083b6:	4798      	blx	r3
 80083b8:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80083d8 <acc_detector_distance_utils_reflector_shape_exponent_get+0x34>
 80083bc:	bd08      	pop	{r3, pc}
 80083be:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80083c2:	4770      	bx	lr
 80083c4:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	200003f0 	.word	0x200003f0
 80083d0:	08012284 	.word	0x08012284
 80083d4:	0801229c 	.word	0x0801229c
 80083d8:	00000000 	.word	0x00000000

080083dc <acc_version_get>:
 80083dc:	4800      	ldr	r0, [pc, #0]	@ (80083e0 <acc_version_get+0x4>)
 80083de:	4770      	bx	lr
 80083e0:	0801197c 	.word	0x0801197c

080083e4 <acc_rss_hal_register>:
 80083e4:	b108      	cbz	r0, 80083ea <acc_rss_hal_register+0x6>
 80083e6:	f002 bd23 	b.w	800ae30 <acc_rss_integration_register_a121>
 80083ea:	4770      	bx	lr

080083ec <acc_rss_get_buffer_size>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f000 fc74 	bl	8008cdc <acc_config_get_settings>
 80083f4:	b158      	cbz	r0, 800840e <acc_rss_get_buffer_size+0x22>
 80083f6:	b124      	cbz	r4, 8008402 <acc_rss_get_buffer_size+0x16>
 80083f8:	4621      	mov	r1, r4
 80083fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083fe:	f002 bdf9 	b.w	800aff4 <acc_pipeline_get_buffer_size>
 8008402:	4b04      	ldr	r3, [pc, #16]	@ (8008414 <acc_rss_get_buffer_size+0x28>)
 8008404:	4a04      	ldr	r2, [pc, #16]	@ (8008418 <acc_rss_get_buffer_size+0x2c>)
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	4904      	ldr	r1, [pc, #16]	@ (800841c <acc_rss_get_buffer_size+0x30>)
 800840a:	4620      	mov	r0, r4
 800840c:	4798      	blx	r3
 800840e:	2000      	movs	r0, #0
 8008410:	bd10      	pop	{r4, pc}
 8008412:	bf00      	nop
 8008414:	200003f0 	.word	0x200003f0
 8008418:	080122b4 	.word	0x080122b4
 800841c:	080122d0 	.word	0x080122d0

08008420 <acc_config_subsweep_validate.part.0>:
 8008420:	b508      	push	{r3, lr}
 8008422:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <acc_config_subsweep_validate.part.0+0x14>)
 8008424:	4a04      	ldr	r2, [pc, #16]	@ (8008438 <acc_config_subsweep_validate.part.0+0x18>)
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	4904      	ldr	r1, [pc, #16]	@ (800843c <acc_config_subsweep_validate.part.0+0x1c>)
 800842a:	2000      	movs	r0, #0
 800842c:	4798      	blx	r3
 800842e:	2000      	movs	r0, #0
 8008430:	bd08      	pop	{r3, pc}
 8008432:	bf00      	nop
 8008434:	200003f0 	.word	0x200003f0
 8008438:	080122dc 	.word	0x080122dc
 800843c:	080122f4 	.word	0x080122f4

08008440 <acc_config_log>:
 8008440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	b120      	cbz	r0, 8008452 <acc_config_log+0x12>
 8008448:	4bbf      	ldr	r3, [pc, #764]	@ (8008748 <acc_config_log+0x308>)
 800844a:	6802      	ldr	r2, [r0, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	4604      	mov	r4, r0
 8008450:	d008      	beq.n	8008464 <acc_config_log+0x24>
 8008452:	4bbe      	ldr	r3, [pc, #760]	@ (800874c <acc_config_log+0x30c>)
 8008454:	4abe      	ldr	r2, [pc, #760]	@ (8008750 <acc_config_log+0x310>)
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	49be      	ldr	r1, [pc, #760]	@ (8008754 <acc_config_log+0x314>)
 800845a:	2000      	movs	r0, #0
 800845c:	b002      	add	sp, #8
 800845e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008462:	4718      	bx	r3
 8008464:	f002 fda0 	bl	800afa8 <acc_rss_integration_log_level>
 8008468:	2801      	cmp	r0, #1
 800846a:	d935      	bls.n	80084d8 <acc_config_log+0x98>
 800846c:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 8008470:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8008758 <acc_config_log+0x318>
 8008474:	4bb5      	ldr	r3, [pc, #724]	@ (800874c <acc_config_log+0x30c>)
 8008476:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 8008758 <acc_config_log+0x318>
 800847a:	691d      	ldr	r5, [r3, #16]
 800847c:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 800875c <acc_config_log+0x31c>
 8008480:	49b4      	ldr	r1, [pc, #720]	@ (8008754 <acc_config_log+0x314>)
 8008482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848a:	bf48      	it	mi
 800848c:	eef1 7a67 	vnegmi.f32	s15, s15
 8008490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008494:	bf4c      	ite	mi
 8008496:	4bb2      	ldrmi	r3, [pc, #712]	@ (8008760 <acc_config_log+0x320>)
 8008498:	4bb2      	ldrpl	r3, [pc, #712]	@ (8008764 <acc_config_log+0x324>)
 800849a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800849e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a6:	ee17 2a10 	vmov	r2, s14
 80084aa:	bf4c      	ite	mi
 80084ac:	eeb1 7a67 	vnegmi.f32	s14, s15
 80084b0:	eeb0 7a67 	vmovpl.f32	s14, s15
 80084b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80084b8:	9200      	str	r2, [sp, #0]
 80084ba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80084be:	4aaa      	ldr	r2, [pc, #680]	@ (8008768 <acc_config_log+0x328>)
 80084c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80084c4:	2002      	movs	r0, #2
 80084c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d2:	edcd 7a01 	vstr	s15, [sp, #4]
 80084d6:	47a8      	blx	r5
 80084d8:	f002 fd66 	bl	800afa8 <acc_rss_integration_log_level>
 80084dc:	2801      	cmp	r0, #1
 80084de:	d935      	bls.n	800854c <acc_config_log+0x10c>
 80084e0:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 80084e4:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8008758 <acc_config_log+0x318>
 80084e8:	4b98      	ldr	r3, [pc, #608]	@ (800874c <acc_config_log+0x30c>)
 80084ea:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8008758 <acc_config_log+0x318>
 80084ee:	691d      	ldr	r5, [r3, #16]
 80084f0:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800875c <acc_config_log+0x31c>
 80084f4:	4997      	ldr	r1, [pc, #604]	@ (8008754 <acc_config_log+0x314>)
 80084f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80084fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fe:	bf48      	it	mi
 8008500:	eef1 7a67 	vnegmi.f32	s15, s15
 8008504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008508:	bf4c      	ite	mi
 800850a:	4b95      	ldrmi	r3, [pc, #596]	@ (8008760 <acc_config_log+0x320>)
 800850c:	4b95      	ldrpl	r3, [pc, #596]	@ (8008764 <acc_config_log+0x324>)
 800850e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851a:	ee17 2a10 	vmov	r2, s14
 800851e:	bf4c      	ite	mi
 8008520:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008524:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008528:	ee37 7a06 	vadd.f32	s14, s14, s12
 800852c:	9200      	str	r2, [sp, #0]
 800852e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008532:	4a8e      	ldr	r2, [pc, #568]	@ (800876c <acc_config_log+0x32c>)
 8008534:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008538:	2002      	movs	r0, #2
 800853a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800853e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008546:	edcd 7a01 	vstr	s15, [sp, #4]
 800854a:	47a8      	blx	r5
 800854c:	f002 fd2c 	bl	800afa8 <acc_rss_integration_log_level>
 8008550:	2801      	cmp	r0, #1
 8008552:	d907      	bls.n	8008564 <acc_config_log+0x124>
 8008554:	4a7d      	ldr	r2, [pc, #500]	@ (800874c <acc_config_log+0x30c>)
 8008556:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 800855a:	6915      	ldr	r5, [r2, #16]
 800855c:	497d      	ldr	r1, [pc, #500]	@ (8008754 <acc_config_log+0x314>)
 800855e:	4a84      	ldr	r2, [pc, #528]	@ (8008770 <acc_config_log+0x330>)
 8008560:	2002      	movs	r0, #2
 8008562:	47a8      	blx	r5
 8008564:	f002 fd20 	bl	800afa8 <acc_rss_integration_log_level>
 8008568:	2801      	cmp	r0, #1
 800856a:	f200 80e0 	bhi.w	800872e <acc_config_log+0x2ee>
 800856e:	f002 fd1b 	bl	800afa8 <acc_rss_integration_log_level>
 8008572:	2801      	cmp	r0, #1
 8008574:	f200 80c3 	bhi.w	80086fe <acc_config_log+0x2be>
 8008578:	f002 fd16 	bl	800afa8 <acc_rss_integration_log_level>
 800857c:	2801      	cmp	r0, #1
 800857e:	f200 80b2 	bhi.w	80086e6 <acc_config_log+0x2a6>
 8008582:	f002 fd11 	bl	800afa8 <acc_rss_integration_log_level>
 8008586:	2801      	cmp	r0, #1
 8008588:	f200 80c5 	bhi.w	8008716 <acc_config_log+0x2d6>
 800858c:	f002 fd0c 	bl	800afa8 <acc_rss_integration_log_level>
 8008590:	2801      	cmp	r0, #1
 8008592:	d907      	bls.n	80085a4 <acc_config_log+0x164>
 8008594:	4a6d      	ldr	r2, [pc, #436]	@ (800874c <acc_config_log+0x30c>)
 8008596:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 800859a:	6915      	ldr	r5, [r2, #16]
 800859c:	496d      	ldr	r1, [pc, #436]	@ (8008754 <acc_config_log+0x314>)
 800859e:	4a75      	ldr	r2, [pc, #468]	@ (8008774 <acc_config_log+0x334>)
 80085a0:	2002      	movs	r0, #2
 80085a2:	47a8      	blx	r5
 80085a4:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 8099 	beq.w	80086e0 <acc_config_log+0x2a0>
 80085ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800874c <acc_config_log+0x30c>
 80085b2:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 80087b0 <acc_config_log+0x370>
 80085b6:	4e67      	ldr	r6, [pc, #412]	@ (8008754 <acc_config_log+0x314>)
 80085b8:	4625      	mov	r5, r4
 80085ba:	f04f 0900 	mov.w	r9, #0
 80085be:	f002 fcf3 	bl	800afa8 <acc_rss_integration_log_level>
 80085c2:	2801      	cmp	r0, #1
 80085c4:	d906      	bls.n	80085d4 <acc_config_log+0x194>
 80085c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085ca:	464b      	mov	r3, r9
 80085cc:	4652      	mov	r2, sl
 80085ce:	4631      	mov	r1, r6
 80085d0:	2002      	movs	r0, #2
 80085d2:	47b8      	blx	r7
 80085d4:	f002 fce8 	bl	800afa8 <acc_rss_integration_log_level>
 80085d8:	2801      	cmp	r0, #1
 80085da:	d906      	bls.n	80085ea <acc_config_log+0x1aa>
 80085dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085e0:	686b      	ldr	r3, [r5, #4]
 80085e2:	4a65      	ldr	r2, [pc, #404]	@ (8008778 <acc_config_log+0x338>)
 80085e4:	4631      	mov	r1, r6
 80085e6:	2002      	movs	r0, #2
 80085e8:	47b8      	blx	r7
 80085ea:	f002 fcdd 	bl	800afa8 <acc_rss_integration_log_level>
 80085ee:	2801      	cmp	r0, #1
 80085f0:	d906      	bls.n	8008600 <acc_config_log+0x1c0>
 80085f2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085f6:	892b      	ldrh	r3, [r5, #8]
 80085f8:	4a60      	ldr	r2, [pc, #384]	@ (800877c <acc_config_log+0x33c>)
 80085fa:	4631      	mov	r1, r6
 80085fc:	2002      	movs	r0, #2
 80085fe:	47b8      	blx	r7
 8008600:	f002 fcd2 	bl	800afa8 <acc_rss_integration_log_level>
 8008604:	2801      	cmp	r0, #1
 8008606:	d906      	bls.n	8008616 <acc_config_log+0x1d6>
 8008608:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800860c:	896b      	ldrh	r3, [r5, #10]
 800860e:	4a5c      	ldr	r2, [pc, #368]	@ (8008780 <acc_config_log+0x340>)
 8008610:	4631      	mov	r1, r6
 8008612:	2002      	movs	r0, #2
 8008614:	47b8      	blx	r7
 8008616:	f002 fcc7 	bl	800afa8 <acc_rss_integration_log_level>
 800861a:	2801      	cmp	r0, #1
 800861c:	d906      	bls.n	800862c <acc_config_log+0x1ec>
 800861e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008622:	89ab      	ldrh	r3, [r5, #12]
 8008624:	4a57      	ldr	r2, [pc, #348]	@ (8008784 <acc_config_log+0x344>)
 8008626:	4631      	mov	r1, r6
 8008628:	2002      	movs	r0, #2
 800862a:	47b8      	blx	r7
 800862c:	f002 fcbc 	bl	800afa8 <acc_rss_integration_log_level>
 8008630:	2801      	cmp	r0, #1
 8008632:	d906      	bls.n	8008642 <acc_config_log+0x202>
 8008634:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008638:	7bab      	ldrb	r3, [r5, #14]
 800863a:	4a53      	ldr	r2, [pc, #332]	@ (8008788 <acc_config_log+0x348>)
 800863c:	4631      	mov	r1, r6
 800863e:	2002      	movs	r0, #2
 8008640:	47b8      	blx	r7
 8008642:	f002 fcb1 	bl	800afa8 <acc_rss_integration_log_level>
 8008646:	2801      	cmp	r0, #1
 8008648:	d909      	bls.n	800865e <acc_config_log+0x21e>
 800864a:	7be8      	ldrb	r0, [r5, #15]
 800864c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008650:	f004 fe0c 	bl	800d26c <acc_utils_bool_to_str>
 8008654:	4a4d      	ldr	r2, [pc, #308]	@ (800878c <acc_config_log+0x34c>)
 8008656:	4603      	mov	r3, r0
 8008658:	4631      	mov	r1, r6
 800865a:	2002      	movs	r0, #2
 800865c:	47b8      	blx	r7
 800865e:	f002 fca3 	bl	800afa8 <acc_rss_integration_log_level>
 8008662:	2801      	cmp	r0, #1
 8008664:	d909      	bls.n	800867a <acc_config_log+0x23a>
 8008666:	7c28      	ldrb	r0, [r5, #16]
 8008668:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800866c:	f004 fdfe 	bl	800d26c <acc_utils_bool_to_str>
 8008670:	4a47      	ldr	r2, [pc, #284]	@ (8008790 <acc_config_log+0x350>)
 8008672:	4603      	mov	r3, r0
 8008674:	4631      	mov	r1, r6
 8008676:	2002      	movs	r0, #2
 8008678:	47b8      	blx	r7
 800867a:	f002 fc95 	bl	800afa8 <acc_rss_integration_log_level>
 800867e:	2801      	cmp	r0, #1
 8008680:	d909      	bls.n	8008696 <acc_config_log+0x256>
 8008682:	7c68      	ldrb	r0, [r5, #17]
 8008684:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008688:	f004 fdf0 	bl	800d26c <acc_utils_bool_to_str>
 800868c:	4a41      	ldr	r2, [pc, #260]	@ (8008794 <acc_config_log+0x354>)
 800868e:	4603      	mov	r3, r0
 8008690:	4631      	mov	r1, r6
 8008692:	2002      	movs	r0, #2
 8008694:	47b8      	blx	r7
 8008696:	f002 fc87 	bl	800afa8 <acc_rss_integration_log_level>
 800869a:	2801      	cmp	r0, #1
 800869c:	d909      	bls.n	80086b2 <acc_config_log+0x272>
 800869e:	7ce8      	ldrb	r0, [r5, #19]
 80086a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086a4:	f004 fdfa 	bl	800d29c <acc_utils_profile_to_str>
 80086a8:	4a3b      	ldr	r2, [pc, #236]	@ (8008798 <acc_config_log+0x358>)
 80086aa:	4603      	mov	r3, r0
 80086ac:	4631      	mov	r1, r6
 80086ae:	2002      	movs	r0, #2
 80086b0:	47b8      	blx	r7
 80086b2:	f002 fc79 	bl	800afa8 <acc_rss_integration_log_level>
 80086b6:	2801      	cmp	r0, #1
 80086b8:	d909      	bls.n	80086ce <acc_config_log+0x28e>
 80086ba:	7ca8      	ldrb	r0, [r5, #18]
 80086bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086c0:	f004 fdfa 	bl	800d2b8 <acc_utils_prf_to_str>
 80086c4:	4a35      	ldr	r2, [pc, #212]	@ (800879c <acc_config_log+0x35c>)
 80086c6:	4603      	mov	r3, r0
 80086c8:	4631      	mov	r1, r6
 80086ca:	2002      	movs	r0, #2
 80086cc:	47b8      	blx	r7
 80086ce:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 80086d2:	f109 0901 	add.w	r9, r9, #1
 80086d6:	454b      	cmp	r3, r9
 80086d8:	f105 0510 	add.w	r5, r5, #16
 80086dc:	f63f af6f 	bhi.w	80085be <acc_config_log+0x17e>
 80086e0:	b002      	add	sp, #8
 80086e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e6:	4b19      	ldr	r3, [pc, #100]	@ (800874c <acc_config_log+0x30c>)
 80086e8:	f894 0053 	ldrb.w	r0, [r4, #83]	@ 0x53
 80086ec:	691d      	ldr	r5, [r3, #16]
 80086ee:	f004 fdc9 	bl	800d284 <acc_utils_idle_state_to_str>
 80086f2:	4a2b      	ldr	r2, [pc, #172]	@ (80087a0 <acc_config_log+0x360>)
 80086f4:	4917      	ldr	r1, [pc, #92]	@ (8008754 <acc_config_log+0x314>)
 80086f6:	4603      	mov	r3, r0
 80086f8:	2002      	movs	r0, #2
 80086fa:	47a8      	blx	r5
 80086fc:	e741      	b.n	8008582 <acc_config_log+0x142>
 80086fe:	4b13      	ldr	r3, [pc, #76]	@ (800874c <acc_config_log+0x30c>)
 8008700:	f894 004f 	ldrb.w	r0, [r4, #79]	@ 0x4f
 8008704:	691d      	ldr	r5, [r3, #16]
 8008706:	f004 fdb1 	bl	800d26c <acc_utils_bool_to_str>
 800870a:	4a26      	ldr	r2, [pc, #152]	@ (80087a4 <acc_config_log+0x364>)
 800870c:	4911      	ldr	r1, [pc, #68]	@ (8008754 <acc_config_log+0x314>)
 800870e:	4603      	mov	r3, r0
 8008710:	2002      	movs	r0, #2
 8008712:	47a8      	blx	r5
 8008714:	e730      	b.n	8008578 <acc_config_log+0x138>
 8008716:	4b0d      	ldr	r3, [pc, #52]	@ (800874c <acc_config_log+0x30c>)
 8008718:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 800871c:	691d      	ldr	r5, [r3, #16]
 800871e:	f004 fdb1 	bl	800d284 <acc_utils_idle_state_to_str>
 8008722:	4a21      	ldr	r2, [pc, #132]	@ (80087a8 <acc_config_log+0x368>)
 8008724:	490b      	ldr	r1, [pc, #44]	@ (8008754 <acc_config_log+0x314>)
 8008726:	4603      	mov	r3, r0
 8008728:	2002      	movs	r0, #2
 800872a:	47a8      	blx	r5
 800872c:	e72e      	b.n	800858c <acc_config_log+0x14c>
 800872e:	4b07      	ldr	r3, [pc, #28]	@ (800874c <acc_config_log+0x30c>)
 8008730:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 8008734:	691d      	ldr	r5, [r3, #16]
 8008736:	f004 fd99 	bl	800d26c <acc_utils_bool_to_str>
 800873a:	4a1c      	ldr	r2, [pc, #112]	@ (80087ac <acc_config_log+0x36c>)
 800873c:	4905      	ldr	r1, [pc, #20]	@ (8008754 <acc_config_log+0x314>)
 800873e:	4603      	mov	r3, r0
 8008740:	2002      	movs	r0, #2
 8008742:	47a8      	blx	r5
 8008744:	e713      	b.n	800856e <acc_config_log+0x12e>
 8008746:	bf00      	nop
 8008748:	1337b00f 	.word	0x1337b00f
 800874c:	200003f0 	.word	0x200003f0
 8008750:	080122fc 	.word	0x080122fc
 8008754:	080122f4 	.word	0x080122f4
 8008758:	350637bd 	.word	0x350637bd
 800875c:	49742400 	.word	0x49742400
 8008760:	08011bc0 	.word	0x08011bc0
 8008764:	08012dc8 	.word	0x08012dc8
 8008768:	08012314 	.word	0x08012314
 800876c:	0801232c 	.word	0x0801232c
 8008770:	08012344 	.word	0x08012344
 8008774:	080123c8 	.word	0x080123c8
 8008778:	080123ec 	.word	0x080123ec
 800877c:	08012408 	.word	0x08012408
 8008780:	08012424 	.word	0x08012424
 8008784:	08012440 	.word	0x08012440
 8008788:	0801245c 	.word	0x0801245c
 800878c:	08012478 	.word	0x08012478
 8008790:	08012494 	.word	0x08012494
 8008794:	080124b0 	.word	0x080124b0
 8008798:	080124cc 	.word	0x080124cc
 800879c:	080124e8 	.word	0x080124e8
 80087a0:	08012390 	.word	0x08012390
 80087a4:	08012378 	.word	0x08012378
 80087a8:	080123ac 	.word	0x080123ac
 80087ac:	0801235c 	.word	0x0801235c
 80087b0:	080123dc 	.word	0x080123dc

080087b4 <acc_config_create>:
 80087b4:	b510      	push	{r4, lr}
 80087b6:	4a08      	ldr	r2, [pc, #32]	@ (80087d8 <acc_config_create+0x24>)
 80087b8:	2356      	movs	r3, #86	@ 0x56
 80087ba:	215c      	movs	r1, #92	@ 0x5c
 80087bc:	2001      	movs	r0, #1
 80087be:	f002 fbc3 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 80087c2:	4604      	mov	r4, r0
 80087c4:	b130      	cbz	r0, 80087d4 <acc_config_create+0x20>
 80087c6:	4b05      	ldr	r3, [pc, #20]	@ (80087dc <acc_config_create+0x28>)
 80087c8:	f840 3b04 	str.w	r3, [r0], #4
 80087cc:	4904      	ldr	r1, [pc, #16]	@ (80087e0 <acc_config_create+0x2c>)
 80087ce:	2258      	movs	r2, #88	@ 0x58
 80087d0:	f008 f903 	bl	80109da <memcpy>
 80087d4:	4620      	mov	r0, r4
 80087d6:	bd10      	pop	{r4, pc}
 80087d8:	080122f4 	.word	0x080122f4
 80087dc:	1337b00f 	.word	0x1337b00f
 80087e0:	08012504 	.word	0x08012504

080087e4 <acc_config_destroy>:
 80087e4:	b118      	cbz	r0, 80087ee <acc_config_destroy+0xa>
 80087e6:	4a07      	ldr	r2, [pc, #28]	@ (8008804 <acc_config_destroy+0x20>)
 80087e8:	6801      	ldr	r1, [r0, #0]
 80087ea:	4291      	cmp	r1, r2
 80087ec:	d005      	beq.n	80087fa <acc_config_destroy+0x16>
 80087ee:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <acc_config_destroy+0x24>)
 80087f0:	4a06      	ldr	r2, [pc, #24]	@ (800880c <acc_config_destroy+0x28>)
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	4906      	ldr	r1, [pc, #24]	@ (8008810 <acc_config_destroy+0x2c>)
 80087f6:	2000      	movs	r0, #0
 80087f8:	4718      	bx	r3
 80087fa:	2200      	movs	r2, #0
 80087fc:	6002      	str	r2, [r0, #0]
 80087fe:	f002 bbbf 	b.w	800af80 <acc_rss_integration_mem_free>
 8008802:	bf00      	nop
 8008804:	1337b00f 	.word	0x1337b00f
 8008808:	200003f0 	.word	0x200003f0
 800880c:	080122fc 	.word	0x080122fc
 8008810:	080122f4 	.word	0x080122f4

08008814 <acc_config_num_subsweeps_set>:
 8008814:	b118      	cbz	r0, 800881e <acc_config_num_subsweeps_set+0xa>
 8008816:	4b06      	ldr	r3, [pc, #24]	@ (8008830 <acc_config_num_subsweeps_set+0x1c>)
 8008818:	6802      	ldr	r2, [r0, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d005      	beq.n	800882a <acc_config_num_subsweeps_set+0x16>
 800881e:	4b05      	ldr	r3, [pc, #20]	@ (8008834 <acc_config_num_subsweeps_set+0x20>)
 8008820:	4a05      	ldr	r2, [pc, #20]	@ (8008838 <acc_config_num_subsweeps_set+0x24>)
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	4905      	ldr	r1, [pc, #20]	@ (800883c <acc_config_num_subsweeps_set+0x28>)
 8008826:	2000      	movs	r0, #0
 8008828:	4718      	bx	r3
 800882a:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 800882e:	4770      	bx	lr
 8008830:	1337b00f 	.word	0x1337b00f
 8008834:	200003f0 	.word	0x200003f0
 8008838:	080122fc 	.word	0x080122fc
 800883c:	080122f4 	.word	0x080122f4

08008840 <acc_config_num_subsweeps_get>:
 8008840:	b508      	push	{r3, lr}
 8008842:	b118      	cbz	r0, 800884c <acc_config_num_subsweeps_get+0xc>
 8008844:	4b07      	ldr	r3, [pc, #28]	@ (8008864 <acc_config_num_subsweeps_get+0x24>)
 8008846:	6802      	ldr	r2, [r0, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d007      	beq.n	800885c <acc_config_num_subsweeps_get+0x1c>
 800884c:	4b06      	ldr	r3, [pc, #24]	@ (8008868 <acc_config_num_subsweeps_get+0x28>)
 800884e:	4a07      	ldr	r2, [pc, #28]	@ (800886c <acc_config_num_subsweeps_get+0x2c>)
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	4907      	ldr	r1, [pc, #28]	@ (8008870 <acc_config_num_subsweeps_get+0x30>)
 8008854:	2000      	movs	r0, #0
 8008856:	4798      	blx	r3
 8008858:	2001      	movs	r0, #1
 800885a:	bd08      	pop	{r3, pc}
 800885c:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
 8008860:	bd08      	pop	{r3, pc}
 8008862:	bf00      	nop
 8008864:	1337b00f 	.word	0x1337b00f
 8008868:	200003f0 	.word	0x200003f0
 800886c:	080122fc 	.word	0x080122fc
 8008870:	080122f4 	.word	0x080122f4

08008874 <acc_config_subsweep_start_point_set>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	b120      	cbz	r0, 8008882 <acc_config_subsweep_start_point_set+0xe>
 8008878:	4b0b      	ldr	r3, [pc, #44]	@ (80088a8 <acc_config_subsweep_start_point_set+0x34>)
 800887a:	4604      	mov	r4, r0
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	4298      	cmp	r0, r3
 8008880:	d007      	beq.n	8008892 <acc_config_subsweep_start_point_set+0x1e>
 8008882:	4b0a      	ldr	r3, [pc, #40]	@ (80088ac <acc_config_subsweep_start_point_set+0x38>)
 8008884:	4a0a      	ldr	r2, [pc, #40]	@ (80088b0 <acc_config_subsweep_start_point_set+0x3c>)
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	490a      	ldr	r1, [pc, #40]	@ (80088b4 <acc_config_subsweep_start_point_set+0x40>)
 800888a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800888e:	2000      	movs	r0, #0
 8008890:	4718      	bx	r3
 8008892:	2a03      	cmp	r2, #3
 8008894:	460d      	mov	r5, r1
 8008896:	4616      	mov	r6, r2
 8008898:	d902      	bls.n	80088a0 <acc_config_subsweep_start_point_set+0x2c>
 800889a:	f7ff fdc1 	bl	8008420 <acc_config_subsweep_validate.part.0>
 800889e:	b110      	cbz	r0, 80088a6 <acc_config_subsweep_start_point_set+0x32>
 80088a0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 80088a4:	6065      	str	r5, [r4, #4]
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	1337b00f 	.word	0x1337b00f
 80088ac:	200003f0 	.word	0x200003f0
 80088b0:	080122fc 	.word	0x080122fc
 80088b4:	080122f4 	.word	0x080122f4

080088b8 <acc_config_subsweep_start_point_get>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	b120      	cbz	r0, 80088c6 <acc_config_subsweep_start_point_get+0xe>
 80088bc:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <acc_config_subsweep_start_point_get+0x34>)
 80088be:	6802      	ldr	r2, [r0, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	4604      	mov	r4, r0
 80088c4:	d007      	beq.n	80088d6 <acc_config_subsweep_start_point_get+0x1e>
 80088c6:	4b0a      	ldr	r3, [pc, #40]	@ (80088f0 <acc_config_subsweep_start_point_get+0x38>)
 80088c8:	4a0a      	ldr	r2, [pc, #40]	@ (80088f4 <acc_config_subsweep_start_point_get+0x3c>)
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	490a      	ldr	r1, [pc, #40]	@ (80088f8 <acc_config_subsweep_start_point_get+0x40>)
 80088ce:	2000      	movs	r0, #0
 80088d0:	4798      	blx	r3
 80088d2:	2000      	movs	r0, #0
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	2903      	cmp	r1, #3
 80088d8:	460d      	mov	r5, r1
 80088da:	d903      	bls.n	80088e4 <acc_config_subsweep_start_point_get+0x2c>
 80088dc:	f7ff fda0 	bl	8008420 <acc_config_subsweep_validate.part.0>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d0f7      	beq.n	80088d4 <acc_config_subsweep_start_point_get+0x1c>
 80088e4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80088e8:	6860      	ldr	r0, [r4, #4]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	1337b00f 	.word	0x1337b00f
 80088f0:	200003f0 	.word	0x200003f0
 80088f4:	080122fc 	.word	0x080122fc
 80088f8:	080122f4 	.word	0x080122f4

080088fc <acc_config_subsweep_num_points_set>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	b120      	cbz	r0, 800890a <acc_config_subsweep_num_points_set+0xe>
 8008900:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <acc_config_subsweep_num_points_set+0x34>)
 8008902:	4604      	mov	r4, r0
 8008904:	6800      	ldr	r0, [r0, #0]
 8008906:	4298      	cmp	r0, r3
 8008908:	d007      	beq.n	800891a <acc_config_subsweep_num_points_set+0x1e>
 800890a:	4b0a      	ldr	r3, [pc, #40]	@ (8008934 <acc_config_subsweep_num_points_set+0x38>)
 800890c:	4a0a      	ldr	r2, [pc, #40]	@ (8008938 <acc_config_subsweep_num_points_set+0x3c>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	490a      	ldr	r1, [pc, #40]	@ (800893c <acc_config_subsweep_num_points_set+0x40>)
 8008912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008916:	2000      	movs	r0, #0
 8008918:	4718      	bx	r3
 800891a:	2a03      	cmp	r2, #3
 800891c:	460d      	mov	r5, r1
 800891e:	4616      	mov	r6, r2
 8008920:	d902      	bls.n	8008928 <acc_config_subsweep_num_points_set+0x2c>
 8008922:	f7ff fd7d 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008926:	b110      	cbz	r0, 800892e <acc_config_subsweep_num_points_set+0x32>
 8008928:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800892c:	8125      	strh	r5, [r4, #8]
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	1337b00f 	.word	0x1337b00f
 8008934:	200003f0 	.word	0x200003f0
 8008938:	080122fc 	.word	0x080122fc
 800893c:	080122f4 	.word	0x080122f4

08008940 <acc_config_subsweep_num_points_get>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	b120      	cbz	r0, 800894e <acc_config_subsweep_num_points_get+0xe>
 8008944:	4b0b      	ldr	r3, [pc, #44]	@ (8008974 <acc_config_subsweep_num_points_get+0x34>)
 8008946:	6802      	ldr	r2, [r0, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	4604      	mov	r4, r0
 800894c:	d007      	beq.n	800895e <acc_config_subsweep_num_points_get+0x1e>
 800894e:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <acc_config_subsweep_num_points_get+0x38>)
 8008950:	4a0a      	ldr	r2, [pc, #40]	@ (800897c <acc_config_subsweep_num_points_get+0x3c>)
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	490a      	ldr	r1, [pc, #40]	@ (8008980 <acc_config_subsweep_num_points_get+0x40>)
 8008956:	2000      	movs	r0, #0
 8008958:	4798      	blx	r3
 800895a:	2000      	movs	r0, #0
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	2903      	cmp	r1, #3
 8008960:	460d      	mov	r5, r1
 8008962:	d903      	bls.n	800896c <acc_config_subsweep_num_points_get+0x2c>
 8008964:	f7ff fd5c 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008968:	2800      	cmp	r0, #0
 800896a:	d0f7      	beq.n	800895c <acc_config_subsweep_num_points_get+0x1c>
 800896c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8008970:	8920      	ldrh	r0, [r4, #8]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	1337b00f 	.word	0x1337b00f
 8008978:	200003f0 	.word	0x200003f0
 800897c:	080122fc 	.word	0x080122fc
 8008980:	080122f4 	.word	0x080122f4

08008984 <acc_config_subsweep_step_length_set>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	b120      	cbz	r0, 8008992 <acc_config_subsweep_step_length_set+0xe>
 8008988:	4b0b      	ldr	r3, [pc, #44]	@ (80089b8 <acc_config_subsweep_step_length_set+0x34>)
 800898a:	4604      	mov	r4, r0
 800898c:	6800      	ldr	r0, [r0, #0]
 800898e:	4298      	cmp	r0, r3
 8008990:	d007      	beq.n	80089a2 <acc_config_subsweep_step_length_set+0x1e>
 8008992:	4b0a      	ldr	r3, [pc, #40]	@ (80089bc <acc_config_subsweep_step_length_set+0x38>)
 8008994:	4a0a      	ldr	r2, [pc, #40]	@ (80089c0 <acc_config_subsweep_step_length_set+0x3c>)
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	490a      	ldr	r1, [pc, #40]	@ (80089c4 <acc_config_subsweep_step_length_set+0x40>)
 800899a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800899e:	2000      	movs	r0, #0
 80089a0:	4718      	bx	r3
 80089a2:	2a03      	cmp	r2, #3
 80089a4:	460d      	mov	r5, r1
 80089a6:	4616      	mov	r6, r2
 80089a8:	d902      	bls.n	80089b0 <acc_config_subsweep_step_length_set+0x2c>
 80089aa:	f7ff fd39 	bl	8008420 <acc_config_subsweep_validate.part.0>
 80089ae:	b110      	cbz	r0, 80089b6 <acc_config_subsweep_step_length_set+0x32>
 80089b0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 80089b4:	8165      	strh	r5, [r4, #10]
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	1337b00f 	.word	0x1337b00f
 80089bc:	200003f0 	.word	0x200003f0
 80089c0:	080122fc 	.word	0x080122fc
 80089c4:	080122f4 	.word	0x080122f4

080089c8 <acc_config_subsweep_step_length_get>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	b120      	cbz	r0, 80089d6 <acc_config_subsweep_step_length_get+0xe>
 80089cc:	4b0b      	ldr	r3, [pc, #44]	@ (80089fc <acc_config_subsweep_step_length_get+0x34>)
 80089ce:	6802      	ldr	r2, [r0, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	4604      	mov	r4, r0
 80089d4:	d007      	beq.n	80089e6 <acc_config_subsweep_step_length_get+0x1e>
 80089d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a00 <acc_config_subsweep_step_length_get+0x38>)
 80089d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008a04 <acc_config_subsweep_step_length_get+0x3c>)
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	490a      	ldr	r1, [pc, #40]	@ (8008a08 <acc_config_subsweep_step_length_get+0x40>)
 80089de:	2000      	movs	r0, #0
 80089e0:	4798      	blx	r3
 80089e2:	2000      	movs	r0, #0
 80089e4:	bd38      	pop	{r3, r4, r5, pc}
 80089e6:	2903      	cmp	r1, #3
 80089e8:	460d      	mov	r5, r1
 80089ea:	d903      	bls.n	80089f4 <acc_config_subsweep_step_length_get+0x2c>
 80089ec:	f7ff fd18 	bl	8008420 <acc_config_subsweep_validate.part.0>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d0f7      	beq.n	80089e4 <acc_config_subsweep_step_length_get+0x1c>
 80089f4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80089f8:	8960      	ldrh	r0, [r4, #10]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	1337b00f 	.word	0x1337b00f
 8008a00:	200003f0 	.word	0x200003f0
 8008a04:	080122fc 	.word	0x080122fc
 8008a08:	080122f4 	.word	0x080122f4

08008a0c <acc_config_subsweep_profile_set>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	b120      	cbz	r0, 8008a1a <acc_config_subsweep_profile_set+0xe>
 8008a10:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <acc_config_subsweep_profile_set+0x34>)
 8008a12:	4604      	mov	r4, r0
 8008a14:	6800      	ldr	r0, [r0, #0]
 8008a16:	4298      	cmp	r0, r3
 8008a18:	d007      	beq.n	8008a2a <acc_config_subsweep_profile_set+0x1e>
 8008a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a44 <acc_config_subsweep_profile_set+0x38>)
 8008a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a48 <acc_config_subsweep_profile_set+0x3c>)
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	490a      	ldr	r1, [pc, #40]	@ (8008a4c <acc_config_subsweep_profile_set+0x40>)
 8008a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a26:	2000      	movs	r0, #0
 8008a28:	4718      	bx	r3
 8008a2a:	2a03      	cmp	r2, #3
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	4616      	mov	r6, r2
 8008a30:	d902      	bls.n	8008a38 <acc_config_subsweep_profile_set+0x2c>
 8008a32:	f7ff fcf5 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008a36:	b110      	cbz	r0, 8008a3e <acc_config_subsweep_profile_set+0x32>
 8008a38:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8008a3c:	74e5      	strb	r5, [r4, #19]
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	1337b00f 	.word	0x1337b00f
 8008a44:	200003f0 	.word	0x200003f0
 8008a48:	080122fc 	.word	0x080122fc
 8008a4c:	080122f4 	.word	0x080122f4

08008a50 <acc_config_subsweep_profile_get>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	b120      	cbz	r0, 8008a5e <acc_config_subsweep_profile_get+0xe>
 8008a54:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <acc_config_subsweep_profile_get+0x34>)
 8008a56:	6802      	ldr	r2, [r0, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	d007      	beq.n	8008a6e <acc_config_subsweep_profile_get+0x1e>
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <acc_config_subsweep_profile_get+0x38>)
 8008a60:	4a0a      	ldr	r2, [pc, #40]	@ (8008a8c <acc_config_subsweep_profile_get+0x3c>)
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	490a      	ldr	r1, [pc, #40]	@ (8008a90 <acc_config_subsweep_profile_get+0x40>)
 8008a66:	2000      	movs	r0, #0
 8008a68:	4798      	blx	r3
 8008a6a:	2002      	movs	r0, #2
 8008a6c:	bd38      	pop	{r3, r4, r5, pc}
 8008a6e:	2903      	cmp	r1, #3
 8008a70:	460d      	mov	r5, r1
 8008a72:	d903      	bls.n	8008a7c <acc_config_subsweep_profile_get+0x2c>
 8008a74:	f7ff fcd4 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d0f6      	beq.n	8008a6a <acc_config_subsweep_profile_get+0x1a>
 8008a7c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8008a80:	7ce0      	ldrb	r0, [r4, #19]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	1337b00f 	.word	0x1337b00f
 8008a88:	200003f0 	.word	0x200003f0
 8008a8c:	080122fc 	.word	0x080122fc
 8008a90:	080122f4 	.word	0x080122f4

08008a94 <acc_config_subsweep_hwaas_set>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	b120      	cbz	r0, 8008aa2 <acc_config_subsweep_hwaas_set+0xe>
 8008a98:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac8 <acc_config_subsweep_hwaas_set+0x34>)
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	6800      	ldr	r0, [r0, #0]
 8008a9e:	4298      	cmp	r0, r3
 8008aa0:	d007      	beq.n	8008ab2 <acc_config_subsweep_hwaas_set+0x1e>
 8008aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008acc <acc_config_subsweep_hwaas_set+0x38>)
 8008aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad0 <acc_config_subsweep_hwaas_set+0x3c>)
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	490a      	ldr	r1, [pc, #40]	@ (8008ad4 <acc_config_subsweep_hwaas_set+0x40>)
 8008aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aae:	2000      	movs	r0, #0
 8008ab0:	4718      	bx	r3
 8008ab2:	2a03      	cmp	r2, #3
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	4616      	mov	r6, r2
 8008ab8:	d902      	bls.n	8008ac0 <acc_config_subsweep_hwaas_set+0x2c>
 8008aba:	f7ff fcb1 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008abe:	b110      	cbz	r0, 8008ac6 <acc_config_subsweep_hwaas_set+0x32>
 8008ac0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8008ac4:	81a5      	strh	r5, [r4, #12]
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	1337b00f 	.word	0x1337b00f
 8008acc:	200003f0 	.word	0x200003f0
 8008ad0:	080122fc 	.word	0x080122fc
 8008ad4:	080122f4 	.word	0x080122f4

08008ad8 <acc_config_subsweep_hwaas_get>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	b120      	cbz	r0, 8008ae6 <acc_config_subsweep_hwaas_get+0xe>
 8008adc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <acc_config_subsweep_hwaas_get+0x34>)
 8008ade:	6802      	ldr	r2, [r0, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	d007      	beq.n	8008af6 <acc_config_subsweep_hwaas_get+0x1e>
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8008b10 <acc_config_subsweep_hwaas_get+0x38>)
 8008ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8008b14 <acc_config_subsweep_hwaas_get+0x3c>)
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	490a      	ldr	r1, [pc, #40]	@ (8008b18 <acc_config_subsweep_hwaas_get+0x40>)
 8008aee:	2000      	movs	r0, #0
 8008af0:	4798      	blx	r3
 8008af2:	2000      	movs	r0, #0
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	2903      	cmp	r1, #3
 8008af8:	460d      	mov	r5, r1
 8008afa:	d903      	bls.n	8008b04 <acc_config_subsweep_hwaas_get+0x2c>
 8008afc:	f7ff fc90 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d0f7      	beq.n	8008af4 <acc_config_subsweep_hwaas_get+0x1c>
 8008b04:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8008b08:	89a0      	ldrh	r0, [r4, #12]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	1337b00f 	.word	0x1337b00f
 8008b10:	200003f0 	.word	0x200003f0
 8008b14:	080122fc 	.word	0x080122fc
 8008b18:	080122f4 	.word	0x080122f4

08008b1c <acc_config_subsweep_receiver_gain_set>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	b120      	cbz	r0, 8008b2a <acc_config_subsweep_receiver_gain_set+0xe>
 8008b20:	4b0b      	ldr	r3, [pc, #44]	@ (8008b50 <acc_config_subsweep_receiver_gain_set+0x34>)
 8008b22:	4604      	mov	r4, r0
 8008b24:	6800      	ldr	r0, [r0, #0]
 8008b26:	4298      	cmp	r0, r3
 8008b28:	d007      	beq.n	8008b3a <acc_config_subsweep_receiver_gain_set+0x1e>
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b54 <acc_config_subsweep_receiver_gain_set+0x38>)
 8008b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b58 <acc_config_subsweep_receiver_gain_set+0x3c>)
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	490a      	ldr	r1, [pc, #40]	@ (8008b5c <acc_config_subsweep_receiver_gain_set+0x40>)
 8008b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b36:	2000      	movs	r0, #0
 8008b38:	4718      	bx	r3
 8008b3a:	2a03      	cmp	r2, #3
 8008b3c:	460d      	mov	r5, r1
 8008b3e:	4616      	mov	r6, r2
 8008b40:	d902      	bls.n	8008b48 <acc_config_subsweep_receiver_gain_set+0x2c>
 8008b42:	f7ff fc6d 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008b46:	b110      	cbz	r0, 8008b4e <acc_config_subsweep_receiver_gain_set+0x32>
 8008b48:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8008b4c:	73a5      	strb	r5, [r4, #14]
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	1337b00f 	.word	0x1337b00f
 8008b54:	200003f0 	.word	0x200003f0
 8008b58:	080122fc 	.word	0x080122fc
 8008b5c:	080122f4 	.word	0x080122f4

08008b60 <acc_config_subsweep_receiver_gain_get>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	b120      	cbz	r0, 8008b6e <acc_config_subsweep_receiver_gain_get+0xe>
 8008b64:	4b0b      	ldr	r3, [pc, #44]	@ (8008b94 <acc_config_subsweep_receiver_gain_get+0x34>)
 8008b66:	6802      	ldr	r2, [r0, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	d007      	beq.n	8008b7e <acc_config_subsweep_receiver_gain_get+0x1e>
 8008b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b98 <acc_config_subsweep_receiver_gain_get+0x38>)
 8008b70:	4a0a      	ldr	r2, [pc, #40]	@ (8008b9c <acc_config_subsweep_receiver_gain_get+0x3c>)
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	490a      	ldr	r1, [pc, #40]	@ (8008ba0 <acc_config_subsweep_receiver_gain_get+0x40>)
 8008b76:	2000      	movs	r0, #0
 8008b78:	4798      	blx	r3
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	bd38      	pop	{r3, r4, r5, pc}
 8008b7e:	2903      	cmp	r1, #3
 8008b80:	460d      	mov	r5, r1
 8008b82:	d903      	bls.n	8008b8c <acc_config_subsweep_receiver_gain_get+0x2c>
 8008b84:	f7ff fc4c 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d0f7      	beq.n	8008b7c <acc_config_subsweep_receiver_gain_get+0x1c>
 8008b8c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8008b90:	7ba0      	ldrb	r0, [r4, #14]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	1337b00f 	.word	0x1337b00f
 8008b98:	200003f0 	.word	0x200003f0
 8008b9c:	080122fc 	.word	0x080122fc
 8008ba0:	080122f4 	.word	0x080122f4

08008ba4 <acc_config_subsweep_enable_tx_set>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	b120      	cbz	r0, 8008bb2 <acc_config_subsweep_enable_tx_set+0xe>
 8008ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd8 <acc_config_subsweep_enable_tx_set+0x34>)
 8008baa:	4604      	mov	r4, r0
 8008bac:	6800      	ldr	r0, [r0, #0]
 8008bae:	4298      	cmp	r0, r3
 8008bb0:	d007      	beq.n	8008bc2 <acc_config_subsweep_enable_tx_set+0x1e>
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bdc <acc_config_subsweep_enable_tx_set+0x38>)
 8008bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8008be0 <acc_config_subsweep_enable_tx_set+0x3c>)
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	490a      	ldr	r1, [pc, #40]	@ (8008be4 <acc_config_subsweep_enable_tx_set+0x40>)
 8008bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4718      	bx	r3
 8008bc2:	2a03      	cmp	r2, #3
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	4616      	mov	r6, r2
 8008bc8:	d902      	bls.n	8008bd0 <acc_config_subsweep_enable_tx_set+0x2c>
 8008bca:	f7ff fc29 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008bce:	b110      	cbz	r0, 8008bd6 <acc_config_subsweep_enable_tx_set+0x32>
 8008bd0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8008bd4:	73e5      	strb	r5, [r4, #15]
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	1337b00f 	.word	0x1337b00f
 8008bdc:	200003f0 	.word	0x200003f0
 8008be0:	080122fc 	.word	0x080122fc
 8008be4:	080122f4 	.word	0x080122f4

08008be8 <acc_config_subsweep_phase_enhancement_set>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	b120      	cbz	r0, 8008bf6 <acc_config_subsweep_phase_enhancement_set+0xe>
 8008bec:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <acc_config_subsweep_phase_enhancement_set+0x34>)
 8008bee:	4604      	mov	r4, r0
 8008bf0:	6800      	ldr	r0, [r0, #0]
 8008bf2:	4298      	cmp	r0, r3
 8008bf4:	d007      	beq.n	8008c06 <acc_config_subsweep_phase_enhancement_set+0x1e>
 8008bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c20 <acc_config_subsweep_phase_enhancement_set+0x38>)
 8008bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8008c24 <acc_config_subsweep_phase_enhancement_set+0x3c>)
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	490a      	ldr	r1, [pc, #40]	@ (8008c28 <acc_config_subsweep_phase_enhancement_set+0x40>)
 8008bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c02:	2000      	movs	r0, #0
 8008c04:	4718      	bx	r3
 8008c06:	2a03      	cmp	r2, #3
 8008c08:	460d      	mov	r5, r1
 8008c0a:	4616      	mov	r6, r2
 8008c0c:	d902      	bls.n	8008c14 <acc_config_subsweep_phase_enhancement_set+0x2c>
 8008c0e:	f7ff fc07 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008c12:	b110      	cbz	r0, 8008c1a <acc_config_subsweep_phase_enhancement_set+0x32>
 8008c14:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8008c18:	7425      	strb	r5, [r4, #16]
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	1337b00f 	.word	0x1337b00f
 8008c20:	200003f0 	.word	0x200003f0
 8008c24:	080122fc 	.word	0x080122fc
 8008c28:	080122f4 	.word	0x080122f4

08008c2c <acc_config_subsweep_phase_enhancement_get>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	b120      	cbz	r0, 8008c3a <acc_config_subsweep_phase_enhancement_get+0xe>
 8008c30:	4b0b      	ldr	r3, [pc, #44]	@ (8008c60 <acc_config_subsweep_phase_enhancement_get+0x34>)
 8008c32:	6802      	ldr	r2, [r0, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	4604      	mov	r4, r0
 8008c38:	d007      	beq.n	8008c4a <acc_config_subsweep_phase_enhancement_get+0x1e>
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c64 <acc_config_subsweep_phase_enhancement_get+0x38>)
 8008c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c68 <acc_config_subsweep_phase_enhancement_get+0x3c>)
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	490a      	ldr	r1, [pc, #40]	@ (8008c6c <acc_config_subsweep_phase_enhancement_get+0x40>)
 8008c42:	2000      	movs	r0, #0
 8008c44:	4798      	blx	r3
 8008c46:	2000      	movs	r0, #0
 8008c48:	bd38      	pop	{r3, r4, r5, pc}
 8008c4a:	2903      	cmp	r1, #3
 8008c4c:	460d      	mov	r5, r1
 8008c4e:	d903      	bls.n	8008c58 <acc_config_subsweep_phase_enhancement_get+0x2c>
 8008c50:	f7ff fbe6 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d0f7      	beq.n	8008c48 <acc_config_subsweep_phase_enhancement_get+0x1c>
 8008c58:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8008c5c:	7c20      	ldrb	r0, [r4, #16]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	1337b00f 	.word	0x1337b00f
 8008c64:	200003f0 	.word	0x200003f0
 8008c68:	080122fc 	.word	0x080122fc
 8008c6c:	080122f4 	.word	0x080122f4

08008c70 <acc_config_start_point_set>:
 8008c70:	2200      	movs	r2, #0
 8008c72:	f7ff bdff 	b.w	8008874 <acc_config_subsweep_start_point_set>
 8008c76:	bf00      	nop

08008c78 <acc_config_num_points_set>:
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f7ff be3f 	b.w	80088fc <acc_config_subsweep_num_points_set>
 8008c7e:	bf00      	nop

08008c80 <acc_config_step_length_set>:
 8008c80:	2200      	movs	r2, #0
 8008c82:	f7ff be7f 	b.w	8008984 <acc_config_subsweep_step_length_set>
 8008c86:	bf00      	nop

08008c88 <acc_config_profile_set>:
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f7ff bebf 	b.w	8008a0c <acc_config_subsweep_profile_set>
 8008c8e:	bf00      	nop

08008c90 <acc_config_hwaas_set>:
 8008c90:	2200      	movs	r2, #0
 8008c92:	f7ff beff 	b.w	8008a94 <acc_config_subsweep_hwaas_set>
 8008c96:	bf00      	nop

08008c98 <acc_config_receiver_gain_set>:
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f7ff bf3f 	b.w	8008b1c <acc_config_subsweep_receiver_gain_set>
 8008c9e:	bf00      	nop

08008ca0 <acc_config_enable_tx_set>:
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f7ff bf7f 	b.w	8008ba4 <acc_config_subsweep_enable_tx_set>
 8008ca6:	bf00      	nop

08008ca8 <acc_config_phase_enhancement_set>:
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f7ff bf9d 	b.w	8008be8 <acc_config_subsweep_phase_enhancement_set>
 8008cae:	bf00      	nop

08008cb0 <acc_config_sweeps_per_frame_set>:
 8008cb0:	b118      	cbz	r0, 8008cba <acc_config_sweeps_per_frame_set+0xa>
 8008cb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <acc_config_sweeps_per_frame_set+0x1c>)
 8008cb4:	6802      	ldr	r2, [r0, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d005      	beq.n	8008cc6 <acc_config_sweeps_per_frame_set+0x16>
 8008cba:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <acc_config_sweeps_per_frame_set+0x20>)
 8008cbc:	4a05      	ldr	r2, [pc, #20]	@ (8008cd4 <acc_config_sweeps_per_frame_set+0x24>)
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	4905      	ldr	r1, [pc, #20]	@ (8008cd8 <acc_config_sweeps_per_frame_set+0x28>)
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	4718      	bx	r3
 8008cc6:	f8a0 104c 	strh.w	r1, [r0, #76]	@ 0x4c
 8008cca:	4770      	bx	lr
 8008ccc:	1337b00f 	.word	0x1337b00f
 8008cd0:	200003f0 	.word	0x200003f0
 8008cd4:	080122fc 	.word	0x080122fc
 8008cd8:	080122f4 	.word	0x080122f4

08008cdc <acc_config_get_settings>:
 8008cdc:	b508      	push	{r3, lr}
 8008cde:	b118      	cbz	r0, 8008ce8 <acc_config_get_settings+0xc>
 8008ce0:	4b06      	ldr	r3, [pc, #24]	@ (8008cfc <acc_config_get_settings+0x20>)
 8008ce2:	6802      	ldr	r2, [r0, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d007      	beq.n	8008cf8 <acc_config_get_settings+0x1c>
 8008ce8:	4b05      	ldr	r3, [pc, #20]	@ (8008d00 <acc_config_get_settings+0x24>)
 8008cea:	4a06      	ldr	r2, [pc, #24]	@ (8008d04 <acc_config_get_settings+0x28>)
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	4906      	ldr	r1, [pc, #24]	@ (8008d08 <acc_config_get_settings+0x2c>)
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	4798      	blx	r3
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	bd08      	pop	{r3, pc}
 8008cf8:	3004      	adds	r0, #4
 8008cfa:	bd08      	pop	{r3, pc}
 8008cfc:	1337b00f 	.word	0x1337b00f
 8008d00:	200003f0 	.word	0x200003f0
 8008d04:	080122fc 	.word	0x080122fc
 8008d08:	080122f4 	.word	0x080122f4

08008d0c <acc_config_subsweep_enable_loopback_set>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	b120      	cbz	r0, 8008d1a <acc_config_subsweep_enable_loopback_set+0xe>
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <acc_config_subsweep_enable_loopback_set+0x34>)
 8008d12:	4604      	mov	r4, r0
 8008d14:	6800      	ldr	r0, [r0, #0]
 8008d16:	4298      	cmp	r0, r3
 8008d18:	d007      	beq.n	8008d2a <acc_config_subsweep_enable_loopback_set+0x1e>
 8008d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d44 <acc_config_subsweep_enable_loopback_set+0x38>)
 8008d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d48 <acc_config_subsweep_enable_loopback_set+0x3c>)
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	490a      	ldr	r1, [pc, #40]	@ (8008d4c <acc_config_subsweep_enable_loopback_set+0x40>)
 8008d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d26:	2000      	movs	r0, #0
 8008d28:	4718      	bx	r3
 8008d2a:	2a03      	cmp	r2, #3
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	4616      	mov	r6, r2
 8008d30:	d902      	bls.n	8008d38 <acc_config_subsweep_enable_loopback_set+0x2c>
 8008d32:	f7ff fb75 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008d36:	b110      	cbz	r0, 8008d3e <acc_config_subsweep_enable_loopback_set+0x32>
 8008d38:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8008d3c:	7465      	strb	r5, [r4, #17]
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	1337b00f 	.word	0x1337b00f
 8008d44:	200003f0 	.word	0x200003f0
 8008d48:	080122fc 	.word	0x080122fc
 8008d4c:	080122f4 	.word	0x080122f4

08008d50 <acc_config_subsweep_enable_loopback_get>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	b120      	cbz	r0, 8008d5e <acc_config_subsweep_enable_loopback_get+0xe>
 8008d54:	4b0b      	ldr	r3, [pc, #44]	@ (8008d84 <acc_config_subsweep_enable_loopback_get+0x34>)
 8008d56:	6802      	ldr	r2, [r0, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	d007      	beq.n	8008d6e <acc_config_subsweep_enable_loopback_get+0x1e>
 8008d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d88 <acc_config_subsweep_enable_loopback_get+0x38>)
 8008d60:	4a0a      	ldr	r2, [pc, #40]	@ (8008d8c <acc_config_subsweep_enable_loopback_get+0x3c>)
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	490a      	ldr	r1, [pc, #40]	@ (8008d90 <acc_config_subsweep_enable_loopback_get+0x40>)
 8008d66:	2000      	movs	r0, #0
 8008d68:	4798      	blx	r3
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	bd38      	pop	{r3, r4, r5, pc}
 8008d6e:	2903      	cmp	r1, #3
 8008d70:	460d      	mov	r5, r1
 8008d72:	d903      	bls.n	8008d7c <acc_config_subsweep_enable_loopback_get+0x2c>
 8008d74:	f7ff fb54 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d0f7      	beq.n	8008d6c <acc_config_subsweep_enable_loopback_get+0x1c>
 8008d7c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8008d80:	7c60      	ldrb	r0, [r4, #17]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	1337b00f 	.word	0x1337b00f
 8008d88:	200003f0 	.word	0x200003f0
 8008d8c:	080122fc 	.word	0x080122fc
 8008d90:	080122f4 	.word	0x080122f4

08008d94 <acc_config_subsweep_prf_set>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	b120      	cbz	r0, 8008da2 <acc_config_subsweep_prf_set+0xe>
 8008d98:	4b0b      	ldr	r3, [pc, #44]	@ (8008dc8 <acc_config_subsweep_prf_set+0x34>)
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	6800      	ldr	r0, [r0, #0]
 8008d9e:	4298      	cmp	r0, r3
 8008da0:	d007      	beq.n	8008db2 <acc_config_subsweep_prf_set+0x1e>
 8008da2:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <acc_config_subsweep_prf_set+0x38>)
 8008da4:	4a0a      	ldr	r2, [pc, #40]	@ (8008dd0 <acc_config_subsweep_prf_set+0x3c>)
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	490a      	ldr	r1, [pc, #40]	@ (8008dd4 <acc_config_subsweep_prf_set+0x40>)
 8008daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dae:	2000      	movs	r0, #0
 8008db0:	4718      	bx	r3
 8008db2:	2a03      	cmp	r2, #3
 8008db4:	460d      	mov	r5, r1
 8008db6:	4616      	mov	r6, r2
 8008db8:	d902      	bls.n	8008dc0 <acc_config_subsweep_prf_set+0x2c>
 8008dba:	f7ff fb31 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008dbe:	b110      	cbz	r0, 8008dc6 <acc_config_subsweep_prf_set+0x32>
 8008dc0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8008dc4:	74a5      	strb	r5, [r4, #18]
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	1337b00f 	.word	0x1337b00f
 8008dcc:	200003f0 	.word	0x200003f0
 8008dd0:	080122fc 	.word	0x080122fc
 8008dd4:	080122f4 	.word	0x080122f4

08008dd8 <acc_config_prf_set>:
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f7ff bfdb 	b.w	8008d94 <acc_config_subsweep_prf_set>
 8008dde:	bf00      	nop

08008de0 <acc_config_subsweep_prf_get>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	b120      	cbz	r0, 8008dee <acc_config_subsweep_prf_get+0xe>
 8008de4:	4b0b      	ldr	r3, [pc, #44]	@ (8008e14 <acc_config_subsweep_prf_get+0x34>)
 8008de6:	6802      	ldr	r2, [r0, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	4604      	mov	r4, r0
 8008dec:	d007      	beq.n	8008dfe <acc_config_subsweep_prf_get+0x1e>
 8008dee:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <acc_config_subsweep_prf_get+0x38>)
 8008df0:	4a0a      	ldr	r2, [pc, #40]	@ (8008e1c <acc_config_subsweep_prf_get+0x3c>)
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	490a      	ldr	r1, [pc, #40]	@ (8008e20 <acc_config_subsweep_prf_get+0x40>)
 8008df6:	2000      	movs	r0, #0
 8008df8:	4798      	blx	r3
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	bd38      	pop	{r3, r4, r5, pc}
 8008dfe:	2903      	cmp	r1, #3
 8008e00:	460d      	mov	r5, r1
 8008e02:	d903      	bls.n	8008e0c <acc_config_subsweep_prf_get+0x2c>
 8008e04:	f7ff fb0c 	bl	8008420 <acc_config_subsweep_validate.part.0>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d0f7      	beq.n	8008dfc <acc_config_subsweep_prf_get+0x1c>
 8008e0c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8008e10:	7ca0      	ldrb	r0, [r4, #18]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	1337b00f 	.word	0x1337b00f
 8008e18:	200003f0 	.word	0x200003f0
 8008e1c:	080122fc 	.word	0x080122fc
 8008e20:	080122f4 	.word	0x080122f4

08008e24 <acc_config_enable_loopback_set>:
 8008e24:	2200      	movs	r2, #0
 8008e26:	f7ff bf71 	b.w	8008d0c <acc_config_subsweep_enable_loopback_set>
 8008e2a:	bf00      	nop

08008e2c <data_callback>:
 8008e2c:	b470      	push	{r4, r5, r6}
 8008e2e:	888c      	ldrh	r4, [r1, #4]
 8008e30:	6893      	ldr	r3, [r2, #8]
 8008e32:	890e      	ldrh	r6, [r1, #8]
 8008e34:	798d      	ldrb	r5, [r1, #6]
 8008e36:	79ca      	ldrb	r2, [r1, #7]
 8008e38:	709a      	strb	r2, [r3, #2]
 8008e3a:	3c00      	subs	r4, #0
 8008e3c:	bf18      	it	ne
 8008e3e:	2401      	movne	r4, #1
 8008e40:	809e      	strh	r6, [r3, #4]
 8008e42:	701c      	strb	r4, [r3, #0]
 8008e44:	705d      	strb	r5, [r3, #1]
 8008e46:	6098      	str	r0, [r3, #8]
 8008e48:	bc70      	pop	{r4, r5, r6}
 8008e4a:	4770      	bx	lr

08008e4c <acc_processing_execute>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4615      	mov	r5, r2
 8008e50:	460e      	mov	r6, r1
 8008e52:	b120      	cbz	r0, 8008e5e <acc_processing_execute+0x12>
 8008e54:	4b15      	ldr	r3, [pc, #84]	@ (8008eac <acc_processing_execute+0x60>)
 8008e56:	6802      	ldr	r2, [r0, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	d008      	beq.n	8008e70 <acc_processing_execute+0x24>
 8008e5e:	4c14      	ldr	r4, [pc, #80]	@ (8008eb0 <acc_processing_execute+0x64>)
 8008e60:	4a14      	ldr	r2, [pc, #80]	@ (8008eb4 <acc_processing_execute+0x68>)
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	4914      	ldr	r1, [pc, #80]	@ (8008eb8 <acc_processing_execute+0x6c>)
 8008e66:	2000      	movs	r0, #0
 8008e68:	4798      	blx	r3
 8008e6a:	b176      	cbz	r6, 8008e8a <acc_processing_execute+0x3e>
 8008e6c:	b1a5      	cbz	r5, 8008e98 <acc_processing_execute+0x4c>
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	b151      	cbz	r1, 8008e88 <acc_processing_execute+0x3c>
 8008e72:	b1c5      	cbz	r5, 8008ea6 <acc_processing_execute+0x5a>
 8008e74:	6085      	str	r5, [r0, #8]
 8008e76:	6840      	ldr	r0, [r0, #4]
 8008e78:	f002 fa2e 	bl	800b2d8 <acc_pipeline_a121_prepare_memory>
 8008e7c:	6863      	ldr	r3, [r4, #4]
 8008e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e82:	e9d3 0200 	ldrd	r0, r2, [r3]
 8008e86:	4710      	bx	r2
 8008e88:	4c09      	ldr	r4, [pc, #36]	@ (8008eb0 <acc_processing_execute+0x64>)
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8008ebc <acc_processing_execute+0x70>)
 8008e8e:	490a      	ldr	r1, [pc, #40]	@ (8008eb8 <acc_processing_execute+0x6c>)
 8008e90:	2000      	movs	r0, #0
 8008e92:	4798      	blx	r3
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	d1ea      	bne.n	8008e6e <acc_processing_execute+0x22>
 8008e98:	6923      	ldr	r3, [r4, #16]
 8008e9a:	4a09      	ldr	r2, [pc, #36]	@ (8008ec0 <acc_processing_execute+0x74>)
 8008e9c:	4906      	ldr	r1, [pc, #24]	@ (8008eb8 <acc_processing_execute+0x6c>)
 8008e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	4718      	bx	r3
 8008ea6:	4c02      	ldr	r4, [pc, #8]	@ (8008eb0 <acc_processing_execute+0x64>)
 8008ea8:	e7f6      	b.n	8008e98 <acc_processing_execute+0x4c>
 8008eaa:	bf00      	nop
 8008eac:	1337b00d 	.word	0x1337b00d
 8008eb0:	200003f0 	.word	0x200003f0
 8008eb4:	08012580 	.word	0x08012580
 8008eb8:	08012574 	.word	0x08012574
 8008ebc:	0801259c 	.word	0x0801259c
 8008ec0:	0801255c 	.word	0x0801255c

08008ec4 <acc_processing_destroy>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	b120      	cbz	r0, 8008ed2 <acc_processing_destroy+0xe>
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8008efc <acc_processing_destroy+0x38>)
 8008eca:	6802      	ldr	r2, [r0, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	4604      	mov	r4, r0
 8008ed0:	d007      	beq.n	8008ee2 <acc_processing_destroy+0x1e>
 8008ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f00 <acc_processing_destroy+0x3c>)
 8008ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8008f04 <acc_processing_destroy+0x40>)
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	490b      	ldr	r1, [pc, #44]	@ (8008f08 <acc_processing_destroy+0x44>)
 8008eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ede:	2000      	movs	r0, #0
 8008ee0:	4718      	bx	r3
 8008ee2:	6840      	ldr	r0, [r0, #4]
 8008ee4:	b118      	cbz	r0, 8008eee <acc_processing_destroy+0x2a>
 8008ee6:	68c3      	ldr	r3, [r0, #12]
 8008ee8:	4798      	blx	r3
 8008eea:	2300      	movs	r3, #0
 8008eec:	6063      	str	r3, [r4, #4]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef8:	f002 b842 	b.w	800af80 <acc_rss_integration_mem_free>
 8008efc:	1337b00d 	.word	0x1337b00d
 8008f00:	200003f0 	.word	0x200003f0
 8008f04:	08012580 	.word	0x08012580
 8008f08:	08012574 	.word	0x08012574

08008f0c <acc_processing_create>:
 8008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	b088      	sub	sp, #32
 8008f12:	460c      	mov	r4, r1
 8008f14:	f7ff fee2 	bl	8008cdc <acc_config_get_settings>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d050      	beq.n	8008fbe <acc_processing_create+0xb2>
 8008f1c:	2c00      	cmp	r4, #0
 8008f1e:	d043      	beq.n	8008fa8 <acc_processing_create+0x9c>
 8008f20:	4a2e      	ldr	r2, [pc, #184]	@ (8008fdc <acc_processing_create+0xd0>)
 8008f22:	4606      	mov	r6, r0
 8008f24:	2367      	movs	r3, #103	@ 0x67
 8008f26:	2110      	movs	r1, #16
 8008f28:	2001      	movs	r0, #1
 8008f2a:	f002 f80d 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 8008f2e:	4605      	mov	r5, r0
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d044      	beq.n	8008fbe <acc_processing_create+0xb2>
 8008f34:	4b2a      	ldr	r3, [pc, #168]	@ (8008fe0 <acc_processing_create+0xd4>)
 8008f36:	6003      	str	r3, [r0, #0]
 8008f38:	f10d 080c 	add.w	r8, sp, #12
 8008f3c:	4b29      	ldr	r3, [pc, #164]	@ (8008fe4 <acc_processing_create+0xd8>)
 8008f3e:	9600      	str	r6, [sp, #0]
 8008f40:	4641      	mov	r1, r8
 8008f42:	4668      	mov	r0, sp
 8008f44:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8008f48:	f002 f860 	bl	800b00c <acc_pipeline_a121_assemble>
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	6068      	str	r0, [r5, #4]
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d03e      	beq.n	8008fd2 <acc_processing_create+0xc6>
 8008f54:	2300      	movs	r3, #0
 8008f56:	8063      	strh	r3, [r4, #2]
 8008f58:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	469c      	mov	ip, r3
 8008f60:	1d20      	adds	r0, r4, #4
 8008f62:	b2df      	uxtb	r7, r3
 8008f64:	42b9      	cmp	r1, r7
 8008f66:	d92f      	bls.n	8008fc8 <acc_processing_create+0xbc>
 8008f68:	f838 7013 	ldrh.w	r7, [r8, r3, lsl #1]
 8008f6c:	8002      	strh	r2, [r0, #0]
 8008f6e:	443a      	add	r2, r7
 8008f70:	b292      	uxth	r2, r2
 8008f72:	8062      	strh	r2, [r4, #2]
 8008f74:	8107      	strh	r7, [r0, #8]
 8008f76:	3301      	adds	r3, #1
 8008f78:	2b04      	cmp	r3, #4
 8008f7a:	f100 0002 	add.w	r0, r0, #2
 8008f7e:	d1f0      	bne.n	8008f62 <acc_processing_create+0x56>
 8008f80:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 8008f84:	9905      	ldr	r1, [sp, #20]
 8008f86:	6161      	str	r1, [r4, #20]
 8008f88:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8008f8c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8008f90:	7620      	strb	r0, [r4, #24]
 8008f92:	fb13 f202 	smulbb	r2, r3, r2
 8008f96:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8008f9a:	8022      	strh	r2, [r4, #0]
 8008f9c:	81a9      	strh	r1, [r5, #12]
 8008f9e:	81eb      	strh	r3, [r5, #14]
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	b008      	add	sp, #32
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe8 <acc_processing_create+0xdc>)
 8008faa:	4a10      	ldr	r2, [pc, #64]	@ (8008fec <acc_processing_create+0xe0>)
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	490b      	ldr	r1, [pc, #44]	@ (8008fdc <acc_processing_create+0xd0>)
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	4798      	blx	r3
 8008fb4:	4625      	mov	r5, r4
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	b008      	add	sp, #32
 8008fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fbe:	2500      	movs	r5, #0
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	b008      	add	sp, #32
 8008fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc8:	f8a0 c000 	strh.w	ip, [r0]
 8008fcc:	f8a0 c008 	strh.w	ip, [r0, #8]
 8008fd0:	e7d1      	b.n	8008f76 <acc_processing_create+0x6a>
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f7ff ff76 	bl	8008ec4 <acc_processing_destroy>
 8008fd8:	463d      	mov	r5, r7
 8008fda:	e7e1      	b.n	8008fa0 <acc_processing_create+0x94>
 8008fdc:	08012574 	.word	0x08012574
 8008fe0:	1337b00d 	.word	0x1337b00d
 8008fe4:	08008e2d 	.word	0x08008e2d
 8008fe8:	200003f0 	.word	0x200003f0
 8008fec:	080125b4 	.word	0x080125b4

08008ff0 <acc_processing_points_to_meter>:
 8008ff0:	f002 bbfe 	b.w	800b7f0 <acc_radar_engine_a121_points_to_meter>

08008ff4 <acc_processing_get_temperature_adjustment_factors>:
 8008ff4:	3a01      	subs	r2, #1
 8008ff6:	b538      	push	{r3, r4, r5, lr}
 8008ff8:	b2d2      	uxtb	r2, r2
 8008ffa:	2a04      	cmp	r2, #4
 8008ffc:	eba1 0100 	sub.w	r1, r1, r0
 8009000:	461c      	mov	r4, r3
 8009002:	b209      	sxth	r1, r1
 8009004:	bf94      	ite	ls
 8009006:	4b13      	ldrls	r3, [pc, #76]	@ (8009054 <acc_processing_get_temperature_adjustment_factors+0x60>)
 8009008:	eddf 7a13 	vldrhi	s15, [pc, #76]	@ 8009058 <acc_processing_get_temperature_adjustment_factors+0x64>
 800900c:	ee07 1a10 	vmov	s14, r1
 8009010:	bf98      	it	ls
 8009012:	eb03 0282 	addls.w	r2, r3, r2, lsl #2
 8009016:	ed2d 8b02 	vpush	{d8}
 800901a:	bf98      	it	ls
 800901c:	edd2 7a00 	vldrls	s15, [r2]
 8009020:	9d06      	ldr	r5, [sp, #24]
 8009022:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8009026:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800902a:	eec8 0a27 	vdiv.f32	s1, s16, s15
 800902e:	eef1 0a60 	vneg.f32	s1, s1
 8009032:	f005 fbd5 	bl	800e7e0 <powf>
 8009036:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800905c <acc_processing_get_temperature_adjustment_factors+0x68>
 800903a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009060 <acc_processing_get_temperature_adjustment_factors+0x6c>
 800903e:	ed84 0a00 	vstr	s0, [r4]
 8009042:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009046:	ee38 8a27 	vadd.f32	s16, s16, s15
 800904a:	ed85 8a00 	vstr	s16, [r5]
 800904e:	ecbd 8b02 	vpop	{d8}
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	080125cc 	.word	0x080125cc
 8009058:	42ac0000 	.word	0x42ac0000
 800905c:	bb343958 	.word	0xbb343958
 8009060:	3f7c408e 	.word	0x3f7c408e

08009064 <acc_sensor_destroy>:
 8009064:	b510      	push	{r4, lr}
 8009066:	b120      	cbz	r0, 8009072 <acc_sensor_destroy+0xe>
 8009068:	4b0b      	ldr	r3, [pc, #44]	@ (8009098 <acc_sensor_destroy+0x34>)
 800906a:	6802      	ldr	r2, [r0, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	4604      	mov	r4, r0
 8009070:	d007      	beq.n	8009082 <acc_sensor_destroy+0x1e>
 8009072:	4b0a      	ldr	r3, [pc, #40]	@ (800909c <acc_sensor_destroy+0x38>)
 8009074:	4a0a      	ldr	r2, [pc, #40]	@ (80090a0 <acc_sensor_destroy+0x3c>)
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	490a      	ldr	r1, [pc, #40]	@ (80090a4 <acc_sensor_destroy+0x40>)
 800907a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907e:	2000      	movs	r0, #0
 8009080:	4718      	bx	r3
 8009082:	2300      	movs	r3, #0
 8009084:	6003      	str	r3, [r0, #0]
 8009086:	6900      	ldr	r0, [r0, #16]
 8009088:	f002 f95e 	bl	800b348 <acc_radar_engine_a121_context_destroy>
 800908c:	4620      	mov	r0, r4
 800908e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009092:	f001 bf75 	b.w	800af80 <acc_rss_integration_mem_free>
 8009096:	bf00      	nop
 8009098:	1337b00e 	.word	0x1337b00e
 800909c:	200003f0 	.word	0x200003f0
 80090a0:	080125e0 	.word	0x080125e0
 80090a4:	080125f8 	.word	0x080125f8

080090a8 <acc_sensor_create>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4a20      	ldr	r2, [pc, #128]	@ (800912c <acc_sensor_create+0x84>)
 80090ac:	4606      	mov	r6, r0
 80090ae:	233b      	movs	r3, #59	@ 0x3b
 80090b0:	2114      	movs	r1, #20
 80090b2:	2001      	movs	r0, #1
 80090b4:	f001 ff48 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 80090b8:	b378      	cbz	r0, 800911a <acc_sensor_create+0x72>
 80090ba:	4604      	mov	r4, r0
 80090bc:	f002 f932 	bl	800b324 <acc_radar_engine_a121_context_create>
 80090c0:	4605      	mov	r5, r0
 80090c2:	6120      	str	r0, [r4, #16]
 80090c4:	b360      	cbz	r0, 8009120 <acc_sensor_create+0x78>
 80090c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009130 <acc_sensor_create+0x88>)
 80090c8:	60a6      	str	r6, [r4, #8]
 80090ca:	2100      	movs	r1, #0
 80090cc:	e9c4 3100 	strd	r3, r1, [r4]
 80090d0:	7361      	strb	r1, [r4, #13]
 80090d2:	4630      	mov	r0, r6
 80090d4:	f002 f9e2 	bl	800b49c <acc_radar_engine_a121_check_asic_id>
 80090d8:	4605      	mov	r5, r0
 80090da:	b168      	cbz	r0, 80090f8 <acc_sensor_create+0x50>
 80090dc:	4630      	mov	r0, r6
 80090de:	f002 f9df 	bl	800b4a0 <acc_radar_engine_a121_is_sensor_running>
 80090e2:	4605      	mov	r5, r0
 80090e4:	b980      	cbnz	r0, 8009108 <acc_sensor_create+0x60>
 80090e6:	68a0      	ldr	r0, [r4, #8]
 80090e8:	f002 fb84 	bl	800b7f4 <acc_radar_engine_a121_init_interrupts>
 80090ec:	68a0      	ldr	r0, [r4, #8]
 80090ee:	4629      	mov	r1, r5
 80090f0:	f002 fb82 	bl	800b7f8 <acc_radar_engine_a121_hibernate_off>
 80090f4:	4620      	mov	r0, r4
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	4620      	mov	r0, r4
 80090fa:	f7ff ffb3 	bl	8009064 <acc_sensor_destroy>
 80090fe:	4630      	mov	r0, r6
 8009100:	f002 f9ce 	bl	800b4a0 <acc_radar_engine_a121_is_sensor_running>
 8009104:	b148      	cbz	r0, 800911a <acc_sensor_create+0x72>
 8009106:	462c      	mov	r4, r5
 8009108:	4b0a      	ldr	r3, [pc, #40]	@ (8009134 <acc_sensor_create+0x8c>)
 800910a:	4a0b      	ldr	r2, [pc, #44]	@ (8009138 <acc_sensor_create+0x90>)
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	4907      	ldr	r1, [pc, #28]	@ (800912c <acc_sensor_create+0x84>)
 8009110:	2000      	movs	r0, #0
 8009112:	4798      	blx	r3
 8009114:	4620      	mov	r0, r4
 8009116:	f7ff ffa5 	bl	8009064 <acc_sensor_destroy>
 800911a:	2400      	movs	r4, #0
 800911c:	4620      	mov	r0, r4
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	4620      	mov	r0, r4
 8009122:	f001 ff2d 	bl	800af80 <acc_rss_integration_mem_free>
 8009126:	462c      	mov	r4, r5
 8009128:	e7f8      	b.n	800911c <acc_sensor_create+0x74>
 800912a:	bf00      	nop
 800912c:	080125f8 	.word	0x080125f8
 8009130:	1337b00e 	.word	0x1337b00e
 8009134:	200003f0 	.word	0x200003f0
 8009138:	08012600 	.word	0x08012600

0800913c <acc_sensor_calibrate>:
 800913c:	b530      	push	{r4, r5, lr}
 800913e:	b083      	sub	sp, #12
 8009140:	b128      	cbz	r0, 800914e <acc_sensor_calibrate+0x12>
 8009142:	460d      	mov	r5, r1
 8009144:	4604      	mov	r4, r0
 8009146:	4912      	ldr	r1, [pc, #72]	@ (8009190 <acc_sensor_calibrate+0x54>)
 8009148:	6800      	ldr	r0, [r0, #0]
 800914a:	4288      	cmp	r0, r1
 800914c:	d008      	beq.n	8009160 <acc_sensor_calibrate+0x24>
 800914e:	4b11      	ldr	r3, [pc, #68]	@ (8009194 <acc_sensor_calibrate+0x58>)
 8009150:	4a11      	ldr	r2, [pc, #68]	@ (8009198 <acc_sensor_calibrate+0x5c>)
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	4911      	ldr	r1, [pc, #68]	@ (800919c <acc_sensor_calibrate+0x60>)
 8009156:	2000      	movs	r0, #0
 8009158:	4798      	blx	r3
 800915a:	2000      	movs	r0, #0
 800915c:	b003      	add	sp, #12
 800915e:	bd30      	pop	{r4, r5, pc}
 8009160:	2d00      	cmp	r5, #0
 8009162:	d0fa      	beq.n	800915a <acc_sensor_calibrate+0x1e>
 8009164:	2a00      	cmp	r2, #0
 8009166:	d0f8      	beq.n	800915a <acc_sensor_calibrate+0x1e>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0f6      	beq.n	800915a <acc_sensor_calibrate+0x1e>
 800916c:	9200      	str	r2, [sp, #0]
 800916e:	4619      	mov	r1, r3
 8009170:	9a06      	ldr	r2, [sp, #24]
 8009172:	68a0      	ldr	r0, [r4, #8]
 8009174:	f104 030d 	add.w	r3, r4, #13
 8009178:	f000 f8d0 	bl	800931c <acc_calibration_a121_calibrate>
 800917c:	2800      	cmp	r0, #0
 800917e:	d0ec      	beq.n	800915a <acc_sensor_calibrate+0x1e>
 8009180:	7b63      	ldrb	r3, [r4, #13]
 8009182:	2b0a      	cmp	r3, #10
 8009184:	bf0c      	ite	eq
 8009186:	2301      	moveq	r3, #1
 8009188:	2300      	movne	r3, #0
 800918a:	702b      	strb	r3, [r5, #0]
 800918c:	e7e6      	b.n	800915c <acc_sensor_calibrate+0x20>
 800918e:	bf00      	nop
 8009190:	1337b00e 	.word	0x1337b00e
 8009194:	200003f0 	.word	0x200003f0
 8009198:	080125e0 	.word	0x080125e0
 800919c:	080125f8 	.word	0x080125f8

080091a0 <acc_sensor_prepare>:
 80091a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091a2:	b085      	sub	sp, #20
 80091a4:	b130      	cbz	r0, 80091b4 <acc_sensor_prepare+0x14>
 80091a6:	4616      	mov	r6, r2
 80091a8:	461f      	mov	r7, r3
 80091aa:	6802      	ldr	r2, [r0, #0]
 80091ac:	4b22      	ldr	r3, [pc, #136]	@ (8009238 <acc_sensor_prepare+0x98>)
 80091ae:	429a      	cmp	r2, r3
 80091b0:	4604      	mov	r4, r0
 80091b2:	d008      	beq.n	80091c6 <acc_sensor_prepare+0x26>
 80091b4:	4b21      	ldr	r3, [pc, #132]	@ (800923c <acc_sensor_prepare+0x9c>)
 80091b6:	4a22      	ldr	r2, [pc, #136]	@ (8009240 <acc_sensor_prepare+0xa0>)
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	4922      	ldr	r1, [pc, #136]	@ (8009244 <acc_sensor_prepare+0xa4>)
 80091bc:	2000      	movs	r0, #0
 80091be:	4798      	blx	r3
 80091c0:	2000      	movs	r0, #0
 80091c2:	b005      	add	sp, #20
 80091c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c6:	b1f6      	cbz	r6, 8009206 <acc_sensor_prepare+0x66>
 80091c8:	4630      	mov	r0, r6
 80091ca:	460d      	mov	r5, r1
 80091cc:	f000 fc42 	bl	8009a54 <acc_calibration_a121_validate_calibration>
 80091d0:	b1c8      	cbz	r0, 8009206 <acc_sensor_prepare+0x66>
 80091d2:	4628      	mov	r0, r5
 80091d4:	f7ff fd82 	bl	8008cdc <acc_config_get_settings>
 80091d8:	4605      	mov	r5, r0
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0f1      	beq.n	80091c2 <acc_sensor_prepare+0x22>
 80091de:	68a0      	ldr	r0, [r4, #8]
 80091e0:	f002 f95e 	bl	800b4a0 <acc_radar_engine_a121_is_sensor_running>
 80091e4:	7320      	strb	r0, [r4, #12]
 80091e6:	b188      	cbz	r0, 800920c <acc_sensor_prepare+0x6c>
 80091e8:	9700      	str	r7, [sp, #0]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	1d20      	adds	r0, r4, #4
 80091ee:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80091f2:	1da2      	adds	r2, r4, #6
 80091f4:	9203      	str	r2, [sp, #12]
 80091f6:	68a0      	ldr	r0, [r4, #8]
 80091f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091fa:	4632      	mov	r2, r6
 80091fc:	4629      	mov	r1, r5
 80091fe:	f002 fa3d 	bl	800b67c <acc_radar_engine_a121_reconfigure>
 8009202:	b005      	add	sp, #20
 8009204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009206:	4b0d      	ldr	r3, [pc, #52]	@ (800923c <acc_sensor_prepare+0x9c>)
 8009208:	4a0f      	ldr	r2, [pc, #60]	@ (8009248 <acc_sensor_prepare+0xa8>)
 800920a:	e7d5      	b.n	80091b8 <acc_sensor_prepare+0x18>
 800920c:	68a0      	ldr	r0, [r4, #8]
 800920e:	f002 faf5 	bl	800b7fc <acc_radar_engine_a121_is_hibernate>
 8009212:	7b23      	ldrb	r3, [r4, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e7      	bne.n	80091e8 <acc_sensor_prepare+0x48>
 8009218:	2800      	cmp	r0, #0
 800921a:	d1e5      	bne.n	80091e8 <acc_sensor_prepare+0x48>
 800921c:	9700      	str	r7, [sp, #0]
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	1d20      	adds	r0, r4, #4
 8009222:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8009226:	1da2      	adds	r2, r4, #6
 8009228:	9203      	str	r2, [sp, #12]
 800922a:	68a0      	ldr	r0, [r4, #8]
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	4632      	mov	r2, r6
 8009230:	4629      	mov	r1, r5
 8009232:	f002 f983 	bl	800b53c <acc_radar_engine_a121_prepare>
 8009236:	e7c4      	b.n	80091c2 <acc_sensor_prepare+0x22>
 8009238:	1337b00e 	.word	0x1337b00e
 800923c:	200003f0 	.word	0x200003f0
 8009240:	080125e0 	.word	0x080125e0
 8009244:	080125f8 	.word	0x080125f8
 8009248:	0801261c 	.word	0x0801261c

0800924c <acc_sensor_measure>:
 800924c:	b510      	push	{r4, lr}
 800924e:	b120      	cbz	r0, 800925a <acc_sensor_measure+0xe>
 8009250:	4b0e      	ldr	r3, [pc, #56]	@ (800928c <acc_sensor_measure+0x40>)
 8009252:	6802      	ldr	r2, [r0, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	4604      	mov	r4, r0
 8009258:	d007      	beq.n	800926a <acc_sensor_measure+0x1e>
 800925a:	4b0d      	ldr	r3, [pc, #52]	@ (8009290 <acc_sensor_measure+0x44>)
 800925c:	4a0d      	ldr	r2, [pc, #52]	@ (8009294 <acc_sensor_measure+0x48>)
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	490d      	ldr	r1, [pc, #52]	@ (8009298 <acc_sensor_measure+0x4c>)
 8009262:	2000      	movs	r0, #0
 8009264:	4798      	blx	r3
 8009266:	2000      	movs	r0, #0
 8009268:	bd10      	pop	{r4, pc}
 800926a:	7b03      	ldrb	r3, [r0, #12]
 800926c:	b93b      	cbnz	r3, 800927e <acc_sensor_measure+0x32>
 800926e:	6880      	ldr	r0, [r0, #8]
 8009270:	f002 f86e 	bl	800b350 <acc_radar_engine_a121_run_program>
 8009274:	2800      	cmp	r0, #0
 8009276:	d0f7      	beq.n	8009268 <acc_sensor_measure+0x1c>
 8009278:	2301      	movs	r3, #1
 800927a:	7323      	strb	r3, [r4, #12]
 800927c:	bd10      	pop	{r4, pc}
 800927e:	6901      	ldr	r1, [r0, #16]
 8009280:	6880      	ldr	r0, [r0, #8]
 8009282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009286:	f002 b865 	b.w	800b354 <acc_radar_engine_a121_measure>
 800928a:	bf00      	nop
 800928c:	1337b00e 	.word	0x1337b00e
 8009290:	200003f0 	.word	0x200003f0
 8009294:	080125e0 	.word	0x080125e0
 8009298:	080125f8 	.word	0x080125f8

0800929c <acc_sensor_read>:
 800929c:	b530      	push	{r4, r5, lr}
 800929e:	b085      	sub	sp, #20
 80092a0:	b128      	cbz	r0, 80092ae <acc_sensor_read+0x12>
 80092a2:	4b19      	ldr	r3, [pc, #100]	@ (8009308 <acc_sensor_read+0x6c>)
 80092a4:	460d      	mov	r5, r1
 80092a6:	6801      	ldr	r1, [r0, #0]
 80092a8:	4299      	cmp	r1, r3
 80092aa:	4604      	mov	r4, r0
 80092ac:	d008      	beq.n	80092c0 <acc_sensor_read+0x24>
 80092ae:	4b17      	ldr	r3, [pc, #92]	@ (800930c <acc_sensor_read+0x70>)
 80092b0:	4a17      	ldr	r2, [pc, #92]	@ (8009310 <acc_sensor_read+0x74>)
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	4917      	ldr	r1, [pc, #92]	@ (8009314 <acc_sensor_read+0x78>)
 80092b6:	2000      	movs	r0, #0
 80092b8:	4798      	blx	r3
 80092ba:	2000      	movs	r0, #0
 80092bc:	b005      	add	sp, #20
 80092be:	bd30      	pop	{r4, r5, pc}
 80092c0:	8883      	ldrh	r3, [r0, #4]
 80092c2:	88c1      	ldrh	r1, [r0, #6]
 80092c4:	440b      	add	r3, r1
 80092c6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80092ca:	d319      	bcc.n	8009300 <acc_sensor_read+0x64>
 80092cc:	6901      	ldr	r1, [r0, #16]
 80092ce:	6880      	ldr	r0, [r0, #8]
 80092d0:	2300      	movs	r3, #0
 80092d2:	f10d 020f 	add.w	r2, sp, #15
 80092d6:	f88d 300f 	strb.w	r3, [sp, #15]
 80092da:	f002 f875 	bl	800b3c8 <acc_radar_engine_a121_verify_radar_data_ready>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d0ec      	beq.n	80092bc <acc_sensor_read+0x20>
 80092e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80092e6:	6920      	ldr	r0, [r4, #16]
 80092e8:	462a      	mov	r2, r5
 80092ea:	f002 f8ad 	bl	800b448 <acc_radar_engine_a121_update_buffer_header>
 80092ee:	9500      	str	r5, [sp, #0]
 80092f0:	88e3      	ldrh	r3, [r4, #6]
 80092f2:	88a2      	ldrh	r2, [r4, #4]
 80092f4:	6921      	ldr	r1, [r4, #16]
 80092f6:	68a0      	ldr	r0, [r4, #8]
 80092f8:	f002 f844 	bl	800b384 <acc_radar_engine_a121_transfer_data>
 80092fc:	b005      	add	sp, #20
 80092fe:	bd30      	pop	{r4, r5, pc}
 8009300:	4b02      	ldr	r3, [pc, #8]	@ (800930c <acc_sensor_read+0x70>)
 8009302:	4a05      	ldr	r2, [pc, #20]	@ (8009318 <acc_sensor_read+0x7c>)
 8009304:	e7d5      	b.n	80092b2 <acc_sensor_read+0x16>
 8009306:	bf00      	nop
 8009308:	1337b00e 	.word	0x1337b00e
 800930c:	200003f0 	.word	0x200003f0
 8009310:	080125e0 	.word	0x080125e0
 8009314:	080125f8 	.word	0x080125f8
 8009318:	08012630 	.word	0x08012630

0800931c <acc_calibration_a121_calibrate>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	461c      	mov	r4, r3
 8009322:	b091      	sub	sp, #68	@ 0x44
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8009328:	4605      	mov	r5, r0
 800932a:	4688      	mov	r8, r1
 800932c:	4616      	mov	r6, r2
 800932e:	2b0a      	cmp	r3, #10
 8009330:	d859      	bhi.n	80093e6 <acc_calibration_a121_calibrate+0xca>
 8009332:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009336:	0065      	.short	0x0065
 8009338:	00f2009d 	.word	0x00f2009d
 800933c:	000b015d 	.word	0x000b015d
 8009340:	020701d3 	.word	0x020701d3
 8009344:	029b0266 	.word	0x029b0266
 8009348:	006502d1 	.word	0x006502d1
 800934c:	f001 fc08 	bl	800ab60 <acc_a121_cal_session_ack_program>
 8009350:	2800      	cmp	r0, #0
 8009352:	f000 808b 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009356:	aa08      	add	r2, sp, #32
 8009358:	4641      	mov	r1, r8
 800935a:	4628      	mov	r0, r5
 800935c:	f001 fc52 	bl	800ac04 <acc_a121_cal_session_get_4_bba_vga_program_data>
 8009360:	48bd      	ldr	r0, [pc, #756]	@ (8009658 <acc_calibration_a121_calibrate+0x33c>)
 8009362:	f8df b300 	ldr.w	fp, [pc, #768]	@ 8009664 <acc_calibration_a121_calibrate+0x348>
 8009366:	4629      	mov	r1, r5
 8009368:	f004 fc80 	bl	800dc6c <acc_diagnostic_log_scalar>
 800936c:	49bb      	ldr	r1, [pc, #748]	@ (800965c <acc_calibration_a121_calibrate+0x340>)
 800936e:	48bc      	ldr	r0, [pc, #752]	@ (8009660 <acc_calibration_a121_calibrate+0x344>)
 8009370:	f004 fc74 	bl	800dc5c <acc_diagnostic_log_array>
 8009374:	9808      	ldr	r0, [sp, #32]
 8009376:	2150      	movs	r1, #80	@ 0x50
 8009378:	f004 fc88 	bl	800dc8c <acc_diagnostic_log_data_i16>
 800937c:	f107 0a0a 	add.w	sl, r7, #10
 8009380:	f04f 0900 	mov.w	r9, #0
 8009384:	9808      	ldr	r0, [sp, #32]
 8009386:	a905      	add	r1, sp, #20
 8009388:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800938c:	f000 fcc8 	bl	8009d20 <acc_cal_algorithms_bba_cal_ctrl>
 8009390:	4603      	mov	r3, r0
 8009392:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 8009396:	48b3      	ldr	r0, [pc, #716]	@ (8009664 <acc_calibration_a121_calibrate+0x348>)
 8009398:	f109 0901 	add.w	r9, r9, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d065      	beq.n	800946c <acc_calibration_a121_calibrate+0x150>
 80093a0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80093a4:	f88b 200d 	strb.w	r2, [fp, #13]
 80093a8:	f004 fc60 	bl	800dc6c <acc_diagnostic_log_scalar>
 80093ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80093b0:	f82a 3f02 	strh.w	r3, [sl, #2]!
 80093b4:	f1b9 0f0a 	cmp.w	r9, #10
 80093b8:	d1e4      	bne.n	8009384 <acc_calibration_a121_calibrate+0x68>
 80093ba:	48ab      	ldr	r0, [pc, #684]	@ (8009668 <acc_calibration_a121_calibrate+0x34c>)
 80093bc:	f004 fc46 	bl	800dc4c <acc_diagnostic_log_set_scope>
 80093c0:	4baa      	ldr	r3, [pc, #680]	@ (800966c <acc_calibration_a121_calibrate+0x350>)
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	2280      	movs	r2, #128	@ 0x80
 80093c6:	9201      	str	r2, [sp, #4]
 80093c8:	4641      	mov	r1, r8
 80093ca:	4632      	mov	r2, r6
 80093cc:	2300      	movs	r3, #0
 80093ce:	4628      	mov	r0, r5
 80093d0:	f002 fbc6 	bl	800bb60 <acc_sensor_protocol_a121_load_lut>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f040 82f7 	bne.w	80099c8 <acc_calibration_a121_calibrate+0x6ac>
 80093da:	4ba5      	ldr	r3, [pc, #660]	@ (8009670 <acc_calibration_a121_calibrate+0x354>)
 80093dc:	4aa5      	ldr	r2, [pc, #660]	@ (8009674 <acc_calibration_a121_calibrate+0x358>)
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	49a5      	ldr	r1, [pc, #660]	@ (8009678 <acc_calibration_a121_calibrate+0x35c>)
 80093e2:	4798      	blx	r3
 80093e4:	7823      	ldrb	r3, [r4, #0]
 80093e6:	49a2      	ldr	r1, [pc, #648]	@ (8009670 <acc_calibration_a121_calibrate+0x354>)
 80093e8:	4aa4      	ldr	r2, [pc, #656]	@ (800967c <acc_calibration_a121_calibrate+0x360>)
 80093ea:	690e      	ldr	r6, [r1, #16]
 80093ec:	49a2      	ldr	r1, [pc, #648]	@ (8009678 <acc_calibration_a121_calibrate+0x35c>)
 80093ee:	2000      	movs	r0, #0
 80093f0:	4605      	mov	r5, r0
 80093f2:	47b0      	blx	r6
 80093f4:	462b      	mov	r3, r5
 80093f6:	4628      	mov	r0, r5
 80093f8:	7023      	strb	r3, [r4, #0]
 80093fa:	b011      	add	sp, #68	@ 0x44
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	228c      	movs	r2, #140	@ 0x8c
 8009402:	2100      	movs	r1, #0
 8009404:	4638      	mov	r0, r7
 8009406:	f007 fa5d 	bl	80108c4 <memset>
 800940a:	f001 fd47 	bl	800ae9c <acc_rss_integration_get_sensor_reference_frequency>
 800940e:	ee07 0a90 	vmov	s15, r0
 8009412:	f107 0a80 	add.w	sl, r7, #128	@ 0x80
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	4651      	mov	r1, sl
 800941c:	a808      	add	r0, sp, #32
 800941e:	edcd 7a08 	vstr	s15, [sp, #32]
 8009422:	f004 f97f 	bl	800d724 <acc_cpd_pll_divisors_calculate>
 8009426:	4681      	mov	r9, r0
 8009428:	4895      	ldr	r0, [pc, #596]	@ (8009680 <acc_calibration_a121_calibrate+0x364>)
 800942a:	f004 fc0f 	bl	800dc4c <acc_diagnostic_log_set_scope>
 800942e:	488a      	ldr	r0, [pc, #552]	@ (8009658 <acc_calibration_a121_calibrate+0x33c>)
 8009430:	4629      	mov	r1, r5
 8009432:	f004 fc1b 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009436:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800943a:	4892      	ldr	r0, [pc, #584]	@ (8009684 <acc_calibration_a121_calibrate+0x368>)
 800943c:	f004 fc16 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009440:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 8009444:	4890      	ldr	r0, [pc, #576]	@ (8009688 <acc_calibration_a121_calibrate+0x36c>)
 8009446:	f004 fc11 	bl	800dc6c <acc_diagnostic_log_scalar>
 800944a:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800944e:	488f      	ldr	r0, [pc, #572]	@ (800968c <acc_calibration_a121_calibrate+0x370>)
 8009450:	f004 fc0c 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009454:	488e      	ldr	r0, [pc, #568]	@ (8009690 <acc_calibration_a121_calibrate+0x374>)
 8009456:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 800945a:	f004 fc07 	bl	800dc6c <acc_diagnostic_log_scalar>
 800945e:	488d      	ldr	r0, [pc, #564]	@ (8009694 <acc_calibration_a121_calibrate+0x378>)
 8009460:	f004 fbf4 	bl	800dc4c <acc_diagnostic_log_set_scope>
 8009464:	f1b9 0f00 	cmp.w	r9, #0
 8009468:	f040 82a2 	bne.w	80099b0 <acc_calibration_a121_calibrate+0x694>
 800946c:	7823      	ldrb	r3, [r4, #0]
 800946e:	e7ba      	b.n	80093e6 <acc_calibration_a121_calibrate+0xca>
 8009470:	f001 fb76 	bl	800ab60 <acc_a121_cal_session_ack_program>
 8009474:	2800      	cmp	r0, #0
 8009476:	d0f9      	beq.n	800946c <acc_calibration_a121_calibrate+0x150>
 8009478:	aa08      	add	r2, sp, #32
 800947a:	ab05      	add	r3, sp, #20
 800947c:	e9cd 3200 	strd	r3, r2, [sp]
 8009480:	4641      	mov	r1, r8
 8009482:	ab03      	add	r3, sp, #12
 8009484:	f10d 020e 	add.w	r2, sp, #14
 8009488:	4628      	mov	r0, r5
 800948a:	f001 fb8b 	bl	800aba4 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800948e:	4872      	ldr	r0, [pc, #456]	@ (8009658 <acc_calibration_a121_calibrate+0x33c>)
 8009490:	4629      	mov	r1, r5
 8009492:	f004 fbeb 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009496:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800949a:	487f      	ldr	r0, [pc, #508]	@ (8009698 <acc_calibration_a121_calibrate+0x37c>)
 800949c:	f004 fbe6 	bl	800dc6c <acc_diagnostic_log_scalar>
 80094a0:	496e      	ldr	r1, [pc, #440]	@ (800965c <acc_calibration_a121_calibrate+0x340>)
 80094a2:	487e      	ldr	r0, [pc, #504]	@ (800969c <acc_calibration_a121_calibrate+0x380>)
 80094a4:	f004 fbda 	bl	800dc5c <acc_diagnostic_log_array>
 80094a8:	9808      	ldr	r0, [sp, #32]
 80094aa:	2110      	movs	r1, #16
 80094ac:	f004 fbe6 	bl	800dc7c <acc_diagnostic_log_data_u16>
 80094b0:	9a08      	ldr	r2, [sp, #32]
 80094b2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80094b6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80094ba:	ab04      	add	r3, sp, #16
 80094bc:	f000 fad6 	bl	8009a6c <acc_cal_algorithms_pll_cbank>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d0d3      	beq.n	800946c <acc_calibration_a121_calibrate+0x150>
 80094c4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80094c8:	f000 fe4e 	bl	800a168 <acc_cal_algorithms_wavelet_duration_p1>
 80094cc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80094d0:	4606      	mov	r6, r0
 80094d2:	4873      	ldr	r0, [pc, #460]	@ (80096a0 <acc_calibration_a121_calibrate+0x384>)
 80094d4:	f004 fbca 	bl	800dc6c <acc_diagnostic_log_scalar>
 80094d8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80094dc:	4871      	ldr	r0, [pc, #452]	@ (80096a4 <acc_calibration_a121_calibrate+0x388>)
 80094de:	f004 fbc5 	bl	800dc6c <acc_diagnostic_log_scalar>
 80094e2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80094e6:	4870      	ldr	r0, [pc, #448]	@ (80096a8 <acc_calibration_a121_calibrate+0x38c>)
 80094e8:	f004 fbc0 	bl	800dc6c <acc_diagnostic_log_scalar>
 80094ec:	486f      	ldr	r0, [pc, #444]	@ (80096ac <acc_calibration_a121_calibrate+0x390>)
 80094ee:	4631      	mov	r1, r6
 80094f0:	f004 fbbc 	bl	800dc6c <acc_diagnostic_log_scalar>
 80094f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80094f8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80094fc:	803b      	strh	r3, [r7, #0]
 80094fe:	4628      	mov	r0, r5
 8009500:	84be      	strh	r6, [r7, #36]	@ 0x24
 8009502:	8079      	strh	r1, [r7, #2]
 8009504:	f001 f99c 	bl	800a840 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 8009508:	4605      	mov	r5, r0
 800950a:	2302      	movs	r3, #2
 800950c:	2d00      	cmp	r5, #0
 800950e:	d0ad      	beq.n	800946c <acc_calibration_a121_calibrate+0x150>
 8009510:	4628      	mov	r0, r5
 8009512:	7023      	strb	r3, [r4, #0]
 8009514:	b011      	add	sp, #68	@ 0x44
 8009516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951a:	f001 fb21 	bl	800ab60 <acc_a121_cal_session_ack_program>
 800951e:	2800      	cmp	r0, #0
 8009520:	d0a4      	beq.n	800946c <acc_calibration_a121_calibrate+0x150>
 8009522:	ab08      	add	r3, sp, #32
 8009524:	aa05      	add	r2, sp, #20
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	4641      	mov	r1, r8
 800952a:	ab04      	add	r3, sp, #16
 800952c:	4628      	mov	r0, r5
 800952e:	f001 fb51 	bl	800abd4 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 8009532:	494a      	ldr	r1, [pc, #296]	@ (800965c <acc_calibration_a121_calibrate+0x340>)
 8009534:	485e      	ldr	r0, [pc, #376]	@ (80096b0 <acc_calibration_a121_calibrate+0x394>)
 8009536:	f004 fb91 	bl	800dc5c <acc_diagnostic_log_array>
 800953a:	9805      	ldr	r0, [sp, #20]
 800953c:	2110      	movs	r1, #16
 800953e:	f004 fba5 	bl	800dc8c <acc_diagnostic_log_data_i16>
 8009542:	9805      	ldr	r0, [sp, #20]
 8009544:	a903      	add	r1, sp, #12
 8009546:	f000 facb 	bl	8009ae0 <acc_cal_algorithms_pll_ibias>
 800954a:	2800      	cmp	r0, #0
 800954c:	d08e      	beq.n	800946c <acc_calibration_a121_calibrate+0x150>
 800954e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8009552:	4858      	ldr	r0, [pc, #352]	@ (80096b4 <acc_calibration_a121_calibrate+0x398>)
 8009554:	f004 fb8a 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009558:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800955c:	80bb      	strh	r3, [r7, #4]
 800955e:	4856      	ldr	r0, [pc, #344]	@ (80096b8 <acc_calibration_a121_calibrate+0x39c>)
 8009560:	f004 fb74 	bl	800dc4c <acc_diagnostic_log_set_scope>
 8009564:	483c      	ldr	r0, [pc, #240]	@ (8009658 <acc_calibration_a121_calibrate+0x33c>)
 8009566:	4629      	mov	r1, r5
 8009568:	f004 fb80 	bl	800dc6c <acc_diagnostic_log_scalar>
 800956c:	493b      	ldr	r1, [pc, #236]	@ (800965c <acc_calibration_a121_calibrate+0x340>)
 800956e:	4853      	ldr	r0, [pc, #332]	@ (80096bc <acc_calibration_a121_calibrate+0x3a0>)
 8009570:	f004 fb74 	bl	800dc5c <acc_diagnostic_log_array>
 8009574:	9808      	ldr	r0, [sp, #32]
 8009576:	2130      	movs	r1, #48	@ 0x30
 8009578:	f004 fb80 	bl	800dc7c <acc_diagnostic_log_data_u16>
 800957c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8009580:	484f      	ldr	r0, [pc, #316]	@ (80096c0 <acc_calibration_a121_calibrate+0x3a4>)
 8009582:	f004 fb73 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009586:	9908      	ldr	r1, [sp, #32]
 8009588:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800958c:	f10d 020e 	add.w	r2, sp, #14
 8009590:	f000 faf0 	bl	8009b74 <acc_cal_algorithms_vfast2_ldo>
 8009594:	2800      	cmp	r0, #0
 8009596:	f43f af69 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 800959a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800959e:	4849      	ldr	r0, [pc, #292]	@ (80096c4 <acc_calibration_a121_calibrate+0x3a8>)
 80095a0:	f004 fb64 	bl	800dc6c <acc_diagnostic_log_scalar>
 80095a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80095a8:	4847      	ldr	r0, [pc, #284]	@ (80096c8 <acc_calibration_a121_calibrate+0x3ac>)
 80095aa:	817b      	strh	r3, [r7, #10]
 80095ac:	f004 fb4e 	bl	800dc4c <acc_diagnostic_log_set_scope>
 80095b0:	2001      	movs	r0, #1
 80095b2:	ab02      	add	r3, sp, #8
 80095b4:	e9cd 3000 	strd	r3, r0, [sp]
 80095b8:	4632      	mov	r2, r6
 80095ba:	4641      	mov	r1, r8
 80095bc:	f44f 567e 	mov.w	r6, #16256	@ 0x3f80
 80095c0:	2300      	movs	r3, #0
 80095c2:	4628      	mov	r0, r5
 80095c4:	f8ad 6008 	strh.w	r6, [sp, #8]
 80095c8:	f002 faca 	bl	800bb60 <acc_sensor_protocol_a121_load_lut>
 80095cc:	b920      	cbnz	r0, 80095d8 <acc_calibration_a121_calibrate+0x2bc>
 80095ce:	4b28      	ldr	r3, [pc, #160]	@ (8009670 <acc_calibration_a121_calibrate+0x354>)
 80095d0:	4a3e      	ldr	r2, [pc, #248]	@ (80096cc <acc_calibration_a121_calibrate+0x3b0>)
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	4928      	ldr	r1, [pc, #160]	@ (8009678 <acc_calibration_a121_calibrate+0x35c>)
 80095d6:	4798      	blx	r3
 80095d8:	4628      	mov	r0, r5
 80095da:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80095de:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80095e2:	f001 f94b 	bl	800a87c <acc_a121_cal_session_start_3_delay_cbank_program>
 80095e6:	4605      	mov	r5, r0
 80095e8:	2303      	movs	r3, #3
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	d190      	bne.n	8009510 <acc_calibration_a121_calibrate+0x1f4>
 80095ee:	e73d      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 80095f0:	2300      	movs	r3, #0
 80095f2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095f6:	f001 fab3 	bl	800ab60 <acc_a121_cal_session_ack_program>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f43f af36 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009600:	aa08      	add	r2, sp, #32
 8009602:	4641      	mov	r1, r8
 8009604:	4628      	mov	r0, r5
 8009606:	f001 faf5 	bl	800abf4 <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800960a:	4813      	ldr	r0, [pc, #76]	@ (8009658 <acc_calibration_a121_calibrate+0x33c>)
 800960c:	4629      	mov	r1, r5
 800960e:	f004 fb2d 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009612:	4912      	ldr	r1, [pc, #72]	@ (800965c <acc_calibration_a121_calibrate+0x340>)
 8009614:	482e      	ldr	r0, [pc, #184]	@ (80096d0 <acc_calibration_a121_calibrate+0x3b4>)
 8009616:	f004 fb21 	bl	800dc5c <acc_diagnostic_log_array>
 800961a:	9808      	ldr	r0, [sp, #32]
 800961c:	2120      	movs	r1, #32
 800961e:	f004 fb35 	bl	800dc8c <acc_diagnostic_log_data_i16>
 8009622:	9808      	ldr	r0, [sp, #32]
 8009624:	a905      	add	r1, sp, #20
 8009626:	f000 faf1 	bl	8009c0c <acc_cal_algorithms_delay_cbank>
 800962a:	2800      	cmp	r0, #0
 800962c:	f43f af1e 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009630:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8009634:	4827      	ldr	r0, [pc, #156]	@ (80096d4 <acc_calibration_a121_calibrate+0x3b8>)
 8009636:	f004 fb19 	bl	800dc6c <acc_diagnostic_log_scalar>
 800963a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800963e:	80fb      	strh	r3, [r7, #6]
 8009640:	4825      	ldr	r0, [pc, #148]	@ (80096d8 <acc_calibration_a121_calibrate+0x3bc>)
 8009642:	f004 fb03 	bl	800dc4c <acc_diagnostic_log_set_scope>
 8009646:	4628      	mov	r0, r5
 8009648:	f001 f946 	bl	800a8d8 <acc_a121_cal_session_start_4_bba_vga_program>
 800964c:	4605      	mov	r5, r0
 800964e:	2304      	movs	r3, #4
 8009650:	2d00      	cmp	r5, #0
 8009652:	f47f af5d 	bne.w	8009510 <acc_calibration_a121_calibrate+0x1f4>
 8009656:	e709      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 8009658:	08012648 	.word	0x08012648
 800965c:	08012dc8 	.word	0x08012dc8
 8009660:	080127f4 	.word	0x080127f4
 8009664:	20000010 	.word	0x20000010
 8009668:	0801280c 	.word	0x0801280c
 800966c:	08014da4 	.word	0x08014da4
 8009670:	200003f0 	.word	0x200003f0
 8009674:	08012824 	.word	0x08012824
 8009678:	0801279c 	.word	0x0801279c
 800967c:	08012ac4 	.word	0x08012ac4
 8009680:	08013484 	.word	0x08013484
 8009684:	08012654 	.word	0x08012654
 8009688:	08012664 	.word	0x08012664
 800968c:	08012670 	.word	0x08012670
 8009690:	0801267c 	.word	0x0801267c
 8009694:	0801268c 	.word	0x0801268c
 8009698:	0801269c 	.word	0x0801269c
 800969c:	080126a8 	.word	0x080126a8
 80096a0:	080126c4 	.word	0x080126c4
 80096a4:	080126d0 	.word	0x080126d0
 80096a8:	080126d8 	.word	0x080126d8
 80096ac:	080126e4 	.word	0x080126e4
 80096b0:	080126f0 	.word	0x080126f0
 80096b4:	08012710 	.word	0x08012710
 80096b8:	0801271c 	.word	0x0801271c
 80096bc:	08012734 	.word	0x08012734
 80096c0:	08012748 	.word	0x08012748
 80096c4:	08012754 	.word	0x08012754
 80096c8:	08012760 	.word	0x08012760
 80096cc:	08012778 	.word	0x08012778
 80096d0:	080127b0 	.word	0x080127b0
 80096d4:	080127d4 	.word	0x080127d4
 80096d8:	080127e0 	.word	0x080127e0
 80096dc:	f001 fa40 	bl	800ab60 <acc_a121_cal_session_ack_program>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	f43f aec3 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 80096e6:	aa08      	add	r2, sp, #32
 80096e8:	4641      	mov	r1, r8
 80096ea:	4628      	mov	r0, r5
 80096ec:	f001 fa92 	bl	800ac14 <acc_a121_cal_session_get_5_area_index_program_data>
 80096f0:	49bb      	ldr	r1, [pc, #748]	@ (80099e0 <acc_calibration_a121_calibrate+0x6c4>)
 80096f2:	48bc      	ldr	r0, [pc, #752]	@ (80099e4 <acc_calibration_a121_calibrate+0x6c8>)
 80096f4:	f004 fab2 	bl	800dc5c <acc_diagnostic_log_array>
 80096f8:	9808      	ldr	r0, [sp, #32]
 80096fa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80096fe:	f004 fac5 	bl	800dc8c <acc_diagnostic_log_data_i16>
 8009702:	9808      	ldr	r0, [sp, #32]
 8009704:	a905      	add	r1, sp, #20
 8009706:	f000 fb7b 	bl	8009e00 <acc_cal_algorithms_area_index>
 800970a:	2800      	cmp	r0, #0
 800970c:	f43f aeae 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009710:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8009714:	48b4      	ldr	r0, [pc, #720]	@ (80099e8 <acc_calibration_a121_calibrate+0x6cc>)
 8009716:	f004 faa9 	bl	800dc6c <acc_diagnostic_log_scalar>
 800971a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800971e:	813b      	strh	r3, [r7, #8]
 8009720:	48b2      	ldr	r0, [pc, #712]	@ (80099ec <acc_calibration_a121_calibrate+0x6d0>)
 8009722:	f004 fa93 	bl	800dc4c <acc_diagnostic_log_set_scope>
 8009726:	8938      	ldrh	r0, [r7, #8]
 8009728:	aa08      	add	r2, sp, #32
 800972a:	2160      	movs	r1, #96	@ 0x60
 800972c:	f004 f8e0 	bl	800d8f0 <acc_dll_calculate_area_settings>
 8009730:	4628      	mov	r0, r5
 8009732:	a908      	add	r1, sp, #32
 8009734:	f001 f924 	bl	800a980 <acc_a121_cal_session_start_6_tx_freq_program>
 8009738:	4605      	mov	r5, r0
 800973a:	2306      	movs	r3, #6
 800973c:	2d00      	cmp	r5, #0
 800973e:	f47f aee7 	bne.w	8009510 <acc_calibration_a121_calibrate+0x1f4>
 8009742:	e693      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 8009744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009748:	f8ad 3010 	strh.w	r3, [sp, #16]
 800974c:	f001 fa08 	bl	800ab60 <acc_a121_cal_session_ack_program>
 8009750:	2800      	cmp	r0, #0
 8009752:	f43f ae8b 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009756:	f001 fba1 	bl	800ae9c <acc_rss_integration_get_sensor_reference_frequency>
 800975a:	4ea5      	ldr	r6, [pc, #660]	@ (80099f0 <acc_calibration_a121_calibrate+0x6d4>)
 800975c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 8009760:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 8009a50 <acc_calibration_a121_calibrate+0x734>
 8009764:	fba6 2600 	umull	r2, r6, r6, r0
 8009768:	4641      	mov	r1, r8
 800976a:	aa05      	add	r2, sp, #20
 800976c:	4628      	mov	r0, r5
 800976e:	09b6      	lsrs	r6, r6, #6
 8009770:	fb06 f603 	mul.w	r6, r6, r3
 8009774:	f001 fa58 	bl	800ac28 <acc_a121_cal_session_get_6_tx_freq_program_data>
 8009778:	4999      	ldr	r1, [pc, #612]	@ (80099e0 <acc_calibration_a121_calibrate+0x6c4>)
 800977a:	489e      	ldr	r0, [pc, #632]	@ (80099f4 <acc_calibration_a121_calibrate+0x6d8>)
 800977c:	f004 fa6e 	bl	800dc5c <acc_diagnostic_log_array>
 8009780:	9805      	ldr	r0, [sp, #20]
 8009782:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8009786:	f004 fa81 	bl	800dc8c <acc_diagnostic_log_data_i16>
 800978a:	ab04      	add	r3, sp, #16
 800978c:	4630      	mov	r0, r6
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	4a99      	ldr	r2, [pc, #612]	@ (80099f8 <acc_calibration_a121_calibrate+0x6dc>)
 8009792:	9905      	ldr	r1, [sp, #20]
 8009794:	ab08      	add	r3, sp, #32
 8009796:	f000 fd27 	bl	800a1e8 <acc_cal_algorithms_tx_freq_ctrl>
 800979a:	46cb      	mov	fp, r9
 800979c:	4682      	mov	sl, r0
 800979e:	f10d 081c 	add.w	r8, sp, #28
 80097a2:	2630      	movs	r6, #48	@ 0x30
 80097a4:	f889 600c 	strb.w	r6, [r9, #12]
 80097a8:	3601      	adds	r6, #1
 80097aa:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80097ae:	4658      	mov	r0, fp
 80097b0:	b2f6      	uxtb	r6, r6
 80097b2:	f004 fa5b 	bl	800dc6c <acc_diagnostic_log_scalar>
 80097b6:	2e38      	cmp	r6, #56	@ 0x38
 80097b8:	d1f4      	bne.n	80097a4 <acc_calibration_a121_calibrate+0x488>
 80097ba:	f1ba 0f00 	cmp.w	sl, #0
 80097be:	f43f ae55 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 80097c2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80097c6:	488d      	ldr	r0, [pc, #564]	@ (80099fc <acc_calibration_a121_calibrate+0x6e0>)
 80097c8:	f004 fa50 	bl	800dc6c <acc_diagnostic_log_scalar>
 80097cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80097d0:	488b      	ldr	r0, [pc, #556]	@ (8009a00 <acc_calibration_a121_calibrate+0x6e4>)
 80097d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80097d4:	f004 fa3a 	bl	800dc4c <acc_diagnostic_log_set_scope>
 80097d8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80097dc:	4628      	mov	r0, r5
 80097de:	f001 f95f 	bl	800aaa0 <acc_a121_cal_session_start_7_rx_freq_program>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	f43f ae42 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 80097e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80097ec:	9805      	ldr	r0, [sp, #20]
 80097ee:	2201      	movs	r2, #1
 80097f0:	2100      	movs	r1, #0
 80097f2:	f000 fbcd 	bl	8009f90 <acc_cal_algorithms_iq_imbalance>
 80097f6:	4605      	mov	r5, r0
 80097f8:	2307      	movs	r3, #7
 80097fa:	2d00      	cmp	r5, #0
 80097fc:	f47f ae88 	bne.w	8009510 <acc_calibration_a121_calibrate+0x1f4>
 8009800:	e634      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 8009802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009806:	f8ad 3014 	strh.w	r3, [sp, #20]
 800980a:	f001 f9a9 	bl	800ab60 <acc_a121_cal_session_ack_program>
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f ae2c 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009814:	aa08      	add	r2, sp, #32
 8009816:	4641      	mov	r1, r8
 8009818:	4628      	mov	r0, r5
 800981a:	f001 fa07 	bl	800ac2c <acc_a121_cal_session_get_7_rx_freq_program_data>
 800981e:	4970      	ldr	r1, [pc, #448]	@ (80099e0 <acc_calibration_a121_calibrate+0x6c4>)
 8009820:	4878      	ldr	r0, [pc, #480]	@ (8009a04 <acc_calibration_a121_calibrate+0x6e8>)
 8009822:	f004 fa1b 	bl	800dc5c <acc_diagnostic_log_array>
 8009826:	9808      	ldr	r0, [sp, #32]
 8009828:	2110      	movs	r1, #16
 800982a:	f004 fa2f 	bl	800dc8c <acc_diagnostic_log_data_i16>
 800982e:	9808      	ldr	r0, [sp, #32]
 8009830:	aa05      	add	r2, sp, #20
 8009832:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8009836:	f000 fc55 	bl	800a0e4 <acc_cal_algorithms_rx_freq_ctrl>
 800983a:	2800      	cmp	r0, #0
 800983c:	f43f ae16 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009840:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8009844:	4870      	ldr	r0, [pc, #448]	@ (8009a08 <acc_calibration_a121_calibrate+0x6ec>)
 8009846:	f004 fa11 	bl	800dc6c <acc_diagnostic_log_scalar>
 800984a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800984e:	843b      	strh	r3, [r7, #32]
 8009850:	486e      	ldr	r0, [pc, #440]	@ (8009a0c <acc_calibration_a121_calibrate+0x6f0>)
 8009852:	f004 f9fb 	bl	800dc4c <acc_diagnostic_log_set_scope>
 8009856:	4628      	mov	r0, r5
 8009858:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800985c:	f001 f93e 	bl	800aadc <acc_a121_cal_session_start_8_phase_enhancement_program>
 8009860:	4605      	mov	r5, r0
 8009862:	2308      	movs	r3, #8
 8009864:	2d00      	cmp	r5, #0
 8009866:	f47f ae53 	bne.w	8009510 <acc_calibration_a121_calibrate+0x1f4>
 800986a:	e5ff      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 800986c:	f001 f978 	bl	800ab60 <acc_a121_cal_session_ack_program>
 8009870:	2800      	cmp	r0, #0
 8009872:	f43f adfb 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009876:	aa08      	add	r2, sp, #32
 8009878:	4641      	mov	r1, r8
 800987a:	4628      	mov	r0, r5
 800987c:	f001 f9de 	bl	800ac3c <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 8009880:	4957      	ldr	r1, [pc, #348]	@ (80099e0 <acc_calibration_a121_calibrate+0x6c4>)
 8009882:	4863      	ldr	r0, [pc, #396]	@ (8009a10 <acc_calibration_a121_calibrate+0x6f4>)
 8009884:	f004 f9ea 	bl	800dc5c <acc_diagnostic_log_array>
 8009888:	f107 0626 	add.w	r6, r7, #38	@ 0x26
 800988c:	9808      	ldr	r0, [sp, #32]
 800988e:	2160      	movs	r1, #96	@ 0x60
 8009890:	f004 f9fc 	bl	800dc8c <acc_diagnostic_log_data_i16>
 8009894:	9808      	ldr	r0, [sp, #32]
 8009896:	4631      	mov	r1, r6
 8009898:	f107 0256 	add.w	r2, r7, #86	@ 0x56
 800989c:	f000 fd34 	bl	800a308 <acc_cal_algorithms_phase_enhancement>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	f43f ade3 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 80098a6:	494e      	ldr	r1, [pc, #312]	@ (80099e0 <acc_calibration_a121_calibrate+0x6c4>)
 80098a8:	485a      	ldr	r0, [pc, #360]	@ (8009a14 <acc_calibration_a121_calibrate+0x6f8>)
 80098aa:	f004 f9d7 	bl	800dc5c <acc_diagnostic_log_array>
 80098ae:	4630      	mov	r0, r6
 80098b0:	2118      	movs	r1, #24
 80098b2:	f004 f9eb 	bl	800dc8c <acc_diagnostic_log_data_i16>
 80098b6:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 80098ba:	4857      	ldr	r0, [pc, #348]	@ (8009a18 <acc_calibration_a121_calibrate+0x6fc>)
 80098bc:	f004 f9d6 	bl	800dc6c <acc_diagnostic_log_scalar>
 80098c0:	4856      	ldr	r0, [pc, #344]	@ (8009a1c <acc_calibration_a121_calibrate+0x700>)
 80098c2:	f004 f9c3 	bl	800dc4c <acc_diagnostic_log_set_scope>
 80098c6:	4628      	mov	r0, r5
 80098c8:	f001 f946 	bl	800ab58 <acc_a121_cal_session_start_9_pulseshaper_program>
 80098cc:	4605      	mov	r5, r0
 80098ce:	2309      	movs	r3, #9
 80098d0:	2d00      	cmp	r5, #0
 80098d2:	f47f ae1d 	bne.w	8009510 <acc_calibration_a121_calibrate+0x1f4>
 80098d6:	e5c9      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 80098d8:	f001 f942 	bl	800ab60 <acc_a121_cal_session_ack_program>
 80098dc:	2800      	cmp	r0, #0
 80098de:	f43f adc5 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 80098e2:	aa08      	add	r2, sp, #32
 80098e4:	ab04      	add	r3, sp, #16
 80098e6:	4641      	mov	r1, r8
 80098e8:	4628      	mov	r0, r5
 80098ea:	f001 f9af 	bl	800ac4c <acc_a121_cal_session_get_9_pulseshaper_program_data>
 80098ee:	493c      	ldr	r1, [pc, #240]	@ (80099e0 <acc_calibration_a121_calibrate+0x6c4>)
 80098f0:	484b      	ldr	r0, [pc, #300]	@ (8009a20 <acc_calibration_a121_calibrate+0x704>)
 80098f2:	f004 f9b3 	bl	800dc5c <acc_diagnostic_log_array>
 80098f6:	9808      	ldr	r0, [sp, #32]
 80098f8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80098fc:	f004 f9be 	bl	800dc7c <acc_diagnostic_log_data_u16>
 8009900:	9808      	ldr	r0, [sp, #32]
 8009902:	a905      	add	r1, sp, #20
 8009904:	f000 fe58 	bl	800a5b8 <acc_cal_algorithms_pulseshaper_wavelet>
 8009908:	2800      	cmp	r0, #0
 800990a:	f43f adaf 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 800990e:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8009912:	9b07      	ldr	r3, [sp, #28]
 8009914:	667b      	str	r3, [r7, #100]	@ 0x64
 8009916:	e9c7 2117 	strd	r2, r1, [r7, #92]	@ 0x5c
 800991a:	4842      	ldr	r0, [pc, #264]	@ (8009a24 <acc_calibration_a121_calibrate+0x708>)
 800991c:	f004 f9a6 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009920:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8009922:	4841      	ldr	r0, [pc, #260]	@ (8009a28 <acc_calibration_a121_calibrate+0x70c>)
 8009924:	f004 f9a2 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009928:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800992a:	4840      	ldr	r0, [pc, #256]	@ (8009a2c <acc_calibration_a121_calibrate+0x710>)
 800992c:	f004 f99e 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009930:	483f      	ldr	r0, [pc, #252]	@ (8009a30 <acc_calibration_a121_calibrate+0x714>)
 8009932:	f004 f98b 	bl	800dc4c <acc_diagnostic_log_set_scope>
 8009936:	492a      	ldr	r1, [pc, #168]	@ (80099e0 <acc_calibration_a121_calibrate+0x6c4>)
 8009938:	483e      	ldr	r0, [pc, #248]	@ (8009a34 <acc_calibration_a121_calibrate+0x718>)
 800993a:	f004 f98f 	bl	800dc5c <acc_diagnostic_log_array>
 800993e:	9804      	ldr	r0, [sp, #16]
 8009940:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8009944:	f004 f99a 	bl	800dc7c <acc_diagnostic_log_data_u16>
 8009948:	9804      	ldr	r0, [sp, #16]
 800994a:	a908      	add	r1, sp, #32
 800994c:	f000 fe7c 	bl	800a648 <acc_cal_algorithms_pulseshaper_supply>
 8009950:	4605      	mov	r5, r0
 8009952:	2800      	cmp	r0, #0
 8009954:	f43f ad8a 	beq.w	800946c <acc_calibration_a121_calibrate+0x150>
 8009958:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800995c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800995e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8009960:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009962:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009964:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009966:	673b      	str	r3, [r7, #112]	@ 0x70
 8009968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800996a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800996c:	e9c7 121d 	strd	r1, r2, [r7, #116]	@ 0x74
 8009970:	4638      	mov	r0, r7
 8009972:	218c      	movs	r1, #140	@ 0x8c
 8009974:	f004 f884 	bl	800da80 <acc_alg_basic_util_crc32>
 8009978:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800997a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800997e:	482e      	ldr	r0, [pc, #184]	@ (8009a38 <acc_calibration_a121_calibrate+0x71c>)
 8009980:	f004 f974 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009984:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009986:	482d      	ldr	r0, [pc, #180]	@ (8009a3c <acc_calibration_a121_calibrate+0x720>)
 8009988:	f004 f970 	bl	800dc6c <acc_diagnostic_log_scalar>
 800998c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800998e:	482c      	ldr	r0, [pc, #176]	@ (8009a40 <acc_calibration_a121_calibrate+0x724>)
 8009990:	f004 f96c 	bl	800dc6c <acc_diagnostic_log_scalar>
 8009994:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009996:	482b      	ldr	r0, [pc, #172]	@ (8009a44 <acc_calibration_a121_calibrate+0x728>)
 8009998:	f004 f968 	bl	800dc6c <acc_diagnostic_log_scalar>
 800999c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800999e:	482a      	ldr	r0, [pc, #168]	@ (8009a48 <acc_calibration_a121_calibrate+0x72c>)
 80099a0:	f004 f964 	bl	800dc6c <acc_diagnostic_log_scalar>
 80099a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099a6:	4829      	ldr	r0, [pc, #164]	@ (8009a4c <acc_calibration_a121_calibrate+0x730>)
 80099a8:	f004 f960 	bl	800dc6c <acc_diagnostic_log_scalar>
 80099ac:	230a      	movs	r3, #10
 80099ae:	e522      	b.n	80093f6 <acc_calibration_a121_calibrate+0xda>
 80099b0:	4653      	mov	r3, sl
 80099b2:	4628      	mov	r0, r5
 80099b4:	4632      	mov	r2, r6
 80099b6:	4641      	mov	r1, r8
 80099b8:	f000 feca 	bl	800a750 <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 80099bc:	4605      	mov	r5, r0
 80099be:	2301      	movs	r3, #1
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	f47f ada5 	bne.w	8009510 <acc_calibration_a121_calibrate+0x1f4>
 80099c6:	e551      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 80099c8:	4628      	mov	r0, r5
 80099ca:	88fa      	ldrh	r2, [r7, #6]
 80099cc:	f107 010c 	add.w	r1, r7, #12
 80099d0:	f000 ff86 	bl	800a8e0 <acc_a121_cal_session_start_5_area_index_program>
 80099d4:	4605      	mov	r5, r0
 80099d6:	2305      	movs	r3, #5
 80099d8:	2d00      	cmp	r5, #0
 80099da:	f47f ad99 	bne.w	8009510 <acc_calibration_a121_calibrate+0x1f4>
 80099de:	e545      	b.n	800946c <acc_calibration_a121_calibrate+0x150>
 80099e0:	08012dc8 	.word	0x08012dc8
 80099e4:	08012850 	.word	0x08012850
 80099e8:	08012874 	.word	0x08012874
 80099ec:	08012880 	.word	0x08012880
 80099f0:	10624dd3 	.word	0x10624dd3
 80099f4:	0801289c 	.word	0x0801289c
 80099f8:	039b2820 	.word	0x039b2820
 80099fc:	080128c0 	.word	0x080128c0
 8009a00:	080128d0 	.word	0x080128d0
 8009a04:	080128ec 	.word	0x080128ec
 8009a08:	08012910 	.word	0x08012910
 8009a0c:	08012920 	.word	0x08012920
 8009a10:	08012940 	.word	0x08012940
 8009a14:	0801296c 	.word	0x0801296c
 8009a18:	08012998 	.word	0x08012998
 8009a1c:	080129b4 	.word	0x080129b4
 8009a20:	080129cc 	.word	0x080129cc
 8009a24:	080129e0 	.word	0x080129e0
 8009a28:	080129f4 	.word	0x080129f4
 8009a2c:	08012a08 	.word	0x08012a08
 8009a30:	08012a18 	.word	0x08012a18
 8009a34:	08012a30 	.word	0x08012a30
 8009a38:	08012a44 	.word	0x08012a44
 8009a3c:	08012a58 	.word	0x08012a58
 8009a40:	08012a6c 	.word	0x08012a6c
 8009a44:	08012a80 	.word	0x08012a80
 8009a48:	08012a94 	.word	0x08012a94
 8009a4c:	08012aac 	.word	0x08012aac
 8009a50:	20000020 	.word	0x20000020

08009a54 <acc_calibration_a121_validate_calibration>:
 8009a54:	b510      	push	{r4, lr}
 8009a56:	218c      	movs	r1, #140	@ 0x8c
 8009a58:	4604      	mov	r4, r0
 8009a5a:	f004 f811 	bl	800da80 <acc_alg_basic_util_crc32>
 8009a5e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8009a62:	1a18      	subs	r0, r3, r0
 8009a64:	fab0 f080 	clz	r0, r0
 8009a68:	0940      	lsrs	r0, r0, #5
 8009a6a:	bd10      	pop	{r4, pc}

08009a6c <acc_cal_algorithms_pll_cbank>:
 8009a6c:	b4f0      	push	{r4, r5, r6, r7}
 8009a6e:	2400      	movs	r4, #0
 8009a70:	46a4      	mov	ip, r4
 8009a72:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8009a76:	fa40 f504 	asr.w	r5, r0, r4
 8009a7a:	07ed      	lsls	r5, r5, #31
 8009a7c:	b2a6      	uxth	r6, r4
 8009a7e:	d50a      	bpl.n	8009a96 <acc_cal_algorithms_pll_cbank+0x2a>
 8009a80:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 8009a84:	1a6d      	subs	r5, r5, r1
 8009a86:	2d00      	cmp	r5, #0
 8009a88:	bfb8      	it	lt
 8009a8a:	426d      	neglt	r5, r5
 8009a8c:	b2ad      	uxth	r5, r5
 8009a8e:	42bd      	cmp	r5, r7
 8009a90:	bf3c      	itt	cc
 8009a92:	462f      	movcc	r7, r5
 8009a94:	46b4      	movcc	ip, r6
 8009a96:	3401      	adds	r4, #1
 8009a98:	2c10      	cmp	r4, #16
 8009a9a:	d1ec      	bne.n	8009a76 <acc_cal_algorithms_pll_cbank+0xa>
 8009a9c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009aa0:	290d      	cmp	r1, #13
 8009aa2:	d80c      	bhi.n	8009abe <acc_cal_algorithms_pll_cbank+0x52>
 8009aa4:	f10c 4100 	add.w	r1, ip, #2147483648	@ 0x80000000
 8009aa8:	3901      	subs	r1, #1
 8009aaa:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 8009aae:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009ab2:	8869      	ldrh	r1, [r5, #2]
 8009ab4:	f241 3487 	movw	r4, #4999	@ 0x1387
 8009ab8:	1a52      	subs	r2, r2, r1
 8009aba:	42a2      	cmp	r2, r4
 8009abc:	dc02      	bgt.n	8009ac4 <acc_cal_algorithms_pll_cbank+0x58>
 8009abe:	2000      	movs	r0, #0
 8009ac0:	bcf0      	pop	{r4, r5, r6, r7}
 8009ac2:	4770      	bx	lr
 8009ac4:	88aa      	ldrh	r2, [r5, #4]
 8009ac6:	1a89      	subs	r1, r1, r2
 8009ac8:	42a1      	cmp	r1, r4
 8009aca:	ddf8      	ble.n	8009abe <acc_cal_algorithms_pll_cbank+0x52>
 8009acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ad0:	4290      	cmp	r0, r2
 8009ad2:	d0f4      	beq.n	8009abe <acc_cal_algorithms_pll_cbank+0x52>
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	bcf0      	pop	{r4, r5, r6, r7}
 8009ad8:	f8a3 c000 	strh.w	ip, [r3]
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop

08009ae0 <acc_cal_algorithms_pll_ibias>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	2400      	movs	r4, #0
 8009ae6:	f1a0 0c02 	sub.w	ip, r0, #2
 8009aea:	4625      	mov	r5, r4
 8009aec:	4627      	mov	r7, r4
 8009aee:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8009af2:	e01b      	b.n	8009b2c <acc_cal_algorithms_pll_ibias+0x4c>
 8009af4:	f930 8014 	ldrsh.w	r8, [r0, r4, lsl #1]
 8009af8:	f93c a014 	ldrsh.w	sl, [ip, r4, lsl #1]
 8009afc:	f508 727a 	add.w	r2, r8, #1000	@ 0x3e8
 8009b00:	eba8 080a 	sub.w	r8, r8, sl
 8009b04:	4598      	cmp	r8, r3
 8009b06:	db30      	blt.n	8009b6a <acc_cal_algorithms_pll_ibias+0x8a>
 8009b08:	45c8      	cmp	r8, r9
 8009b0a:	dc2e      	bgt.n	8009b6a <acc_cal_algorithms_pll_ibias+0x8a>
 8009b0c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8009b10:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	42b3      	cmp	r3, r6
 8009b18:	d204      	bcs.n	8009b24 <acc_cal_algorithms_pll_ibias+0x44>
 8009b1a:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8009b1e:	461e      	mov	r6, r3
 8009b20:	b2ad      	uxth	r5, r5
 8009b22:	2701      	movs	r7, #1
 8009b24:	f1be 0f0f 	cmp.w	lr, #15
 8009b28:	d018      	beq.n	8009b5c <acc_cal_algorithms_pll_ibias+0x7c>
 8009b2a:	3401      	adds	r4, #1
 8009b2c:	1e63      	subs	r3, r4, #1
 8009b2e:	fb03 f303 	mul.w	r3, r3, r3
 8009b32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009b36:	005a      	lsls	r2, r3, #1
 8009b38:	f502 7916 	add.w	r9, r2, #600	@ 0x258
 8009b3c:	3bc8      	subs	r3, #200	@ 0xc8
 8009b3e:	fa1f fe84 	uxth.w	lr, r4
 8009b42:	2c00      	cmp	r4, #0
 8009b44:	d1d6      	bne.n	8009af4 <acc_cal_algorithms_pll_ibias+0x14>
 8009b46:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009b4a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bfb8      	it	lt
 8009b52:	425b      	neglt	r3, r3
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	42b3      	cmp	r3, r6
 8009b58:	d3df      	bcc.n	8009b1a <acc_cal_algorithms_pll_ibias+0x3a>
 8009b5a:	e7e6      	b.n	8009b2a <acc_cal_algorithms_pll_ibias+0x4a>
 8009b5c:	b117      	cbz	r7, 8009b64 <acc_cal_algorithms_pll_ibias+0x84>
 8009b5e:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 8009b62:	800d      	strh	r5, [r1, #0]
 8009b64:	4638      	mov	r0, r7
 8009b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6a:	2700      	movs	r7, #0
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	bf00      	nop

08009b74 <acc_cal_algorithms_vfast2_ldo>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 8009b7c:	880c      	ldrh	r4, [r1, #0]
 8009b7e:	b083      	sub	sp, #12
 8009b80:	1b1b      	subs	r3, r3, r4
 8009b82:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009b86:	9201      	str	r2, [sp, #4]
 8009b88:	db3a      	blt.n	8009c00 <acc_cal_algorithms_vfast2_ldo+0x8c>
 8009b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009c08 <acc_cal_algorithms_vfast2_ldo+0x94>)
 8009b8c:	ea4f 4803 	mov.w	r8, r3, lsl #16
 8009b90:	fba2 3808 	umull	r3, r8, r2, r8
 8009b94:	2500      	movs	r5, #0
 8009b96:	4681      	mov	r9, r0
 8009b98:	460e      	mov	r6, r1
 8009b9a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009b9e:	46ab      	mov	fp, r5
 8009ba0:	46a2      	mov	sl, r4
 8009ba2:	2210      	movs	r2, #16
 8009ba4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8009ba8:	2001      	movs	r0, #1
 8009baa:	e009      	b.n	8009bc0 <acc_cal_algorithms_vfast2_ldo+0x4c>
 8009bac:	3201      	adds	r2, #1
 8009bae:	b292      	uxth	r2, r2
 8009bb0:	458e      	cmp	lr, r1
 8009bb2:	bf38      	it	cc
 8009bb4:	2000      	movcc	r0, #0
 8009bb6:	2a40      	cmp	r2, #64	@ 0x40
 8009bb8:	4445      	add	r5, r8
 8009bba:	d01a      	beq.n	8009bf2 <acc_cal_algorithms_vfast2_ldo+0x7e>
 8009bbc:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8009bc0:	eba4 0309 	sub.w	r3, r4, r9
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	bfb8      	it	lt
 8009bc8:	425b      	neglt	r3, r3
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 8009bd0:	4563      	cmp	r3, ip
 8009bd2:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 8009bd6:	bf3c      	itt	cc
 8009bd8:	469c      	movcc	ip, r3
 8009bda:	4693      	movcc	fp, r2
 8009bdc:	42bc      	cmp	r4, r7
 8009bde:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 8009be2:	d9e3      	bls.n	8009bac <acc_cal_algorithms_vfast2_ldo+0x38>
 8009be4:	3201      	adds	r2, #1
 8009be6:	b292      	uxth	r2, r2
 8009be8:	2a40      	cmp	r2, #64	@ 0x40
 8009bea:	f04f 0000 	mov.w	r0, #0
 8009bee:	4445      	add	r5, r8
 8009bf0:	d1e4      	bne.n	8009bbc <acc_cal_algorithms_vfast2_ldo+0x48>
 8009bf2:	b130      	cbz	r0, 8009c02 <acc_cal_algorithms_vfast2_ldo+0x8e>
 8009bf4:	9b01      	ldr	r3, [sp, #4]
 8009bf6:	f8a3 b000 	strh.w	fp, [r3]
 8009bfa:	b003      	add	sp, #12
 8009bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c00:	2000      	movs	r0, #0
 8009c02:	b003      	add	sp, #12
 8009c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c08:	aaaaaaab 	.word	0xaaaaaaab

08009c0c <acc_cal_algorithms_delay_cbank>:
 8009c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009c12:	460e      	mov	r6, r1
 8009c14:	b0b1      	sub	sp, #196	@ 0xc4
 8009c16:	4611      	mov	r1, r2
 8009c18:	4605      	mov	r5, r0
 8009c1a:	2401      	movs	r4, #1
 8009c1c:	2700      	movs	r7, #0
 8009c1e:	e008      	b.n	8009c32 <acc_cal_algorithms_delay_cbank+0x26>
 8009c20:	428a      	cmp	r2, r1
 8009c22:	bfa8      	it	ge
 8009c24:	4627      	movge	r7, r4
 8009c26:	f104 0401 	add.w	r4, r4, #1
 8009c2a:	bfa8      	it	ge
 8009c2c:	4611      	movge	r1, r2
 8009c2e:	2c20      	cmp	r4, #32
 8009c30:	d00c      	beq.n	8009c4c <acc_cal_algorithms_delay_cbank+0x40>
 8009c32:	4613      	mov	r3, r2
 8009c34:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 8009c38:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 8009c3c:	4413      	add	r3, r2
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009c44:	d9ec      	bls.n	8009c20 <acc_cal_algorithms_delay_cbank+0x14>
 8009c46:	2000      	movs	r0, #0
 8009c48:	b031      	add	sp, #196	@ 0xc4
 8009c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c4c:	2f07      	cmp	r7, #7
 8009c4e:	d85f      	bhi.n	8009d10 <acc_cal_algorithms_delay_cbank+0x104>
 8009c50:	2300      	movs	r3, #0
 8009c52:	f107 0208 	add.w	r2, r7, #8
 8009c56:	1ad2      	subs	r2, r2, r3
 8009c58:	af03      	add	r7, sp, #12
 8009c5a:	b30a      	cbz	r2, 8009ca0 <acc_cal_algorithms_delay_cbank+0x94>
 8009c5c:	18d5      	adds	r5, r2, r3
 8009c5e:	4639      	mov	r1, r7
 8009c60:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009c64:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8009c68:	f934 0b02 	ldrsh.w	r0, [r4], #2
 8009c6c:	ee07 0a10 	vmov	s14, r0
 8009c70:	fb03 f003 	mul.w	r0, r3, r3
 8009c74:	ee06 3a90 	vmov	s13, r3
 8009c78:	ee07 0a90 	vmov	s15, r0
 8009c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c84:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009c88:	42a5      	cmp	r5, r4
 8009c8a:	ed81 7a00 	vstr	s14, [r1]
 8009c8e:	edc1 7a01 	vstr	s15, [r1, #4]
 8009c92:	edc1 6a02 	vstr	s13, [r1, #8]
 8009c96:	f103 0301 	add.w	r3, r3, #1
 8009c9a:	f101 010c 	add.w	r1, r1, #12
 8009c9e:	d1e3      	bne.n	8009c68 <acc_cal_algorithms_delay_cbank+0x5c>
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	4669      	mov	r1, sp
 8009ca4:	f003 ff08 	bl	800dab8 <acc_alg_least_square_fit>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d0cc      	beq.n	8009c46 <acc_cal_algorithms_delay_cbank+0x3a>
 8009cac:	ed9d 6a00 	vldr	s12, [sp]
 8009cb0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb8:	d0c5      	beq.n	8009c46 <acc_cal_algorithms_delay_cbank+0x3a>
 8009cba:	eddd 6a01 	vldr	s13, [sp, #4]
 8009cbe:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc6:	d0be      	beq.n	8009c46 <acc_cal_algorithms_delay_cbank+0x3a>
 8009cc8:	eddd 7a02 	vldr	s15, [sp, #8]
 8009ccc:	eef1 7a67 	vneg.f32	s15, s15
 8009cd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009cd4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cdc:	dbb3      	blt.n	8009c46 <acc_cal_algorithms_delay_cbank+0x3a>
 8009cde:	eef1 6a66 	vneg.f32	s13, s13
 8009ce2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cee:	d5aa      	bpl.n	8009c46 <acc_cal_algorithms_delay_cbank+0x3a>
 8009cf0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfc:	ee17 3a90 	vmov	r3, s15
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d04:	d89f      	bhi.n	8009c46 <acc_cal_algorithms_delay_cbank+0x3a>
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	f083 0310 	eor.w	r3, r3, #16
 8009d0c:	8033      	strh	r3, [r6, #0]
 8009d0e:	e79b      	b.n	8009c48 <acc_cal_algorithms_delay_cbank+0x3c>
 8009d10:	1ffb      	subs	r3, r7, #7
 8009d12:	2f17      	cmp	r7, #23
 8009d14:	bf88      	it	hi
 8009d16:	f1c3 0220 	rsbhi	r2, r3, #32
 8009d1a:	d89d      	bhi.n	8009c58 <acc_cal_algorithms_delay_cbank+0x4c>
 8009d1c:	e799      	b.n	8009c52 <acc_cal_algorithms_delay_cbank+0x46>
 8009d1e:	bf00      	nop

08009d20 <acc_cal_algorithms_bba_cal_ctrl>:
 8009d20:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8009dfc <acc_cal_algorithms_bba_cal_ctrl+0xdc>
 8009d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d28:	f04f 0e00 	mov.w	lr, #0
 8009d2c:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 8009d30:	f9b0 4000 	ldrsh.w	r4, [r0]
 8009d34:	4665      	mov	r5, ip
 8009d36:	46f0      	mov	r8, lr
 8009d38:	463e      	mov	r6, r7
 8009d3a:	f06f 021b 	mvn.w	r2, #27
 8009d3e:	e014      	b.n	8009d6a <acc_cal_algorithms_bba_cal_ctrl+0x4a>
 8009d40:	42a7      	cmp	r7, r4
 8009d42:	bfc4      	itt	gt
 8009d44:	4627      	movgt	r7, r4
 8009d46:	4696      	movgt	lr, r2
 8009d48:	2a1c      	cmp	r2, #28
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	d016      	beq.n	8009d7c <acc_cal_algorithms_bba_cal_ctrl+0x5c>
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 8009d54:	1ae3      	subs	r3, r4, r3
 8009d56:	b21b      	sxth	r3, r3
 8009d58:	429e      	cmp	r6, r3
 8009d5a:	f102 0208 	add.w	r2, r2, #8
 8009d5e:	bfa8      	it	ge
 8009d60:	461e      	movge	r6, r3
 8009d62:	429d      	cmp	r5, r3
 8009d64:	b212      	sxth	r2, r2
 8009d66:	bfb8      	it	lt
 8009d68:	461d      	movlt	r5, r3
 8009d6a:	2c00      	cmp	r4, #0
 8009d6c:	dae8      	bge.n	8009d40 <acc_cal_algorithms_bba_cal_ctrl+0x20>
 8009d6e:	45a4      	cmp	ip, r4
 8009d70:	daea      	bge.n	8009d48 <acc_cal_algorithms_bba_cal_ctrl+0x28>
 8009d72:	2a1c      	cmp	r2, #28
 8009d74:	46a4      	mov	ip, r4
 8009d76:	4690      	mov	r8, r2
 8009d78:	4603      	mov	r3, r0
 8009d7a:	d1e8      	bne.n	8009d4e <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 8009d7c:	f5a5 551c 	sub.w	r5, r5, #9984	@ 0x2700
 8009d80:	3d10      	subs	r5, #16
 8009d82:	b2ad      	uxth	r5, r5
 8009d84:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8009d88:	429d      	cmp	r5, r3
 8009d8a:	d800      	bhi.n	8009d8e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 8009d8c:	b116      	cbz	r6, 8009d94 <acc_cal_algorithms_bba_cal_ctrl+0x74>
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d94:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 8009d98:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009d9c:	d011      	beq.n	8009dc2 <acc_cal_algorithms_bba_cal_ctrl+0xa2>
 8009d9e:	429f      	cmp	r7, r3
 8009da0:	d029      	beq.n	8009df6 <acc_cal_algorithms_bba_cal_ctrl+0xd6>
 8009da2:	ebae 0e08 	sub.w	lr, lr, r8
 8009da6:	f1be 0f08 	cmp.w	lr, #8
 8009daa:	d1f0      	bne.n	8009d8e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 8009dac:	eba7 070c 	sub.w	r7, r7, ip
 8009db0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009db4:	fb9c f7f7 	sdiv	r7, ip, r7
 8009db8:	eba8 0e07 	sub.w	lr, r8, r7
 8009dbc:	fa0f fe8e 	sxth.w	lr, lr
 8009dc0:	e001      	b.n	8009dc6 <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 8009dc2:	429f      	cmp	r7, r3
 8009dc4:	d0e3      	beq.n	8009d8e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 8009dc6:	f1be 0f00 	cmp.w	lr, #0
 8009dca:	db07      	blt.n	8009ddc <acc_cal_algorithms_bba_cal_ctrl+0xbc>
 8009dcc:	f1be 0f1f 	cmp.w	lr, #31
 8009dd0:	dcdd      	bgt.n	8009d8e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 8009dd2:	f8a1 e000 	strh.w	lr, [r1]
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ddc:	f1ce 0e00 	rsb	lr, lr, #0
 8009de0:	fa1f fe8e 	uxth.w	lr, lr
 8009de4:	f1be 0f1f 	cmp.w	lr, #31
 8009de8:	d8d1      	bhi.n	8009d8e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 8009dea:	f04e 0e20 	orr.w	lr, lr, #32
 8009dee:	f8a1 e000 	strh.w	lr, [r1]
 8009df2:	2001      	movs	r0, #1
 8009df4:	e7cc      	b.n	8009d90 <acc_cal_algorithms_bba_cal_ctrl+0x70>
 8009df6:	46c6      	mov	lr, r8
 8009df8:	e7e5      	b.n	8009dc6 <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 8009dfa:	bf00      	nop
 8009dfc:	ffff8000 	.word	0xffff8000

08009e00 <acc_cal_algorithms_area_index>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 8009e08:	ab05      	add	r3, sp, #20
 8009e0a:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 8009e0e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	4c5c      	ldr	r4, [pc, #368]	@ (8009f88 <acc_cal_algorithms_area_index+0x188>)
 8009e16:	4d5d      	ldr	r5, [pc, #372]	@ (8009f8c <acc_cal_algorithms_area_index+0x18c>)
 8009e18:	9105      	str	r1, [sp, #20]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4681      	mov	r9, r0
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 8009e24:	af3d      	add	r7, sp, #244	@ 0xf4
 8009e26:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8009e2a:	464e      	mov	r6, r9
 8009e2c:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8009e30:	f936 0b04 	ldrsh.w	r0, [r6], #4
 8009e34:	f003 fdb4 	bl	800d9a0 <acc_alg_atan2_q16>
 8009e38:	f84a 0b04 	str.w	r0, [sl], #4
 8009e3c:	45c2      	cmp	sl, r8
 8009e3e:	d1f5      	bne.n	8009e2c <acc_cal_algorithms_area_index+0x2c>
 8009e40:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 8009e44:	46da      	mov	sl, fp
 8009e46:	464e      	mov	r6, r9
 8009e48:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	@ 0x62
 8009e4c:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	@ 0x60
 8009e50:	f003 fda6 	bl	800d9a0 <acc_alg_atan2_q16>
 8009e54:	f84a 0f04 	str.w	r0, [sl, #4]!
 8009e58:	4557      	cmp	r7, sl
 8009e5a:	f106 0604 	add.w	r6, r6, #4
 8009e5e:	d1f3      	bne.n	8009e48 <acc_cal_algorithms_area_index+0x48>
 8009e60:	9a01      	ldr	r2, [sp, #4]
 8009e62:	ab3e      	add	r3, sp, #248	@ 0xf8
 8009e64:	ae0d      	add	r6, sp, #52	@ 0x34
 8009e66:	1898      	adds	r0, r3, r2
 8009e68:	2100      	movs	r1, #0
 8009e6a:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 8009e6e:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8009e72:	1a9b      	subs	r3, r3, r2
 8009e74:	42a3      	cmp	r3, r4
 8009e76:	dd61      	ble.n	8009f3c <acc_cal_algorithms_area_index+0x13c>
 8009e78:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 8009e7c:	3b7e      	subs	r3, #126	@ 0x7e
 8009e7e:	42a3      	cmp	r3, r4
 8009e80:	dcfa      	bgt.n	8009e78 <acc_cal_algorithms_area_index+0x78>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bfb8      	it	lt
 8009e86:	425b      	neglt	r3, r3
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	bfb8      	it	lt
 8009e8c:	4619      	movlt	r1, r3
 8009e8e:	45bb      	cmp	fp, r7
 8009e90:	f840 3b04 	str.w	r3, [r0], #4
 8009e94:	d1e9      	bne.n	8009e6a <acc_cal_algorithms_area_index+0x6a>
 8009e96:	9b02      	ldr	r3, [sp, #8]
 8009e98:	1049      	asrs	r1, r1, #1
 8009e9a:	f843 1f04 	str.w	r1, [r3, #4]!
 8009e9e:	9302      	str	r3, [sp, #8]
 8009ea0:	9b01      	ldr	r3, [sp, #4]
 8009ea2:	3360      	adds	r3, #96	@ 0x60
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	9b03      	ldr	r3, [sp, #12]
 8009ea8:	f109 09c0 	add.w	r9, r9, #192	@ 0xc0
 8009eac:	4599      	cmp	r9, r3
 8009eae:	d1ba      	bne.n	8009e26 <acc_cal_algorithms_area_index+0x26>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9c04      	ldr	r4, [sp, #16]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8009ebc:	428a      	cmp	r2, r1
 8009ebe:	bfc8      	it	gt
 8009ec0:	4618      	movgt	r0, r3
 8009ec2:	f103 0301 	add.w	r3, r3, #1
 8009ec6:	bfc8      	it	gt
 8009ec8:	4611      	movgt	r1, r2
 8009eca:	2b08      	cmp	r3, #8
 8009ecc:	d1f4      	bne.n	8009eb8 <acc_cal_algorithms_area_index+0xb8>
 8009ece:	ab06      	add	r3, sp, #24
 8009ed0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8009ed4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8009ed8:	ab3e      	add	r3, sp, #248	@ 0xf8
 8009eda:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8009ede:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 8009ee2:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 8009ee6:	f851 3b04 	ldr.w	r3, [r1], #4
 8009eea:	42a3      	cmp	r3, r4
 8009eec:	bfac      	ite	ge
 8009eee:	2300      	movge	r3, #0
 8009ef0:	2301      	movlt	r3, #1
 8009ef2:	f802 3f01 	strb.w	r3, [r2, #1]!
 8009ef6:	4290      	cmp	r0, r2
 8009ef8:	7613      	strb	r3, [r2, #24]
 8009efa:	d1f4      	bne.n	8009ee6 <acc_cal_algorithms_area_index+0xe6>
 8009efc:	2200      	movs	r2, #0
 8009efe:	4611      	mov	r1, r2
 8009f00:	2301      	movs	r3, #1
 8009f02:	b321      	cbz	r1, 8009f4e <acc_cal_algorithms_area_index+0x14e>
 8009f04:	f818 0003 	ldrb.w	r0, [r8, r3]
 8009f08:	b1d8      	cbz	r0, 8009f42 <acc_cal_algorithms_area_index+0x142>
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	2b30      	cmp	r3, #48	@ 0x30
 8009f10:	d1f7      	bne.n	8009f02 <acc_cal_algorithms_area_index+0x102>
 8009f12:	f1a2 030c 	sub.w	r3, r2, #12
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d82e      	bhi.n	8009f78 <acc_cal_algorithms_area_index+0x178>
 8009f1a:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8009f1e:	2a17      	cmp	r2, #23
 8009f20:	d902      	bls.n	8009f28 <acc_cal_algorithms_area_index+0x128>
 8009f22:	3a18      	subs	r2, #24
 8009f24:	2a17      	cmp	r2, #23
 8009f26:	d8fc      	bhi.n	8009f22 <acc_cal_algorithms_area_index+0x122>
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	2001      	movs	r0, #1
 8009f2c:	801a      	strh	r2, [r3, #0]
 8009f2e:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 8009f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f36:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 8009f3a:	337e      	adds	r3, #126	@ 0x7e
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	dbfa      	blt.n	8009f36 <acc_cal_algorithms_area_index+0x136>
 8009f40:	e79f      	b.n	8009e82 <acc_cal_algorithms_area_index+0x82>
 8009f42:	2a0b      	cmp	r2, #11
 8009f44:	d8e5      	bhi.n	8009f12 <acc_cal_algorithms_area_index+0x112>
 8009f46:	3301      	adds	r3, #1
 8009f48:	2b30      	cmp	r3, #48	@ 0x30
 8009f4a:	d0f0      	beq.n	8009f2e <acc_cal_algorithms_area_index+0x12e>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	1e58      	subs	r0, r3, #1
 8009f50:	4440      	add	r0, r8
 8009f52:	1c59      	adds	r1, r3, #1
 8009f54:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8009f58:	1e4b      	subs	r3, r1, #1
 8009f5a:	b12c      	cbz	r4, 8009f68 <acc_cal_algorithms_area_index+0x168>
 8009f5c:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8009f60:	b914      	cbnz	r4, 8009f68 <acc_cal_algorithms_area_index+0x168>
 8009f62:	4619      	mov	r1, r3
 8009f64:	2201      	movs	r2, #1
 8009f66:	e7d1      	b.n	8009f0c <acc_cal_algorithms_area_index+0x10c>
 8009f68:	2930      	cmp	r1, #48	@ 0x30
 8009f6a:	d001      	beq.n	8009f70 <acc_cal_algorithms_area_index+0x170>
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	e7f1      	b.n	8009f54 <acc_cal_algorithms_area_index+0x154>
 8009f70:	f1a2 030c 	sub.w	r3, r2, #12
 8009f74:	2b08      	cmp	r3, #8
 8009f76:	d904      	bls.n	8009f82 <acc_cal_algorithms_area_index+0x182>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 8009f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f82:	0852      	lsrs	r2, r2, #1
 8009f84:	e7d0      	b.n	8009f28 <acc_cal_algorithms_area_index+0x128>
 8009f86:	bf00      	nop
 8009f88:	0003243f 	.word	0x0003243f
 8009f8c:	fffcdbc1 	.word	0xfffcdbc1

08009f90 <acc_cal_algorithms_iq_imbalance>:
 8009f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f94:	ed2d 8b02 	vpush	{d8}
 8009f98:	eddf 5a51 	vldr	s11, [pc, #324]	@ 800a0e0 <acc_cal_algorithms_iq_imbalance+0x150>
 8009f9c:	b0bd      	sub	sp, #244	@ 0xf4
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	4689      	mov	r9, r1
 8009fa2:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 8009fa6:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 8009faa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009fae:	a804      	add	r0, sp, #16
 8009fb0:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 8009fb4:	2700      	movs	r7, #0
 8009fb6:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 8009fba:	f9b4 5000 	ldrsh.w	r5, [r4]
 8009fbe:	fb06 f606 	mul.w	r6, r6, r6
 8009fc2:	3404      	adds	r4, #4
 8009fc4:	fb05 6505 	mla	r5, r5, r5, r6
 8009fc8:	42a1      	cmp	r1, r4
 8009fca:	442f      	add	r7, r5
 8009fcc:	d1f3      	bne.n	8009fb6 <acc_cal_algorithms_iq_imbalance+0x26>
 8009fce:	ee07 7a90 	vmov	s15, r7
 8009fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd6:	31c0      	adds	r1, #192	@ 0xc0
 8009fd8:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 8009fdc:	458c      	cmp	ip, r1
 8009fde:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8009fe2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8009fe6:	ece0 7a01 	vstmia	r0!, {s15}
 8009fea:	d1e1      	bne.n	8009fb0 <acc_cal_algorithms_iq_imbalance+0x20>
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	d070      	beq.n	800a0d2 <acc_cal_algorithms_iq_imbalance+0x142>
 8009ff0:	461c      	mov	r4, r3
 8009ff2:	eb02 0509 	add.w	r5, r2, r9
 8009ff6:	ae24      	add	r6, sp, #144	@ 0x90
 8009ff8:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8009ffc:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 800a000:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 800a004:	ab0c      	add	r3, sp, #48	@ 0x30
 800a006:	a904      	add	r1, sp, #16
 800a008:	f9b2 0000 	ldrsh.w	r0, [r2]
 800a00c:	ecf1 5a01 	vldmia	r1!, {s11}
 800a010:	ee06 0a10 	vmov	s12, r0
 800a014:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800a018:	ee06 0a90 	vmov	s13, r0
 800a01c:	f9b2 0060 	ldrsh.w	r0, [r2, #96]	@ 0x60
 800a020:	ee07 0a10 	vmov	s14, r0
 800a024:	f9b2 0062 	ldrsh.w	r0, [r2, #98]	@ 0x62
 800a028:	ee07 0a90 	vmov	s15, r0
 800a02c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800a030:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a034:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a03c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a040:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a044:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a048:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a04c:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a050:	ee67 5a07 	vmul.f32	s11, s14, s14
 800a054:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a05c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800a060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a064:	ed83 5a00 	vstr	s10, [r3]
 800a068:	ed83 6a01 	vstr	s12, [r3, #4]
 800a06c:	edc3 6a02 	vstr	s13, [r3, #8]
 800a070:	edc3 5a18 	vstr	s11, [r3, #96]	@ 0x60
 800a074:	ed83 7a19 	vstr	s14, [r3, #100]	@ 0x64
 800a078:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 800a07c:	330c      	adds	r3, #12
 800a07e:	429e      	cmp	r6, r3
 800a080:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800a084:	d1c0      	bne.n	800a008 <acc_cal_algorithms_iq_imbalance+0x78>
 800a086:	2210      	movs	r2, #16
 800a088:	a901      	add	r1, sp, #4
 800a08a:	a80c      	add	r0, sp, #48	@ 0x30
 800a08c:	f003 fd14 	bl	800dab8 <acc_alg_least_square_fit>
 800a090:	b300      	cbz	r0, 800a0d4 <acc_cal_algorithms_iq_imbalance+0x144>
 800a092:	eddd 7a01 	vldr	s15, [sp, #4]
 800a096:	ed9d 7a03 	vldr	s14, [sp, #12]
 800a09a:	eddd 0a02 	vldr	s1, [sp, #8]
 800a09e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f109 0901 	add.w	r9, r9, #1
 800a0a8:	3402      	adds	r4, #2
 800a0aa:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a0ae:	ee60 6aa0 	vmul.f32	s13, s1, s1
 800a0b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0b6:	ee88 7a80 	vdiv.f32	s14, s17, s0
 800a0ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a0be:	ee67 0a20 	vmul.f32	s1, s14, s1
 800a0c2:	eeb1 1ae7 	vsqrt.f32	s2, s15
 800a0c6:	ee27 1a01 	vmul.f32	s2, s14, s2
 800a0ca:	f003 fe13 	bl	800dcf4 <acc_alg_iq_imb_comp_to_fix_point>
 800a0ce:	454d      	cmp	r5, r9
 800a0d0:	d196      	bne.n	800a000 <acc_cal_algorithms_iq_imbalance+0x70>
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	b03d      	add	sp, #244	@ 0xf4
 800a0d6:	ecbd 8b02 	vpop	{d8}
 800a0da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0de:	bf00      	nop
 800a0e0:	42400000 	.word	0x42400000

0800a0e4 <acc_cal_algorithms_rx_freq_ctrl>:
 800a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	b087      	sub	sp, #28
 800a0ea:	2400      	movs	r4, #0
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	468b      	mov	fp, r1
 800a0f0:	9203      	str	r2, [sp, #12]
 800a0f2:	f100 0902 	add.w	r9, r0, #2
 800a0f6:	9402      	str	r4, [sp, #8]
 800a0f8:	4625      	mov	r5, r4
 800a0fa:	46a0      	mov	r8, r4
 800a0fc:	46a2      	mov	sl, r4
 800a0fe:	f10d 0716 	add.w	r7, sp, #22
 800a102:	e006      	b.n	800a112 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800a104:	4553      	cmp	r3, sl
 800a106:	d82a      	bhi.n	800a15e <acc_cal_algorithms_rx_freq_ctrl+0x7a>
 800a108:	4645      	mov	r5, r8
 800a10a:	4698      	mov	r8, r3
 800a10c:	3401      	adds	r4, #1
 800a10e:	2c08      	cmp	r4, #8
 800a110:	d019      	beq.n	800a146 <acc_cal_algorithms_rx_freq_ctrl+0x62>
 800a112:	9700      	str	r7, [sp, #0]
 800a114:	ab05      	add	r3, sp, #20
 800a116:	465a      	mov	r2, fp
 800a118:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800a11c:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800a120:	f003 fdc4 	bl	800dcac <acc_alg_comp_iq_imb>
 800a124:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800a128:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800a12c:	fb02 f202 	mul.w	r2, r2, r2
 800a130:	fb03 2303 	mla	r3, r3, r3, r2
 800a134:	42ab      	cmp	r3, r5
 800a136:	b2a2      	uxth	r2, r4
 800a138:	d9e8      	bls.n	800a10c <acc_cal_algorithms_rx_freq_ctrl+0x28>
 800a13a:	4543      	cmp	r3, r8
 800a13c:	d8e2      	bhi.n	800a104 <acc_cal_algorithms_rx_freq_ctrl+0x20>
 800a13e:	3401      	adds	r4, #1
 800a140:	2c08      	cmp	r4, #8
 800a142:	461d      	mov	r5, r3
 800a144:	d1e5      	bne.n	800a112 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800a146:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800a14a:	45aa      	cmp	sl, r5
 800a14c:	bf85      	ittet	hi
 800a14e:	e9dd 2302 	ldrdhi	r2, r3, [sp, #8]
 800a152:	2001      	movhi	r0, #1
 800a154:	2000      	movls	r0, #0
 800a156:	801a      	strhhi	r2, [r3, #0]
 800a158:	b007      	add	sp, #28
 800a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	4645      	mov	r5, r8
 800a160:	9202      	str	r2, [sp, #8]
 800a162:	46d0      	mov	r8, sl
 800a164:	469a      	mov	sl, r3
 800a166:	e7d1      	b.n	800a10c <acc_cal_algorithms_rx_freq_ctrl+0x28>

0800a168 <acc_cal_algorithms_wavelet_duration_p1>:
 800a168:	b508      	push	{r3, lr}
 800a16a:	f003 fd67 	bl	800dc3c <acc_alg_temp>
 800a16e:	f110 0f14 	cmn.w	r0, #20
 800a172:	db06      	blt.n	800a182 <acc_cal_algorithms_wavelet_duration_p1+0x1a>
 800a174:	282c      	cmp	r0, #44	@ 0x2c
 800a176:	dd06      	ble.n	800a186 <acc_cal_algorithms_wavelet_duration_p1+0x1e>
 800a178:	2850      	cmp	r0, #80	@ 0x50
 800a17a:	bfb4      	ite	lt
 800a17c:	2003      	movlt	r0, #3
 800a17e:	2004      	movge	r0, #4
 800a180:	bd08      	pop	{r3, pc}
 800a182:	2001      	movs	r0, #1
 800a184:	bd08      	pop	{r3, pc}
 800a186:	2002      	movs	r0, #2
 800a188:	bd08      	pop	{r3, pc}
 800a18a:	bf00      	nop

0800a18c <acc_cal_algorithms_phase_unwrap>:
 800a18c:	2901      	cmp	r1, #1
 800a18e:	d926      	bls.n	800a1de <acc_cal_algorithms_phase_unwrap+0x52>
 800a190:	b470      	push	{r4, r5, r6}
 800a192:	1f03      	subs	r3, r0, #4
 800a194:	4e12      	ldr	r6, [pc, #72]	@ (800a1e0 <acc_cal_algorithms_phase_unwrap+0x54>)
 800a196:	4d13      	ldr	r5, [pc, #76]	@ (800a1e4 <acc_cal_algorithms_phase_unwrap+0x58>)
 800a198:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 800a19c:	2100      	movs	r1, #0
 800a19e:	6843      	ldr	r3, [r0, #4]
 800a1a0:	440b      	add	r3, r1
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1a8:	6812      	ldr	r2, [r2, #0]
 800a1aa:	1a9a      	subs	r2, r3, r2
 800a1ac:	42b2      	cmp	r2, r6
 800a1ae:	dd09      	ble.n	800a1c4 <acc_cal_algorithms_phase_unwrap+0x38>
 800a1b0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a1b4:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800a1b8:	3b7e      	subs	r3, #126	@ 0x7e
 800a1ba:	f5a1 21c9 	sub.w	r1, r1, #411648	@ 0x64800
 800a1be:	6003      	str	r3, [r0, #0]
 800a1c0:	397e      	subs	r1, #126	@ 0x7e
 800a1c2:	1a9a      	subs	r2, r3, r2
 800a1c4:	42aa      	cmp	r2, r5
 800a1c6:	da06      	bge.n	800a1d6 <acc_cal_algorithms_phase_unwrap+0x4a>
 800a1c8:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800a1cc:	337e      	adds	r3, #126	@ 0x7e
 800a1ce:	f501 21c9 	add.w	r1, r1, #411648	@ 0x64800
 800a1d2:	6003      	str	r3, [r0, #0]
 800a1d4:	317e      	adds	r1, #126	@ 0x7e
 800a1d6:	4284      	cmp	r4, r0
 800a1d8:	d1e1      	bne.n	800a19e <acc_cal_algorithms_phase_unwrap+0x12>
 800a1da:	bc70      	pop	{r4, r5, r6}
 800a1dc:	4770      	bx	lr
 800a1de:	4770      	bx	lr
 800a1e0:	0003243f 	.word	0x0003243f
 800a1e4:	fffcdbc1 	.word	0xfffcdbc1

0800a1e8 <acc_cal_algorithms_tx_freq_ctrl>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	1c8c      	adds	r4, r1, #2
 800a1f4:	4690      	mov	r8, r2
 800a1f6:	4699      	mov	r9, r3
 800a1f8:	ad01      	add	r5, sp, #4
 800a1fa:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 800a1fe:	f9b4 1000 	ldrsh.w	r1, [r4]
 800a202:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 800a206:	f003 fbcb 	bl	800d9a0 <acc_alg_atan2_q16>
 800a20a:	f845 0f04 	str.w	r0, [r5, #4]!
 800a20e:	42bd      	cmp	r5, r7
 800a210:	f104 0404 	add.w	r4, r4, #4
 800a214:	d1f3      	bne.n	800a1fe <acc_cal_algorithms_tx_freq_ctrl+0x16>
 800a216:	46ca      	mov	sl, r9
 800a218:	f1a9 0304 	sub.w	r3, r9, #4
 800a21c:	f109 001c 	add.w	r0, r9, #28
 800a220:	2100      	movs	r1, #0
 800a222:	f843 1f04 	str.w	r1, [r3, #4]!
 800a226:	4298      	cmp	r0, r3
 800a228:	d1fb      	bne.n	800a222 <acc_cal_algorithms_tx_freq_ctrl+0x3a>
 800a22a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800a22e:	f04f 0b00 	mov.w	fp, #0
 800a232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a236:	4f33      	ldr	r7, [pc, #204]	@ (800a304 <acc_cal_algorithms_tx_freq_ctrl+0x11c>)
 800a238:	f8cd b000 	str.w	fp, [sp]
 800a23c:	ac19      	add	r4, sp, #100	@ 0x64
 800a23e:	00ed      	lsls	r5, r5, #3
 800a240:	9301      	str	r3, [sp, #4]
 800a242:	f640 5994 	movw	r9, #3476	@ 0xd94
 800a246:	2130      	movs	r1, #48	@ 0x30
 800a248:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 800a24c:	f7ff ff9e 	bl	800a18c <acc_cal_algorithms_phase_unwrap>
 800a250:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 800a254:	f04f 0c00 	mov.w	ip, #0
 800a258:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800a25c:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800a25e:	428c      	cmp	r4, r1
 800a260:	eba3 0000 	sub.w	r0, r3, r0
 800a264:	4484      	add	ip, r0
 800a266:	d1f7      	bne.n	800a258 <acc_cal_algorithms_tx_freq_ctrl+0x70>
 800a268:	f1bc 0f00 	cmp.w	ip, #0
 800a26c:	db35      	blt.n	800a2da <acc_cal_algorithms_tx_freq_ctrl+0xf2>
 800a26e:	ea4f 119c 	mov.w	r1, ip, lsr #6
 800a272:	fb09 f101 	mul.w	r1, r9, r1
 800a276:	0d49      	lsrs	r1, r1, #21
 800a278:	fb06 f101 	mul.w	r1, r6, r1
 800a27c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 800a280:	f8ca 1000 	str.w	r1, [sl]
 800a284:	f1bb 0f00 	cmp.w	fp, #0
 800a288:	d003      	beq.n	800a292 <acc_cal_algorithms_tx_freq_ctrl+0xaa>
 800a28a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a28e:	4288      	cmp	r0, r1
 800a290:	d930      	bls.n	800a2f4 <acc_cal_algorithms_tx_freq_ctrl+0x10c>
 800a292:	f8da 1000 	ldr.w	r1, [sl]
 800a296:	eba1 0108 	sub.w	r1, r1, r8
 800a29a:	2900      	cmp	r1, #0
 800a29c:	bfb8      	it	lt
 800a29e:	4249      	neglt	r1, r1
 800a2a0:	42b9      	cmp	r1, r7
 800a2a2:	d204      	bcs.n	800a2ae <acc_cal_algorithms_tx_freq_ctrl+0xc6>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	f8cd b004 	str.w	fp, [sp, #4]
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	f10b 0301 	add.w	r3, fp, #1
 800a2b2:	fa1f fb83 	uxth.w	fp, r3
 800a2b6:	f1bb 0f08 	cmp.w	fp, #8
 800a2ba:	f10a 0a04 	add.w	sl, sl, #4
 800a2be:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 800a2c2:	d1c0      	bne.n	800a246 <acc_cal_algorithms_tx_freq_ctrl+0x5e>
 800a2c4:	9b00      	ldr	r3, [sp, #0]
 800a2c6:	b11b      	cbz	r3, 800a2d0 <acc_cal_algorithms_tx_freq_ctrl+0xe8>
 800a2c8:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 800a2cc:	9a01      	ldr	r2, [sp, #4]
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	9800      	ldr	r0, [sp, #0]
 800a2d2:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800a2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2da:	f1cc 0100 	rsb	r1, ip, #0
 800a2de:	0989      	lsrs	r1, r1, #6
 800a2e0:	fb09 f101 	mul.w	r1, r9, r1
 800a2e4:	0d49      	lsrs	r1, r1, #21
 800a2e6:	fb06 f101 	mul.w	r1, r6, r1
 800a2ea:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 800a2ee:	f8ca 1000 	str.w	r1, [sl]
 800a2f2:	e7c7      	b.n	800a284 <acc_cal_algorithms_tx_freq_ctrl+0x9c>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	9800      	ldr	r0, [sp, #0]
 800a2fa:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	bf00      	nop
 800a304:	000f4240 	.word	0x000f4240

0800a308 <acc_cal_algorithms_phase_enhancement>:
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	b0bc      	sub	sp, #240	@ 0xf0
 800a30e:	4606      	mov	r6, r0
 800a310:	460d      	mov	r5, r1
 800a312:	4617      	mov	r7, r2
 800a314:	f100 0902 	add.w	r9, r0, #2
 800a318:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800a31c:	2400      	movs	r4, #0
 800a31e:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 800a322:	e005      	b.n	800a330 <acc_cal_algorithms_phase_enhancement+0x28>
 800a324:	f003 fb3c 	bl	800d9a0 <acc_alg_atan2_q16>
 800a328:	2c30      	cmp	r4, #48	@ 0x30
 800a32a:	f84a 0b04 	str.w	r0, [sl], #4
 800a32e:	d00f      	beq.n	800a350 <acc_cal_algorithms_phase_enhancement+0x48>
 800a330:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800a334:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800a338:	fb01 f301 	mul.w	r3, r1, r1
 800a33c:	fb00 3300 	mla	r3, r0, r0, r3
 800a340:	4543      	cmp	r3, r8
 800a342:	f104 0401 	add.w	r4, r4, #1
 800a346:	dced      	bgt.n	800a324 <acc_cal_algorithms_phase_enhancement+0x1c>
 800a348:	2000      	movs	r0, #0
 800a34a:	b03c      	add	sp, #240	@ 0xf0
 800a34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a350:	ac0b      	add	r4, sp, #44	@ 0x2c
 800a352:	f1ad 0602 	sub.w	r6, sp, #2
 800a356:	4621      	mov	r1, r4
 800a358:	4632      	mov	r2, r6
 800a35a:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 800a35e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800a362:	2b00      	cmp	r3, #0
 800a364:	bfb8      	it	lt
 800a366:	330f      	addlt	r3, #15
 800a368:	3202      	adds	r2, #2
 800a36a:	111b      	asrs	r3, r3, #4
 800a36c:	4541      	cmp	r1, r8
 800a36e:	8013      	strh	r3, [r2, #0]
 800a370:	d1f5      	bne.n	800a35e <acc_cal_algorithms_phase_enhancement+0x56>
 800a372:	a80c      	add	r0, sp, #48	@ 0x30
 800a374:	2130      	movs	r1, #48	@ 0x30
 800a376:	f7ff ff09 	bl	800a18c <acc_cal_algorithms_phase_unwrap>
 800a37a:	2200      	movs	r2, #0
 800a37c:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800a380:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800a382:	4544      	cmp	r4, r8
 800a384:	eba3 0301 	sub.w	r3, r3, r1
 800a388:	441a      	add	r2, r3
 800a38a:	d1f7      	bne.n	800a37c <acc_cal_algorithms_phase_enhancement+0x74>
 800a38c:	490d      	ldr	r1, [pc, #52]	@ (800a3c4 <acc_cal_algorithms_phase_enhancement+0xbc>)
 800a38e:	17d3      	asrs	r3, r2, #31
 800a390:	fb81 1202 	smull	r1, r2, r1, r2
 800a394:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800a398:	f502 4399 	add.w	r3, r2, #19584	@ 0x4c80
 800a39c:	3330      	adds	r3, #48	@ 0x30
 800a39e:	f64c 1162 	movw	r1, #51554	@ 0xc962
 800a3a2:	428b      	cmp	r3, r1
 800a3a4:	d8d0      	bhi.n	800a348 <acc_cal_algorithms_phase_enhancement+0x40>
 800a3a6:	3d02      	subs	r5, #2
 800a3a8:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800a3ac:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800a3b0:	f825 3f02 	strh.w	r3, [r5, #2]!
 800a3b4:	42b1      	cmp	r1, r6
 800a3b6:	d1f9      	bne.n	800a3ac <acc_cal_algorithms_phase_enhancement+0xa4>
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	803a      	strh	r2, [r7, #0]
 800a3bc:	b03c      	add	sp, #240	@ 0xf0
 800a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2aaaaaab 	.word	0x2aaaaaab

0800a3c8 <acc_cal_algorithms_calc_pulse_params>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800a3d2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a3d6:	9203      	str	r2, [sp, #12]
 800a3d8:	d349      	bcc.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a3da:	9b02      	ldr	r3, [sp, #8]
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d046      	beq.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	9c03      	ldr	r4, [sp, #12]
 800a3e4:	f1a2 0c12 	sub.w	ip, r2, #18
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800a3ee:	f8cd c000 	str.w	ip, [sp]
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	4683      	mov	fp, r0
 800a3f8:	3a02      	subs	r2, #2
 800a3fa:	2701      	movs	r7, #1
 800a3fc:	f240 29ee 	movw	r9, #750	@ 0x2ee
 800a400:	4684      	mov	ip, r0
 800a402:	e014      	b.n	800a42e <acc_cal_algorithms_calc_pulse_params+0x66>
 800a404:	2800      	cmp	r0, #0
 800a406:	d136      	bne.n	800a476 <acc_cal_algorithms_calc_pulse_params+0xae>
 800a408:	459b      	cmp	fp, r3
 800a40a:	da3a      	bge.n	800a482 <acc_cal_algorithms_calc_pulse_params+0xba>
 800a40c:	469b      	mov	fp, r3
 800a40e:	f04f 0801 	mov.w	r8, #1
 800a412:	f1cc 0600 	rsb	r6, ip, #0
 800a416:	429e      	cmp	r6, r3
 800a418:	9b00      	ldr	r3, [sp, #0]
 800a41a:	bfc8      	it	gt
 800a41c:	ebae 0c05 	subgt.w	ip, lr, r5
 800a420:	458a      	cmp	sl, r1
 800a422:	bf38      	it	cc
 800a424:	468a      	movcc	sl, r1
 800a426:	4293      	cmp	r3, r2
 800a428:	f104 0402 	add.w	r4, r4, #2
 800a42c:	d01c      	beq.n	800a468 <acc_cal_algorithms_calc_pulse_params+0xa0>
 800a42e:	8a55      	ldrh	r5, [r2, #18]
 800a430:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800a434:	1a6b      	subs	r3, r5, r1
 800a436:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 800a43a:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800a43e:	bf38      	it	cc
 800a440:	8023      	strhcc	r3, [r4, #0]
 800a442:	468e      	mov	lr, r1
 800a444:	bf2c      	ite	cs
 800a446:	2700      	movcs	r7, #0
 800a448:	8811      	ldrhcc	r1, [r2, #0]
 800a44a:	454b      	cmp	r3, r9
 800a44c:	dcda      	bgt.n	800a404 <acc_cal_algorithms_calc_pulse_params+0x3c>
 800a44e:	4e58      	ldr	r6, [pc, #352]	@ (800a5b0 <acc_cal_algorithms_calc_pulse_params+0x1e8>)
 800a450:	459b      	cmp	fp, r3
 800a452:	bfb8      	it	lt
 800a454:	469b      	movlt	fp, r3
 800a456:	42b3      	cmp	r3, r6
 800a458:	dadb      	bge.n	800a412 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800a45a:	f1b8 0f00 	cmp.w	r8, #0
 800a45e:	bf0a      	itet	eq
 800a460:	2700      	moveq	r7, #0
 800a462:	4640      	movne	r0, r8
 800a464:	2001      	moveq	r0, #1
 800a466:	e7d4      	b.n	800a412 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800a468:	f8cd c000 	str.w	ip, [sp]
 800a46c:	b977      	cbnz	r7, 800a48c <acc_cal_algorithms_calc_pulse_params+0xc4>
 800a46e:	2000      	movs	r0, #0
 800a470:	b005      	add	sp, #20
 800a472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a476:	459b      	cmp	fp, r3
 800a478:	4680      	mov	r8, r0
 800a47a:	da05      	bge.n	800a488 <acc_cal_algorithms_calc_pulse_params+0xc0>
 800a47c:	469b      	mov	fp, r3
 800a47e:	2700      	movs	r7, #0
 800a480:	e7c7      	b.n	800a412 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800a482:	f04f 0801 	mov.w	r8, #1
 800a486:	e7c4      	b.n	800a412 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800a488:	2700      	movs	r7, #0
 800a48a:	e7c2      	b.n	800a412 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800a48c:	f1b8 0f00 	cmp.w	r8, #0
 800a490:	d0ed      	beq.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a492:	2800      	cmp	r0, #0
 800a494:	d0eb      	beq.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a496:	9b02      	ldr	r3, [sp, #8]
 800a498:	f1b3 0e1c 	subs.w	lr, r3, #28
 800a49c:	d0e7      	beq.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a49e:	9f03      	ldr	r7, [sp, #12]
 800a4a0:	f8cd a008 	str.w	sl, [sp, #8]
 800a4a4:	f04f 0c00 	mov.w	ip, #0
 800a4a8:	9003      	str	r0, [sp, #12]
 800a4aa:	3712      	adds	r7, #18
 800a4ac:	46e1      	mov	r9, ip
 800a4ae:	46e0      	mov	r8, ip
 800a4b0:	46e2      	mov	sl, ip
 800a4b2:	4660      	mov	r0, ip
 800a4b4:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800a4b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a4bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a4c0:	463d      	mov	r5, r7
 800a4c2:	463c      	mov	r4, r7
 800a4c4:	210a      	movs	r1, #10
 800a4c6:	f934 6d02 	ldrsh.w	r6, [r4, #-2]!
 800a4ca:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800a4ce:	fb01 3306 	mla	r3, r1, r6, r3
 800a4d2:	fb01 3302 	mla	r3, r1, r2, r3
 800a4d6:	3901      	subs	r1, #1
 800a4d8:	d1f5      	bne.n	800a4c6 <acc_cal_algorithms_calc_pulse_params+0xfe>
 800a4da:	4543      	cmp	r3, r8
 800a4dc:	dc64      	bgt.n	800a5a8 <acc_cal_algorithms_calc_pulse_params+0x1e0>
 800a4de:	454b      	cmp	r3, r9
 800a4e0:	bfa8      	it	ge
 800a4e2:	4643      	movge	r3, r8
 800a4e4:	da61      	bge.n	800a5aa <acc_cal_algorithms_calc_pulse_params+0x1e2>
 800a4e6:	4699      	mov	r9, r3
 800a4e8:	46e2      	mov	sl, ip
 800a4ea:	f10c 0c01 	add.w	ip, ip, #1
 800a4ee:	45f4      	cmp	ip, lr
 800a4f0:	d1e0      	bne.n	800a4b4 <acc_cal_algorithms_calc_pulse_params+0xec>
 800a4f2:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800a4f6:	4598      	cmp	r8, r3
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	4656      	mov	r6, sl
 800a4fc:	e9dd a002 	ldrd	sl, r0, [sp, #8]
 800a500:	ddb5      	ble.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a502:	4b2c      	ldr	r3, [pc, #176]	@ (800a5b4 <acc_cal_algorithms_calc_pulse_params+0x1ec>)
 800a504:	4599      	cmp	r9, r3
 800a506:	dab2      	bge.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a508:	f1bb 0f00 	cmp.w	fp, #0
 800a50c:	d0af      	beq.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a50e:	9b00      	ldr	r3, [sp, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0ac      	beq.n	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	b144      	cbz	r4, 800a534 <acc_cal_algorithms_calc_pulse_params+0x16c>
 800a522:	4293      	cmp	r3, r2
 800a524:	d204      	bcs.n	800a530 <acc_cal_algorithms_calc_pulse_params+0x168>
 800a526:	43d9      	mvns	r1, r3
 800a528:	4459      	add	r1, fp
 800a52a:	4411      	add	r1, r2
 800a52c:	fbb1 f1fb 	udiv	r1, r1, fp
 800a530:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800a532:	6021      	str	r1, [r4, #0]
 800a534:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a536:	2900      	cmp	r1, #0
 800a538:	d09a      	beq.n	800a470 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800a53a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d097      	beq.n	800a470 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800a540:	4629      	mov	r1, r5
 800a542:	9c01      	ldr	r4, [sp, #4]
 800a544:	310e      	adds	r1, #14
 800a546:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800a54a:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 800a54e:	ea4f 05c4 	mov.w	r5, r4, lsl #3
 800a552:	d205      	bcs.n	800a560 <acc_cal_algorithms_calc_pulse_params+0x198>
 800a554:	43db      	mvns	r3, r3
 800a556:	445b      	add	r3, fp
 800a558:	442b      	add	r3, r5
 800a55a:	fbb3 f3fb 	udiv	r3, r3, fp
 800a55e:	1ac9      	subs	r1, r1, r3
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	f106 0b0e 	add.w	fp, r6, #14
 800a566:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 800a56a:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
 800a56e:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 800a572:	d907      	bls.n	800a584 <acc_cal_algorithms_calc_pulse_params+0x1bc>
 800a574:	9d00      	ldr	r5, [sp, #0]
 800a576:	1e6b      	subs	r3, r5, #1
 800a578:	4413      	add	r3, r2
 800a57a:	1b1b      	subs	r3, r3, r4
 800a57c:	fbb3 f3f5 	udiv	r3, r3, r5
 800a580:	ebab 0b03 	sub.w	fp, fp, r3
 800a584:	2900      	cmp	r1, #0
 800a586:	f6ff af72 	blt.w	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a58a:	f1bb 0f00 	cmp.w	fp, #0
 800a58e:	f6ff af6e 	blt.w	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a592:	4559      	cmp	r1, fp
 800a594:	f73f af6b 	bgt.w	800a46e <acc_cal_algorithms_calc_pulse_params+0xa6>
 800a598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a59a:	ebab 0b01 	sub.w	fp, fp, r1
 800a59e:	f8c3 b000 	str.w	fp, [r3]
 800a5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5a4:	6019      	str	r1, [r3, #0]
 800a5a6:	e763      	b.n	800a470 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800a5a8:	4660      	mov	r0, ip
 800a5aa:	4698      	mov	r8, r3
 800a5ac:	e79d      	b.n	800a4ea <acc_cal_algorithms_calc_pulse_params+0x122>
 800a5ae:	bf00      	nop
 800a5b0:	fffffd12 	.word	0xfffffd12
 800a5b4:	ffff3cb0 	.word	0xffff3cb0

0800a5b8 <acc_cal_algorithms_pulseshaper_wavelet>:
 800a5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5bc:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800a5c0:	ae04      	add	r6, sp, #16
 800a5c2:	af05      	add	r7, sp, #20
 800a5c4:	2400      	movs	r4, #0
 800a5c6:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800a5ca:	9600      	str	r6, [sp, #0]
 800a5cc:	460d      	mov	r5, r1
 800a5ce:	aa08      	add	r2, sp, #32
 800a5d0:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800a5d4:	2190      	movs	r1, #144	@ 0x90
 800a5d6:	6034      	str	r4, [r6, #0]
 800a5d8:	603c      	str	r4, [r7, #0]
 800a5da:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800a5de:	4680      	mov	r8, r0
 800a5e0:	f7ff fef2 	bl	800a3c8 <acc_cal_algorithms_calc_pulse_params>
 800a5e4:	b920      	cbnz	r0, 800a5f0 <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800a5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f0:	ab07      	add	r3, sp, #28
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	ab06      	add	r3, sp, #24
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	9402      	str	r4, [sp, #8]
 800a5fa:	aa08      	add	r2, sp, #32
 800a5fc:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 800a600:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800a604:	21f0      	movs	r1, #240	@ 0xf0
 800a606:	f7ff fedf 	bl	800a3c8 <acc_cal_algorithms_calc_pulse_params>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d0eb      	beq.n	800a5e6 <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 800a60e:	683f      	ldr	r7, [r7, #0]
 800a610:	9c07      	ldr	r4, [sp, #28]
 800a612:	4b0b      	ldr	r3, [pc, #44]	@ (800a640 <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 800a614:	490b      	ldr	r1, [pc, #44]	@ (800a644 <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 800a616:	6832      	ldr	r2, [r6, #0]
 800a618:	1be4      	subs	r4, r4, r7
 800a61a:	fb03 f304 	mul.w	r3, r3, r4
 800a61e:	fb01 f707 	mul.w	r7, r1, r7
 800a622:	fb01 f202 	mul.w	r2, r1, r2
 800a626:	0c1b      	lsrs	r3, r3, #16
 800a628:	ebc3 3357 	rsb	r3, r3, r7, lsr #13
 800a62c:	fb01 f104 	mul.w	r1, r1, r4
 800a630:	0b52      	lsrs	r2, r2, #13
 800a632:	e9c5 3100 	strd	r3, r1, [r5]
 800a636:	60aa      	str	r2, [r5, #8]
 800a638:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a640:	00042aa8 	.word	0x00042aa8
 800a644:	00010aaa 	.word	0x00010aaa

0800a648 <acc_cal_algorithms_pulseshaper_supply>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 800a650:	2600      	movs	r6, #0
 800a652:	af06      	add	r7, sp, #24
 800a654:	f10d 0814 	add.w	r8, sp, #20
 800a658:	4605      	mov	r5, r0
 800a65a:	460c      	mov	r4, r1
 800a65c:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800a660:	3002      	adds	r0, #2
 800a662:	aa0a      	add	r2, sp, #40	@ 0x28
 800a664:	f8cd 8000 	str.w	r8, [sp]
 800a668:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800a66c:	f240 111f 	movw	r1, #287	@ 0x11f
 800a670:	f7ff feaa 	bl	800a3c8 <acc_cal_algorithms_calc_pulse_params>
 800a674:	b920      	cbnz	r0, 800a680 <acc_cal_algorithms_pulseshaper_supply+0x38>
 800a676:	2000      	movs	r0, #0
 800a678:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	ab08      	add	r3, sp, #32
 800a682:	f10d 0a1c 	add.w	sl, sp, #28
 800a686:	f10d 0b10 	add.w	fp, sp, #16
 800a68a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a68e:	f8cd b000 	str.w	fp, [sp]
 800a692:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800a696:	aa0a      	add	r2, sp, #40	@ 0x28
 800a698:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800a69c:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 800a6a0:	f7ff fe92 	bl	800a3c8 <acc_cal_algorithms_calc_pulse_params>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d0e6      	beq.n	800a676 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800a6a8:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800a6ac:	e9cd 6600 	strd	r6, r6, [sp]
 800a6b0:	aa0a      	add	r2, sp, #40	@ 0x28
 800a6b2:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 800a6b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6ba:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800a6be:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800a6c2:	f7ff fe81 	bl	800a3c8 <acc_cal_algorithms_calc_pulse_params>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d0d5      	beq.n	800a676 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800a6ca:	f8db c000 	ldr.w	ip, [fp]
 800a6ce:	f8d8 6000 	ldr.w	r6, [r8]
 800a6d2:	f8dd e020 	ldr.w	lr, [sp, #32]
 800a6d6:	f8d7 8000 	ldr.w	r8, [r7]
 800a6da:	f8da 2000 	ldr.w	r2, [sl]
 800a6de:	f8d9 9000 	ldr.w	r9, [r9]
 800a6e2:	4f17      	ldr	r7, [pc, #92]	@ (800a740 <acc_cal_algorithms_pulseshaper_supply+0xf8>)
 800a6e4:	4d17      	ldr	r5, [pc, #92]	@ (800a744 <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 800a6e6:	4918      	ldr	r1, [pc, #96]	@ (800a748 <acc_cal_algorithms_pulseshaper_supply+0x100>)
 800a6e8:	4b18      	ldr	r3, [pc, #96]	@ (800a74c <acc_cal_algorithms_pulseshaper_supply+0x104>)
 800a6ea:	eba9 090e 	sub.w	r9, r9, lr
 800a6ee:	eba6 060c 	sub.w	r6, r6, ip
 800a6f2:	eba2 0208 	sub.w	r2, r2, r8
 800a6f6:	fb07 f706 	mul.w	r7, r7, r6
 800a6fa:	fb05 f502 	mul.w	r5, r5, r2
 800a6fe:	fb01 f109 	mul.w	r1, r1, r9
 800a702:	fb03 fc0c 	mul.w	ip, r3, ip
 800a706:	fb03 f808 	mul.w	r8, r3, r8
 800a70a:	fb03 fe0e 	mul.w	lr, r3, lr
 800a70e:	0c3f      	lsrs	r7, r7, #16
 800a710:	0c2d      	lsrs	r5, r5, #16
 800a712:	0c09      	lsrs	r1, r1, #16
 800a714:	fb03 f606 	mul.w	r6, r3, r6
 800a718:	fb03 f202 	mul.w	r2, r3, r2
 800a71c:	ebc7 375c 	rsb	r7, r7, ip, lsr #13
 800a720:	ebc5 3558 	rsb	r5, r5, r8, lsr #13
 800a724:	fb03 f309 	mul.w	r3, r3, r9
 800a728:	ebc1 315e 	rsb	r1, r1, lr, lsr #13
 800a72c:	e9c4 7600 	strd	r7, r6, [r4]
 800a730:	e9c4 5202 	strd	r5, r2, [r4, #8]
 800a734:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800a738:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a740:	00021554 	.word	0x00021554
 800a744:	00074aa6 	.word	0x00074aa6
 800a748:	000b754e 	.word	0x000b754e
 800a74c:	00010aaa 	.word	0x00010aaa

0800a750 <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	468a      	mov	sl, r1
 800a756:	b085      	sub	sp, #20
 800a758:	4681      	mov	r9, r0
 800a75a:	4611      	mov	r1, r2
 800a75c:	4650      	mov	r0, sl
 800a75e:	461f      	mov	r7, r3
 800a760:	2500      	movs	r5, #0
 800a762:	ab03      	add	r3, sp, #12
 800a764:	aa02      	add	r2, sp, #8
 800a766:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800a76a:	f001 f8bb 	bl	800b8e4 <acc_sensor_a121_prepare_load_confmem>
 800a76e:	4648      	mov	r0, r9
 800a770:	f001 f962 	bl	800ba38 <acc_sensor_protocol_a121_prepare_load>
 800a774:	b300      	cbz	r0, 800a7b8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	f640 3b4c 	movw	fp, #2892	@ 0xb4c
 800a77c:	ebab 0405 	sub.w	r4, fp, r5
 800a780:	429c      	cmp	r4, r3
 800a782:	bf2c      	ite	cs
 800a784:	b29c      	uxthcs	r4, r3
 800a786:	b2a4      	uxthcc	r4, r4
 800a788:	9e02      	ldr	r6, [sp, #8]
 800a78a:	f003 fa87 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a78e:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800a792:	0862      	lsrs	r2, r4, #1
 800a794:	4631      	mov	r1, r6
 800a796:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800a79a:	f002 fef9 	bl	800d590 <acc_confprogram_copy>
 800a79e:	f003 fa81 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a7a2:	887a      	ldrh	r2, [r7, #2]
 800a7a4:	211c      	movs	r1, #28
 800a7a6:	e9cd 1200 	strd	r1, r2, [sp]
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f002 fe23 	bl	800d3fc <acc_confprogram_patch_offset>
 800a7b6:	b918      	cbnz	r0, 800a7c0 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	b005      	add	sp, #20
 800a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c0:	f003 fa70 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a7c4:	88ba      	ldrh	r2, [r7, #4]
 800a7c6:	211a      	movs	r1, #26
 800a7c8:	e9cd 1200 	strd	r1, r2, [sp]
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f002 fe12 	bl	800d3fc <acc_confprogram_patch_offset>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d0ed      	beq.n	800a7b8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800a7dc:	f003 fa62 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a7e0:	88fa      	ldrh	r2, [r7, #6]
 800a7e2:	9201      	str	r2, [sp, #4]
 800a7e4:	221b      	movs	r2, #27
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	9200      	str	r2, [sp, #0]
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f002 fe04 	bl	800d3fc <acc_confprogram_patch_offset>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d0df      	beq.n	800a7b8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800a7f8:	f003 fa54 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a7fc:	893a      	ldrh	r2, [r7, #8]
 800a7fe:	9201      	str	r2, [sp, #4]
 800a800:	2219      	movs	r2, #25
 800a802:	4603      	mov	r3, r0
 800a804:	9200      	str	r2, [sp, #0]
 800a806:	4630      	mov	r0, r6
 800a808:	4622      	mov	r2, r4
 800a80a:	4629      	mov	r1, r5
 800a80c:	f002 fdf6 	bl	800d3fc <acc_confprogram_patch_offset>
 800a810:	4606      	mov	r6, r0
 800a812:	4623      	mov	r3, r4
 800a814:	4652      	mov	r2, sl
 800a816:	4641      	mov	r1, r8
 800a818:	4648      	mov	r0, r9
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	d0cc      	beq.n	800a7b8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800a81e:	f001 f879 	bl	800b914 <acc_sensor_a121_load_confmem>
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	441d      	add	r5, r3
 800a826:	b2ad      	uxth	r5, r5
 800a828:	f640 324b 	movw	r2, #2891	@ 0xb4b
 800a82c:	4295      	cmp	r5, r2
 800a82e:	d9a5      	bls.n	800a77c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 800a830:	4648      	mov	r0, r9
 800a832:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800a836:	f001 f955 	bl	800bae4 <acc_sensor_protocol_a121_run_program>
 800a83a:	b005      	add	sp, #20
 800a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a840 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	460d      	mov	r5, r1
 800a846:	4604      	mov	r4, r0
 800a848:	f003 fa28 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a84c:	9005      	str	r0, [sp, #20]
 800a84e:	f003 fa29 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a852:	4e09      	ldr	r6, [pc, #36]	@ (800a878 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 800a854:	9905      	ldr	r1, [sp, #20]
 800a856:	9501      	str	r5, [sp, #4]
 800a858:	2225      	movs	r2, #37	@ 0x25
 800a85a:	4603      	mov	r3, r0
 800a85c:	9200      	str	r2, [sp, #0]
 800a85e:	4620      	mov	r0, r4
 800a860:	9602      	str	r6, [sp, #8]
 800a862:	2200      	movs	r2, #0
 800a864:	f002 fe2c 	bl	800d4c0 <acc_confprogram_live_patch>
 800a868:	4620      	mov	r0, r4
 800a86a:	f240 2133 	movw	r1, #563	@ 0x233
 800a86e:	b006      	add	sp, #24
 800a870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a874:	f001 b936 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>
 800a878:	0800b8b1 	.word	0x0800b8b1

0800a87c <acc_a121_cal_session_start_3_delay_cbank_program>:
 800a87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87e:	b087      	sub	sp, #28
 800a880:	4604      	mov	r4, r0
 800a882:	460e      	mov	r6, r1
 800a884:	4615      	mov	r5, r2
 800a886:	f003 fa09 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a88a:	9005      	str	r0, [sp, #20]
 800a88c:	f003 fa0a 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a890:	4f10      	ldr	r7, [pc, #64]	@ (800a8d4 <acc_a121_cal_session_start_3_delay_cbank_program+0x58>)
 800a892:	9905      	ldr	r1, [sp, #20]
 800a894:	9601      	str	r6, [sp, #4]
 800a896:	2226      	movs	r2, #38	@ 0x26
 800a898:	4603      	mov	r3, r0
 800a89a:	9200      	str	r2, [sp, #0]
 800a89c:	4620      	mov	r0, r4
 800a89e:	2200      	movs	r2, #0
 800a8a0:	9702      	str	r7, [sp, #8]
 800a8a2:	f002 fe0d 	bl	800d4c0 <acc_confprogram_live_patch>
 800a8a6:	f003 f9f9 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a8aa:	9005      	str	r0, [sp, #20]
 800a8ac:	f003 f9fa 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a8b0:	2224      	movs	r2, #36	@ 0x24
 800a8b2:	9905      	ldr	r1, [sp, #20]
 800a8b4:	9200      	str	r2, [sp, #0]
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	9501      	str	r5, [sp, #4]
 800a8ba:	9702      	str	r7, [sp, #8]
 800a8bc:	4620      	mov	r0, r4
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f002 fdfe 	bl	800d4c0 <acc_confprogram_live_patch>
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f240 21c6 	movw	r1, #710	@ 0x2c6
 800a8ca:	b007      	add	sp, #28
 800a8cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a8d0:	f001 b908 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>
 800a8d4:	0800b8b1 	.word	0x0800b8b1

0800a8d8 <acc_a121_cal_session_start_4_bba_vga_program>:
 800a8d8:	f240 3115 	movw	r1, #789	@ 0x315
 800a8dc:	f001 b902 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>

0800a8e0 <acc_a121_cal_session_start_5_area_index_program>:
 800a8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	460f      	mov	r7, r1
 800a8e8:	4616      	mov	r6, r2
 800a8ea:	f003 f9d7 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a8ee:	9005      	str	r0, [sp, #20]
 800a8f0:	f003 f9d8 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a8f4:	883a      	ldrh	r2, [r7, #0]
 800a8f6:	4d21      	ldr	r5, [pc, #132]	@ (800a97c <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 800a8f8:	9201      	str	r2, [sp, #4]
 800a8fa:	2207      	movs	r2, #7
 800a8fc:	9905      	ldr	r1, [sp, #20]
 800a8fe:	9200      	str	r2, [sp, #0]
 800a900:	4603      	mov	r3, r0
 800a902:	2200      	movs	r2, #0
 800a904:	4620      	mov	r0, r4
 800a906:	9502      	str	r5, [sp, #8]
 800a908:	f002 fdda 	bl	800d4c0 <acc_confprogram_live_patch>
 800a90c:	f003 f9c6 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a910:	9005      	str	r0, [sp, #20]
 800a912:	f003 f9c7 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a916:	2208      	movs	r2, #8
 800a918:	9905      	ldr	r1, [sp, #20]
 800a91a:	9601      	str	r6, [sp, #4]
 800a91c:	4603      	mov	r3, r0
 800a91e:	9200      	str	r2, [sp, #0]
 800a920:	9502      	str	r5, [sp, #8]
 800a922:	2200      	movs	r2, #0
 800a924:	4620      	mov	r0, r4
 800a926:	f002 fdcb 	bl	800d4c0 <acc_confprogram_live_patch>
 800a92a:	f003 f9b7 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a92e:	9005      	str	r0, [sp, #20]
 800a930:	f003 f9b8 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a934:	2603      	movs	r6, #3
 800a936:	2209      	movs	r2, #9
 800a938:	9905      	ldr	r1, [sp, #20]
 800a93a:	9502      	str	r5, [sp, #8]
 800a93c:	4603      	mov	r3, r0
 800a93e:	e9cd 2600 	strd	r2, r6, [sp]
 800a942:	4620      	mov	r0, r4
 800a944:	2200      	movs	r2, #0
 800a946:	f002 fdbb 	bl	800d4c0 <acc_confprogram_live_patch>
 800a94a:	f003 f9a7 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a94e:	9005      	str	r0, [sp, #20]
 800a950:	f003 f9a8 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a954:	2606      	movs	r6, #6
 800a956:	220a      	movs	r2, #10
 800a958:	e9cd 2600 	strd	r2, r6, [sp]
 800a95c:	9905      	ldr	r1, [sp, #20]
 800a95e:	9502      	str	r5, [sp, #8]
 800a960:	4603      	mov	r3, r0
 800a962:	2200      	movs	r2, #0
 800a964:	4620      	mov	r0, r4
 800a966:	f002 fdab 	bl	800d4c0 <acc_confprogram_live_patch>
 800a96a:	4620      	mov	r0, r4
 800a96c:	f240 31d6 	movw	r1, #982	@ 0x3d6
 800a970:	b007      	add	sp, #28
 800a972:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a976:	f001 b8b5 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>
 800a97a:	bf00      	nop
 800a97c:	0800b8b1 	.word	0x0800b8b1

0800a980 <acc_a121_cal_session_start_6_tx_freq_program>:
 800a980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a982:	b087      	sub	sp, #28
 800a984:	460d      	mov	r5, r1
 800a986:	4604      	mov	r4, r0
 800a988:	f003 f988 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a98c:	9005      	str	r0, [sp, #20]
 800a98e:	f003 f989 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a992:	882a      	ldrh	r2, [r5, #0]
 800a994:	4e41      	ldr	r6, [pc, #260]	@ (800aa9c <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 800a996:	9201      	str	r2, [sp, #4]
 800a998:	2221      	movs	r2, #33	@ 0x21
 800a99a:	9905      	ldr	r1, [sp, #20]
 800a99c:	9200      	str	r2, [sp, #0]
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	9602      	str	r6, [sp, #8]
 800a9a6:	f002 fd8b 	bl	800d4c0 <acc_confprogram_live_patch>
 800a9aa:	f003 f977 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a9ae:	9005      	str	r0, [sp, #20]
 800a9b0:	f003 f978 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a9b4:	886f      	ldrh	r7, [r5, #2]
 800a9b6:	9905      	ldr	r1, [sp, #20]
 800a9b8:	9701      	str	r7, [sp, #4]
 800a9ba:	2222      	movs	r2, #34	@ 0x22
 800a9bc:	4603      	mov	r3, r0
 800a9be:	9200      	str	r2, [sp, #0]
 800a9c0:	9602      	str	r6, [sp, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f002 fd7b 	bl	800d4c0 <acc_confprogram_live_patch>
 800a9ca:	f003 f967 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a9ce:	9005      	str	r0, [sp, #20]
 800a9d0:	f003 f968 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a9d4:	88ef      	ldrh	r7, [r5, #6]
 800a9d6:	9905      	ldr	r1, [sp, #20]
 800a9d8:	9701      	str	r7, [sp, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	4603      	mov	r3, r0
 800a9de:	9200      	str	r2, [sp, #0]
 800a9e0:	9602      	str	r6, [sp, #8]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f002 fd6b 	bl	800d4c0 <acc_confprogram_live_patch>
 800a9ea:	f003 f957 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800a9ee:	9005      	str	r0, [sp, #20]
 800a9f0:	f003 f958 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800a9f4:	892f      	ldrh	r7, [r5, #8]
 800a9f6:	9905      	ldr	r1, [sp, #20]
 800a9f8:	9701      	str	r7, [sp, #4]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	9200      	str	r2, [sp, #0]
 800aa00:	9602      	str	r6, [sp, #8]
 800aa02:	2200      	movs	r2, #0
 800aa04:	4620      	mov	r0, r4
 800aa06:	f002 fd5b 	bl	800d4c0 <acc_confprogram_live_patch>
 800aa0a:	f003 f947 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800aa0e:	9005      	str	r0, [sp, #20]
 800aa10:	f003 f948 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800aa14:	89af      	ldrh	r7, [r5, #12]
 800aa16:	9905      	ldr	r1, [sp, #20]
 800aa18:	9701      	str	r7, [sp, #4]
 800aa1a:	2203      	movs	r2, #3
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	9200      	str	r2, [sp, #0]
 800aa20:	9602      	str	r6, [sp, #8]
 800aa22:	2200      	movs	r2, #0
 800aa24:	4620      	mov	r0, r4
 800aa26:	f002 fd4b 	bl	800d4c0 <acc_confprogram_live_patch>
 800aa2a:	f003 f937 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800aa2e:	9005      	str	r0, [sp, #20]
 800aa30:	f003 f938 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800aa34:	89ef      	ldrh	r7, [r5, #14]
 800aa36:	9905      	ldr	r1, [sp, #20]
 800aa38:	9701      	str	r7, [sp, #4]
 800aa3a:	2204      	movs	r2, #4
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	9200      	str	r2, [sp, #0]
 800aa40:	9602      	str	r6, [sp, #8]
 800aa42:	2200      	movs	r2, #0
 800aa44:	4620      	mov	r0, r4
 800aa46:	f002 fd3b 	bl	800d4c0 <acc_confprogram_live_patch>
 800aa4a:	f003 f927 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800aa4e:	9005      	str	r0, [sp, #20]
 800aa50:	f003 f928 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800aa54:	8a6f      	ldrh	r7, [r5, #18]
 800aa56:	9905      	ldr	r1, [sp, #20]
 800aa58:	9602      	str	r6, [sp, #8]
 800aa5a:	2205      	movs	r2, #5
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	9200      	str	r2, [sp, #0]
 800aa60:	9701      	str	r7, [sp, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	4620      	mov	r0, r4
 800aa66:	f002 fd2b 	bl	800d4c0 <acc_confprogram_live_patch>
 800aa6a:	f003 f917 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800aa6e:	9005      	str	r0, [sp, #20]
 800aa70:	f003 f918 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800aa74:	2206      	movs	r2, #6
 800aa76:	4603      	mov	r3, r0
 800aa78:	8aa8      	ldrh	r0, [r5, #20]
 800aa7a:	9905      	ldr	r1, [sp, #20]
 800aa7c:	9001      	str	r0, [sp, #4]
 800aa7e:	9200      	str	r2, [sp, #0]
 800aa80:	9602      	str	r6, [sp, #8]
 800aa82:	4620      	mov	r0, r4
 800aa84:	2200      	movs	r2, #0
 800aa86:	f002 fd1b 	bl	800d4c0 <acc_confprogram_live_patch>
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f240 31ed 	movw	r1, #1005	@ 0x3ed
 800aa90:	b007      	add	sp, #28
 800aa92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aa96:	f001 b825 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>
 800aa9a:	bf00      	nop
 800aa9c:	0800b8b1 	.word	0x0800b8b1

0800aaa0 <acc_a121_cal_session_start_7_rx_freq_program>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	f003 f8f8 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800aaac:	9005      	str	r0, [sp, #20]
 800aaae:	f003 f8f9 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800aab2:	4e09      	ldr	r6, [pc, #36]	@ (800aad8 <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 800aab4:	9905      	ldr	r1, [sp, #20]
 800aab6:	9501      	str	r5, [sp, #4]
 800aab8:	220c      	movs	r2, #12
 800aaba:	4603      	mov	r3, r0
 800aabc:	9200      	str	r2, [sp, #0]
 800aabe:	4620      	mov	r0, r4
 800aac0:	9602      	str	r6, [sp, #8]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f002 fcfc 	bl	800d4c0 <acc_confprogram_live_patch>
 800aac8:	4620      	mov	r0, r4
 800aaca:	f240 4117 	movw	r1, #1047	@ 0x417
 800aace:	b006      	add	sp, #24
 800aad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aad4:	f001 b806 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>
 800aad8:	0800b8b1 	.word	0x0800b8b1

0800aadc <acc_a121_cal_session_start_8_phase_enhancement_program>:
 800aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aade:	b087      	sub	sp, #28
 800aae0:	4604      	mov	r4, r0
 800aae2:	460e      	mov	r6, r1
 800aae4:	f003 f8da 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800aae8:	9005      	str	r0, [sp, #20]
 800aaea:	f003 f8db 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800aaee:	4d19      	ldr	r5, [pc, #100]	@ (800ab54 <acc_a121_cal_session_start_8_phase_enhancement_program+0x78>)
 800aaf0:	9905      	ldr	r1, [sp, #20]
 800aaf2:	9601      	str	r6, [sp, #4]
 800aaf4:	220b      	movs	r2, #11
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	9200      	str	r2, [sp, #0]
 800aafa:	4620      	mov	r0, r4
 800aafc:	2200      	movs	r2, #0
 800aafe:	9502      	str	r5, [sp, #8]
 800ab00:	f002 fcde 	bl	800d4c0 <acc_confprogram_live_patch>
 800ab04:	f003 f8ca 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800ab08:	9005      	str	r0, [sp, #20]
 800ab0a:	f003 f8cb 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800ab0e:	2609      	movs	r6, #9
 800ab10:	2200      	movs	r2, #0
 800ab12:	e9cd 6200 	strd	r6, r2, [sp]
 800ab16:	9905      	ldr	r1, [sp, #20]
 800ab18:	9502      	str	r5, [sp, #8]
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f002 fccf 	bl	800d4c0 <acc_confprogram_live_patch>
 800ab22:	f003 f8bb 	bl	800dc9c <acc_image_a121_r1a_cal_session_get>
 800ab26:	9005      	str	r0, [sp, #20]
 800ab28:	f003 f8bc 	bl	800dca4 <acc_image_a121_r1a_cal_session_param_table_get>
 800ab2c:	277e      	movs	r7, #126	@ 0x7e
 800ab2e:	260a      	movs	r6, #10
 800ab30:	9905      	ldr	r1, [sp, #20]
 800ab32:	9502      	str	r5, [sp, #8]
 800ab34:	4603      	mov	r3, r0
 800ab36:	e9cd 6700 	strd	r6, r7, [sp]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f002 fcbf 	bl	800d4c0 <acc_confprogram_live_patch>
 800ab42:	4620      	mov	r0, r4
 800ab44:	f240 4153 	movw	r1, #1107	@ 0x453
 800ab48:	b007      	add	sp, #28
 800ab4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ab4e:	f000 bfc9 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>
 800ab52:	bf00      	nop
 800ab54:	0800b8b1 	.word	0x0800b8b1

0800ab58 <acc_a121_cal_session_start_9_pulseshaper_program>:
 800ab58:	f240 417c 	movw	r1, #1148	@ 0x47c
 800ab5c:	f000 bfc2 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>

0800ab60 <acc_a121_cal_session_ack_program>:
 800ab60:	b530      	push	{r4, r5, lr}
 800ab62:	b083      	sub	sp, #12
 800ab64:	4604      	mov	r4, r0
 800ab66:	aa01      	add	r2, sp, #4
 800ab68:	2101      	movs	r1, #1
 800ab6a:	f001 f885 	bl	800bc78 <acc_sensor_protocol_a121_get_event>
 800ab6e:	4620      	mov	r0, r4
 800ab70:	2200      	movs	r2, #0
 800ab72:	2101      	movs	r1, #1
 800ab74:	f001 f838 	bl	800bbe8 <acc_sensor_protocol_a121_ack_event>
 800ab78:	a801      	add	r0, sp, #4
 800ab7a:	f001 f8ef 	bl	800bd5c <acc_sensor_protocol_a121_is_done>
 800ab7e:	4604      	mov	r4, r0
 800ab80:	b930      	cbnz	r0, 800ab90 <acc_a121_cal_session_ack_program+0x30>
 800ab82:	4a05      	ldr	r2, [pc, #20]	@ (800ab98 <acc_a121_cal_session_ack_program+0x38>)
 800ab84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ab88:	6915      	ldr	r5, [r2, #16]
 800ab8a:	4904      	ldr	r1, [pc, #16]	@ (800ab9c <acc_a121_cal_session_ack_program+0x3c>)
 800ab8c:	4a04      	ldr	r2, [pc, #16]	@ (800aba0 <acc_a121_cal_session_ack_program+0x40>)
 800ab8e:	47a8      	blx	r5
 800ab90:	4620      	mov	r0, r4
 800ab92:	b003      	add	sp, #12
 800ab94:	bd30      	pop	{r4, r5, pc}
 800ab96:	bf00      	nop
 800ab98:	200003f0 	.word	0x200003f0
 800ab9c:	08012b30 	.word	0x08012b30
 800aba0:	08012ae8 	.word	0x08012ae8

0800aba4 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	4688      	mov	r8, r1
 800abaa:	4607      	mov	r7, r0
 800abac:	2132      	movs	r1, #50	@ 0x32
 800abae:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800abb2:	461e      	mov	r6, r3
 800abb4:	f002 fd46 	bl	800d644 <acc_sensor_reg_read>
 800abb8:	2312      	movs	r3, #18
 800abba:	2200      	movs	r2, #0
 800abbc:	4641      	mov	r1, r8
 800abbe:	4638      	mov	r0, r7
 800abc0:	f000 fed2 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800abc4:	8802      	ldrh	r2, [r0, #0]
 800abc6:	8032      	strh	r2, [r6, #0]
 800abc8:	8842      	ldrh	r2, [r0, #2]
 800abca:	802a      	strh	r2, [r5, #0]
 800abcc:	1d03      	adds	r3, r0, #4
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800abd4 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4616      	mov	r6, r2
 800abd8:	461c      	mov	r4, r3
 800abda:	2200      	movs	r2, #0
 800abdc:	2341      	movs	r3, #65	@ 0x41
 800abde:	9d04      	ldr	r5, [sp, #16]
 800abe0:	f000 fec2 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800abe4:	8c02      	ldrh	r2, [r0, #32]
 800abe6:	6030      	str	r0, [r6, #0]
 800abe8:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 800abec:	8022      	strh	r2, [r4, #0]
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	bf00      	nop

0800abf4 <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 800abf4:	b510      	push	{r4, lr}
 800abf6:	2320      	movs	r3, #32
 800abf8:	4614      	mov	r4, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	f000 feb4 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800ac00:	6020      	str	r0, [r4, #0]
 800ac02:	bd10      	pop	{r4, pc}

0800ac04 <acc_a121_cal_session_get_4_bba_vga_program_data>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	2350      	movs	r3, #80	@ 0x50
 800ac08:	4614      	mov	r4, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f000 feac 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800ac10:	6020      	str	r0, [r4, #0]
 800ac12:	bd10      	pop	{r4, pc}

0800ac14 <acc_a121_cal_session_get_5_area_index_program_data>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ac1a:	4614      	mov	r4, r2
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f000 fea3 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800ac22:	6020      	str	r0, [r4, #0]
 800ac24:	bd10      	pop	{r4, pc}
 800ac26:	bf00      	nop

0800ac28 <acc_a121_cal_session_get_6_tx_freq_program_data>:
 800ac28:	f7ff bff4 	b.w	800ac14 <acc_a121_cal_session_get_5_area_index_program_data>

0800ac2c <acc_a121_cal_session_get_7_rx_freq_program_data>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	2310      	movs	r3, #16
 800ac30:	4614      	mov	r4, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	f000 fe98 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800ac38:	6020      	str	r0, [r4, #0]
 800ac3a:	bd10      	pop	{r4, pc}

0800ac3c <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 800ac3c:	b510      	push	{r4, lr}
 800ac3e:	2360      	movs	r3, #96	@ 0x60
 800ac40:	4614      	mov	r4, r2
 800ac42:	2200      	movs	r2, #0
 800ac44:	f000 fe90 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800ac48:	6020      	str	r0, [r4, #0]
 800ac4a:	bd10      	pop	{r4, pc}

0800ac4c <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4615      	mov	r5, r2
 800ac50:	461c      	mov	r4, r3
 800ac52:	2200      	movs	r2, #0
 800ac54:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 800ac58:	f000 fe86 	bl	800b968 <acc_sensor_a121_buffer_processed_read>
 800ac5c:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 800ac60:	6028      	str	r0, [r5, #0]
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop

0800ac68 <acc_detector_utils_get_fwhm>:
 800ac68:	3801      	subs	r0, #1
 800ac6a:	b2c0      	uxtb	r0, r0
 800ac6c:	2804      	cmp	r0, #4
 800ac6e:	bf9d      	ittte	ls
 800ac70:	4b03      	ldrls	r3, [pc, #12]	@ (800ac80 <acc_detector_utils_get_fwhm+0x18>)
 800ac72:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800ac76:	ed90 0a00 	vldrls	s0, [r0]
 800ac7a:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800ac84 <acc_detector_utils_get_fwhm+0x1c>
 800ac7e:	4770      	bx	lr
 800ac80:	08012b64 	.word	0x08012b64
 800ac84:	00000000 	.word	0x00000000

0800ac88 <acc_detector_utils_radar_loop_gain_per_hwaas>:
 800ac88:	3801      	subs	r0, #1
 800ac8a:	b2c0      	uxtb	r0, r0
 800ac8c:	2804      	cmp	r0, #4
 800ac8e:	bf9d      	ittte	ls
 800ac90:	4b03      	ldrls	r3, [pc, #12]	@ (800aca0 <acc_detector_utils_radar_loop_gain_per_hwaas+0x18>)
 800ac92:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800ac96:	ed90 0a00 	vldrls	s0, [r0]
 800ac9a:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800aca4 <acc_detector_utils_radar_loop_gain_per_hwaas+0x1c>
 800ac9e:	4770      	bx	lr
 800aca0:	08012b78 	.word	0x08012b78
 800aca4:	00000000 	.word	0x00000000

0800aca8 <acc_detector_utils_select_prf>:
 800aca8:	ee07 0a90 	vmov	s15, r0
 800acac:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800ad18 <acc_detector_utils_select_prf+0x70>
 800acb0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800ad1c <acc_detector_utils_select_prf+0x74>
 800acb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800acbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc4:	d501      	bpl.n	800acca <acc_detector_utils_select_prf+0x22>
 800acc6:	2901      	cmp	r1, #1
 800acc8:	d020      	beq.n	800ad0c <acc_detector_utils_select_prf+0x64>
 800acca:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800ad20 <acc_detector_utils_select_prf+0x78>
 800acce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd6:	d417      	bmi.n	800ad08 <acc_detector_utils_select_prf+0x60>
 800acd8:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800acdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ace0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace4:	d416      	bmi.n	800ad14 <acc_detector_utils_select_prf+0x6c>
 800ace6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ad24 <acc_detector_utils_select_prf+0x7c>
 800acea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf2:	d40d      	bmi.n	800ad10 <acc_detector_utils_select_prf+0x68>
 800acf4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800ad28 <acc_detector_utils_select_prf+0x80>
 800acf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad00:	bf4c      	ite	mi
 800ad02:	2004      	movmi	r0, #4
 800ad04:	2005      	movpl	r0, #5
 800ad06:	4770      	bx	lr
 800ad08:	2001      	movs	r0, #1
 800ad0a:	4770      	bx	lr
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	4770      	bx	lr
 800ad10:	2003      	movs	r0, #3
 800ad12:	4770      	bx	lr
 800ad14:	2002      	movs	r0, #2
 800ad16:	4770      	bx	lr
 800ad18:	3b23d70a 	.word	0x3b23d70a
 800ad1c:	40466666 	.word	0x40466666
 800ad20:	40a33333 	.word	0x40a33333
 800ad24:	414b3333 	.word	0x414b3333
 800ad28:	41940000 	.word	0x41940000

0800ad2c <acc_detector_utils_min_leakage_free_dist>:
 800ad2c:	3801      	subs	r0, #1
 800ad2e:	b2c0      	uxtb	r0, r0
 800ad30:	2804      	cmp	r0, #4
 800ad32:	bf9d      	ittte	ls
 800ad34:	4b03      	ldrls	r3, [pc, #12]	@ (800ad44 <acc_detector_utils_min_leakage_free_dist+0x18>)
 800ad36:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800ad3a:	ed90 0a00 	vldrls	s0, [r0]
 800ad3e:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800ad48 <acc_detector_utils_min_leakage_free_dist+0x1c>
 800ad42:	4770      	bx	lr
 800ad44:	08012b50 	.word	0x08012b50
 800ad48:	00000000 	.word	0x00000000

0800ad4c <acc_detector_utils_get_abs_sweep>:
 800ad4c:	b1ab      	cbz	r3, 800ad7a <acc_detector_utils_get_abs_sweep+0x2e>
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	1d16      	adds	r6, r2, #4
 800ad56:	4615      	mov	r5, r2
 800ad58:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800ad5c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800ad60:	ed94 0a00 	vldr	s0, [r4]
 800ad64:	edd4 0a01 	vldr	s1, [r4, #4]
 800ad68:	f003 ff5e 	bl	800ec28 <cabsf>
 800ad6c:	eca5 0a01 	vstmia	r5!, {s0}
 800ad70:	42b5      	cmp	r5, r6
 800ad72:	f104 0408 	add.w	r4, r4, #8
 800ad76:	d1f3      	bne.n	800ad60 <acc_detector_utils_get_abs_sweep+0x14>
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
 800ad7a:	4770      	bx	lr

0800ad7c <acc_detector_utils_get_complex_angle>:
 800ad7c:	2a00      	cmp	r2, #0
 800ad7e:	d04c      	beq.n	800ae1a <acc_detector_utils_get_complex_angle+0x9e>
 800ad80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	3a01      	subs	r2, #1
 800ad86:	b292      	uxth	r2, r2
 800ad88:	f100 0804 	add.w	r8, r0, #4
 800ad8c:	ed2d 8b02 	vpush	{d8}
 800ad90:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 800ae20 <acc_detector_utils_get_complex_angle+0xa4>
 800ad94:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 800ae1c <acc_detector_utils_get_complex_angle+0xa0>
 800ad98:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800ae24 <acc_detector_utils_get_complex_angle+0xa8>
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	f04f 0900 	mov.w	r9, #0
 800ada2:	460d      	mov	r5, r1
 800ada4:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 800ada8:	e008      	b.n	800adbc <acc_detector_utils_get_complex_angle+0x40>
 800adaa:	2f00      	cmp	r7, #0
 800adac:	d125      	bne.n	800adfa <acc_detector_utils_get_complex_angle+0x7e>
 800adae:	f8c5 9000 	str.w	r9, [r5]
 800adb2:	3404      	adds	r4, #4
 800adb4:	45a0      	cmp	r8, r4
 800adb6:	f105 0504 	add.w	r5, r5, #4
 800adba:	d01a      	beq.n	800adf2 <acc_detector_utils_get_complex_angle+0x76>
 800adbc:	f9b4 6000 	ldrsh.w	r6, [r4]
 800adc0:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 800adc4:	2e00      	cmp	r6, #0
 800adc6:	d0f0      	beq.n	800adaa <acc_detector_utils_get_complex_angle+0x2e>
 800adc8:	ee07 6a90 	vmov	s15, r6
 800adcc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800add0:	ee07 7a90 	vmov	s15, r7
 800add4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800addc:	f003 fd58 	bl	800e890 <atanf>
 800ade0:	2e00      	cmp	r6, #0
 800ade2:	db10      	blt.n	800ae06 <acc_detector_utils_get_complex_angle+0x8a>
 800ade4:	3404      	adds	r4, #4
 800ade6:	45a0      	cmp	r8, r4
 800ade8:	f105 0504 	add.w	r5, r5, #4
 800adec:	ed05 0a01 	vstr	s0, [r5, #-4]
 800adf0:	d1e4      	bne.n	800adbc <acc_detector_utils_get_complex_angle+0x40>
 800adf2:	ecbd 8b02 	vpop	{d8}
 800adf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfa:	bfcc      	ite	gt
 800adfc:	f8c5 a000 	strgt.w	sl, [r5]
 800ae00:	f8c5 b000 	strle.w	fp, [r5]
 800ae04:	e7d5      	b.n	800adb2 <acc_detector_utils_get_complex_angle+0x36>
 800ae06:	2f00      	cmp	r7, #0
 800ae08:	db02      	blt.n	800ae10 <acc_detector_utils_get_complex_angle+0x94>
 800ae0a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ae0e:	e7e9      	b.n	800ade4 <acc_detector_utils_get_complex_angle+0x68>
 800ae10:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ae14:	ed85 0a00 	vstr	s0, [r5]
 800ae18:	e7cb      	b.n	800adb2 <acc_detector_utils_get_complex_angle+0x36>
 800ae1a:	4770      	bx	lr
 800ae1c:	40490fdb 	.word	0x40490fdb
 800ae20:	bfc90fdb 	.word	0xbfc90fdb
 800ae24:	3fc90fdb 	.word	0x3fc90fdb

0800ae28 <acc_detector_utils_align_size_32bit>:
 800ae28:	3003      	adds	r0, #3
 800ae2a:	f020 0003 	bic.w	r0, r0, #3
 800ae2e:	4770      	bx	lr

0800ae30 <acc_rss_integration_register_a121>:
 800ae30:	68c3      	ldr	r3, [r0, #12]
 800ae32:	b570      	push	{r4, r5, r6, lr}
 800ae34:	b1c3      	cbz	r3, 800ae68 <acc_rss_integration_register_a121+0x38>
 800ae36:	6843      	ldr	r3, [r0, #4]
 800ae38:	b1cb      	cbz	r3, 800ae6e <acc_rss_integration_register_a121+0x3e>
 800ae3a:	6883      	ldr	r3, [r0, #8]
 800ae3c:	b1bb      	cbz	r3, 800ae6e <acc_rss_integration_register_a121+0x3e>
 800ae3e:	6903      	ldr	r3, [r0, #16]
 800ae40:	b1eb      	cbz	r3, 800ae7e <acc_rss_integration_register_a121+0x4e>
 800ae42:	8802      	ldrh	r2, [r0, #0]
 800ae44:	2a0f      	cmp	r2, #15
 800ae46:	d914      	bls.n	800ae72 <acc_rss_integration_register_a121+0x42>
 800ae48:	4604      	mov	r4, r0
 800ae4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae4c:	4d0d      	ldr	r5, [pc, #52]	@ (800ae84 <acc_rss_integration_register_a121+0x54>)
 800ae4e:	4e0e      	ldr	r6, [pc, #56]	@ (800ae88 <acc_rss_integration_register_a121+0x58>)
 800ae50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae52:	4b0e      	ldr	r3, [pc, #56]	@ (800ae8c <acc_rss_integration_register_a121+0x5c>)
 800ae54:	4a0e      	ldr	r2, [pc, #56]	@ (800ae90 <acc_rss_integration_register_a121+0x60>)
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ae62:	7033      	strb	r3, [r6, #0]
 800ae64:	2001      	movs	r0, #1
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	6943      	ldr	r3, [r0, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e3      	bne.n	800ae36 <acc_rss_integration_register_a121+0x6>
 800ae6e:	6903      	ldr	r3, [r0, #16]
 800ae70:	b12b      	cbz	r3, 800ae7e <acc_rss_integration_register_a121+0x4e>
 800ae72:	4a08      	ldr	r2, [pc, #32]	@ (800ae94 <acc_rss_integration_register_a121+0x64>)
 800ae74:	4908      	ldr	r1, [pc, #32]	@ (800ae98 <acc_rss_integration_register_a121+0x68>)
 800ae76:	2000      	movs	r0, #0
 800ae78:	4798      	blx	r3
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	bd70      	pop	{r4, r5, r6, pc}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	bd70      	pop	{r4, r5, r6, pc}
 800ae82:	bf00      	nop
 800ae84:	200003f0 	.word	0x200003f0
 800ae88:	20000298 	.word	0x20000298
 800ae8c:	2000029c 	.word	0x2000029c
 800ae90:	016e3600 	.word	0x016e3600
 800ae94:	08012b8c 	.word	0x08012b8c
 800ae98:	08012ba0 	.word	0x08012ba0

0800ae9c <acc_rss_integration_get_sensor_reference_frequency>:
 800ae9c:	4b01      	ldr	r3, [pc, #4]	@ (800aea4 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800ae9e:	6818      	ldr	r0, [r3, #0]
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	2000029c 	.word	0x2000029c

0800aea8 <acc_rss_integration_get_max_spi_transfer_size>:
 800aea8:	4b01      	ldr	r3, [pc, #4]	@ (800aeb0 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800aeaa:	8818      	ldrh	r0, [r3, #0]
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	200003f0 	.word	0x200003f0

0800aeb4 <acc_rss_integration_sensor_device_transfer>:
 800aeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb8:	4f10      	ldr	r7, [pc, #64]	@ (800aefc <acc_rss_integration_sensor_device_transfer+0x48>)
 800aeba:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800aebe:	f1be 0f00 	cmp.w	lr, #0
 800aec2:	d003      	beq.n	800aecc <acc_rss_integration_sensor_device_transfer+0x18>
 800aec4:	4673      	mov	r3, lr
 800aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	4718      	bx	r3
 800aecc:	460c      	mov	r4, r1
 800aece:	4606      	mov	r6, r0
 800aed0:	4611      	mov	r1, r2
 800aed2:	4615      	mov	r5, r2
 800aed4:	4620      	mov	r0, r4
 800aed6:	4698      	mov	r8, r3
 800aed8:	f002 fd36 	bl	800d948 <acc_utils_swap16_array>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4630      	mov	r0, r6
 800aee0:	006a      	lsls	r2, r5, #1
 800aee2:	4621      	mov	r1, r4
 800aee4:	4798      	blx	r3
 800aee6:	f1b8 0f00 	cmp.w	r8, #0
 800aeea:	d101      	bne.n	800aef0 <acc_rss_integration_sensor_device_transfer+0x3c>
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef0:	4629      	mov	r1, r5
 800aef2:	4620      	mov	r0, r4
 800aef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aef8:	f002 bd26 	b.w	800d948 <acc_utils_swap16_array>
 800aefc:	200003f0 	.word	0x200003f0

0800af00 <acc_rss_integration_mem_alloc_debug>:
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	4f0c      	ldr	r7, [pc, #48]	@ (800af38 <acc_rss_integration_mem_alloc_debug+0x38>)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4688      	mov	r8, r1
 800af0a:	4616      	mov	r6, r2
 800af0c:	4605      	mov	r5, r0
 800af0e:	4798      	blx	r3
 800af10:	4604      	mov	r4, r0
 800af12:	b150      	cbz	r0, 800af2a <acc_rss_integration_mem_alloc_debug+0x2a>
 800af14:	4b09      	ldr	r3, [pc, #36]	@ (800af3c <acc_rss_integration_mem_alloc_debug+0x3c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	b123      	cbz	r3, 800af24 <acc_rss_integration_mem_alloc_debug+0x24>
 800af1a:	689f      	ldr	r7, [r3, #8]
 800af1c:	4642      	mov	r2, r8
 800af1e:	4633      	mov	r3, r6
 800af20:	4629      	mov	r1, r5
 800af22:	47b8      	blx	r7
 800af24:	4620      	mov	r0, r4
 800af26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	4a04      	ldr	r2, [pc, #16]	@ (800af40 <acc_rss_integration_mem_alloc_debug+0x40>)
 800af2e:	4905      	ldr	r1, [pc, #20]	@ (800af44 <acc_rss_integration_mem_alloc_debug+0x44>)
 800af30:	4798      	blx	r3
 800af32:	4620      	mov	r0, r4
 800af34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af38:	200003f0 	.word	0x200003f0
 800af3c:	20000294 	.word	0x20000294
 800af40:	08012bb0 	.word	0x08012bb0
 800af44:	08012ba0 	.word	0x08012ba0

0800af48 <acc_rss_integration_mem_calloc_debug>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	b1a8      	cbz	r0, 800af78 <acc_rss_integration_mem_calloc_debug+0x30>
 800af4c:	4614      	mov	r4, r2
 800af4e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800af52:	fbb2 f2f0 	udiv	r2, r2, r0
 800af56:	428a      	cmp	r2, r1
 800af58:	d90e      	bls.n	800af78 <acc_rss_integration_mem_calloc_debug+0x30>
 800af5a:	fb01 f500 	mul.w	r5, r1, r0
 800af5e:	461a      	mov	r2, r3
 800af60:	4621      	mov	r1, r4
 800af62:	4628      	mov	r0, r5
 800af64:	f7ff ffcc 	bl	800af00 <acc_rss_integration_mem_alloc_debug>
 800af68:	4604      	mov	r4, r0
 800af6a:	b130      	cbz	r0, 800af7a <acc_rss_integration_mem_calloc_debug+0x32>
 800af6c:	462a      	mov	r2, r5
 800af6e:	2100      	movs	r1, #0
 800af70:	f005 fca8 	bl	80108c4 <memset>
 800af74:	4620      	mov	r0, r4
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	2400      	movs	r4, #0
 800af7a:	4620      	mov	r0, r4
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop

0800af80 <acc_rss_integration_mem_free>:
 800af80:	4b07      	ldr	r3, [pc, #28]	@ (800afa0 <acc_rss_integration_mem_free+0x20>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	b510      	push	{r4, lr}
 800af86:	4604      	mov	r4, r0
 800af88:	b10b      	cbz	r3, 800af8e <acc_rss_integration_mem_free+0xe>
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	4798      	blx	r3
 800af8e:	b12c      	cbz	r4, 800af9c <acc_rss_integration_mem_free+0x1c>
 800af90:	4b04      	ldr	r3, [pc, #16]	@ (800afa4 <acc_rss_integration_mem_free+0x24>)
 800af92:	4620      	mov	r0, r4
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af9a:	4718      	bx	r3
 800af9c:	bd10      	pop	{r4, pc}
 800af9e:	bf00      	nop
 800afa0:	20000294 	.word	0x20000294
 800afa4:	200003f0 	.word	0x200003f0

0800afa8 <acc_rss_integration_log_level>:
 800afa8:	4b01      	ldr	r3, [pc, #4]	@ (800afb0 <acc_rss_integration_log_level+0x8>)
 800afaa:	7818      	ldrb	r0, [r3, #0]
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	20000298 	.word	0x20000298

0800afb4 <pipeline_a121_produce>:
 800afb4:	6803      	ldr	r3, [r0, #0]
 800afb6:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 800afba:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	4710      	bx	r2

0800afc4 <pipeline_a121_disassemble>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	6805      	ldr	r5, [r0, #0]
 800afc8:	4604      	mov	r4, r0
 800afca:	b175      	cbz	r5, 800afea <pipeline_a121_disassemble+0x26>
 800afcc:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800afd0:	f002 fff0 	bl	800dfb4 <acc_element_frame_release>
 800afd4:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 800afd8:	f003 f870 	bl	800e0bc <acc_element_frame_aux_release>
 800afdc:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800afe0:	f7ff ffce 	bl	800af80 <acc_rss_integration_mem_free>
 800afe4:	4628      	mov	r0, r5
 800afe6:	f7ff ffcb 	bl	800af80 <acc_rss_integration_mem_free>
 800afea:	4620      	mov	r0, r4
 800afec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aff0:	f7ff bfc6 	b.w	800af80 <acc_rss_integration_mem_free>

0800aff4 <acc_pipeline_get_buffer_size>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	b08e      	sub	sp, #56	@ 0x38
 800aff8:	460c      	mov	r4, r1
 800affa:	4669      	mov	r1, sp
 800affc:	f000 fbda 	bl	800b7b4 <acc_radar_engine_a121_get_metadata>
 800b000:	b110      	cbz	r0, 800b008 <acc_pipeline_get_buffer_size+0x14>
 800b002:	f8bd 3000 	ldrh.w	r3, [sp]
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	b00e      	add	sp, #56	@ 0x38
 800b00a:	bd10      	pop	{r4, pc}

0800b00c <acc_pipeline_a121_assemble>:
 800b00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b010:	6803      	ldr	r3, [r0, #0]
 800b012:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800b016:	b09b      	sub	sp, #108	@ 0x6c
 800b018:	4606      	mov	r6, r0
 800b01a:	460f      	mov	r7, r1
 800b01c:	b122      	cbz	r2, 800b028 <acc_pipeline_a121_assemble+0x1c>
 800b01e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b022:	2b00      	cmp	r3, #0
 800b024:	f040 810d 	bne.w	800b242 <acc_pipeline_a121_assemble+0x236>
 800b028:	4aa5      	ldr	r2, [pc, #660]	@ (800b2c0 <acc_pipeline_a121_assemble+0x2b4>)
 800b02a:	233d      	movs	r3, #61	@ 0x3d
 800b02c:	2110      	movs	r1, #16
 800b02e:	2001      	movs	r0, #1
 800b030:	f7ff ff8a 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 800b034:	4aa2      	ldr	r2, [pc, #648]	@ (800b2c0 <acc_pipeline_a121_assemble+0x2b4>)
 800b036:	4605      	mov	r5, r0
 800b038:	233e      	movs	r3, #62	@ 0x3e
 800b03a:	21fc      	movs	r1, #252	@ 0xfc
 800b03c:	2001      	movs	r0, #1
 800b03e:	f7ff ff83 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 800b042:	4604      	mov	r4, r0
 800b044:	2d00      	cmp	r5, #0
 800b046:	f000 8134 	beq.w	800b2b2 <acc_pipeline_a121_assemble+0x2a6>
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	f000 812f 	beq.w	800b2ae <acc_pipeline_a121_assemble+0x2a2>
 800b050:	f04f 0800 	mov.w	r8, #0
 800b054:	f8d6 9000 	ldr.w	r9, [r6]
 800b058:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
 800b05c:	4648      	mov	r0, r9
 800b05e:	602c      	str	r4, [r5, #0]
 800b060:	a90c      	add	r1, sp, #48	@ 0x30
 800b062:	f000 fba7 	bl	800b7b4 <acc_radar_engine_a121_get_metadata>
 800b066:	2800      	cmp	r0, #0
 800b068:	f000 80de 	beq.w	800b228 <acc_pipeline_a121_assemble+0x21c>
 800b06c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800b070:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800b074:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800b078:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 800b07c:	8723      	strh	r3, [r4, #56]	@ 0x38
 800b07e:	0049      	lsls	r1, r1, #1
 800b080:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 800b084:	2100      	movs	r1, #0
 800b086:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 800b08a:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 800b08e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800b092:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800b096:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 800b09a:	4403      	add	r3, r0
 800b09c:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 800b0a0:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800b0a4:	f104 01f6 	add.w	r1, r4, #246	@ 0xf6
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 800b0ae:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 800b0b2:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 800b0b6:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 800b0ba:	6260      	str	r0, [r4, #36]	@ 0x24
 800b0bc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 800b0c0:	b13a      	cbz	r2, 800b0d2 <acc_pipeline_a121_assemble+0xc6>
 800b0c2:	f104 0eec 	add.w	lr, r4, #236	@ 0xec
 800b0c6:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 800b0ca:	6250      	str	r0, [r2, #36]	@ 0x24
 800b0cc:	f8c2 e018 	str.w	lr, [r2, #24]
 800b0d0:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800b0d2:	e9c4 0c36 	strd	r0, ip, [r4, #216]	@ 0xd8
 800b0d6:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 800b0da:	2008      	movs	r0, #8
 800b0dc:	f002 fa8c 	bl	800d5f8 <acc_element_sizeof>
 800b0e0:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 800b0e4:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800b0e8:	b183      	cbz	r3, 800b10c <acc_pipeline_a121_assemble+0x100>
 800b0ea:	f103 3cff 	add.w	ip, r3, #4294967295
 800b0ee:	fa5f fc8c 	uxtb.w	ip, ip
 800b0f2:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 800b0f6:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 800b0fa:	1eba      	subs	r2, r7, #2
 800b0fc:	f831 3b02 	ldrh.w	r3, [r1], #2
 800b100:	fbb3 f3f0 	udiv	r3, r3, r0
 800b104:	f822 3f02 	strh.w	r3, [r2, #2]!
 800b108:	4562      	cmp	r2, ip
 800b10a:	d1f7      	bne.n	800b0fc <acc_pipeline_a121_assemble+0xf0>
 800b10c:	f8d6 8000 	ldr.w	r8, [r6]
 800b110:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800b114:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 800b118:	f8b8 9048 	ldrh.w	r9, [r8, #72]	@ 0x48
 800b11c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b11e:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800b122:	60b8      	str	r0, [r7, #8]
 800b124:	441a      	add	r2, r3
 800b126:	81fa      	strh	r2, [r7, #14]
 800b128:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800b12c:	7339      	strb	r1, [r7, #12]
 800b12e:	823a      	strh	r2, [r7, #16]
 800b130:	f1b9 0f00 	cmp.w	r9, #0
 800b134:	d003      	beq.n	800b13e <acc_pipeline_a121_assemble+0x132>
 800b136:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 800b13a:	fbb2 f9f9 	udiv	r9, r2, r9
 800b13e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 800b142:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800b146:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 800b14a:	f8ad 0000 	strh.w	r0, [sp]
 800b14e:	441a      	add	r2, r3
 800b150:	440b      	add	r3, r1
 800b152:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b156:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b15a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800b15e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800b162:	f8ad 2002 	strh.w	r2, [sp, #2]
 800b166:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 800b16a:	220f      	movs	r2, #15
 800b16c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800b170:	4638      	mov	r0, r7
 800b172:	2303      	movs	r3, #3
 800b174:	4669      	mov	r1, sp
 800b176:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b17a:	f88d 300c 	strb.w	r3, [sp, #12]
 800b17e:	f002 ff7b 	bl	800e078 <acc_element_frame_aux_init>
 800b182:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800b186:	b370      	cbz	r0, 800b1e6 <acc_pipeline_a121_assemble+0x1da>
 800b188:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800b18c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 800b190:	f8b8 c048 	ldrh.w	ip, [r8, #72]	@ 0x48
 800b194:	f8ad 901a 	strh.w	r9, [sp, #26]
 800b198:	2200      	movs	r2, #0
 800b19a:	4419      	add	r1, r3
 800b19c:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800b1a0:	9205      	str	r2, [sp, #20]
 800b1a2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800b1a6:	9207      	str	r2, [sp, #28]
 800b1a8:	920a      	str	r2, [sp, #40]	@ 0x28
 800b1aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1ac:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800b1b0:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b1b4:	f88d 3016 	strb.w	r3, [sp, #22]
 800b1b8:	f8ad c018 	strh.w	ip, [sp, #24]
 800b1bc:	9204      	str	r2, [sp, #16]
 800b1be:	b17b      	cbz	r3, 800b1e0 <acc_pipeline_a121_assemble+0x1d4>
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	aa14      	add	r2, sp, #80	@ 0x50
 800b1c6:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 800b1ca:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 800b1ce:	aa07      	add	r2, sp, #28
 800b1d0:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b1d4:	f822 1b02 	strh.w	r1, [r2], #2
 800b1d8:	459c      	cmp	ip, r3
 800b1da:	88d9      	ldrh	r1, [r3, #6]
 800b1dc:	80d1      	strh	r1, [r2, #6]
 800b1de:	d1f7      	bne.n	800b1d0 <acc_pipeline_a121_assemble+0x1c4>
 800b1e0:	a904      	add	r1, sp, #16
 800b1e2:	f002 fe6f 	bl	800dec4 <acc_element_frame_init>
 800b1e6:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 800b1ea:	6871      	ldr	r1, [r6, #4]
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	f002 ff97 	bl	800e120 <acc_element_sink_a121_callback_init>
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f002 fa0b 	bl	800d610 <acc_element_connect>
 800b1fa:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800b1fe:	2900      	cmp	r1, #0
 800b200:	d059      	beq.n	800b2b6 <acc_pipeline_a121_assemble+0x2aa>
 800b202:	4638      	mov	r0, r7
 800b204:	f002 fa04 	bl	800d610 <acc_element_connect>
 800b208:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800b20c:	4641      	mov	r1, r8
 800b20e:	f002 f9ff 	bl	800d610 <acc_element_connect>
 800b212:	6820      	ldr	r0, [r4, #0]
 800b214:	6883      	ldr	r3, [r0, #8]
 800b216:	4798      	blx	r3
 800b218:	2800      	cmp	r0, #0
 800b21a:	d13b      	bne.n	800b294 <acc_pipeline_a121_assemble+0x288>
 800b21c:	4b29      	ldr	r3, [pc, #164]	@ (800b2c4 <acc_pipeline_a121_assemble+0x2b8>)
 800b21e:	4a2a      	ldr	r2, [pc, #168]	@ (800b2c8 <acc_pipeline_a121_assemble+0x2bc>)
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	4927      	ldr	r1, [pc, #156]	@ (800b2c0 <acc_pipeline_a121_assemble+0x2b4>)
 800b224:	4798      	blx	r3
 800b226:	e004      	b.n	800b232 <acc_pipeline_a121_assemble+0x226>
 800b228:	4b26      	ldr	r3, [pc, #152]	@ (800b2c4 <acc_pipeline_a121_assemble+0x2b8>)
 800b22a:	4a28      	ldr	r2, [pc, #160]	@ (800b2cc <acc_pipeline_a121_assemble+0x2c0>)
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	4924      	ldr	r1, [pc, #144]	@ (800b2c0 <acc_pipeline_a121_assemble+0x2b4>)
 800b230:	4798      	blx	r3
 800b232:	4628      	mov	r0, r5
 800b234:	f7ff fec6 	bl	800afc4 <pipeline_a121_disassemble>
 800b238:	2500      	movs	r5, #0
 800b23a:	4628      	mov	r0, r5
 800b23c:	b01b      	add	sp, #108	@ 0x6c
 800b23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b242:	4a1f      	ldr	r2, [pc, #124]	@ (800b2c0 <acc_pipeline_a121_assemble+0x2b4>)
 800b244:	233d      	movs	r3, #61	@ 0x3d
 800b246:	2110      	movs	r1, #16
 800b248:	2001      	movs	r0, #1
 800b24a:	f7ff fe7d 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 800b24e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2c0 <acc_pipeline_a121_assemble+0x2b4>)
 800b250:	233e      	movs	r3, #62	@ 0x3e
 800b252:	21fc      	movs	r1, #252	@ 0xfc
 800b254:	4605      	mov	r5, r0
 800b256:	2001      	movs	r0, #1
 800b258:	f7ff fe76 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 800b25c:	4a18      	ldr	r2, [pc, #96]	@ (800b2c0 <acc_pipeline_a121_assemble+0x2b4>)
 800b25e:	4604      	mov	r4, r0
 800b260:	2343      	movs	r3, #67	@ 0x43
 800b262:	2160      	movs	r1, #96	@ 0x60
 800b264:	2001      	movs	r0, #1
 800b266:	f7ff fe6f 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 800b26a:	4680      	mov	r8, r0
 800b26c:	b125      	cbz	r5, 800b278 <acc_pipeline_a121_assemble+0x26c>
 800b26e:	b11c      	cbz	r4, 800b278 <acc_pipeline_a121_assemble+0x26c>
 800b270:	f1b8 0f00 	cmp.w	r8, #0
 800b274:	f47f aeee 	bne.w	800b054 <acc_pipeline_a121_assemble+0x48>
 800b278:	4628      	mov	r0, r5
 800b27a:	f7ff fe81 	bl	800af80 <acc_rss_integration_mem_free>
 800b27e:	4620      	mov	r0, r4
 800b280:	f7ff fe7e 	bl	800af80 <acc_rss_integration_mem_free>
 800b284:	4640      	mov	r0, r8
 800b286:	f7ff fe7b 	bl	800af80 <acc_rss_integration_mem_free>
 800b28a:	2500      	movs	r5, #0
 800b28c:	4628      	mov	r0, r5
 800b28e:	b01b      	add	sp, #108	@ 0x6c
 800b290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b294:	6820      	ldr	r0, [r4, #0]
 800b296:	68c3      	ldr	r3, [r0, #12]
 800b298:	4798      	blx	r3
 800b29a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d0 <acc_pipeline_a121_assemble+0x2c4>)
 800b29c:	4a0d      	ldr	r2, [pc, #52]	@ (800b2d4 <acc_pipeline_a121_assemble+0x2c8>)
 800b29e:	606b      	str	r3, [r5, #4]
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e9c5 3202 	strd	r3, r2, [r5, #8]
 800b2a8:	b01b      	add	sp, #108	@ 0x6c
 800b2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ae:	46a0      	mov	r8, r4
 800b2b0:	e7e2      	b.n	800b278 <acc_pipeline_a121_assemble+0x26c>
 800b2b2:	46a8      	mov	r8, r5
 800b2b4:	e7e0      	b.n	800b278 <acc_pipeline_a121_assemble+0x26c>
 800b2b6:	4641      	mov	r1, r8
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f002 f9a9 	bl	800d610 <acc_element_connect>
 800b2be:	e7a8      	b.n	800b212 <acc_pipeline_a121_assemble+0x206>
 800b2c0:	08012be4 	.word	0x08012be4
 800b2c4:	200003f0 	.word	0x200003f0
 800b2c8:	08012bf4 	.word	0x08012bf4
 800b2cc:	08012bc0 	.word	0x08012bc0
 800b2d0:	0800afb5 	.word	0x0800afb5
 800b2d4:	0800afc5 	.word	0x0800afc5

0800b2d8 <acc_pipeline_a121_prepare_memory>:
 800b2d8:	6803      	ldr	r3, [r0, #0]
 800b2da:	b430      	push	{r4, r5}
 800b2dc:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 800b2e0:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 800b2e2:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 800b2e6:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800b2ea:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800b2ee:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800b2f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b2f6:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 800b2fa:	615c      	str	r4, [r3, #20]
 800b2fc:	b14d      	cbz	r5, 800b312 <acc_pipeline_a121_prepare_memory+0x3a>
 800b2fe:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 800b302:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 800b306:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800b30a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b30e:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800b312:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 800b316:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800b31a:	bc30      	pop	{r4, r5}
 800b31c:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop

0800b324 <acc_radar_engine_a121_context_create>:
 800b324:	b508      	push	{r3, lr}
 800b326:	4a07      	ldr	r2, [pc, #28]	@ (800b344 <acc_radar_engine_a121_context_create+0x20>)
 800b328:	2373      	movs	r3, #115	@ 0x73
 800b32a:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800b32e:	2001      	movs	r0, #1
 800b330:	f7ff fe0a 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 800b334:	b120      	cbz	r0, 800b340 <acc_radar_engine_a121_context_create+0x1c>
 800b336:	2301      	movs	r3, #1
 800b338:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 800b33c:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 800b340:	bd08      	pop	{r3, pc}
 800b342:	bf00      	nop
 800b344:	08012c14 	.word	0x08012c14

0800b348 <acc_radar_engine_a121_context_destroy>:
 800b348:	b108      	cbz	r0, 800b34e <acc_radar_engine_a121_context_destroy+0x6>
 800b34a:	f7ff be19 	b.w	800af80 <acc_rss_integration_mem_free>
 800b34e:	4770      	bx	lr

0800b350 <acc_radar_engine_a121_run_program>:
 800b350:	f002 bf98 	b.w	800e284 <acc_cpd_a121_meas_session_run_program>

0800b354 <acc_radar_engine_a121_measure>:
 800b354:	b510      	push	{r4, lr}
 800b356:	460c      	mov	r4, r1
 800b358:	2201      	movs	r2, #1
 800b35a:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800b35e:	f000 fc43 	bl	800bbe8 <acc_sensor_protocol_a121_ack_event>
 800b362:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 800b366:	b143      	cbz	r3, 800b37a <acc_radar_engine_a121_measure+0x26>
 800b368:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	bf0c      	ite	eq
 800b370:	2301      	moveq	r3, #1
 800b372:	2302      	movne	r3, #2
 800b374:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	2301      	movs	r3, #1
 800b37c:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800b380:	bd10      	pop	{r4, pc}
 800b382:	bf00      	nop

0800b384 <acc_radar_engine_a121_transfer_data>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800b38a:	9c04      	ldr	r4, [sp, #16]
 800b38c:	2901      	cmp	r1, #1
 800b38e:	bf14      	ite	ne
 800b390:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 800b394:	2100      	moveq	r1, #0
 800b396:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800b39a:	461d      	mov	r5, r3
 800b39c:	f002 ffea 	bl	800e374 <acc_cpd_a121_meas_session_transfer_data>
 800b3a0:	b118      	cbz	r0, 800b3aa <acc_radar_engine_a121_transfer_data+0x26>
 800b3a2:	1e28      	subs	r0, r5, #0
 800b3a4:	bf18      	it	ne
 800b3a6:	2001      	movne	r0, #1
 800b3a8:	bd38      	pop	{r3, r4, r5, pc}
 800b3aa:	4b04      	ldr	r3, [pc, #16]	@ (800b3bc <acc_radar_engine_a121_transfer_data+0x38>)
 800b3ac:	4a04      	ldr	r2, [pc, #16]	@ (800b3c0 <acc_radar_engine_a121_transfer_data+0x3c>)
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	4904      	ldr	r1, [pc, #16]	@ (800b3c4 <acc_radar_engine_a121_transfer_data+0x40>)
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	4798      	blx	r3
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ba:	bf00      	nop
 800b3bc:	200003f0 	.word	0x200003f0
 800b3c0:	08012c28 	.word	0x08012c28
 800b3c4:	08012c14 	.word	0x08012c14

0800b3c8 <acc_radar_engine_a121_verify_radar_data_ready>:
 800b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	460d      	mov	r5, r1
 800b3d0:	2400      	movs	r4, #0
 800b3d2:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800b3d6:	9403      	str	r4, [sp, #12]
 800b3d8:	4690      	mov	r8, r2
 800b3da:	4607      	mov	r7, r0
 800b3dc:	f000 fbe8 	bl	800bbb0 <acc_sensor_protocol_a121_is_event_pending>
 800b3e0:	b980      	cbnz	r0, 800b404 <acc_radar_engine_a121_verify_radar_data_ready+0x3c>
 800b3e2:	4b15      	ldr	r3, [pc, #84]	@ (800b438 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800b3e4:	4a15      	ldr	r2, [pc, #84]	@ (800b43c <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800b3e6:	691d      	ldr	r5, [r3, #16]
 800b3e8:	4915      	ldr	r1, [pc, #84]	@ (800b440 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800b3ea:	463b      	mov	r3, r7
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	47a8      	blx	r5
 800b3f0:	ae03      	add	r6, sp, #12
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f000 fcba 	bl	800bd6c <acc_sensor_protocol_a121_get_frame_delayed_flag>
 800b3f8:	f888 0000 	strb.w	r0, [r8]
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	b004      	add	sp, #16
 800b400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b404:	ae03      	add	r6, sp, #12
 800b406:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 800b40a:	4632      	mov	r2, r6
 800b40c:	4638      	mov	r0, r7
 800b40e:	f000 fc33 	bl	800bc78 <acc_sensor_protocol_a121_get_event>
 800b412:	4604      	mov	r4, r0
 800b414:	2800      	cmp	r0, #0
 800b416:	d0ec      	beq.n	800b3f2 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800b418:	4630      	mov	r0, r6
 800b41a:	f000 fc97 	bl	800bd4c <acc_sensor_protocol_a121_is_handshake>
 800b41e:	4604      	mov	r4, r0
 800b420:	2800      	cmp	r0, #0
 800b422:	d1e6      	bne.n	800b3f2 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800b424:	4a04      	ldr	r2, [pc, #16]	@ (800b438 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800b426:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b42a:	6915      	ldr	r5, [r2, #16]
 800b42c:	4904      	ldr	r1, [pc, #16]	@ (800b440 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	4a04      	ldr	r2, [pc, #16]	@ (800b444 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800b432:	463b      	mov	r3, r7
 800b434:	47a8      	blx	r5
 800b436:	e7dc      	b.n	800b3f2 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800b438:	200003f0 	.word	0x200003f0
 800b43c:	08012c54 	.word	0x08012c54
 800b440:	08012c14 	.word	0x08012c14
 800b444:	08012c74 	.word	0x08012c74

0800b448 <acc_radar_engine_a121_update_buffer_header>:
 800b448:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 800b44c:	8011      	strh	r1, [r2, #0]
 800b44e:	b4f0      	push	{r4, r5, r6, r7}
 800b450:	b133      	cbz	r3, 800b460 <acc_radar_engine_a121_update_buffer_header+0x18>
 800b452:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 800b456:	f1a3 0301 	sub.w	r3, r3, #1
 800b45a:	fab3 f383 	clz	r3, r3
 800b45e:	095b      	lsrs	r3, r3, #5
 800b460:	8053      	strh	r3, [r2, #2]
 800b462:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	@ 0x1c8
 800b466:	8093      	strh	r3, [r2, #4]
 800b468:	1d91      	adds	r1, r2, #6
 800b46a:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 800b46e:	f500 74fd 	add.w	r4, r0, #506	@ 0x1fa
 800b472:	681f      	ldr	r7, [r3, #0]
 800b474:	685e      	ldr	r6, [r3, #4]
 800b476:	689d      	ldr	r5, [r3, #8]
 800b478:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800b47c:	f8c1 c00c 	str.w	ip, [r1, #12]
 800b480:	3310      	adds	r3, #16
 800b482:	42a3      	cmp	r3, r4
 800b484:	600f      	str	r7, [r1, #0]
 800b486:	604e      	str	r6, [r1, #4]
 800b488:	608d      	str	r5, [r1, #8]
 800b48a:	f101 0110 	add.w	r1, r1, #16
 800b48e:	d1f0      	bne.n	800b472 <acc_radar_engine_a121_update_buffer_header+0x2a>
 800b490:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 800b494:	86d3      	strh	r3, [r2, #54]	@ 0x36
 800b496:	bcf0      	pop	{r4, r5, r6, r7}
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop

0800b49c <acc_radar_engine_a121_check_asic_id>:
 800b49c:	f000 bc6a 	b.w	800bd74 <acc_sensor_protocol_a121_check_asic_id>

0800b4a0 <acc_radar_engine_a121_is_sensor_running>:
 800b4a0:	f000 bb74 	b.w	800bb8c <acc_sensor_protocol_a121_is_sensor_running>

0800b4a4 <acc_radar_engine_121_populate_metadata>:
 800b4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a8:	8804      	ldrh	r4, [r0, #0]
 800b4aa:	2a00      	cmp	r2, #0
 800b4ac:	bf14      	ite	ne
 800b4ae:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 800b4b2:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 800b4b6:	f5b4 6f9c 	cmp.w	r4, #1248	@ 0x4e0
 800b4ba:	bf38      	it	cc
 800b4bc:	f44f 649c 	movcc.w	r4, #1248	@ 0x4e0
 800b4c0:	42a2      	cmp	r2, r4
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	4688      	mov	r8, r1
 800b4c6:	461d      	mov	r5, r3
 800b4c8:	d22b      	bcs.n	800b522 <acc_radar_engine_121_populate_metadata+0x7e>
 800b4ca:	4b17      	ldr	r3, [pc, #92]	@ (800b528 <acc_radar_engine_121_populate_metadata+0x84>)
 800b4cc:	4a17      	ldr	r2, [pc, #92]	@ (800b52c <acc_radar_engine_121_populate_metadata+0x88>)
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	4917      	ldr	r1, [pc, #92]	@ (800b530 <acc_radar_engine_121_populate_metadata+0x8c>)
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	4798      	blx	r3
 800b4d6:	2700      	movs	r7, #0
 800b4d8:	4916      	ldr	r1, [pc, #88]	@ (800b534 <acc_radar_engine_121_populate_metadata+0x90>)
 800b4da:	4a17      	ldr	r2, [pc, #92]	@ (800b538 <acc_radar_engine_121_populate_metadata+0x94>)
 800b4dc:	2300      	movs	r3, #0
 800b4de:	806b      	strh	r3, [r5, #2]
 800b4e0:	231c      	movs	r3, #28
 800b4e2:	81ab      	strh	r3, [r5, #12]
 800b4e4:	e9c5 1201 	strd	r1, r2, [r5, #4]
 800b4e8:	f000 f9e0 	bl	800b8ac <acc_sensor_a121_get_max_header_length>
 800b4ec:	301c      	adds	r0, #28
 800b4ee:	b280      	uxth	r0, r0
 800b4f0:	1903      	adds	r3, r0, r4
 800b4f2:	462c      	mov	r4, r5
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	81e8      	strh	r0, [r5, #14]
 800b4f8:	6871      	ldr	r1, [r6, #4]
 800b4fa:	6830      	ldr	r0, [r6, #0]
 800b4fc:	68b2      	ldr	r2, [r6, #8]
 800b4fe:	f824 3b10 	strh.w	r3, [r4], #16
 800b502:	68f3      	ldr	r3, [r6, #12]
 800b504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b506:	6930      	ldr	r0, [r6, #16]
 800b508:	6971      	ldr	r1, [r6, #20]
 800b50a:	69b2      	ldr	r2, [r6, #24]
 800b50c:	c407      	stmia	r4!, {r0, r1, r2}
 800b50e:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b512:	8bb3      	ldrh	r3, [r6, #28]
 800b514:	8023      	strh	r3, [r4, #0]
 800b516:	3530      	adds	r5, #48	@ 0x30
 800b518:	e885 0003 	stmia.w	r5, {r0, r1}
 800b51c:	4638      	mov	r0, r7
 800b51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b522:	2701      	movs	r7, #1
 800b524:	e7d8      	b.n	800b4d8 <acc_radar_engine_121_populate_metadata+0x34>
 800b526:	bf00      	nop
 800b528:	200003f0 	.word	0x200003f0
 800b52c:	08012ca0 	.word	0x08012ca0
 800b530:	08012c14 	.word	0x08012c14
 800b534:	00020001 	.word	0x00020001
 800b538:	001b0003 	.word	0x001b0003

0800b53c <acc_radar_engine_a121_prepare>:
 800b53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b540:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800b544:	460c      	mov	r4, r1
 800b546:	4615      	mov	r5, r2
 800b548:	2100      	movs	r1, #0
 800b54a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800b54e:	4606      	mov	r6, r0
 800b550:	a81b      	add	r0, sp, #108	@ 0x6c
 800b552:	4699      	mov	r9, r3
 800b554:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 800b556:	f10d 080c 	add.w	r8, sp, #12
 800b55a:	f005 f9b3 	bl	80108c4 <memset>
 800b55e:	2238      	movs	r2, #56	@ 0x38
 800b560:	2100      	movs	r1, #0
 800b562:	a80d      	add	r0, sp, #52	@ 0x34
 800b564:	f005 f9ae 	bl	80108c4 <memset>
 800b568:	4629      	mov	r1, r5
 800b56a:	4620      	mov	r0, r4
 800b56c:	aa1b      	add	r2, sp, #108	@ 0x6c
 800b56e:	ab05      	add	r3, sp, #20
 800b570:	f8cd 8000 	str.w	r8, [sp]
 800b574:	f001 f9da 	bl	800c92c <acc_translation_a121_translate>
 800b578:	b930      	cbnz	r0, 800b588 <acc_radar_engine_a121_prepare+0x4c>
 800b57a:	f04f 0800 	mov.w	r8, #0
 800b57e:	4640      	mov	r0, r8
 800b580:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800b584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b588:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800b58c:	4641      	mov	r1, r8
 800b58e:	a805      	add	r0, sp, #20
 800b590:	ab0d      	add	r3, sp, #52	@ 0x34
 800b592:	f7ff ff87 	bl	800b4a4 <acc_radar_engine_121_populate_metadata>
 800b596:	2800      	cmp	r0, #0
 800b598:	d0ef      	beq.n	800b57a <acc_radar_engine_a121_prepare+0x3e>
 800b59a:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800b59c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800b5a0:	800b      	strh	r3, [r1, #0]
 800b5a2:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800b5a4:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800b5a8:	800a      	strh	r2, [r1, #0]
 800b5aa:	2304      	movs	r3, #4
 800b5ac:	aa1b      	add	r2, sp, #108	@ 0x6c
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	2014      	movs	r0, #20
 800b5b2:	f002 f82f 	bl	800d614 <acc_probes_execute_struct>
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d0df      	beq.n	800b57a <acc_radar_engine_a121_prepare+0x3e>
 800b5ba:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800b5bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b5be:	464a      	mov	r2, r9
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f002 fe2b 	bl	800e21c <acc_cpd_a121_meas_session_load_program>
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	b928      	cbnz	r0, 800b5d6 <acc_radar_engine_a121_prepare+0x9a>
 800b5ca:	4b27      	ldr	r3, [pc, #156]	@ (800b668 <acc_radar_engine_a121_prepare+0x12c>)
 800b5cc:	4a27      	ldr	r2, [pc, #156]	@ (800b66c <acc_radar_engine_a121_prepare+0x130>)
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	4927      	ldr	r1, [pc, #156]	@ (800b670 <acc_radar_engine_a121_prepare+0x134>)
 800b5d2:	4798      	blx	r3
 800b5d4:	e7d3      	b.n	800b57e <acc_radar_engine_a121_prepare+0x42>
 800b5d6:	4b27      	ldr	r3, [pc, #156]	@ (800b674 <acc_radar_engine_a121_prepare+0x138>)
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	2280      	movs	r2, #128	@ 0x80
 800b5dc:	9201      	str	r2, [sp, #4]
 800b5de:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800b5e0:	464a      	mov	r2, r9
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f000 fabb 	bl	800bb60 <acc_sensor_protocol_a121_load_lut>
 800b5ea:	4680      	mov	r8, r0
 800b5ec:	b3a8      	cbz	r0, 800b65a <acc_radar_engine_a121_prepare+0x11e>
 800b5ee:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800b5f2:	a91b      	add	r1, sp, #108	@ 0x6c
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f005 f9f0 	bl	80109da <memcpy>
 800b5fa:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800b5fe:	b122      	cbz	r2, 800b60a <acc_radar_engine_a121_prepare+0xce>
 800b600:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 800b604:	1e1a      	subs	r2, r3, #0
 800b606:	bf18      	it	ne
 800b608:	2201      	movne	r2, #1
 800b60a:	2101      	movs	r1, #1
 800b60c:	462b      	mov	r3, r5
 800b60e:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 800b612:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 800b616:	f833 1b26 	ldrh.w	r1, [r3], #38
 800b61a:	f8a7 11c8 	strh.w	r1, [r7, #456]	@ 0x1c8
 800b61e:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 800b622:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 800b626:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 800b62a:	f105 0c56 	add.w	ip, r5, #86	@ 0x56
 800b62e:	681c      	ldr	r4, [r3, #0]
 800b630:	6858      	ldr	r0, [r3, #4]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	68de      	ldr	r6, [r3, #12]
 800b636:	60ce      	str	r6, [r1, #12]
 800b638:	3310      	adds	r3, #16
 800b63a:	4563      	cmp	r3, ip
 800b63c:	600c      	str	r4, [r1, #0]
 800b63e:	6048      	str	r0, [r1, #4]
 800b640:	608a      	str	r2, [r1, #8]
 800b642:	f101 0110 	add.w	r1, r1, #16
 800b646:	d1f2      	bne.n	800b62e <acc_radar_engine_a121_prepare+0xf2>
 800b648:	f8b5 3056 	ldrh.w	r3, [r5, #86]	@ 0x56
 800b64c:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 800b650:	4640      	mov	r0, r8
 800b652:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800b656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b65a:	4b03      	ldr	r3, [pc, #12]	@ (800b668 <acc_radar_engine_a121_prepare+0x12c>)
 800b65c:	4a06      	ldr	r2, [pc, #24]	@ (800b678 <acc_radar_engine_a121_prepare+0x13c>)
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	4903      	ldr	r1, [pc, #12]	@ (800b670 <acc_radar_engine_a121_prepare+0x134>)
 800b662:	4798      	blx	r3
 800b664:	e78b      	b.n	800b57e <acc_radar_engine_a121_prepare+0x42>
 800b666:	bf00      	nop
 800b668:	200003f0 	.word	0x200003f0
 800b66c:	08012cc0 	.word	0x08012cc0
 800b670:	08012c14 	.word	0x08012c14
 800b674:	08014da4 	.word	0x08014da4
 800b678:	08012cd4 	.word	0x08012cd4

0800b67c <acc_radar_engine_a121_reconfigure>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800b684:	4607      	mov	r7, r0
 800b686:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 800b688:	460d      	mov	r5, r1
 800b68a:	4616      	mov	r6, r2
 800b68c:	2100      	movs	r1, #0
 800b68e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800b692:	a81b      	add	r0, sp, #108	@ 0x6c
 800b694:	4699      	mov	r9, r3
 800b696:	f005 f915 	bl	80108c4 <memset>
 800b69a:	a80d      	add	r0, sp, #52	@ 0x34
 800b69c:	2238      	movs	r2, #56	@ 0x38
 800b69e:	2100      	movs	r1, #0
 800b6a0:	f005 f910 	bl	80108c4 <memset>
 800b6a4:	f894 a1c5 	ldrb.w	sl, [r4, #453]	@ 0x1c5
 800b6a8:	f1ba 0f00 	cmp.w	sl, #0
 800b6ac:	d00c      	beq.n	800b6c8 <acc_radar_engine_a121_reconfigure+0x4c>
 800b6ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b7a8 <acc_radar_engine_a121_reconfigure+0x12c>)
 800b6b0:	4a3e      	ldr	r2, [pc, #248]	@ (800b7ac <acc_radar_engine_a121_reconfigure+0x130>)
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	493e      	ldr	r1, [pc, #248]	@ (800b7b0 <acc_radar_engine_a121_reconfigure+0x134>)
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	4798      	blx	r3
 800b6ba:	f04f 0800 	mov.w	r8, #0
 800b6be:	4640      	mov	r0, r8
 800b6c0:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800b6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c8:	f10d 080c 	add.w	r8, sp, #12
 800b6cc:	ab05      	add	r3, sp, #20
 800b6ce:	f8cd 8000 	str.w	r8, [sp]
 800b6d2:	aa1b      	add	r2, sp, #108	@ 0x6c
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f001 f928 	bl	800c92c <acc_translation_a121_translate>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d0ec      	beq.n	800b6ba <acc_radar_engine_a121_reconfigure+0x3e>
 800b6e0:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	a805      	add	r0, sp, #20
 800b6e8:	ab0d      	add	r3, sp, #52	@ 0x34
 800b6ea:	f7ff fedb 	bl	800b4a4 <acc_radar_engine_121_populate_metadata>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d0e3      	beq.n	800b6ba <acc_radar_engine_a121_reconfigure+0x3e>
 800b6f2:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800b6f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800b6f8:	800b      	strh	r3, [r1, #0]
 800b6fa:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800b6fc:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800b700:	800a      	strh	r2, [r1, #0]
 800b702:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800b706:	aa1b      	add	r2, sp, #108	@ 0x6c
 800b708:	4639      	mov	r1, r7
 800b70a:	2014      	movs	r0, #20
 800b70c:	f001 ff82 	bl	800d614 <acc_probes_execute_struct>
 800b710:	4680      	mov	r8, r0
 800b712:	2800      	cmp	r0, #0
 800b714:	d0d1      	beq.n	800b6ba <acc_radar_engine_a121_reconfigure+0x3e>
 800b716:	a91b      	add	r1, sp, #108	@ 0x6c
 800b718:	4620      	mov	r0, r4
 800b71a:	f002 fdb7 	bl	800e28c <acc_cpd_a121_meas_session_is_patch_needed>
 800b71e:	bbc0      	cbnz	r0, 800b792 <acc_radar_engine_a121_reconfigure+0x116>
 800b720:	a91b      	add	r1, sp, #108	@ 0x6c
 800b722:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800b726:	4620      	mov	r0, r4
 800b728:	f005 f957 	bl	80109da <memcpy>
 800b72c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800b730:	bb3b      	cbnz	r3, 800b782 <acc_radar_engine_a121_reconfigure+0x106>
 800b732:	2201      	movs	r2, #1
 800b734:	4633      	mov	r3, r6
 800b736:	f895 104b 	ldrb.w	r1, [r5, #75]	@ 0x4b
 800b73a:	f884 21c6 	strb.w	r2, [r4, #454]	@ 0x1c6
 800b73e:	f833 2b26 	ldrh.w	r2, [r3], #38
 800b742:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 800b746:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 800b74a:	f884 a1c4 	strb.w	sl, [r4, #452]	@ 0x1c4
 800b74e:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 800b752:	f106 0c56 	add.w	ip, r6, #86	@ 0x56
 800b756:	681d      	ldr	r5, [r3, #0]
 800b758:	6858      	ldr	r0, [r3, #4]
 800b75a:	689a      	ldr	r2, [r3, #8]
 800b75c:	68df      	ldr	r7, [r3, #12]
 800b75e:	60cf      	str	r7, [r1, #12]
 800b760:	3310      	adds	r3, #16
 800b762:	4563      	cmp	r3, ip
 800b764:	600d      	str	r5, [r1, #0]
 800b766:	6048      	str	r0, [r1, #4]
 800b768:	608a      	str	r2, [r1, #8]
 800b76a:	f101 0110 	add.w	r1, r1, #16
 800b76e:	d1f2      	bne.n	800b756 <acc_radar_engine_a121_reconfigure+0xda>
 800b770:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 800b774:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 800b778:	4640      	mov	r0, r8
 800b77a:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800b77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b782:	f895 a04e 	ldrb.w	sl, [r5, #78]	@ 0x4e
 800b786:	f1ba 0a00 	subs.w	sl, sl, #0
 800b78a:	bf18      	it	ne
 800b78c:	f04f 0a01 	movne.w	sl, #1
 800b790:	e7cf      	b.n	800b732 <acc_radar_engine_a121_reconfigure+0xb6>
 800b792:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800b798:	464a      	mov	r2, r9
 800b79a:	4638      	mov	r0, r7
 800b79c:	4623      	mov	r3, r4
 800b79e:	f002 fd87 	bl	800e2b0 <acc_cpd_a121_meas_session_update_program>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d089      	beq.n	800b6ba <acc_radar_engine_a121_reconfigure+0x3e>
 800b7a6:	e7bb      	b.n	800b720 <acc_radar_engine_a121_reconfigure+0xa4>
 800b7a8:	200003f0 	.word	0x200003f0
 800b7ac:	08012ce4 	.word	0x08012ce4
 800b7b0:	08012c14 	.word	0x08012c14

0800b7b4 <acc_radar_engine_a121_get_metadata>:
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	b0fe      	sub	sp, #504	@ 0x1f8
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800b7be:	460d      	mov	r5, r1
 800b7c0:	a80d      	add	r0, sp, #52	@ 0x34
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	ae03      	add	r6, sp, #12
 800b7c6:	f005 f87d 	bl	80108c4 <memset>
 800b7ca:	aa0d      	add	r2, sp, #52	@ 0x34
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	ab05      	add	r3, sp, #20
 800b7d0:	9600      	str	r6, [sp, #0]
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	f001 f8aa 	bl	800c92c <acc_translation_a121_translate>
 800b7d8:	b908      	cbnz	r0, 800b7de <acc_radar_engine_a121_get_metadata+0x2a>
 800b7da:	b07e      	add	sp, #504	@ 0x1f8
 800b7dc:	bd70      	pop	{r4, r5, r6, pc}
 800b7de:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800b7e2:	462b      	mov	r3, r5
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	a805      	add	r0, sp, #20
 800b7e8:	f7ff fe5c 	bl	800b4a4 <acc_radar_engine_121_populate_metadata>
 800b7ec:	b07e      	add	sp, #504	@ 0x1f8
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}

0800b7f0 <acc_radar_engine_a121_points_to_meter>:
 800b7f0:	f000 bb60 	b.w	800beb4 <acc_translation_a121_points_to_meter>

0800b7f4 <acc_radar_engine_a121_init_interrupts>:
 800b7f4:	f000 b906 	b.w	800ba04 <acc_sensor_protocol_a121_init_interrupts>

0800b7f8 <acc_radar_engine_a121_hibernate_off>:
 800b7f8:	f000 baf2 	b.w	800bde0 <acc_sensor_protocol_a121_hibernate_off>

0800b7fc <acc_radar_engine_a121_is_hibernate>:
 800b7fc:	f000 bb2a 	b.w	800be54 <acc_sensor_protocol_a121_is_hibernate>

0800b800 <internal_buffer_processed_read.part.0>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	b085      	sub	sp, #20
 800b806:	469a      	mov	sl, r3
 800b808:	2600      	movs	r6, #0
 800b80a:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 800b80e:	9200      	str	r2, [sp, #0]
 800b810:	4683      	mov	fp, r0
 800b812:	4689      	mov	r9, r1
 800b814:	f7ff fb48 	bl	800aea8 <acc_rss_integration_get_max_spi_transfer_size>
 800b818:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800b81c:	f1ba 0f00 	cmp.w	sl, #0
 800b820:	d03e      	beq.n	800b8a0 <internal_buffer_processed_read.part.0+0xa0>
 800b822:	42b4      	cmp	r4, r6
 800b824:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b828:	bf14      	ite	ne
 800b82a:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 800b82e:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 800b832:	f1a0 0804 	sub.w	r8, r0, #4
 800b836:	9301      	str	r3, [sp, #4]
 800b838:	464d      	mov	r5, r9
 800b83a:	4657      	mov	r7, sl
 800b83c:	e025      	b.n	800b88a <internal_buffer_processed_read.part.0+0x8a>
 800b83e:	9b00      	ldr	r3, [sp, #0]
 800b840:	9901      	ldr	r1, [sp, #4]
 800b842:	8029      	strh	r1, [r5, #0]
 800b844:	199a      	adds	r2, r3, r6
 800b846:	f04f 0100 	mov.w	r1, #0
 800b84a:	1e63      	subs	r3, r4, #1
 800b84c:	80e9      	strh	r1, [r5, #6]
 800b84e:	806a      	strh	r2, [r5, #2]
 800b850:	80ab      	strh	r3, [r5, #4]
 800b852:	0062      	lsls	r2, r4, #1
 800b854:	2100      	movs	r1, #0
 800b856:	f105 0008 	add.w	r0, r5, #8
 800b85a:	f005 f833 	bl	80108c4 <memset>
 800b85e:	4629      	mov	r1, r5
 800b860:	2301      	movs	r3, #1
 800b862:	4658      	mov	r0, fp
 800b864:	1d22      	adds	r2, r4, #4
 800b866:	f7ff fb25 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800b86a:	ab02      	add	r3, sp, #8
 800b86c:	cb03      	ldmia	r3!, {r0, r1}
 800b86e:	4426      	add	r6, r4
 800b870:	6069      	str	r1, [r5, #4]
 800b872:	6028      	str	r0, [r5, #0]
 800b874:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 800b878:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 800b87c:	6869      	ldr	r1, [r5, #4]
 800b87e:	ab02      	add	r3, sp, #8
 800b880:	4556      	cmp	r6, sl
 800b882:	c303      	stmia	r3!, {r0, r1}
 800b884:	eba7 0704 	sub.w	r7, r7, r4
 800b888:	d20a      	bcs.n	800b8a0 <internal_buffer_processed_read.part.0+0xa0>
 800b88a:	45b8      	cmp	r8, r7
 800b88c:	4644      	mov	r4, r8
 800b88e:	bf28      	it	cs
 800b890:	463c      	movcs	r4, r7
 800b892:	45b8      	cmp	r8, r7
 800b894:	d2d3      	bcs.n	800b83e <internal_buffer_processed_read.part.0+0x3e>
 800b896:	e000      	b.n	800b89a <internal_buffer_processed_read.part.0+0x9a>
 800b898:	3c01      	subs	r4, #1
 800b89a:	07e3      	lsls	r3, r4, #31
 800b89c:	d4fc      	bmi.n	800b898 <internal_buffer_processed_read.part.0+0x98>
 800b89e:	e7ce      	b.n	800b83e <internal_buffer_processed_read.part.0+0x3e>
 800b8a0:	f109 0008 	add.w	r0, r9, #8
 800b8a4:	b005      	add	sp, #20
 800b8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8aa:	bf00      	nop

0800b8ac <acc_sensor_a121_get_max_header_length>:
 800b8ac:	2004      	movs	r0, #4
 800b8ae:	4770      	bx	lr

0800b8b0 <acc_sensor_a121_conf_write_instr>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	2501      	movs	r5, #1
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	f441 43a0 	orr.w	r3, r1, #20480	@ 0x5000
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4616      	mov	r6, r2
 800b8be:	a903      	add	r1, sp, #12
 800b8c0:	462a      	mov	r2, r5
 800b8c2:	a801      	add	r0, sp, #4
 800b8c4:	f8ad 3008 	strh.w	r3, [sp, #8]
 800b8c8:	9601      	str	r6, [sp, #4]
 800b8ca:	f8ad 500a 	strh.w	r5, [sp, #10]
 800b8ce:	f002 f847 	bl	800d960 <acc_utils_uint32_to_transfer_buffer>
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	a902      	add	r1, sp, #8
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2204      	movs	r2, #4
 800b8da:	f7ff faeb 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800b8de:	b004      	add	sp, #16
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
 800b8e2:	bf00      	nop

0800b8e4 <acc_sensor_a121_prepare_load_confmem>:
 800b8e4:	0849      	lsrs	r1, r1, #1
 800b8e6:	b570      	push	{r4, r5, r6, lr}
 800b8e8:	6019      	str	r1, [r3, #0]
 800b8ea:	461c      	mov	r4, r3
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	4616      	mov	r6, r2
 800b8f0:	f7ff fada 	bl	800aea8 <acc_rss_integration_get_max_spi_transfer_size>
 800b8f4:	6821      	ldr	r1, [r4, #0]
 800b8f6:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800b8fa:	d806      	bhi.n	800b90a <acc_sensor_a121_prepare_load_confmem+0x26>
 800b8fc:	3902      	subs	r1, #2
 800b8fe:	f021 0101 	bic.w	r1, r1, #1
 800b902:	3504      	adds	r5, #4
 800b904:	6035      	str	r5, [r6, #0]
 800b906:	6021      	str	r1, [r4, #0]
 800b908:	bd70      	pop	{r4, r5, r6, pc}
 800b90a:	f7ff facd 	bl	800aea8 <acc_rss_integration_get_max_spi_transfer_size>
 800b90e:	0841      	lsrs	r1, r0, #1
 800b910:	e7f4      	b.n	800b8fc <acc_sensor_a121_prepare_load_confmem+0x18>
 800b912:	bf00      	nop

0800b914 <acc_sensor_a121_load_confmem>:
 800b914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b918:	f103 0802 	add.w	r8, r3, #2
 800b91c:	461c      	mov	r4, r3
 800b91e:	4607      	mov	r7, r0
 800b920:	460e      	mov	r6, r1
 800b922:	4615      	mov	r5, r2
 800b924:	f7ff fac0 	bl	800aea8 <acc_rss_integration_get_max_spi_transfer_size>
 800b928:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 800b92c:	d207      	bcs.n	800b93e <acc_sensor_a121_load_confmem+0x2a>
 800b92e:	4b0b      	ldr	r3, [pc, #44]	@ (800b95c <acc_sensor_a121_load_confmem+0x48>)
 800b930:	4a0b      	ldr	r2, [pc, #44]	@ (800b960 <acc_sensor_a121_load_confmem+0x4c>)
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	490b      	ldr	r1, [pc, #44]	@ (800b964 <acc_sensor_a121_load_confmem+0x50>)
 800b936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b93a:	2000      	movs	r0, #0
 800b93c:	4718      	bx	r3
 800b93e:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 800b942:	3c01      	subs	r4, #1
 800b944:	8029      	strh	r1, [r5, #0]
 800b946:	806c      	strh	r4, [r5, #2]
 800b948:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 800b94c:	4629      	mov	r1, r5
 800b94e:	4638      	mov	r0, r7
 800b950:	2300      	movs	r3, #0
 800b952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b956:	f7ff baad 	b.w	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800b95a:	bf00      	nop
 800b95c:	200003f0 	.word	0x200003f0
 800b960:	08012d50 	.word	0x08012d50
 800b964:	08012d3c 	.word	0x08012d3c

0800b968 <acc_sensor_a121_buffer_processed_read>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b96e:	b082      	sub	sp, #8
 800b970:	d805      	bhi.n	800b97e <acc_sensor_a121_buffer_processed_read+0x16>
 800b972:	2400      	movs	r4, #0
 800b974:	9400      	str	r4, [sp, #0]
 800b976:	f7ff ff43 	bl	800b800 <internal_buffer_processed_read.part.0>
 800b97a:	b002      	add	sp, #8
 800b97c:	bd10      	pop	{r4, pc}
 800b97e:	4b04      	ldr	r3, [pc, #16]	@ (800b990 <acc_sensor_a121_buffer_processed_read+0x28>)
 800b980:	4a04      	ldr	r2, [pc, #16]	@ (800b994 <acc_sensor_a121_buffer_processed_read+0x2c>)
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	4904      	ldr	r1, [pc, #16]	@ (800b998 <acc_sensor_a121_buffer_processed_read+0x30>)
 800b986:	2000      	movs	r0, #0
 800b988:	4798      	blx	r3
 800b98a:	2000      	movs	r0, #0
 800b98c:	b002      	add	sp, #8
 800b98e:	bd10      	pop	{r4, pc}
 800b990:	200003f0 	.word	0x200003f0
 800b994:	08012d70 	.word	0x08012d70
 800b998:	08012d3c 	.word	0x08012d3c

0800b99c <acc_sensor_a121_lut_buffer_write>:
 800b99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	4681      	mov	r9, r0
 800b9a8:	4698      	mov	r8, r3
 800b9aa:	f7ff fa7d 	bl	800aea8 <acc_rss_integration_get_max_spi_transfer_size>
 800b9ae:	3c04      	subs	r4, #4
 800b9b0:	1f07      	subs	r7, r0, #4
 800b9b2:	0864      	lsrs	r4, r4, #1
 800b9b4:	087f      	lsrs	r7, r7, #1
 800b9b6:	42a7      	cmp	r7, r4
 800b9b8:	bf28      	it	cs
 800b9ba:	4627      	movcs	r7, r4
 800b9bc:	f105 0a04 	add.w	sl, r5, #4
 800b9c0:	2400      	movs	r4, #0
 800b9c2:	1b33      	subs	r3, r6, r4
 800b9c4:	42bb      	cmp	r3, r7
 800b9c6:	bf28      	it	cs
 800b9c8:	463b      	movcs	r3, r7
 800b9ca:	1e5a      	subs	r2, r3, #1
 800b9cc:	eb08 0104 	add.w	r1, r8, r4
 800b9d0:	469b      	mov	fp, r3
 800b9d2:	806a      	strh	r2, [r5, #2]
 800b9d4:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 800b9d8:	005a      	lsls	r2, r3, #1
 800b9da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9dc:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 800b9e0:	8029      	strh	r1, [r5, #0]
 800b9e2:	4650      	mov	r0, sl
 800b9e4:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800b9e8:	f004 fff7 	bl	80109da <memcpy>
 800b9ec:	445c      	add	r4, fp
 800b9ee:	f10b 0202 	add.w	r2, fp, #2
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4648      	mov	r0, r9
 800b9f8:	f7ff fa5c 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800b9fc:	42a6      	cmp	r6, r4
 800b9fe:	d8e0      	bhi.n	800b9c2 <acc_sensor_a121_lut_buffer_write+0x26>
 800ba00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba04 <acc_sensor_protocol_a121_init_interrupts>:
 800ba04:	b530      	push	{r4, r5, lr}
 800ba06:	b083      	sub	sp, #12
 800ba08:	2500      	movs	r5, #0
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	9500      	str	r5, [sp, #0]
 800ba0e:	237b      	movs	r3, #123	@ 0x7b
 800ba10:	22ff      	movs	r2, #255	@ 0xff
 800ba12:	4604      	mov	r4, r0
 800ba14:	f001 fe3c 	bl	800d690 <acc_sensor_reg_field_write>
 800ba18:	2101      	movs	r1, #1
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	9100      	str	r1, [sp, #0]
 800ba1e:	238b      	movs	r3, #139	@ 0x8b
 800ba20:	2202      	movs	r2, #2
 800ba22:	f001 fe35 	bl	800d690 <acc_sensor_reg_field_write>
 800ba26:	9500      	str	r5, [sp, #0]
 800ba28:	4620      	mov	r0, r4
 800ba2a:	238b      	movs	r3, #139	@ 0x8b
 800ba2c:	2280      	movs	r2, #128	@ 0x80
 800ba2e:	2107      	movs	r1, #7
 800ba30:	f001 fe2e 	bl	800d690 <acc_sensor_reg_field_write>
 800ba34:	b003      	add	sp, #12
 800ba36:	bd30      	pop	{r4, r5, pc}

0800ba38 <acc_sensor_protocol_a121_prepare_load>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	f10d 0206 	add.w	r2, sp, #6
 800ba40:	2400      	movs	r4, #0
 800ba42:	2137      	movs	r1, #55	@ 0x37
 800ba44:	4605      	mov	r5, r0
 800ba46:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ba4a:	f001 fdfb 	bl	800d644 <acc_sensor_reg_read>
 800ba4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ba52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba56:	b9b3      	cbnz	r3, 800ba86 <acc_sensor_protocol_a121_prepare_load+0x4e>
 800ba58:	f10d 0206 	add.w	r2, sp, #6
 800ba5c:	2400      	movs	r4, #0
 800ba5e:	211c      	movs	r1, #28
 800ba60:	4628      	mov	r0, r5
 800ba62:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ba66:	f001 fded 	bl	800d644 <acc_sensor_reg_read>
 800ba6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ba6e:	051b      	lsls	r3, r3, #20
 800ba70:	d515      	bpl.n	800ba9e <acc_sensor_protocol_a121_prepare_load+0x66>
 800ba72:	4b0e      	ldr	r3, [pc, #56]	@ (800baac <acc_sensor_protocol_a121_prepare_load+0x74>)
 800ba74:	4a0e      	ldr	r2, [pc, #56]	@ (800bab0 <acc_sensor_protocol_a121_prepare_load+0x78>)
 800ba76:	691e      	ldr	r6, [r3, #16]
 800ba78:	490e      	ldr	r1, [pc, #56]	@ (800bab4 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	462b      	mov	r3, r5
 800ba7e:	47b0      	blx	r6
 800ba80:	4620      	mov	r0, r4
 800ba82:	b002      	add	sp, #8
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	f7ff fa8f 	bl	800afa8 <acc_rss_integration_log_level>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d0e4      	beq.n	800ba58 <acc_sensor_protocol_a121_prepare_load+0x20>
 800ba8e:	4b07      	ldr	r3, [pc, #28]	@ (800baac <acc_sensor_protocol_a121_prepare_load+0x74>)
 800ba90:	4a09      	ldr	r2, [pc, #36]	@ (800bab8 <acc_sensor_protocol_a121_prepare_load+0x80>)
 800ba92:	691c      	ldr	r4, [r3, #16]
 800ba94:	4907      	ldr	r1, [pc, #28]	@ (800bab4 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800ba96:	462b      	mov	r3, r5
 800ba98:	2001      	movs	r0, #1
 800ba9a:	47a0      	blx	r4
 800ba9c:	e7dc      	b.n	800ba58 <acc_sensor_protocol_a121_prepare_load+0x20>
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f7ff ffb0 	bl	800ba04 <acc_sensor_protocol_a121_init_interrupts>
 800baa4:	2001      	movs	r0, #1
 800baa6:	b002      	add	sp, #8
 800baa8:	bd70      	pop	{r4, r5, r6, pc}
 800baaa:	bf00      	nop
 800baac:	200003f0 	.word	0x200003f0
 800bab0:	08012dcc 	.word	0x08012dcc
 800bab4:	08012db4 	.word	0x08012db4
 800bab8:	08012d88 	.word	0x08012d88

0800babc <acc_sensor_protocol_a121_is_ready_to_update>:
 800babc:	b500      	push	{lr}
 800babe:	b083      	sub	sp, #12
 800bac0:	2300      	movs	r3, #0
 800bac2:	f10d 0206 	add.w	r2, sp, #6
 800bac6:	2137      	movs	r1, #55	@ 0x37
 800bac8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bacc:	f001 fdba 	bl	800d644 <acc_sensor_reg_read>
 800bad0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bad4:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 800bad8:	3800      	subs	r0, #0
 800bada:	bf18      	it	ne
 800badc:	2001      	movne	r0, #1
 800bade:	b003      	add	sp, #12
 800bae0:	f85d fb04 	ldr.w	pc, [sp], #4

0800bae4 <acc_sensor_protocol_a121_run_program>:
 800bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bae6:	b083      	sub	sp, #12
 800bae8:	f10d 0206 	add.w	r2, sp, #6
 800baec:	460e      	mov	r6, r1
 800baee:	2400      	movs	r4, #0
 800baf0:	211c      	movs	r1, #28
 800baf2:	4607      	mov	r7, r0
 800baf4:	f8ad 4006 	strh.w	r4, [sp, #6]
 800baf8:	f001 fda4 	bl	800d644 <acc_sensor_reg_read>
 800bafc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb00:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 800bb04:	d10c      	bne.n	800bb20 <acc_sensor_protocol_a121_run_program+0x3c>
 800bb06:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800bb0a:	d313      	bcc.n	800bb34 <acc_sensor_protocol_a121_run_program+0x50>
 800bb0c:	4b10      	ldr	r3, [pc, #64]	@ (800bb50 <acc_sensor_protocol_a121_run_program+0x6c>)
 800bb0e:	4a11      	ldr	r2, [pc, #68]	@ (800bb54 <acc_sensor_protocol_a121_run_program+0x70>)
 800bb10:	691c      	ldr	r4, [r3, #16]
 800bb12:	4911      	ldr	r1, [pc, #68]	@ (800bb58 <acc_sensor_protocol_a121_run_program+0x74>)
 800bb14:	4628      	mov	r0, r5
 800bb16:	4633      	mov	r3, r6
 800bb18:	47a0      	blx	r4
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	b003      	add	sp, #12
 800bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb20:	4b0b      	ldr	r3, [pc, #44]	@ (800bb50 <acc_sensor_protocol_a121_run_program+0x6c>)
 800bb22:	4a0e      	ldr	r2, [pc, #56]	@ (800bb5c <acc_sensor_protocol_a121_run_program+0x78>)
 800bb24:	691d      	ldr	r5, [r3, #16]
 800bb26:	490c      	ldr	r1, [pc, #48]	@ (800bb58 <acc_sensor_protocol_a121_run_program+0x74>)
 800bb28:	4620      	mov	r0, r4
 800bb2a:	463b      	mov	r3, r7
 800bb2c:	47a8      	blx	r5
 800bb2e:	4620      	mov	r0, r4
 800bb30:	b003      	add	sp, #12
 800bb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb34:	462a      	mov	r2, r5
 800bb36:	4638      	mov	r0, r7
 800bb38:	211b      	movs	r1, #27
 800bb3a:	f001 fd99 	bl	800d670 <acc_sensor_reg_write>
 800bb3e:	4638      	mov	r0, r7
 800bb40:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 800bb44:	211b      	movs	r1, #27
 800bb46:	f001 fd93 	bl	800d670 <acc_sensor_reg_write>
 800bb4a:	2001      	movs	r0, #1
 800bb4c:	b003      	add	sp, #12
 800bb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb50:	200003f0 	.word	0x200003f0
 800bb54:	08012e2c 	.word	0x08012e2c
 800bb58:	08012db4 	.word	0x08012db4
 800bb5c:	08012dfc 	.word	0x08012dfc

0800bb60 <acc_sensor_protocol_a121_load_lut>:
 800bb60:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb62:	d809      	bhi.n	800bb78 <acc_sensor_protocol_a121_load_lut+0x18>
 800bb64:	b530      	push	{r4, r5, lr}
 800bb66:	b083      	sub	sp, #12
 800bb68:	461c      	mov	r4, r3
 800bb6a:	9d07      	ldr	r5, [sp, #28]
 800bb6c:	442c      	add	r4, r5
 800bb6e:	2c80      	cmp	r4, #128	@ 0x80
 800bb70:	d904      	bls.n	800bb7c <acc_sensor_protocol_a121_load_lut+0x1c>
 800bb72:	2000      	movs	r0, #0
 800bb74:	b003      	add	sp, #12
 800bb76:	bd30      	pop	{r4, r5, pc}
 800bb78:	2000      	movs	r0, #0
 800bb7a:	4770      	bx	lr
 800bb7c:	9c06      	ldr	r4, [sp, #24]
 800bb7e:	9501      	str	r5, [sp, #4]
 800bb80:	9400      	str	r4, [sp, #0]
 800bb82:	f7ff ff0b 	bl	800b99c <acc_sensor_a121_lut_buffer_write>
 800bb86:	2001      	movs	r0, #1
 800bb88:	b003      	add	sp, #12
 800bb8a:	bd30      	pop	{r4, r5, pc}

0800bb8c <acc_sensor_protocol_a121_is_sensor_running>:
 800bb8c:	b500      	push	{lr}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	2300      	movs	r3, #0
 800bb92:	f10d 0206 	add.w	r2, sp, #6
 800bb96:	211c      	movs	r1, #28
 800bb98:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bb9c:	f001 fd52 	bl	800d644 <acc_sensor_reg_read>
 800bba0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800bba4:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800bba8:	b003      	add	sp, #12
 800bbaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbae:	bf00      	nop

0800bbb0 <acc_sensor_protocol_a121_is_event_pending>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	460c      	mov	r4, r1
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f10d 0206 	add.w	r2, sp, #6
 800bbbc:	2137      	movs	r1, #55	@ 0x37
 800bbbe:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bbc2:	f001 fd3f 	bl	800d644 <acc_sensor_reg_read>
 800bbc6:	2c01      	cmp	r4, #1
 800bbc8:	d00b      	beq.n	800bbe2 <acc_sensor_protocol_a121_is_event_pending+0x32>
 800bbca:	2c02      	cmp	r4, #2
 800bbcc:	bf14      	ite	ne
 800bbce:	23c0      	movne	r3, #192	@ 0xc0
 800bbd0:	2380      	moveq	r3, #128	@ 0x80
 800bbd2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bbd6:	4213      	tst	r3, r2
 800bbd8:	bf14      	ite	ne
 800bbda:	2001      	movne	r0, #1
 800bbdc:	2000      	moveq	r0, #0
 800bbde:	b002      	add	sp, #8
 800bbe0:	bd10      	pop	{r4, pc}
 800bbe2:	2340      	movs	r3, #64	@ 0x40
 800bbe4:	e7f5      	b.n	800bbd2 <acc_sensor_protocol_a121_is_event_pending+0x22>
 800bbe6:	bf00      	nop

0800bbe8 <acc_sensor_protocol_a121_ack_event>:
 800bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbea:	b083      	sub	sp, #12
 800bbec:	2400      	movs	r4, #0
 800bbee:	2901      	cmp	r1, #1
 800bbf0:	4607      	mov	r7, r0
 800bbf2:	4616      	mov	r6, r2
 800bbf4:	f8ad 4006 	strh.w	r4, [sp, #6]
 800bbf8:	d019      	beq.n	800bc2e <acc_sensor_protocol_a121_ack_event+0x46>
 800bbfa:	2902      	cmp	r1, #2
 800bbfc:	d009      	beq.n	800bc12 <acc_sensor_protocol_a121_ack_event+0x2a>
 800bbfe:	4b1a      	ldr	r3, [pc, #104]	@ (800bc68 <acc_sensor_protocol_a121_ack_event+0x80>)
 800bc00:	4a1a      	ldr	r2, [pc, #104]	@ (800bc6c <acc_sensor_protocol_a121_ack_event+0x84>)
 800bc02:	691d      	ldr	r5, [r3, #16]
 800bc04:	491a      	ldr	r1, [pc, #104]	@ (800bc70 <acc_sensor_protocol_a121_ack_event+0x88>)
 800bc06:	4603      	mov	r3, r0
 800bc08:	4620      	mov	r0, r4
 800bc0a:	47a8      	blx	r5
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	b003      	add	sp, #12
 800bc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc12:	2146      	movs	r1, #70	@ 0x46
 800bc14:	f10d 0206 	add.w	r2, sp, #6
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f001 fd13 	bl	800d644 <acc_sensor_reg_read>
 800bc1e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800bc22:	2484      	movs	r4, #132	@ 0x84
 800bc24:	b175      	cbz	r5, 800bc44 <acc_sensor_protocol_a121_ack_event+0x5c>
 800bc26:	b9be      	cbnz	r6, 800bc58 <acc_sensor_protocol_a121_ack_event+0x70>
 800bc28:	2001      	movs	r0, #1
 800bc2a:	b003      	add	sp, #12
 800bc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc2e:	2145      	movs	r1, #69	@ 0x45
 800bc30:	f10d 0206 	add.w	r2, sp, #6
 800bc34:	4638      	mov	r0, r7
 800bc36:	f001 fd05 	bl	800d644 <acc_sensor_reg_read>
 800bc3a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800bc3e:	2483      	movs	r4, #131	@ 0x83
 800bc40:	2d00      	cmp	r5, #0
 800bc42:	d1f0      	bne.n	800bc26 <acc_sensor_protocol_a121_ack_event+0x3e>
 800bc44:	4b08      	ldr	r3, [pc, #32]	@ (800bc68 <acc_sensor_protocol_a121_ack_event+0x80>)
 800bc46:	4a0b      	ldr	r2, [pc, #44]	@ (800bc74 <acc_sensor_protocol_a121_ack_event+0x8c>)
 800bc48:	691c      	ldr	r4, [r3, #16]
 800bc4a:	4909      	ldr	r1, [pc, #36]	@ (800bc70 <acc_sensor_protocol_a121_ack_event+0x88>)
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	463b      	mov	r3, r7
 800bc50:	47a0      	blx	r4
 800bc52:	4628      	mov	r0, r5
 800bc54:	b003      	add	sp, #12
 800bc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc58:	4638      	mov	r0, r7
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f001 fd07 	bl	800d670 <acc_sensor_reg_write>
 800bc62:	4630      	mov	r0, r6
 800bc64:	e7d3      	b.n	800bc0e <acc_sensor_protocol_a121_ack_event+0x26>
 800bc66:	bf00      	nop
 800bc68:	200003f0 	.word	0x200003f0
 800bc6c:	08012e48 	.word	0x08012e48
 800bc70:	08012db4 	.word	0x08012db4
 800bc74:	08012e64 	.word	0x08012e64

0800bc78 <acc_sensor_protocol_a121_get_event>:
 800bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	2400      	movs	r4, #0
 800bc7e:	4615      	mov	r5, r2
 800bc80:	f8ad 400e 	strh.w	r4, [sp, #14]
 800bc84:	2a00      	cmp	r2, #0
 800bc86:	d03d      	beq.n	800bd04 <acc_sensor_protocol_a121_get_event+0x8c>
 800bc88:	2901      	cmp	r1, #1
 800bc8a:	4607      	mov	r7, r0
 800bc8c:	d028      	beq.n	800bce0 <acc_sensor_protocol_a121_get_event+0x68>
 800bc8e:	2902      	cmp	r1, #2
 800bc90:	d11d      	bne.n	800bcce <acc_sensor_protocol_a121_get_event+0x56>
 800bc92:	2132      	movs	r1, #50	@ 0x32
 800bc94:	2401      	movs	r4, #1
 800bc96:	f10d 020e 	add.w	r2, sp, #14
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	f001 fcd2 	bl	800d644 <acc_sensor_reg_read>
 800bca0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800bca4:	806b      	strh	r3, [r5, #2]
 800bca6:	f003 0607 	and.w	r6, r3, #7
 800bcaa:	2e01      	cmp	r6, #1
 800bcac:	802e      	strh	r6, [r5, #0]
 800bcae:	d033      	beq.n	800bd18 <acc_sensor_protocol_a121_get_event+0xa0>
 800bcb0:	f013 0f06 	tst.w	r3, #6
 800bcb4:	d117      	bne.n	800bce6 <acc_sensor_protocol_a121_get_event+0x6e>
 800bcb6:	b9ce      	cbnz	r6, 800bcec <acc_sensor_protocol_a121_get_event+0x74>
 800bcb8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd30 <acc_sensor_protocol_a121_get_event+0xb8>)
 800bcba:	9700      	str	r7, [sp, #0]
 800bcbc:	6914      	ldr	r4, [r2, #16]
 800bcbe:	491d      	ldr	r1, [pc, #116]	@ (800bd34 <acc_sensor_protocol_a121_get_event+0xbc>)
 800bcc0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd38 <acc_sensor_protocol_a121_get_event+0xc0>)
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	47a0      	blx	r4
 800bcc6:	4634      	mov	r4, r6
 800bcc8:	4620      	mov	r0, r4
 800bcca:	b005      	add	sp, #20
 800bccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcce:	4b18      	ldr	r3, [pc, #96]	@ (800bd30 <acc_sensor_protocol_a121_get_event+0xb8>)
 800bcd0:	4918      	ldr	r1, [pc, #96]	@ (800bd34 <acc_sensor_protocol_a121_get_event+0xbc>)
 800bcd2:	691e      	ldr	r6, [r3, #16]
 800bcd4:	4a19      	ldr	r2, [pc, #100]	@ (800bd3c <acc_sensor_protocol_a121_get_event+0xc4>)
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	4620      	mov	r0, r4
 800bcda:	47b0      	blx	r6
 800bcdc:	4621      	mov	r1, r4
 800bcde:	e7da      	b.n	800bc96 <acc_sensor_protocol_a121_get_event+0x1e>
 800bce0:	460c      	mov	r4, r1
 800bce2:	2133      	movs	r1, #51	@ 0x33
 800bce4:	e7d7      	b.n	800bc96 <acc_sensor_protocol_a121_get_event+0x1e>
 800bce6:	3e02      	subs	r6, #2
 800bce8:	2e01      	cmp	r6, #1
 800bcea:	d9ed      	bls.n	800bcc8 <acc_sensor_protocol_a121_get_event+0x50>
 800bcec:	4a10      	ldr	r2, [pc, #64]	@ (800bd30 <acc_sensor_protocol_a121_get_event+0xb8>)
 800bcee:	9700      	str	r7, [sp, #0]
 800bcf0:	6914      	ldr	r4, [r2, #16]
 800bcf2:	4910      	ldr	r1, [pc, #64]	@ (800bd34 <acc_sensor_protocol_a121_get_event+0xbc>)
 800bcf4:	4a12      	ldr	r2, [pc, #72]	@ (800bd40 <acc_sensor_protocol_a121_get_event+0xc8>)
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	47a0      	blx	r4
 800bcfa:	2400      	movs	r4, #0
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	802c      	strh	r4, [r5, #0]
 800bd00:	b005      	add	sp, #20
 800bd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd04:	4b0a      	ldr	r3, [pc, #40]	@ (800bd30 <acc_sensor_protocol_a121_get_event+0xb8>)
 800bd06:	4a0f      	ldr	r2, [pc, #60]	@ (800bd44 <acc_sensor_protocol_a121_get_event+0xcc>)
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	490a      	ldr	r1, [pc, #40]	@ (800bd34 <acc_sensor_protocol_a121_get_event+0xbc>)
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	4798      	blx	r3
 800bd10:	462c      	mov	r4, r5
 800bd12:	4620      	mov	r0, r4
 800bd14:	b005      	add	sp, #20
 800bd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd18:	4a05      	ldr	r2, [pc, #20]	@ (800bd30 <acc_sensor_protocol_a121_get_event+0xb8>)
 800bd1a:	9700      	str	r7, [sp, #0]
 800bd1c:	6914      	ldr	r4, [r2, #16]
 800bd1e:	4905      	ldr	r1, [pc, #20]	@ (800bd34 <acc_sensor_protocol_a121_get_event+0xbc>)
 800bd20:	4a09      	ldr	r2, [pc, #36]	@ (800bd48 <acc_sensor_protocol_a121_get_event+0xd0>)
 800bd22:	2000      	movs	r0, #0
 800bd24:	47a0      	blx	r4
 800bd26:	2400      	movs	r4, #0
 800bd28:	4620      	mov	r0, r4
 800bd2a:	b005      	add	sp, #20
 800bd2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	200003f0 	.word	0x200003f0
 800bd34:	08012db4 	.word	0x08012db4
 800bd38:	08012eac 	.word	0x08012eac
 800bd3c:	08012e48 	.word	0x08012e48
 800bd40:	08012f10 	.word	0x08012f10
 800bd44:	08012e98 	.word	0x08012e98
 800bd48:	08012edc 	.word	0x08012edc

0800bd4c <acc_sensor_protocol_a121_is_handshake>:
 800bd4c:	8800      	ldrh	r0, [r0, #0]
 800bd4e:	f1a0 0003 	sub.w	r0, r0, #3
 800bd52:	fab0 f080 	clz	r0, r0
 800bd56:	0940      	lsrs	r0, r0, #5
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop

0800bd5c <acc_sensor_protocol_a121_is_done>:
 800bd5c:	8800      	ldrh	r0, [r0, #0]
 800bd5e:	f1a0 0002 	sub.w	r0, r0, #2
 800bd62:	fab0 f080 	clz	r0, r0
 800bd66:	0940      	lsrs	r0, r0, #5
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop

0800bd6c <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 800bd6c:	8840      	ldrh	r0, [r0, #2]
 800bd6e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800bd72:	4770      	bx	lr

0800bd74 <acc_sensor_protocol_a121_check_asic_id>:
 800bd74:	b570      	push	{r4, r5, r6, lr}
 800bd76:	2300      	movs	r3, #0
 800bd78:	b082      	sub	sp, #8
 800bd7a:	f10d 0206 	add.w	r2, sp, #6
 800bd7e:	460d      	mov	r5, r1
 800bd80:	4619      	mov	r1, r3
 800bd82:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bd86:	4604      	mov	r4, r0
 800bd88:	f001 fc5c 	bl	800d644 <acc_sensor_reg_read>
 800bd8c:	480f      	ldr	r0, [pc, #60]	@ (800bdcc <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800bd8e:	f001 ff5d 	bl	800dc4c <acc_diagnostic_log_set_scope>
 800bd92:	4621      	mov	r1, r4
 800bd94:	480e      	ldr	r0, [pc, #56]	@ (800bdd0 <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 800bd96:	f001 ff69 	bl	800dc6c <acc_diagnostic_log_scalar>
 800bd9a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800bd9e:	480b      	ldr	r0, [pc, #44]	@ (800bdcc <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800bda0:	f001 ff64 	bl	800dc6c <acc_diagnostic_log_scalar>
 800bda4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bda8:	f241 2210 	movw	r2, #4624	@ 0x1210
 800bdac:	4293      	cmp	r3, r2
 800bdae:	bf0c      	ite	eq
 800bdb0:	2401      	moveq	r4, #1
 800bdb2:	2400      	movne	r4, #0
 800bdb4:	d006      	beq.n	800bdc4 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800bdb6:	b92d      	cbnz	r5, 800bdc4 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800bdb8:	4906      	ldr	r1, [pc, #24]	@ (800bdd4 <acc_sensor_protocol_a121_check_asic_id+0x60>)
 800bdba:	4a07      	ldr	r2, [pc, #28]	@ (800bdd8 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 800bdbc:	690e      	ldr	r6, [r1, #16]
 800bdbe:	4907      	ldr	r1, [pc, #28]	@ (800bddc <acc_sensor_protocol_a121_check_asic_id+0x68>)
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	47b0      	blx	r6
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	b002      	add	sp, #8
 800bdc8:	bd70      	pop	{r4, r5, r6, pc}
 800bdca:	bf00      	nop
 800bdcc:	08012f44 	.word	0x08012f44
 800bdd0:	08012648 	.word	0x08012648
 800bdd4:	200003f0 	.word	0x200003f0
 800bdd8:	08012f4c 	.word	0x08012f4c
 800bddc:	08012db4 	.word	0x08012db4

0800bde0 <acc_sensor_protocol_a121_hibernate_off>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	2203      	movs	r2, #3
 800bde6:	460e      	mov	r6, r1
 800bde8:	2100      	movs	r1, #0
 800bdea:	460d      	mov	r5, r1
 800bdec:	4604      	mov	r4, r0
 800bdee:	9200      	str	r2, [sp, #0]
 800bdf0:	f240 1349 	movw	r3, #329	@ 0x149
 800bdf4:	f001 fc4c 	bl	800d690 <acc_sensor_reg_field_write>
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f240 1349 	movw	r3, #329	@ 0x149
 800bdfe:	2204      	movs	r2, #4
 800be00:	2102      	movs	r1, #2
 800be02:	9500      	str	r5, [sp, #0]
 800be04:	f001 fc44 	bl	800d690 <acc_sensor_reg_field_write>
 800be08:	4620      	mov	r0, r4
 800be0a:	f240 1349 	movw	r3, #329	@ 0x149
 800be0e:	2210      	movs	r2, #16
 800be10:	2104      	movs	r1, #4
 800be12:	9500      	str	r5, [sp, #0]
 800be14:	f001 fc3c 	bl	800d690 <acc_sensor_reg_field_write>
 800be18:	4620      	mov	r0, r4
 800be1a:	f240 1349 	movw	r3, #329	@ 0x149
 800be1e:	2220      	movs	r2, #32
 800be20:	2105      	movs	r1, #5
 800be22:	9500      	str	r5, [sp, #0]
 800be24:	f001 fc34 	bl	800d690 <acc_sensor_reg_field_write>
 800be28:	9500      	str	r5, [sp, #0]
 800be2a:	4620      	mov	r0, r4
 800be2c:	f240 1349 	movw	r3, #329	@ 0x149
 800be30:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 800be34:	2106      	movs	r1, #6
 800be36:	f001 fc2b 	bl	800d690 <acc_sensor_reg_field_write>
 800be3a:	b90e      	cbnz	r6, 800be40 <acc_sensor_protocol_a121_hibernate_off+0x60>
 800be3c:	b002      	add	sp, #8
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	4620      	mov	r0, r4
 800be42:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 800be46:	2131      	movs	r1, #49	@ 0x31
 800be48:	b002      	add	sp, #8
 800be4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be4e:	f001 bc0f 	b.w	800d670 <acc_sensor_reg_write>
 800be52:	bf00      	nop

0800be54 <acc_sensor_protocol_a121_is_hibernate>:
 800be54:	b500      	push	{lr}
 800be56:	b083      	sub	sp, #12
 800be58:	2300      	movs	r3, #0
 800be5a:	f10d 0206 	add.w	r2, sp, #6
 800be5e:	2131      	movs	r1, #49	@ 0x31
 800be60:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be64:	f001 fbee 	bl	800d644 <acc_sensor_reg_read>
 800be68:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800be6c:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 800be70:	1ac0      	subs	r0, r0, r3
 800be72:	fab0 f080 	clz	r0, r0
 800be76:	0940      	lsrs	r0, r0, #5
 800be78:	b003      	add	sp, #12
 800be7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800be7e:	bf00      	nop

0800be80 <acc_sensor_protocol_a121_reconfigure>:
 800be80:	b508      	push	{r3, lr}
 800be82:	2201      	movs	r2, #1
 800be84:	2180      	movs	r1, #128	@ 0x80
 800be86:	f001 fbf3 	bl	800d670 <acc_sensor_reg_write>
 800be8a:	2001      	movs	r0, #1
 800be8c:	bd08      	pop	{r3, pc}
 800be8e:	bf00      	nop

0800be90 <get_pll_freq>:
 800be90:	b508      	push	{r3, lr}
 800be92:	ed2d 8b02 	vpush	{d8}
 800be96:	f7ff f801 	bl	800ae9c <acc_rss_integration_get_sensor_reference_frequency>
 800be9a:	ee07 0a90 	vmov	s15, r0
 800be9e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800bea2:	eeb0 0a48 	vmov.f32	s0, s16
 800bea6:	f001 fd1b 	bl	800d8e0 <acc_cpd_pll_divisors_ref_divisor>
 800beaa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800beae:	ecbd 8b02 	vpop	{d8}
 800beb2:	bd08      	pop	{r3, pc}

0800beb4 <acc_translation_a121_points_to_meter>:
 800beb4:	b508      	push	{r3, lr}
 800beb6:	ed2d 8b02 	vpush	{d8}
 800beba:	ee08 0a10 	vmov	s16, r0
 800bebe:	f7ff ffe7 	bl	800be90 <get_pll_freq>
 800bec2:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 800bec6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800beca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bece:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bed2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800bed6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800bef0 <acc_translation_a121_points_to_meter+0x3c>
 800beda:	ee67 7a88 	vmul.f32	s15, s15, s16
 800bede:	ecbd 8b02 	vpop	{d8}
 800bee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bee6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800beea:	ee27 0a80 	vmul.f32	s0, s15, s0
 800beee:	bd08      	pop	{r3, pc}
 800bef0:	4d8ef3c2 	.word	0x4d8ef3c2

0800bef4 <acc_translation_a121_profile_to_pulse_params>:
 800bef4:	2300      	movs	r3, #0
 800bef6:	3801      	subs	r0, #1
 800bef8:	b430      	push	{r4, r5}
 800befa:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800befe:	60d3      	str	r3, [r2, #12]
 800bf00:	2804      	cmp	r0, #4
 800bf02:	d836      	bhi.n	800bf72 <acc_translation_a121_profile_to_pulse_params+0x7e>
 800bf04:	e8df f000 	tbb	[pc, r0]
 800bf08:	2d291b0d 	.word	0x2d291b0d
 800bf0c:	03          	.byte	0x03
 800bf0d:	00          	.byte	0x00
 800bf0e:	4b1c      	ldr	r3, [pc, #112]	@ (800bf80 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 800bf10:	491c      	ldr	r1, [pc, #112]	@ (800bf84 <acc_translation_a121_profile_to_pulse_params+0x90>)
 800bf12:	2000      	movs	r0, #0
 800bf14:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800bf18:	7010      	strb	r0, [r2, #0]
 800bf1a:	61d1      	str	r1, [r2, #28]
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	bc30      	pop	{r4, r5}
 800bf20:	4770      	bx	lr
 800bf22:	2001      	movs	r0, #1
 800bf24:	2400      	movs	r4, #0
 800bf26:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800bf2a:	7014      	strb	r4, [r2, #0]
 800bf2c:	82d0      	strh	r0, [r2, #22]
 800bf2e:	8350      	strh	r0, [r2, #26]
 800bf30:	61d3      	str	r3, [r2, #28]
 800bf32:	b1d1      	cbz	r1, 800bf6a <acc_translation_a121_profile_to_pulse_params+0x76>
 800bf34:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 800bf36:	8293      	strh	r3, [r2, #20]
 800bf38:	bc30      	pop	{r4, r5}
 800bf3a:	8313      	strh	r3, [r2, #24]
 800bf3c:	4770      	bx	lr
 800bf3e:	4b12      	ldr	r3, [pc, #72]	@ (800bf88 <acc_translation_a121_profile_to_pulse_params+0x94>)
 800bf40:	4c12      	ldr	r4, [pc, #72]	@ (800bf8c <acc_translation_a121_profile_to_pulse_params+0x98>)
 800bf42:	61d4      	str	r4, [r2, #28]
 800bf44:	2001      	movs	r0, #1
 800bf46:	2596      	movs	r5, #150	@ 0x96
 800bf48:	21fa      	movs	r1, #250	@ 0xfa
 800bf4a:	60d5      	str	r5, [r2, #12]
 800bf4c:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800bf50:	bc30      	pop	{r4, r5}
 800bf52:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800bf56:	7010      	strb	r0, [r2, #0]
 800bf58:	4770      	bx	lr
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf90 <acc_translation_a121_profile_to_pulse_params+0x9c>)
 800bf5c:	490d      	ldr	r1, [pc, #52]	@ (800bf94 <acc_translation_a121_profile_to_pulse_params+0xa0>)
 800bf5e:	2000      	movs	r0, #0
 800bf60:	e7d8      	b.n	800bf14 <acc_translation_a121_profile_to_pulse_params+0x20>
 800bf62:	4b0d      	ldr	r3, [pc, #52]	@ (800bf98 <acc_translation_a121_profile_to_pulse_params+0xa4>)
 800bf64:	490d      	ldr	r1, [pc, #52]	@ (800bf9c <acc_translation_a121_profile_to_pulse_params+0xa8>)
 800bf66:	2000      	movs	r0, #0
 800bf68:	e7d4      	b.n	800bf14 <acc_translation_a121_profile_to_pulse_params+0x20>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	8293      	strh	r3, [r2, #20]
 800bf6e:	8313      	strh	r3, [r2, #24]
 800bf70:	e7d5      	b.n	800bf1e <acc_translation_a121_profile_to_pulse_params+0x2a>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e9c2 0005 	strd	r0, r0, [r2, #20]
 800bf78:	7010      	strb	r0, [r2, #0]
 800bf7a:	61d0      	str	r0, [r2, #28]
 800bf7c:	e7cf      	b.n	800bf1e <acc_translation_a121_profile_to_pulse_params+0x2a>
 800bf7e:	bf00      	nop
 800bf80:	00050008 	.word	0x00050008
 800bf84:	0002000b 	.word	0x0002000b
 800bf88:	00010008 	.word	0x00010008
 800bf8c:	00030002 	.word	0x00030002
 800bf90:	00020008 	.word	0x00020008
 800bf94:	00020004 	.word	0x00020004
 800bf98:	00030008 	.word	0x00030008
 800bf9c:	00020006 	.word	0x00020006

0800bfa0 <acc_translation_a121_profile_to_start_point_offset>:
 800bfa0:	3801      	subs	r0, #1
 800bfa2:	2804      	cmp	r0, #4
 800bfa4:	d818      	bhi.n	800bfd8 <acc_translation_a121_profile_to_start_point_offset+0x38>
 800bfa6:	e8df f000 	tbb	[pc, r0]
 800bfaa:	0812      	.short	0x0812
 800bfac:	0d03      	.short	0x0d03
 800bfae:	03          	.byte	0x03
 800bfaf:	00          	.byte	0x00
 800bfb0:	f06f 030c 	mvn.w	r3, #12
 800bfb4:	600b      	str	r3, [r1, #0]
 800bfb6:	2001      	movs	r0, #1
 800bfb8:	4770      	bx	lr
 800bfba:	f06f 0306 	mvn.w	r3, #6
 800bfbe:	600b      	str	r3, [r1, #0]
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	4770      	bx	lr
 800bfc4:	f06f 030f 	mvn.w	r3, #15
 800bfc8:	600b      	str	r3, [r1, #0]
 800bfca:	2001      	movs	r0, #1
 800bfcc:	4770      	bx	lr
 800bfce:	f06f 030b 	mvn.w	r3, #11
 800bfd2:	600b      	str	r3, [r1, #0]
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	4770      	bx	lr
 800bfd8:	2000      	movs	r0, #0
 800bfda:	6008      	str	r0, [r1, #0]
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop

0800bfe0 <acc_translation_a121_set_calibration_params>:
 800bfe0:	b530      	push	{r4, r5, lr}
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	f8b0 2084 	ldrh.w	r2, [r0, #132]	@ 0x84
 800bfe8:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 800bfec:	f8b0 5082 	ldrh.w	r5, [r0, #130]	@ 0x82
 800bff0:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800bff4:	8062      	strh	r2, [r4, #2]
 800bff6:	8842      	ldrh	r2, [r0, #2]
 800bff8:	80a3      	strh	r3, [r4, #4]
 800bffa:	8883      	ldrh	r3, [r0, #4]
 800bffc:	8025      	strh	r5, [r4, #0]
 800bffe:	b087      	sub	sp, #28
 800c000:	88c5      	ldrh	r5, [r0, #6]
 800c002:	80e1      	strh	r1, [r4, #6]
 800c004:	8941      	ldrh	r1, [r0, #10]
 800c006:	8122      	strh	r2, [r4, #8]
 800c008:	8c02      	ldrh	r2, [r0, #32]
 800c00a:	8163      	strh	r3, [r4, #10]
 800c00c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800c00e:	8263      	strh	r3, [r4, #18]
 800c010:	81a5      	strh	r5, [r4, #12]
 800c012:	81e1      	strh	r1, [r4, #14]
 800c014:	8222      	strh	r2, [r4, #16]
 800c016:	8900      	ldrh	r0, [r0, #8]
 800c018:	466a      	mov	r2, sp
 800c01a:	2160      	movs	r1, #96	@ 0x60
 800c01c:	f001 fc68 	bl	800d8f0 <acc_dll_calculate_area_settings>
 800c020:	f8bd 1000 	ldrh.w	r1, [sp]
 800c024:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c028:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c02c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800c030:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800c034:	82a1      	strh	r1, [r4, #20]
 800c036:	82e2      	strh	r2, [r4, #22]
 800c038:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800c03c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c040:	8323      	strh	r3, [r4, #24]
 800c042:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c046:	8365      	strh	r5, [r4, #26]
 800c048:	83a0      	strh	r0, [r4, #28]
 800c04a:	83e1      	strh	r1, [r4, #30]
 800c04c:	8422      	strh	r2, [r4, #32]
 800c04e:	8463      	strh	r3, [r4, #34]	@ 0x22
 800c050:	b007      	add	sp, #28
 800c052:	bd30      	pop	{r4, r5, pc}

0800c054 <acc_translation_a121_set_gain_params>:
 800c054:	7a83      	ldrb	r3, [r0, #10]
 800c056:	2b17      	cmp	r3, #23
 800c058:	d80e      	bhi.n	800c078 <acc_translation_a121_set_gain_params+0x24>
 800c05a:	2b09      	cmp	r3, #9
 800c05c:	d80e      	bhi.n	800c07c <acc_translation_a121_set_gain_params+0x28>
 800c05e:	f1c3 0309 	rsb	r3, r3, #9
 800c062:	2015      	movs	r0, #21
 800c064:	8053      	strh	r3, [r2, #2]
 800c066:	8010      	strh	r0, [r2, #0]
 800c068:	b199      	cbz	r1, 800c092 <acc_translation_a121_set_gain_params+0x3e>
 800c06a:	8853      	ldrh	r3, [r2, #2]
 800c06c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800c070:	2001      	movs	r0, #1
 800c072:	898b      	ldrh	r3, [r1, #12]
 800c074:	8093      	strh	r3, [r2, #4]
 800c076:	4770      	bx	lr
 800c078:	2000      	movs	r0, #0
 800c07a:	4770      	bx	lr
 800c07c:	2b10      	cmp	r3, #16
 800c07e:	bf94      	ite	ls
 800c080:	f1c3 031e 	rsbls	r3, r3, #30
 800c084:	f1c3 0317 	rsbhi	r3, r3, #23
 800c088:	2000      	movs	r0, #0
 800c08a:	8013      	strh	r3, [r2, #0]
 800c08c:	8050      	strh	r0, [r2, #2]
 800c08e:	2900      	cmp	r1, #0
 800c090:	d1eb      	bne.n	800c06a <acc_translation_a121_set_gain_params+0x16>
 800c092:	8091      	strh	r1, [r2, #4]
 800c094:	2001      	movs	r0, #1
 800c096:	4770      	bx	lr

0800c098 <acc_translation_a121_set_pulse_length_params>:
 800c098:	8a83      	ldrh	r3, [r0, #20]
 800c09a:	2b08      	cmp	r3, #8
 800c09c:	d802      	bhi.n	800c0a4 <acc_translation_a121_set_pulse_length_params+0xc>
 800c09e:	8ac2      	ldrh	r2, [r0, #22]
 800c0a0:	2a07      	cmp	r2, #7
 800c0a2:	d901      	bls.n	800c0a8 <acc_translation_a121_set_pulse_length_params+0x10>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4770      	bx	lr
 800c0a8:	b470      	push	{r4, r5, r6}
 800c0aa:	8b05      	ldrh	r5, [r0, #24]
 800c0ac:	2d08      	cmp	r5, #8
 800c0ae:	d902      	bls.n	800c0b6 <acc_translation_a121_set_pulse_length_params+0x1e>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	bc70      	pop	{r4, r5, r6}
 800c0b4:	4770      	bx	lr
 800c0b6:	8b44      	ldrh	r4, [r0, #26]
 800c0b8:	2c08      	cmp	r4, #8
 800c0ba:	d8f9      	bhi.n	800c0b0 <acc_translation_a121_set_pulse_length_params+0x18>
 800c0bc:	2001      	movs	r0, #1
 800c0be:	1e66      	subs	r6, r4, #1
 800c0c0:	fa00 f202 	lsl.w	r2, r0, r2
 800c0c4:	3a01      	subs	r2, #1
 800c0c6:	fa00 f404 	lsl.w	r4, r0, r4
 800c0ca:	fa00 f606 	lsl.w	r6, r0, r6
 800c0ce:	b292      	uxth	r2, r2
 800c0d0:	3c01      	subs	r4, #1
 800c0d2:	3e01      	subs	r6, #1
 800c0d4:	01a4      	lsls	r4, r4, #6
 800c0d6:	0276      	lsls	r6, r6, #9
 800c0d8:	800b      	strh	r3, [r1, #0]
 800c0da:	0193      	lsls	r3, r2, #6
 800c0dc:	0252      	lsls	r2, r2, #9
 800c0de:	804d      	strh	r5, [r1, #2]
 800c0e0:	808b      	strh	r3, [r1, #4]
 800c0e2:	810a      	strh	r2, [r1, #8]
 800c0e4:	80cc      	strh	r4, [r1, #6]
 800c0e6:	814e      	strh	r6, [r1, #10]
 800c0e8:	e7e3      	b.n	800c0b2 <acc_translation_a121_set_pulse_length_params+0x1a>
 800c0ea:	bf00      	nop

0800c0ec <acc_translation_a121_set_range_params>:
 800c0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f0:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800c0f4:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 800c0f8:	888d      	ldrh	r5, [r1, #4]
 800c0fa:	b08d      	sub	sp, #52	@ 0x34
 800c0fc:	f1ba 0f18 	cmp.w	sl, #24
 800c100:	9102      	str	r1, [sp, #8]
 800c102:	4691      	mov	r9, r2
 800c104:	461c      	mov	r4, r3
 800c106:	f240 812e 	bls.w	800c366 <acc_translation_a121_set_range_params+0x27a>
 800c10a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800c10e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800c112:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800c116:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800c11a:	f3c3 02cc 	ubfx	r2, r3, #3, #13
 800c11e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800c122:	b29b      	uxth	r3, r3
 800c124:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 800c128:	4293      	cmp	r3, r2
 800c12a:	f240 8141 	bls.w	800c3b0 <acc_translation_a121_set_range_params+0x2c4>
 800c12e:	4bb3      	ldr	r3, [pc, #716]	@ (800c3fc <acc_translation_a121_set_range_params+0x310>)
 800c130:	4ab3      	ldr	r2, [pc, #716]	@ (800c400 <acc_translation_a121_set_range_params+0x314>)
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	49b3      	ldr	r1, [pc, #716]	@ (800c404 <acc_translation_a121_set_range_params+0x318>)
 800c136:	2000      	movs	r0, #0
 800c138:	4606      	mov	r6, r0
 800c13a:	9001      	str	r0, [sp, #4]
 800c13c:	f04f 0801 	mov.w	r8, #1
 800c140:	4798      	blx	r3
 800c142:	46c3      	mov	fp, r8
 800c144:	9604      	str	r6, [sp, #16]
 800c146:	2f00      	cmp	r7, #0
 800c148:	f040 812f 	bne.w	800c3aa <acc_translation_a121_set_range_params+0x2be>
 800c14c:	2204      	movs	r2, #4
 800c14e:	9b02      	ldr	r3, [sp, #8]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4499      	add	r9, r3
 800c154:	f509 43c3 	add.w	r3, r9, #24960	@ 0x6180
 800c158:	fb12 f205 	smulbb	r2, r2, r5
 800c15c:	3328      	adds	r3, #40	@ 0x28
 800c15e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c162:	3d01      	subs	r5, #1
 800c164:	b292      	uxth	r2, r2
 800c166:	428b      	cmp	r3, r1
 800c168:	9205      	str	r2, [sp, #20]
 800c16a:	fb0a 9a05 	mla	sl, sl, r5, r9
 800c16e:	d906      	bls.n	800c17e <acc_translation_a121_set_range_params+0x92>
 800c170:	4ba2      	ldr	r3, [pc, #648]	@ (800c3fc <acc_translation_a121_set_range_params+0x310>)
 800c172:	4aa5      	ldr	r2, [pc, #660]	@ (800c408 <acc_translation_a121_set_range_params+0x31c>)
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	49a3      	ldr	r1, [pc, #652]	@ (800c404 <acc_translation_a121_set_range_params+0x318>)
 800c178:	2000      	movs	r0, #0
 800c17a:	4798      	blx	r3
 800c17c:	2700      	movs	r7, #0
 800c17e:	f50a 43c3 	add.w	r3, sl, #24960	@ 0x6180
 800c182:	3328      	adds	r3, #40	@ 0x28
 800c184:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c188:	4293      	cmp	r3, r2
 800c18a:	d906      	bls.n	800c19a <acc_translation_a121_set_range_params+0xae>
 800c18c:	4b9b      	ldr	r3, [pc, #620]	@ (800c3fc <acc_translation_a121_set_range_params+0x310>)
 800c18e:	4a9f      	ldr	r2, [pc, #636]	@ (800c40c <acc_translation_a121_set_range_params+0x320>)
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	499c      	ldr	r1, [pc, #624]	@ (800c404 <acc_translation_a121_set_range_params+0x318>)
 800c194:	2000      	movs	r0, #0
 800c196:	4798      	blx	r3
 800c198:	2700      	movs	r7, #0
 800c19a:	f1b9 0f00 	cmp.w	r9, #0
 800c19e:	f2c0 817c 	blt.w	800c49a <acc_translation_a121_set_range_params+0x3ae>
 800c1a2:	4b9b      	ldr	r3, [pc, #620]	@ (800c410 <acc_translation_a121_set_range_params+0x324>)
 800c1a4:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800c1a8:	fb83 1309 	smull	r1, r3, r3, r9
 800c1ac:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 800c1b0:	f1ba 0f00 	cmp.w	sl, #0
 800c1b4:	b21b      	sxth	r3, r3
 800c1b6:	f2c0 817e 	blt.w	800c4b6 <acc_translation_a121_set_range_params+0x3ca>
 800c1ba:	4995      	ldr	r1, [pc, #596]	@ (800c410 <acc_translation_a121_set_range_params+0x324>)
 800c1bc:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800c1c0:	fb81 010a 	smull	r0, r1, r1, sl
 800c1c4:	ebcc 01a1 	rsb	r1, ip, r1, asr #2
 800c1c8:	b209      	sxth	r1, r1
 800c1ca:	4891      	ldr	r0, [pc, #580]	@ (800c410 <acc_translation_a121_set_range_params+0x324>)
 800c1cc:	fb80 5009 	smull	r5, r0, r0, r9
 800c1d0:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	1ac9      	subs	r1, r1, r3
 800c1d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c1dc:	b288      	uxth	r0, r1
 800c1de:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 800c1e2:	b209      	sxth	r1, r1
 800c1e4:	fbb0 fbfb 	udiv	fp, r0, fp
 800c1e8:	f10b 0b01 	add.w	fp, fp, #1
 800c1ec:	9106      	str	r1, [sp, #24]
 800c1ee:	fa1f fb8b 	uxth.w	fp, fp
 800c1f2:	f04f 0118 	mov.w	r1, #24
 800c1f6:	fbb1 f1f8 	udiv	r1, r1, r8
 800c1fa:	f100 816e 	bmi.w	800c4da <acc_translation_a121_set_range_params+0x3ee>
 800c1fe:	b210      	sxth	r0, r2
 800c200:	b292      	uxth	r2, r2
 800c202:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 800c410 <acc_translation_a121_set_range_params+0x324>
 800c206:	fbb2 f5f8 	udiv	r5, r2, r8
 800c20a:	fb89 690a 	smull	r6, r9, r9, sl
 800c20e:	ebcc 09a9 	rsb	r9, ip, r9, asr #2
 800c212:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800c216:	fb08 2515 	mls	r5, r8, r5, r2
 800c21a:	b2ad      	uxth	r5, r5
 800c21c:	ebba 09c9 	subs.w	r9, sl, r9, lsl #3
 800c220:	9500      	str	r5, [sp, #0]
 800c222:	f100 8153 	bmi.w	800c4cc <acc_translation_a121_set_range_params+0x3e0>
 800c226:	fa0f f589 	sxth.w	r5, r9
 800c22a:	950a      	str	r5, [sp, #40]	@ 0x28
 800c22c:	fa1f f989 	uxth.w	r9, r9
 800c230:	9d00      	ldr	r5, [sp, #0]
 800c232:	3901      	subs	r1, #1
 800c234:	b289      	uxth	r1, r1
 800c236:	9109      	str	r1, [sp, #36]	@ 0x24
 800c238:	f1bb 0f01 	cmp.w	fp, #1
 800c23c:	fb11 5108 	smlabb	r1, r1, r8, r5
 800c240:	b289      	uxth	r1, r1
 800c242:	f000 80f3 	beq.w	800c42c <acc_translation_a121_set_range_params+0x340>
 800c246:	9d00      	ldr	r5, [sp, #0]
 800c248:	ebb9 0901 	subs.w	r9, r9, r1
 800c24c:	bf18      	it	ne
 800c24e:	f04f 0901 	movne.w	r9, #1
 800c252:	4295      	cmp	r5, r2
 800c254:	bf14      	ite	ne
 800c256:	2501      	movne	r5, #1
 800c258:	2500      	moveq	r5, #0
 800c25a:	ebab 0505 	sub.w	r5, fp, r5
 800c25e:	eba5 0509 	sub.w	r5, r5, r9
 800c262:	fa1f f689 	uxth.w	r6, r9
 800c266:	b2ad      	uxth	r5, r5
 800c268:	9607      	str	r6, [sp, #28]
 800c26a:	f040 80e6 	bne.w	800c43a <acc_translation_a121_set_range_params+0x34e>
 800c26e:	2100      	movs	r1, #0
 800c270:	9108      	str	r1, [sp, #32]
 800c272:	9103      	str	r1, [sp, #12]
 800c274:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c276:	9900      	ldr	r1, [sp, #0]
 800c278:	0092      	lsls	r2, r2, #2
 800c27a:	0089      	lsls	r1, r1, #2
 800c27c:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 800c27e:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800c280:	2f00      	cmp	r7, #0
 800c282:	f000 80b4 	beq.w	800c3ee <acc_translation_a121_set_range_params+0x302>
 800c286:	9a02      	ldr	r2, [sp, #8]
 800c288:	7b92      	ldrb	r2, [r2, #14]
 800c28a:	2a05      	cmp	r2, #5
 800c28c:	f200 812a 	bhi.w	800c4e4 <acc_translation_a121_set_range_params+0x3f8>
 800c290:	4960      	ldr	r1, [pc, #384]	@ (800c414 <acc_translation_a121_set_range_params+0x328>)
 800c292:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 800c296:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800c29a:	f1aa 0003 	sub.w	r0, sl, #3
 800c29e:	f1aa 0b4a 	sub.w	fp, sl, #74	@ 0x4a
 800c2a2:	3903      	subs	r1, #3
 800c2a4:	b289      	uxth	r1, r1
 800c2a6:	b280      	uxth	r0, r0
 800c2a8:	fa1f fb8b 	uxth.w	fp, fp
 800c2ac:	f1aa 0a14 	sub.w	sl, sl, #20
 800c2b0:	f1c3 0629 	rsb	r6, r3, #41	@ 0x29
 800c2b4:	445e      	add	r6, fp
 800c2b6:	9a06      	ldr	r2, [sp, #24]
 800c2b8:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800c2ba:	b233      	sxth	r3, r6
 800c2bc:	1a9a      	subs	r2, r3, r2
 800c2be:	2a29      	cmp	r2, #41	@ 0x29
 800c2c0:	86e1      	strh	r1, [r4, #54]	@ 0x36
 800c2c2:	b2b6      	uxth	r6, r6
 800c2c4:	dc08      	bgt.n	800c2d8 <acc_translation_a121_set_range_params+0x1ec>
 800c2c6:	494d      	ldr	r1, [pc, #308]	@ (800c3fc <acc_translation_a121_set_range_params+0x310>)
 800c2c8:	4a53      	ldr	r2, [pc, #332]	@ (800c418 <acc_translation_a121_set_range_params+0x32c>)
 800c2ca:	690f      	ldr	r7, [r1, #16]
 800c2cc:	494d      	ldr	r1, [pc, #308]	@ (800c404 <acc_translation_a121_set_range_params+0x318>)
 800c2ce:	9302      	str	r3, [sp, #8]
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	47b8      	blx	r7
 800c2d4:	9b02      	ldr	r3, [sp, #8]
 800c2d6:	2700      	movs	r7, #0
 800c2d8:	4553      	cmp	r3, sl
 800c2da:	db06      	blt.n	800c2ea <acc_translation_a121_set_range_params+0x1fe>
 800c2dc:	4b47      	ldr	r3, [pc, #284]	@ (800c3fc <acc_translation_a121_set_range_params+0x310>)
 800c2de:	4a4f      	ldr	r2, [pc, #316]	@ (800c41c <acc_translation_a121_set_range_params+0x330>)
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	4948      	ldr	r1, [pc, #288]	@ (800c404 <acc_translation_a121_set_range_params+0x318>)
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	4798      	blx	r3
 800c2e8:	2700      	movs	r7, #0
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	f8a4 b038 	strh.w	fp, [r4, #56]	@ 0x38
 800c2f0:	2b2c      	cmp	r3, #44	@ 0x2c
 800c2f2:	8766      	strh	r6, [r4, #58]	@ 0x3a
 800c2f4:	f240 80c4 	bls.w	800c480 <acc_translation_a121_set_range_params+0x394>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800c2fe:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800c302:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800c306:	9b04      	ldr	r3, [sp, #16]
 800c308:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800c30c:	9b08      	ldr	r3, [sp, #32]
 800c30e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800c312:	2d00      	cmp	r5, #0
 800c314:	f000 809a 	beq.w	800c44c <acc_translation_a121_set_range_params+0x360>
 800c318:	2301      	movs	r3, #1
 800c31a:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800c31e:	9b03      	ldr	r3, [sp, #12]
 800c320:	9a07      	ldr	r2, [sp, #28]
 800c322:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 80fc 	beq.w	800c524 <acc_translation_a121_set_range_params+0x438>
 800c32c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c32e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800c332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c334:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800c338:	f1b9 0f00 	cmp.w	r9, #0
 800c33c:	f000 80ef 	beq.w	800c51e <acc_translation_a121_set_range_params+0x432>
 800c340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c342:	9a00      	ldr	r2, [sp, #0]
 800c344:	eba3 0902 	sub.w	r9, r3, r2
 800c348:	fb99 f8f8 	sdiv	r8, r9, r8
 800c34c:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800c350:	3d01      	subs	r5, #1
 800c352:	b2ad      	uxth	r5, r5
 800c354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c356:	9a05      	ldr	r2, [sp, #20]
 800c358:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800c35c:	4638      	mov	r0, r7
 800c35e:	801a      	strh	r2, [r3, #0]
 800c360:	b00d      	add	sp, #52	@ 0x34
 800c362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c366:	f1ba 0f00 	cmp.w	sl, #0
 800c36a:	f43f aee0 	beq.w	800c12e <acc_translation_a121_set_range_params+0x42>
 800c36e:	2318      	movs	r3, #24
 800c370:	fbb3 f3fa 	udiv	r3, r3, sl
 800c374:	fb0a f303 	mul.w	r3, sl, r3
 800c378:	f1c3 0318 	rsb	r3, r3, #24
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	9304      	str	r3, [sp, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	f47f aed4 	bne.w	800c12e <acc_translation_a121_set_range_params+0x42>
 800c386:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	46d0      	mov	r8, sl
 800c392:	f04f 0b01 	mov.w	fp, #1
 800c396:	b9d5      	cbnz	r5, 800c3ce <acc_translation_a121_set_range_params+0x2e2>
 800c398:	4b18      	ldr	r3, [pc, #96]	@ (800c3fc <acc_translation_a121_set_range_params+0x310>)
 800c39a:	4a21      	ldr	r2, [pc, #132]	@ (800c420 <acc_translation_a121_set_range_params+0x334>)
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	4919      	ldr	r1, [pc, #100]	@ (800c404 <acc_translation_a121_set_range_params+0x318>)
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	4798      	blx	r3
 800c3a4:	2f00      	cmp	r7, #0
 800c3a6:	f43f aed1 	beq.w	800c14c <acc_translation_a121_set_range_params+0x60>
 800c3aa:	2700      	movs	r7, #0
 800c3ac:	2202      	movs	r2, #2
 800c3ae:	e6ce      	b.n	800c14e <acc_translation_a121_set_range_params+0x62>
 800c3b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c424 <acc_translation_a121_set_range_params+0x338>)
 800c3b2:	fba3 3b0a 	umull	r3, fp, r3, sl
 800c3b6:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 800c3ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	235c      	movs	r3, #92	@ 0x5c
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	f04f 0818 	mov.w	r8, #24
 800c3ca:	2d00      	cmp	r5, #0
 800c3cc:	d0e4      	beq.n	800c398 <acc_translation_a121_set_range_params+0x2ac>
 800c3ce:	2f00      	cmp	r7, #0
 800c3d0:	f040 80b2 	bne.w	800c538 <acc_translation_a121_set_range_params+0x44c>
 800c3d4:	9b02      	ldr	r3, [sp, #8]
 800c3d6:	7b1b      	ldrb	r3, [r3, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 80c4 	beq.w	800c566 <acc_translation_a121_set_range_params+0x47a>
 800c3de:	4b07      	ldr	r3, [pc, #28]	@ (800c3fc <acc_translation_a121_set_range_params+0x310>)
 800c3e0:	4a11      	ldr	r2, [pc, #68]	@ (800c428 <acc_translation_a121_set_range_params+0x33c>)
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	4907      	ldr	r1, [pc, #28]	@ (800c404 <acc_translation_a121_set_range_params+0x318>)
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	4798      	blx	r3
 800c3ea:	2204      	movs	r2, #4
 800c3ec:	e6af      	b.n	800c14e <acc_translation_a121_set_range_params+0x62>
 800c3ee:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800c3f2:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800c3f6:	213d      	movs	r1, #61	@ 0x3d
 800c3f8:	207d      	movs	r0, #125	@ 0x7d
 800c3fa:	e759      	b.n	800c2b0 <acc_translation_a121_set_range_params+0x1c4>
 800c3fc:	200003f0 	.word	0x200003f0
 800c400:	08012f6c 	.word	0x08012f6c
 800c404:	08012f80 	.word	0x08012f80
 800c408:	08012fe0 	.word	0x08012fe0
 800c40c:	08012ff4 	.word	0x08012ff4
 800c410:	2aaaaaab 	.word	0x2aaaaaab
 800c414:	08013258 	.word	0x08013258
 800c418:	08013028 	.word	0x08013028
 800c41c:	08013048 	.word	0x08013048
 800c420:	08012f94 	.word	0x08012f94
 800c424:	aaaaaaab 	.word	0xaaaaaaab
 800c428:	08012fa8 	.word	0x08012fa8
 800c42c:	4295      	cmp	r5, r2
 800c42e:	f000 808e 	beq.w	800c54e <acc_translation_a121_set_range_params+0x462>
 800c432:	2500      	movs	r5, #0
 800c434:	4649      	mov	r1, r9
 800c436:	9507      	str	r5, [sp, #28]
 800c438:	46a9      	mov	r9, r5
 800c43a:	2601      	movs	r6, #1
 800c43c:	1a08      	subs	r0, r1, r0
 800c43e:	fb90 f0f8 	sdiv	r0, r0, r8
 800c442:	b281      	uxth	r1, r0
 800c444:	9608      	str	r6, [sp, #32]
 800c446:	9603      	str	r6, [sp, #12]
 800c448:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c44a:	e714      	b.n	800c276 <acc_translation_a121_set_range_params+0x18a>
 800c44c:	9b07      	ldr	r3, [sp, #28]
 800c44e:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d06a      	beq.n	800c532 <acc_translation_a121_set_range_params+0x446>
 800c45c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c45e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800c462:	2300      	movs	r3, #0
 800c464:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800c468:	f1b9 0f00 	cmp.w	r9, #0
 800c46c:	d05e      	beq.n	800c52c <acc_translation_a121_set_range_params+0x440>
 800c46e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c470:	9a00      	ldr	r2, [sp, #0]
 800c472:	eba3 0902 	sub.w	r9, r3, r2
 800c476:	fb99 f8f8 	sdiv	r8, r9, r8
 800c47a:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800c47e:	e769      	b.n	800c354 <acc_translation_a121_set_range_params+0x268>
 800c480:	9b01      	ldr	r3, [sp, #4]
 800c482:	2b1e      	cmp	r3, #30
 800c484:	d93e      	bls.n	800c504 <acc_translation_a121_set_range_params+0x418>
 800c486:	f1a3 021e 	sub.w	r2, r3, #30
 800c48a:	230f      	movs	r3, #15
 800c48c:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 800c490:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800c494:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800c498:	e735      	b.n	800c306 <acc_translation_a121_set_range_params+0x21a>
 800c49a:	4a36      	ldr	r2, [pc, #216]	@ (800c574 <acc_translation_a121_set_range_params+0x488>)
 800c49c:	ea6f 0309 	mvn.w	r3, r9
 800c4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a4:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 800c4a8:	f1ba 0f00 	cmp.w	sl, #0
 800c4ac:	b21b      	sxth	r3, r3
 800c4ae:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800c4b2:	f6bf ae82 	bge.w	800c1ba <acc_translation_a121_set_range_params+0xce>
 800c4b6:	482f      	ldr	r0, [pc, #188]	@ (800c574 <acc_translation_a121_set_range_params+0x488>)
 800c4b8:	ea6f 010a 	mvn.w	r1, sl
 800c4bc:	fba0 0101 	umull	r0, r1, r0, r1
 800c4c0:	ea6f 1111 	mvn.w	r1, r1, lsr #4
 800c4c4:	b209      	sxth	r1, r1
 800c4c6:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800c4ca:	e67e      	b.n	800c1ca <acc_translation_a121_set_range_params+0xde>
 800c4cc:	f109 0518 	add.w	r5, r9, #24
 800c4d0:	fa1f f985 	uxth.w	r9, r5
 800c4d4:	b22d      	sxth	r5, r5
 800c4d6:	950a      	str	r5, [sp, #40]	@ 0x28
 800c4d8:	e6aa      	b.n	800c230 <acc_translation_a121_set_range_params+0x144>
 800c4da:	f102 0018 	add.w	r0, r2, #24
 800c4de:	b282      	uxth	r2, r0
 800c4e0:	b200      	sxth	r0, r0
 800c4e2:	e68e      	b.n	800c202 <acc_translation_a121_set_range_params+0x116>
 800c4e4:	4924      	ldr	r1, [pc, #144]	@ (800c578 <acc_translation_a121_set_range_params+0x48c>)
 800c4e6:	4a25      	ldr	r2, [pc, #148]	@ (800c57c <acc_translation_a121_set_range_params+0x490>)
 800c4e8:	690e      	ldr	r6, [r1, #16]
 800c4ea:	4925      	ldr	r1, [pc, #148]	@ (800c580 <acc_translation_a121_set_range_params+0x494>)
 800c4ec:	9302      	str	r3, [sp, #8]
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	47b0      	blx	r6
 800c4f2:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800c4f6:	9b02      	ldr	r3, [sp, #8]
 800c4f8:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800c4fc:	213d      	movs	r1, #61	@ 0x3d
 800c4fe:	207d      	movs	r0, #125	@ 0x7d
 800c500:	2700      	movs	r7, #0
 800c502:	e6d5      	b.n	800c2b0 <acc_translation_a121_set_range_params+0x1c4>
 800c504:	9b01      	ldr	r3, [sp, #4]
 800c506:	2b0f      	cmp	r3, #15
 800c508:	d918      	bls.n	800c53c <acc_translation_a121_set_range_params+0x450>
 800c50a:	3b0f      	subs	r3, #15
 800c50c:	220f      	movs	r2, #15
 800c50e:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800c512:	2300      	movs	r3, #0
 800c514:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800c518:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800c51c:	e6f3      	b.n	800c306 <acc_translation_a121_set_range_params+0x21a>
 800c51e:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800c522:	e715      	b.n	800c350 <acc_translation_a121_set_range_params+0x264>
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800c52a:	e702      	b.n	800c332 <acc_translation_a121_set_range_params+0x246>
 800c52c:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800c530:	e710      	b.n	800c354 <acc_translation_a121_set_range_params+0x268>
 800c532:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 800c536:	e794      	b.n	800c462 <acc_translation_a121_set_range_params+0x376>
 800c538:	2202      	movs	r2, #2
 800c53a:	e608      	b.n	800c14e <acc_translation_a121_set_range_params+0x62>
 800c53c:	2300      	movs	r3, #0
 800c53e:	9a01      	ldr	r2, [sp, #4]
 800c540:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800c544:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800c548:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800c54c:	e6db      	b.n	800c306 <acc_translation_a121_set_range_params+0x21a>
 800c54e:	4589      	cmp	r9, r1
 800c550:	bf0c      	ite	eq
 800c552:	2501      	moveq	r5, #1
 800c554:	2500      	movne	r5, #0
 800c556:	d108      	bne.n	800c56a <acc_translation_a121_set_range_params+0x47e>
 800c558:	2100      	movs	r1, #0
 800c55a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800c55e:	4689      	mov	r9, r1
 800c560:	9103      	str	r1, [sp, #12]
 800c562:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c564:	e687      	b.n	800c276 <acc_translation_a121_set_range_params+0x18a>
 800c566:	2701      	movs	r7, #1
 800c568:	e5f0      	b.n	800c14c <acc_translation_a121_set_range_params+0x60>
 800c56a:	2600      	movs	r6, #0
 800c56c:	4649      	mov	r1, r9
 800c56e:	9607      	str	r6, [sp, #28]
 800c570:	46b1      	mov	r9, r6
 800c572:	e762      	b.n	800c43a <acc_translation_a121_set_range_params+0x34e>
 800c574:	aaaaaaab 	.word	0xaaaaaaab
 800c578:	200003f0 	.word	0x200003f0
 800c57c:	0801301c 	.word	0x0801301c
 800c580:	08012f80 	.word	0x08012f80

0800c584 <acc_translation_a121_subsweep_translate>:
 800c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c588:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 800c58c:	4607      	mov	r7, r0
 800c58e:	8908      	ldrh	r0, [r1, #8]
 800c590:	460e      	mov	r6, r1
 800c592:	f240 35ff 	movw	r5, #1023	@ 0x3ff
 800c596:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800c59a:	b08c      	sub	sp, #48	@ 0x30
 800c59c:	f1bc 0f00 	cmp.w	ip, #0
 800c5a0:	bf08      	it	eq
 800c5a2:	4629      	moveq	r1, r5
 800c5a4:	b108      	cbz	r0, 800c5aa <acc_translation_a121_subsweep_translate+0x26>
 800c5a6:	4281      	cmp	r1, r0
 800c5a8:	d20a      	bcs.n	800c5c0 <acc_translation_a121_subsweep_translate+0x3c>
 800c5aa:	4b55      	ldr	r3, [pc, #340]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c5ac:	4a55      	ldr	r2, [pc, #340]	@ (800c704 <acc_translation_a121_subsweep_translate+0x180>)
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	4955      	ldr	r1, [pc, #340]	@ (800c708 <acc_translation_a121_subsweep_translate+0x184>)
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	4798      	blx	r3
 800c5b6:	2500      	movs	r5, #0
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	b00c      	add	sp, #48	@ 0x30
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c0:	461c      	mov	r4, r3
 800c5c2:	7b73      	ldrb	r3, [r6, #13]
 800c5c4:	4690      	mov	r8, r2
 800c5c6:	b97b      	cbnz	r3, 800c5e8 <acc_translation_a121_subsweep_translate+0x64>
 800c5c8:	7bf0      	ldrb	r0, [r6, #15]
 800c5ca:	7bb5      	ldrb	r5, [r6, #14]
 800c5cc:	2d00      	cmp	r5, #0
 800c5ce:	d12d      	bne.n	800c62c <acc_translation_a121_subsweep_translate+0xa8>
 800c5d0:	2801      	cmp	r0, #1
 800c5d2:	d00f      	beq.n	800c5f4 <acc_translation_a121_subsweep_translate+0x70>
 800c5d4:	4b4a      	ldr	r3, [pc, #296]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c5d6:	4a4d      	ldr	r2, [pc, #308]	@ (800c70c <acc_translation_a121_subsweep_translate+0x188>)
 800c5d8:	691b      	ldr	r3, [r3, #16]
 800c5da:	494b      	ldr	r1, [pc, #300]	@ (800c708 <acc_translation_a121_subsweep_translate+0x184>)
 800c5dc:	4628      	mov	r0, r5
 800c5de:	4798      	blx	r3
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	b00c      	add	sp, #48	@ 0x30
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e8:	7bf0      	ldrb	r0, [r6, #15]
 800c5ea:	2802      	cmp	r0, #2
 800c5ec:	d1ed      	bne.n	800c5ca <acc_translation_a121_subsweep_translate+0x46>
 800c5ee:	4b44      	ldr	r3, [pc, #272]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c5f0:	4a47      	ldr	r2, [pc, #284]	@ (800c710 <acc_translation_a121_subsweep_translate+0x18c>)
 800c5f2:	e7dc      	b.n	800c5ae <acc_translation_a121_subsweep_translate+0x2a>
 800c5f4:	4b47      	ldr	r3, [pc, #284]	@ (800c714 <acc_translation_a121_subsweep_translate+0x190>)
 800c5f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c5f8:	9200      	str	r2, [sp, #0]
 800c5fa:	4631      	mov	r1, r6
 800c5fc:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800c600:	4638      	mov	r0, r7
 800c602:	4623      	mov	r3, r4
 800c604:	f7ff fd72 	bl	800c0ec <acc_translation_a121_set_range_params>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d0d4      	beq.n	800c5b6 <acc_translation_a121_subsweep_translate+0x32>
 800c60c:	4622      	mov	r2, r4
 800c60e:	4641      	mov	r1, r8
 800c610:	4630      	mov	r0, r6
 800c612:	f7ff fd1f 	bl	800c054 <acc_translation_a121_set_gain_params>
 800c616:	4605      	mov	r5, r0
 800c618:	b978      	cbnz	r0, 800c63a <acc_translation_a121_subsweep_translate+0xb6>
 800c61a:	4b39      	ldr	r3, [pc, #228]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c61c:	4a3e      	ldr	r2, [pc, #248]	@ (800c718 <acc_translation_a121_subsweep_translate+0x194>)
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	4939      	ldr	r1, [pc, #228]	@ (800c708 <acc_translation_a121_subsweep_translate+0x184>)
 800c622:	4798      	blx	r3
 800c624:	4628      	mov	r0, r5
 800c626:	b00c      	add	sp, #48	@ 0x30
 800c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c62c:	1e45      	subs	r5, r0, #1
 800c62e:	b2ed      	uxtb	r5, r5
 800c630:	2d04      	cmp	r5, #4
 800c632:	d9df      	bls.n	800c5f4 <acc_translation_a121_subsweep_translate+0x70>
 800c634:	4b32      	ldr	r3, [pc, #200]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c636:	4a39      	ldr	r2, [pc, #228]	@ (800c71c <acc_translation_a121_subsweep_translate+0x198>)
 800c638:	e7b9      	b.n	800c5ae <acc_translation_a121_subsweep_translate+0x2a>
 800c63a:	7bf0      	ldrb	r0, [r6, #15]
 800c63c:	aa04      	add	r2, sp, #16
 800c63e:	4641      	mov	r1, r8
 800c640:	f7ff fc58 	bl	800bef4 <acc_translation_a121_profile_to_pulse_params>
 800c644:	4605      	mov	r5, r0
 800c646:	b970      	cbnz	r0, 800c666 <acc_translation_a121_subsweep_translate+0xe2>
 800c648:	4b2d      	ldr	r3, [pc, #180]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c64a:	4a34      	ldr	r2, [pc, #208]	@ (800c71c <acc_translation_a121_subsweep_translate+0x198>)
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	492e      	ldr	r1, [pc, #184]	@ (800c708 <acc_translation_a121_subsweep_translate+0x184>)
 800c650:	4798      	blx	r3
 800c652:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800c656:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800c65a:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800c65c:	4628      	mov	r0, r5
 800c65e:	8523      	strh	r3, [r4, #40]	@ 0x28
 800c660:	b00c      	add	sp, #48	@ 0x30
 800c662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c666:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800c66a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800c66e:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800c670:	8523      	strh	r3, [r4, #40]	@ 0x28
 800c672:	f104 0108 	add.w	r1, r4, #8
 800c676:	a804      	add	r0, sp, #16
 800c678:	f7ff fd0e 	bl	800c098 <acc_translation_a121_set_pulse_length_params>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d09a      	beq.n	800c5b6 <acc_translation_a121_subsweep_translate+0x32>
 800c680:	f104 0214 	add.w	r2, r4, #20
 800c684:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800c688:	9203      	str	r2, [sp, #12]
 800c68a:	4611      	mov	r1, r2
 800c68c:	a804      	add	r0, sp, #16
 800c68e:	9308      	str	r3, [sp, #32]
 800c690:	f000 fdd0 	bl	800d234 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800c694:	9a03      	ldr	r2, [sp, #12]
 800c696:	4605      	mov	r5, r0
 800c698:	b940      	cbnz	r0, 800c6ac <acc_translation_a121_subsweep_translate+0x128>
 800c69a:	4b19      	ldr	r3, [pc, #100]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c69c:	4a20      	ldr	r2, [pc, #128]	@ (800c720 <acc_translation_a121_subsweep_translate+0x19c>)
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	4919      	ldr	r1, [pc, #100]	@ (800c708 <acc_translation_a121_subsweep_translate+0x184>)
 800c6a2:	4798      	blx	r3
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	b00c      	add	sp, #48	@ 0x30
 800c6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ac:	f1b8 0f00 	cmp.w	r8, #0
 800c6b0:	d00f      	beq.n	800c6d2 <acc_translation_a121_subsweep_translate+0x14e>
 800c6b2:	f108 015c 	add.w	r1, r8, #92	@ 0x5c
 800c6b6:	a804      	add	r0, sp, #16
 800c6b8:	f000 fcb6 	bl	800d028 <acc_translation_pulseshaper_calc_settings>
 800c6bc:	b948      	cbnz	r0, 800c6d2 <acc_translation_a121_subsweep_translate+0x14e>
 800c6be:	4910      	ldr	r1, [pc, #64]	@ (800c700 <acc_translation_a121_subsweep_translate+0x17c>)
 800c6c0:	4a18      	ldr	r2, [pc, #96]	@ (800c724 <acc_translation_a121_subsweep_translate+0x1a0>)
 800c6c2:	690c      	ldr	r4, [r1, #16]
 800c6c4:	4910      	ldr	r1, [pc, #64]	@ (800c708 <acc_translation_a121_subsweep_translate+0x184>)
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	47a0      	blx	r4
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	b00c      	add	sp, #48	@ 0x30
 800c6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d2:	8933      	ldrh	r3, [r6, #8]
 800c6d4:	7af2      	ldrb	r2, [r6, #11]
 800c6d6:	8622      	strh	r2, [r4, #48]	@ 0x30
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d00c      	beq.n	800c6f6 <acc_translation_a121_subsweep_translate+0x172>
 800c6dc:	3b02      	subs	r3, #2
 800c6de:	2201      	movs	r2, #1
 800c6e0:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800c6e2:	85e2      	strh	r2, [r4, #46]	@ 0x2e
 800c6e4:	7b73      	ldrb	r3, [r6, #13]
 800c6e6:	80e3      	strh	r3, [r4, #6]
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f083 0301 	eor.w	r3, r3, #1
 800c6ee:	8663      	strh	r3, [r4, #50]	@ 0x32
 800c6f0:	b00c      	add	sp, #48	@ 0x30
 800c6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800c6fa:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800c6fc:	e7f2      	b.n	800c6e4 <acc_translation_a121_subsweep_translate+0x160>
 800c6fe:	bf00      	nop
 800c700:	200003f0 	.word	0x200003f0
 800c704:	08013060 	.word	0x08013060
 800c708:	08012f80 	.word	0x08012f80
 800c70c:	0801309c 	.word	0x0801309c
 800c710:	08013070 	.word	0x08013070
 800c714:	08013264 	.word	0x08013264
 800c718:	080130c4 	.word	0x080130c4
 800c71c:	08012250 	.word	0x08012250
 800c720:	080130dc 	.word	0x080130dc
 800c724:	080130fc 	.word	0x080130fc

0800c728 <acc_translation_a121_point_to_coarse>:
 800c728:	2800      	cmp	r0, #0
 800c72a:	db04      	blt.n	800c736 <acc_translation_a121_point_to_coarse+0xe>
 800c72c:	b209      	sxth	r1, r1
 800c72e:	fb90 f0f1 	sdiv	r0, r0, r1
 800c732:	b200      	sxth	r0, r0
 800c734:	4770      	bx	lr
 800c736:	43c3      	mvns	r3, r0
 800c738:	b208      	sxth	r0, r1
 800c73a:	fb93 f0f0 	sdiv	r0, r3, r0
 800c73e:	43c0      	mvns	r0, r0
 800c740:	b200      	sxth	r0, r0
 800c742:	4770      	bx	lr

0800c744 <acc_translation_a121_point_in_coarse>:
 800c744:	fb90 f3f1 	sdiv	r3, r0, r1
 800c748:	fb03 0011 	mls	r0, r3, r1, r0
 800c74c:	0403      	lsls	r3, r0, #16
 800c74e:	bf48      	it	mi
 800c750:	1840      	addmi	r0, r0, r1
 800c752:	b280      	uxth	r0, r0
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop

0800c758 <acc_translation_a121_calculate_minimum_sweep_period>:
 800c758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c75c:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 800c760:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	@ 0x1a4
 800c764:	ed2d 8b0a 	vpush	{d8-d12}
 800c768:	2b01      	cmp	r3, #1
 800c76a:	b088      	sub	sp, #32
 800c76c:	4680      	mov	r8, r0
 800c76e:	4617      	mov	r7, r2
 800c770:	f000 80b9 	beq.w	800c8e6 <acc_translation_a121_calculate_minimum_sweep_period+0x18e>
 800c774:	ee07 1a90 	vmov	s15, r1
 800c778:	eddf 9a5f 	vldr	s19, [pc, #380]	@ 800c8f8 <acc_translation_a121_calculate_minimum_sweep_period+0x1a0>
 800c77c:	eef8 aa67 	vcvt.f32.u32	s21, s15
 800c780:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 800c784:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 800c788:	f7ff fb82 	bl	800be90 <get_pll_freq>
 800c78c:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 800c790:	2b02      	cmp	r3, #2
 800c792:	eef0 8a40 	vmov.f32	s17, s0
 800c796:	f200 8099 	bhi.w	800c8cc <acc_translation_a121_calculate_minimum_sweep_period+0x174>
 800c79a:	4958      	ldr	r1, [pc, #352]	@ (800c8fc <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>)
 800c79c:	4a58      	ldr	r2, [pc, #352]	@ (800c900 <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 800c79e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800c7a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7a6:	edd1 ba00 	vldr	s23, [r1]
 800c7aa:	ed93 ca00 	vldr	s24, [r3]
 800c7ae:	f04f 0901 	mov.w	r9, #1
 800c7b2:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d068      	beq.n	800c88c <acc_translation_a121_calculate_minimum_sweep_period+0x134>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800c904 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800c7c0:	4e51      	ldr	r6, [pc, #324]	@ (800c908 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800c7c2:	ed9f ba52 	vldr	s22, [pc, #328]	@ 800c90c <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>
 800c7c6:	ed9f aa52 	vldr	s20, [pc, #328]	@ 800c910 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800c7ca:	462c      	mov	r4, r5
 800c7cc:	e03d      	b.n	800c84a <acc_translation_a121_calculate_minimum_sweep_period+0xf2>
 800c7ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7d2:	ee07 3a90 	vmov	s15, r3
 800c7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7da:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 800c7de:	4444      	add	r4, r8
 800c7e0:	f10a 0302 	add.w	r3, sl, #2
 800c7e4:	8920      	ldrh	r0, [r4, #8]
 800c7e6:	88a1      	ldrh	r1, [r4, #4]
 800c7e8:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	fb00 3303 	mla	r3, r0, r3, r3
 800c7f4:	3302      	adds	r3, #2
 800c7f6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c800:	b29b      	uxth	r3, r3
 800c802:	ee87 6a0a 	vdiv.f32	s12, s14, s20
 800c806:	f10a 0a18 	add.w	sl, sl, #24
 800c80a:	fa1f fa8a 	uxth.w	sl, sl
 800c80e:	3501      	adds	r5, #1
 800c810:	b2ec      	uxtb	r4, r5
 800c812:	42a2      	cmp	r2, r4
 800c814:	ee07 3a90 	vmov	s15, r3
 800c818:	ee07 aa10 	vmov	s14, sl
 800c81c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c820:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c824:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800c828:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800c82c:	ee07 1a90 	vmov	s15, r1
 800c830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c838:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800c83c:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800c840:	ee77 7a89 	vadd.f32	s15, s15, s18
 800c844:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c848:	d922      	bls.n	800c890 <acc_translation_a121_calculate_minimum_sweep_period+0x138>
 800c84a:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 800c84e:	466a      	mov	r2, sp
 800c850:	2100      	movs	r1, #0
 800c852:	7bd8      	ldrb	r0, [r3, #15]
 800c854:	f7ff fb4e 	bl	800bef4 <acc_translation_a121_profile_to_pulse_params>
 800c858:	0124      	lsls	r4, r4, #4
 800c85a:	4a2e      	ldr	r2, [pc, #184]	@ (800c914 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>)
 800c85c:	492e      	ldr	r1, [pc, #184]	@ (800c918 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800c85e:	4682      	mov	sl, r0
 800c860:	b910      	cbnz	r0, 800c868 <acc_translation_a121_calculate_minimum_sweep_period+0x110>
 800c862:	6933      	ldr	r3, [r6, #16]
 800c864:	4798      	blx	r3
 800c866:	46d1      	mov	r9, sl
 800c868:	eb08 0304 	add.w	r3, r8, r4
 800c86c:	4a2b      	ldr	r2, [pc, #172]	@ (800c91c <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 800c86e:	7b9b      	ldrb	r3, [r3, #14]
 800c870:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 800c874:	2b05      	cmp	r3, #5
 800c876:	d9aa      	bls.n	800c7ce <acc_translation_a121_calculate_minimum_sweep_period+0x76>
 800c878:	6933      	ldr	r3, [r6, #16]
 800c87a:	4a29      	ldr	r2, [pc, #164]	@ (800c920 <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 800c87c:	4926      	ldr	r1, [pc, #152]	@ (800c918 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800c87e:	2000      	movs	r0, #0
 800c880:	4798      	blx	r3
 800c882:	f04f 0900 	mov.w	r9, #0
 800c886:	eef0 7a4b 	vmov.f32	s15, s22
 800c88a:	e7a6      	b.n	800c7da <acc_translation_a121_calculate_minimum_sweep_period+0x82>
 800c88c:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 800c904 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800c890:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800c924 <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>
 800c894:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c910 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800c898:	ee88 6aa7 	vdiv.f32	s12, s17, s15
 800c89c:	4648      	mov	r0, r9
 800c89e:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 800c8a2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c8a6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800c8aa:	ee7b ba8c 	vadd.f32	s23, s23, s24
 800c8ae:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800c8b2:	ee77 caac 	vadd.f32	s25, s15, s25
 800c8b6:	ee3c 8a88 	vadd.f32	s16, s25, s16
 800c8ba:	ee78 ba2b 	vadd.f32	s23, s16, s23
 800c8be:	edc7 ba00 	vstr	s23, [r7]
 800c8c2:	b008      	add	sp, #32
 800c8c4:	ecbd 8b0a 	vpop	{d8-d12}
 800c8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c908 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800c8ce:	ed9f ca0d 	vldr	s24, [pc, #52]	@ 800c904 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800c8d2:	4a15      	ldr	r2, [pc, #84]	@ (800c928 <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>)
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	4910      	ldr	r1, [pc, #64]	@ (800c918 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800c8d8:	2000      	movs	r0, #0
 800c8da:	4798      	blx	r3
 800c8dc:	eef0 ba4c 	vmov.f32	s23, s24
 800c8e0:	f04f 0900 	mov.w	r9, #0
 800c8e4:	e765      	b.n	800c7b2 <acc_translation_a121_calculate_minimum_sweep_period+0x5a>
 800c8e6:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 800c904 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800c8ea:	eef0 9a49 	vmov.f32	s19, s18
 800c8ee:	eef0 ca49 	vmov.f32	s25, s18
 800c8f2:	eef0 aa49 	vmov.f32	s21, s18
 800c8f6:	e747      	b.n	800c788 <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 800c8f8:	419d999a 	.word	0x419d999a
 800c8fc:	08013278 	.word	0x08013278
 800c900:	08013284 	.word	0x08013284
 800c904:	00000000 	.word	0x00000000
 800c908:	200003f0 	.word	0x200003f0
 800c90c:	43000000 	.word	0x43000000
 800c910:	49742400 	.word	0x49742400
 800c914:	08012250 	.word	0x08012250
 800c918:	08012f80 	.word	0x08012f80
 800c91c:	08013258 	.word	0x08013258
 800c920:	0801301c 	.word	0x0801301c
 800c924:	43200000 	.word	0x43200000
 800c928:	08013128 	.word	0x08013128

0800c92c <acc_translation_a121_translate>:
 800c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	ed2d 8b06 	vpush	{d8-d10}
 800c934:	4605      	mov	r5, r0
 800c936:	b091      	sub	sp, #68	@ 0x44
 800c938:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 800c93c:	f895 404c 	ldrb.w	r4, [r5, #76]	@ 0x4c
 800c940:	9408      	str	r4, [sp, #32]
 800c942:	2804      	cmp	r0, #4
 800c944:	f8b5 4048 	ldrh.w	r4, [r5, #72]	@ 0x48
 800c948:	9406      	str	r4, [sp, #24]
 800c94a:	468b      	mov	fp, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	4698      	mov	r8, r3
 800c950:	f200 8128 	bhi.w	800cba4 <acc_translation_a121_translate+0x278>
 800c954:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800c958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c960:	f100 8169 	bmi.w	800cc36 <acc_translation_a121_translate+0x30a>
 800c964:	f895 3056 	ldrb.w	r3, [r5, #86]	@ 0x56
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f040 81a5 	bne.w	800ccb8 <acc_translation_a121_translate+0x38c>
 800c96e:	f7fe fa95 	bl	800ae9c <acc_rss_integration_get_sensor_reference_frequency>
 800c972:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800c976:	ee07 0a10 	vmov	s14, r0
 800c97a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c982:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800c986:	f340 81d4 	ble.w	800cd32 <acc_translation_a121_translate+0x406>
 800c98a:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800c98e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c992:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800c996:	f100 81e3 	bmi.w	800cd60 <acc_translation_a121_translate+0x434>
 800c99a:	ee18 0a90 	vmov	r0, s17
 800c99e:	f7f4 f9d3 	bl	8000d48 <__aeabi_f2ulz>
 800c9a2:	2901      	cmp	r1, #1
 800c9a4:	bf08      	it	eq
 800c9a6:	2800      	cmpeq	r0, #0
 800c9a8:	f080 81da 	bcs.w	800cd60 <acc_translation_a121_translate+0x434>
 800c9ac:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f000 81a9 	beq.w	800cd08 <acc_translation_a121_translate+0x3dc>
 800c9b6:	4bc9      	ldr	r3, [pc, #804]	@ (800ccdc <acc_translation_a121_translate+0x3b0>)
 800c9b8:	4ac9      	ldr	r2, [pc, #804]	@ (800cce0 <acc_translation_a121_translate+0x3b4>)
 800c9ba:	691b      	ldr	r3, [r3, #16]
 800c9bc:	49c9      	ldr	r1, [pc, #804]	@ (800cce4 <acc_translation_a121_translate+0x3b8>)
 800c9be:	2000      	movs	r0, #0
 800c9c0:	4798      	blx	r3
 800c9c2:	9b06      	ldr	r3, [sp, #24]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 810a 	beq.w	800cbde <acc_translation_a121_translate+0x2b2>
 800c9ca:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f000 8108 	beq.w	800cbea <acc_translation_a121_translate+0x2be>
 800c9da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c9dc:	2300      	movs	r3, #0
 800c9de:	7113      	strb	r3, [r2, #4]
 800c9e0:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800c9e4:	f1bb 0f00 	cmp.w	fp, #0
 800c9e8:	f000 82da 	beq.w	800cfa0 <acc_translation_a121_translate+0x674>
 800c9ec:	4658      	mov	r0, fp
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	f7ff faf6 	bl	800bfe0 <acc_translation_a121_set_calibration_params>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	4617      	mov	r7, r2
 800c9fa:	f8a8 2002 	strh.w	r2, [r8, #2]
 800c9fe:	9202      	str	r2, [sp, #8]
 800ca00:	4610      	mov	r0, r2
 800ca02:	f8a8 300a 	strh.w	r3, [r8, #10]
 800ca06:	f04f 0c02 	mov.w	ip, #2
 800ca0a:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	@ 0x1ac
 800ca0e:	2901      	cmp	r1, #1
 800ca10:	d104      	bne.n	800ca1c <acc_translation_a121_translate+0xf0>
 800ca12:	9902      	ldr	r1, [sp, #8]
 800ca14:	9e06      	ldr	r6, [sp, #24]
 800ca16:	fb06 f101 	mul.w	r1, r6, r1
 800ca1a:	9102      	str	r1, [sp, #8]
 800ca1c:	f8b5 1054 	ldrh.w	r1, [r5, #84]	@ 0x54
 800ca20:	f895 e052 	ldrb.w	lr, [r5, #82]	@ 0x52
 800ca24:	f895 9053 	ldrb.w	r9, [r5, #83]	@ 0x53
 800ca28:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800ca2c:	f8a4 e19e 	strh.w	lr, [r4, #414]	@ 0x19e
 800ca30:	ea4f 0a51 	mov.w	sl, r1, lsr #1
 800ca34:	3903      	subs	r1, #3
 800ca36:	9103      	str	r1, [sp, #12]
 800ca38:	9902      	ldr	r1, [sp, #8]
 800ca3a:	f8a4 71a0 	strh.w	r7, [r4, #416]	@ 0x1a0
 800ca3e:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800ca42:	4571      	cmp	r1, lr
 800ca44:	bf28      	it	cs
 800ca46:	4671      	movcs	r1, lr
 800ca48:	468e      	mov	lr, r1
 800ca4a:	f1aa 0a03 	sub.w	sl, sl, #3
 800ca4e:	9903      	ldr	r1, [sp, #12]
 800ca50:	f8a4 a1aa 	strh.w	sl, [r4, #426]	@ 0x1aa
 800ca54:	f089 0901 	eor.w	r9, r9, #1
 800ca58:	f8a4 91a6 	strh.w	r9, [r4, #422]	@ 0x1a6
 800ca5c:	f8a4 11a8 	strh.w	r1, [r4, #424]	@ 0x1a8
 800ca60:	f8a4 e1a4 	strh.w	lr, [r4, #420]	@ 0x1a4
 800ca64:	f8a8 200c 	strh.w	r2, [r8, #12]
 800ca68:	f8a8 3004 	strh.w	r3, [r8, #4]
 800ca6c:	f8a8 c006 	strh.w	ip, [r8, #6]
 800ca70:	2e00      	cmp	r6, #0
 800ca72:	f000 811c 	beq.w	800ccae <acc_translation_a121_translate+0x382>
 800ca76:	3341      	adds	r3, #65	@ 0x41
 800ca78:	2240      	movs	r2, #64	@ 0x40
 800ca7a:	f8a8 3000 	strh.w	r3, [r8]
 800ca7e:	f8a8 2008 	strh.w	r2, [r8, #8]
 800ca82:	2601      	movs	r6, #1
 800ca84:	f8a4 61c0 	strh.w	r6, [r4, #448]	@ 0x1c0
 800ca88:	f1bb 0f00 	cmp.w	fp, #0
 800ca8c:	d003      	beq.n	800ca96 <acc_translation_a121_translate+0x16a>
 800ca8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800ca92:	f8a4 31c2 	strh.w	r3, [r4, #450]	@ 0x1c2
 800ca96:	2800      	cmp	r0, #0
 800ca98:	f040 80e5 	bne.w	800cc66 <acc_translation_a121_translate+0x33a>
 800ca9c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ca9e:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800caa2:	2300      	movs	r3, #0
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	9b08      	ldr	r3, [sp, #32]
 800caa8:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800caac:	9b06      	ldr	r3, [sp, #24]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	f240 80f7 	bls.w	800cca2 <acc_translation_a121_translate+0x376>
 800cab4:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800cab8:	2201      	movs	r2, #1
 800caba:	3b02      	subs	r3, #2
 800cabc:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800cac0:	f8a4 21b0 	strh.w	r2, [r4, #432]	@ 0x1b0
 800cac4:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800cce8 <acc_translation_a121_translate+0x3bc>
 800cac8:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 800ccec <acc_translation_a121_translate+0x3c0>
 800cacc:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800cad0:	ee28 7a07 	vmul.f32	s14, s16, s14
 800cad4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800cad8:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800cadc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800cae0:	eec8 7a06 	vdiv.f32	s15, s16, s12
 800cae4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cae8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800caec:	ee76 6a86 	vadd.f32	s13, s13, s12
 800caf0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800caf4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800caf8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800cafc:	ee17 2a10 	vmov	r2, s14
 800cb00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb04:	ee16 3a90 	vmov	r3, s13
 800cb08:	eef5 5a40 	vcmp.f32	s11, #0.0
 800cb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb10:	f8a4 21b6 	strh.w	r2, [r4, #438]	@ 0x1b6
 800cb14:	ee17 2a90 	vmov	r2, s15
 800cb18:	f8a4 31b8 	strh.w	r3, [r4, #440]	@ 0x1b8
 800cb1c:	bf14      	ite	ne
 800cb1e:	2301      	movne	r3, #1
 800cb20:	2300      	moveq	r3, #0
 800cb22:	f8a4 21b4 	strh.w	r2, [r4, #436]	@ 0x1b4
 800cb26:	8723      	strh	r3, [r4, #56]	@ 0x38
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	f000 808b 	beq.w	800cc44 <acc_translation_a121_translate+0x318>
 800cb2e:	eef5 5a40 	vcmp.f32	s11, #0.0
 800cb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb36:	d00a      	beq.n	800cb4e <acc_translation_a121_translate+0x222>
 800cb38:	eec8 7a25 	vdiv.f32	s15, s16, s11
 800cb3c:	ee37 6a86 	vadd.f32	s12, s15, s12
 800cb40:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800cb44:	ee17 3a90 	vmov	r3, s15
 800cb48:	0c1a      	lsrs	r2, r3, #16
 800cb4a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800cb4c:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800cb4e:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800cb52:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800cb56:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800cb5a:	8623      	strh	r3, [r4, #48]	@ 0x30
 800cb5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb64:	bf14      	ite	ne
 800cb66:	2301      	movne	r3, #1
 800cb68:	2300      	moveq	r3, #0
 800cb6a:	8662      	strh	r2, [r4, #50]	@ 0x32
 800cb6c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800cb6e:	d006      	beq.n	800cb7e <acc_translation_a121_translate+0x252>
 800cb70:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800cb74:	ee17 3a90 	vmov	r3, s15
 800cb78:	0c1a      	lsrs	r2, r3, #16
 800cb7a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800cb7c:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800cb7e:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800cb82:	f8a4 31be 	strh.w	r3, [r4, #446]	@ 0x1be
 800cb86:	2101      	movs	r1, #1
 800cb88:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cb8c:	f640 0301 	movw	r3, #2049	@ 0x801
 800cb90:	84a1      	strh	r1, [r4, #36]	@ 0x24
 800cb92:	f8a4 21ba 	strh.w	r2, [r4, #442]	@ 0x1ba
 800cb96:	f8a4 31bc 	strh.w	r3, [r4, #444]	@ 0x1bc
 800cb9a:	b011      	add	sp, #68	@ 0x44
 800cb9c:	ecbd 8b06 	vpop	{d8-d10}
 800cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba4:	4b4d      	ldr	r3, [pc, #308]	@ (800ccdc <acc_translation_a121_translate+0x3b0>)
 800cba6:	4a52      	ldr	r2, [pc, #328]	@ (800ccf0 <acc_translation_a121_translate+0x3c4>)
 800cba8:	691b      	ldr	r3, [r3, #16]
 800cbaa:	494e      	ldr	r1, [pc, #312]	@ (800cce4 <acc_translation_a121_translate+0x3b8>)
 800cbac:	2000      	movs	r0, #0
 800cbae:	4798      	blx	r3
 800cbb0:	f7fe f974 	bl	800ae9c <acc_rss_integration_get_sensor_reference_frequency>
 800cbb4:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800cbb8:	ee07 0a10 	vmov	s14, r0
 800cbbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc4:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800cbc8:	dd32      	ble.n	800cc30 <acc_translation_a121_translate+0x304>
 800cbca:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800cbce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cbd2:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800cbd6:	9b06      	ldr	r3, [sp, #24]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f47f aef6 	bne.w	800c9ca <acc_translation_a121_translate+0x9e>
 800cbde:	9304      	str	r3, [sp, #16]
 800cbe0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f47f aef8 	bne.w	800c9da <acc_translation_a121_translate+0xae>
 800cbea:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800cbee:	2a02      	cmp	r2, #2
 800cbf0:	f040 80ef 	bne.w	800cdd2 <acc_translation_a121_translate+0x4a6>
 800cbf4:	f895 204e 	ldrb.w	r2, [r5, #78]	@ 0x4e
 800cbf8:	2a01      	cmp	r2, #1
 800cbfa:	d069      	beq.n	800ccd0 <acc_translation_a121_translate+0x3a4>
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800cc00:	7102      	strb	r2, [r0, #4]
 800cc02:	f8a4 21ac 	strh.w	r2, [r4, #428]	@ 0x1ac
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f43f aeec 	beq.w	800c9e4 <acc_translation_a121_translate+0xb8>
 800cc0c:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	f000 814f 	beq.w	800ceb4 <acc_translation_a121_translate+0x588>
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	f000 80f3 	beq.w	800ce02 <acc_translation_a121_translate+0x4d6>
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 80dd 	beq.w	800cddc <acc_translation_a121_translate+0x4b0>
 800cc22:	4b2e      	ldr	r3, [pc, #184]	@ (800ccdc <acc_translation_a121_translate+0x3b0>)
 800cc24:	4a33      	ldr	r2, [pc, #204]	@ (800ccf4 <acc_translation_a121_translate+0x3c8>)
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	492e      	ldr	r1, [pc, #184]	@ (800cce4 <acc_translation_a121_translate+0x3b8>)
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	4798      	blx	r3
 800cc2e:	e6d9      	b.n	800c9e4 <acc_translation_a121_translate+0xb8>
 800cc30:	eddf 8a33 	vldr	s17, [pc, #204]	@ 800cd00 <acc_translation_a121_translate+0x3d4>
 800cc34:	e7cf      	b.n	800cbd6 <acc_translation_a121_translate+0x2aa>
 800cc36:	4b29      	ldr	r3, [pc, #164]	@ (800ccdc <acc_translation_a121_translate+0x3b0>)
 800cc38:	4a2f      	ldr	r2, [pc, #188]	@ (800ccf8 <acc_translation_a121_translate+0x3cc>)
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	4929      	ldr	r1, [pc, #164]	@ (800cce4 <acc_translation_a121_translate+0x3b8>)
 800cc3e:	2000      	movs	r0, #0
 800cc40:	4798      	blx	r3
 800cc42:	e7b5      	b.n	800cbb0 <acc_translation_a121_translate+0x284>
 800cc44:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800cc48:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800cc4c:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800cc50:	8623      	strh	r3, [r4, #48]	@ 0x30
 800cc52:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc5a:	bf14      	ite	ne
 800cc5c:	2301      	movne	r3, #1
 800cc5e:	2300      	moveq	r3, #0
 800cc60:	8662      	strh	r2, [r4, #50]	@ 0x32
 800cc62:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800cc64:	e78b      	b.n	800cb7e <acc_translation_a121_translate+0x252>
 800cc66:	f895 304d 	ldrb.w	r3, [r5, #77]	@ 0x4d
 800cc6a:	2600      	movs	r6, #0
 800cc6c:	a80b      	add	r0, sp, #44	@ 0x2c
 800cc6e:	f504 71d1 	add.w	r1, r4, #418	@ 0x1a2
 800cc72:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
 800cc76:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 800cc7a:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 800cc7e:	f000 fad9 	bl	800d234 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800cc82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cc84:	2300      	movs	r3, #0
 800cc86:	6013      	str	r3, [r2, #0]
 800cc88:	b110      	cbz	r0, 800cc90 <acc_translation_a121_translate+0x364>
 800cc8a:	9b04      	ldr	r3, [sp, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d16e      	bne.n	800cd6e <acc_translation_a121_translate+0x442>
 800cc90:	9b08      	ldr	r3, [sp, #32]
 800cc92:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800cc96:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800cc9a:	9b06      	ldr	r3, [sp, #24]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	f63f af09 	bhi.w	800cab4 <acc_translation_a121_translate+0x188>
 800cca2:	2300      	movs	r3, #0
 800cca4:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800cca8:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 800ccac:	e70a      	b.n	800cac4 <acc_translation_a121_translate+0x198>
 800ccae:	f8a8 6008 	strh.w	r6, [r8, #8]
 800ccb2:	f8a8 c000 	strh.w	ip, [r8]
 800ccb6:	e6e5      	b.n	800ca84 <acc_translation_a121_translate+0x158>
 800ccb8:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f43f ae56 	beq.w	800c96e <acc_translation_a121_translate+0x42>
 800ccc2:	4b06      	ldr	r3, [pc, #24]	@ (800ccdc <acc_translation_a121_translate+0x3b0>)
 800ccc4:	4a0d      	ldr	r2, [pc, #52]	@ (800ccfc <acc_translation_a121_translate+0x3d0>)
 800ccc6:	691b      	ldr	r3, [r3, #16]
 800ccc8:	4906      	ldr	r1, [pc, #24]	@ (800cce4 <acc_translation_a121_translate+0x3b8>)
 800ccca:	2000      	movs	r0, #0
 800cccc:	4798      	blx	r3
 800ccce:	e76f      	b.n	800cbb0 <acc_translation_a121_translate+0x284>
 800ccd0:	7be9      	ldrb	r1, [r5, #15]
 800ccd2:	3901      	subs	r1, #1
 800ccd4:	2901      	cmp	r1, #1
 800ccd6:	d892      	bhi.n	800cbfe <acc_translation_a121_translate+0x2d2>
 800ccd8:	e790      	b.n	800cbfc <acc_translation_a121_translate+0x2d0>
 800ccda:	bf00      	nop
 800ccdc:	200003f0 	.word	0x200003f0
 800cce0:	0801319c 	.word	0x0801319c
 800cce4:	08012f80 	.word	0x08012f80
 800cce8:	43960000 	.word	0x43960000
 800ccec:	49742400 	.word	0x49742400
 800ccf0:	08011ffc 	.word	0x08011ffc
 800ccf4:	08013218 	.word	0x08013218
 800ccf8:	08013148 	.word	0x08013148
 800ccfc:	0801315c 	.word	0x0801315c
 800cd00:	00000000 	.word	0x00000000
 800cd04:	ed5f 8a02 	vldr	s17, [pc, #-8]	@ 800cd00 <acc_translation_a121_translate+0x3d4>
 800cd08:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800cd0c:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800cd10:	9806      	ldr	r0, [sp, #24]
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f000 8161 	beq.w	800cfda <acc_translation_a121_translate+0x6ae>
 800cd18:	f895 004e 	ldrb.w	r0, [r5, #78]	@ 0x4e
 800cd1c:	9004      	str	r0, [sp, #16]
 800cd1e:	4291      	cmp	r1, r2
 800cd20:	f240 814b 	bls.w	800cfba <acc_translation_a121_translate+0x68e>
 800cd24:	4bb4      	ldr	r3, [pc, #720]	@ (800cff8 <acc_translation_a121_translate+0x6cc>)
 800cd26:	4ab5      	ldr	r2, [pc, #724]	@ (800cffc <acc_translation_a121_translate+0x6d0>)
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	49b5      	ldr	r1, [pc, #724]	@ (800d000 <acc_translation_a121_translate+0x6d4>)
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	4798      	blx	r3
 800cd30:	e756      	b.n	800cbe0 <acc_translation_a121_translate+0x2b4>
 800cd32:	d413      	bmi.n	800cd5c <acc_translation_a121_translate+0x430>
 800cd34:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d0e3      	beq.n	800cd04 <acc_translation_a121_translate+0x3d8>
 800cd3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd44:	d107      	bne.n	800cd56 <acc_translation_a121_translate+0x42a>
 800cd46:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800cd4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd52:	f040 811b 	bne.w	800cf8c <acc_translation_a121_translate+0x660>
 800cd56:	eddf 8aab 	vldr	s17, [pc, #684]	@ 800d004 <acc_translation_a121_translate+0x6d8>
 800cd5a:	e62c      	b.n	800c9b6 <acc_translation_a121_translate+0x8a>
 800cd5c:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 800d004 <acc_translation_a121_translate+0x6d8>
 800cd60:	4ba5      	ldr	r3, [pc, #660]	@ (800cff8 <acc_translation_a121_translate+0x6cc>)
 800cd62:	4aa9      	ldr	r2, [pc, #676]	@ (800d008 <acc_translation_a121_translate+0x6dc>)
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	49a6      	ldr	r1, [pc, #664]	@ (800d000 <acc_translation_a121_translate+0x6d4>)
 800cd68:	2000      	movs	r0, #0
 800cd6a:	4798      	blx	r3
 800cd6c:	e733      	b.n	800cbd6 <acc_translation_a121_translate+0x2aa>
 800cd6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd70:	4621      	mov	r1, r4
 800cd72:	4628      	mov	r0, r5
 800cd74:	f7ff fcf0 	bl	800c758 <acc_translation_a121_calculate_minimum_sweep_period>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d089      	beq.n	800cc90 <acc_translation_a121_translate+0x364>
 800cd7c:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 800cd80:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 800d00c <acc_translation_a121_translate+0x6e0>
 800cd84:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 800d010 <acc_translation_a121_translate+0x6e4>
 800cd88:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800cd8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cd8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd92:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800cd96:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cd9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cda2:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 800cda6:	eef4 5ac7 	vcmpe.f32	s11, s14
 800cdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdae:	ed83 7a00 	vstr	s14, [r3]
 800cdb2:	f77f ae78 	ble.w	800caa6 <acc_translation_a121_translate+0x17a>
 800cdb6:	4b90      	ldr	r3, [pc, #576]	@ (800cff8 <acc_translation_a121_translate+0x6cc>)
 800cdb8:	4a96      	ldr	r2, [pc, #600]	@ (800d014 <acc_translation_a121_translate+0x6e8>)
 800cdba:	691f      	ldr	r7, [r3, #16]
 800cdbc:	4990      	ldr	r1, [pc, #576]	@ (800d000 <acc_translation_a121_translate+0x6d4>)
 800cdbe:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	ee17 3a90 	vmov	r3, s15
 800cdc8:	47b8      	blx	r7
 800cdca:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800cdce:	4630      	mov	r0, r6
 800cdd0:	e669      	b.n	800caa6 <acc_translation_a121_translate+0x17a>
 800cdd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdd4:	7113      	strb	r3, [r2, #4]
 800cdd6:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800cdda:	e603      	b.n	800c9e4 <acc_translation_a121_translate+0xb8>
 800cddc:	2301      	movs	r3, #1
 800cdde:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800cde0:	8523      	strh	r3, [r4, #40]	@ 0x28
 800cde2:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d012      	beq.n	800ce10 <acc_translation_a121_translate+0x4e4>
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	f000 80b7 	beq.w	800cf5e <acc_translation_a121_translate+0x632>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d063      	beq.n	800cebc <acc_translation_a121_translate+0x590>
 800cdf4:	4b80      	ldr	r3, [pc, #512]	@ (800cff8 <acc_translation_a121_translate+0x6cc>)
 800cdf6:	4a88      	ldr	r2, [pc, #544]	@ (800d018 <acc_translation_a121_translate+0x6ec>)
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	4981      	ldr	r1, [pc, #516]	@ (800d000 <acc_translation_a121_translate+0x6d4>)
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	4798      	blx	r3
 800ce00:	e5f0      	b.n	800c9e4 <acc_translation_a121_translate+0xb8>
 800ce02:	2300      	movs	r3, #0
 800ce04:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800ce06:	8523      	strh	r3, [r4, #40]	@ 0x28
 800ce08:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d1ec      	bne.n	800cdea <acc_translation_a121_translate+0x4be>
 800ce10:	2200      	movs	r2, #0
 800ce12:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ce14:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800ce16:	f1bb 0f00 	cmp.w	fp, #0
 800ce1a:	f040 80e0 	bne.w	800cfde <acc_translation_a121_translate+0x6b2>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	f8a8 b002 	strh.w	fp, [r8, #2]
 800ce24:	f8a8 b00c 	strh.w	fp, [r8, #12]
 800ce28:	f8a8 300a 	strh.w	r3, [r8, #10]
 800ce2c:	2600      	movs	r6, #0
 800ce2e:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 800ce32:	ed9f aa7a 	vldr	s20, [pc, #488]	@ 800d01c <acc_translation_a121_translate+0x6f0>
 800ce36:	eddf aa7a 	vldr	s21, [pc, #488]	@ 800d020 <acc_translation_a121_translate+0x6f4>
 800ce3a:	eddf 9a72 	vldr	s19, [pc, #456]	@ 800d004 <acc_translation_a121_translate+0x6d8>
 800ce3e:	ed9f 9a79 	vldr	s18, [pc, #484]	@ 800d024 <acc_translation_a121_translate+0x6f8>
 800ce42:	9607      	str	r6, [sp, #28]
 800ce44:	9602      	str	r6, [sp, #8]
 800ce46:	f108 090e 	add.w	r9, r8, #14
 800ce4a:	462f      	mov	r7, r5
 800ce4c:	f104 0a46 	add.w	sl, r4, #70	@ 0x46
 800ce50:	9503      	str	r5, [sp, #12]
 800ce52:	9409      	str	r4, [sp, #36]	@ 0x24
 800ce54:	9305      	str	r3, [sp, #20]
 800ce56:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800ce5a:	fa5f fc86 	uxtb.w	ip, r6
 800ce5e:	4564      	cmp	r4, ip
 800ce60:	4653      	mov	r3, sl
 800ce62:	4639      	mov	r1, r7
 800ce64:	465a      	mov	r2, fp
 800ce66:	f04f 0c00 	mov.w	ip, #0
 800ce6a:	d82b      	bhi.n	800cec4 <acc_translation_a121_translate+0x598>
 800ce6c:	9b05      	ldr	r3, [sp, #20]
 800ce6e:	f8a9 c000 	strh.w	ip, [r9]
 800ce72:	f8a9 c008 	strh.w	ip, [r9, #8]
 800ce76:	f823 c016 	strh.w	ip, [r3, r6, lsl #1]
 800ce7a:	3601      	adds	r6, #1
 800ce7c:	2e04      	cmp	r6, #4
 800ce7e:	f109 0902 	add.w	r9, r9, #2
 800ce82:	f107 0710 	add.w	r7, r7, #16
 800ce86:	f10a 0a56 	add.w	sl, sl, #86	@ 0x56
 800ce8a:	d1e4      	bne.n	800ce56 <acc_translation_a121_translate+0x52a>
 800ce8c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800ce90:	9906      	ldr	r1, [sp, #24]
 800ce92:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800ce96:	9d03      	ldr	r5, [sp, #12]
 800ce98:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ce9a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800ce9e:	fb12 f201 	smulbb	r2, r2, r1
 800cea2:	b292      	uxth	r2, r2
 800cea4:	4413      	add	r3, r2
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	f103 0c01 	add.w	ip, r3, #1
 800ceac:	fa1f fc8c 	uxth.w	ip, ip
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	e5aa      	b.n	800ca0a <acc_translation_a121_translate+0xde>
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800ceb8:	8522      	strh	r2, [r4, #40]	@ 0x28
 800ceba:	e792      	b.n	800cde2 <acc_translation_a121_translate+0x4b6>
 800cebc:	2301      	movs	r3, #1
 800cebe:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800cec0:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800cec2:	e7a8      	b.n	800ce16 <acc_translation_a121_translate+0x4ea>
 800cec4:	9d05      	ldr	r5, [sp, #20]
 800cec6:	f04f 0401 	mov.w	r4, #1
 800ceca:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800cece:	ac0b      	add	r4, sp, #44	@ 0x2c
 800ced0:	9400      	str	r4, [sp, #0]
 800ced2:	f7ff fb57 	bl	800c584 <acc_translation_a121_subsweep_translate>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d045      	beq.n	800cf66 <acc_translation_a121_translate+0x63a>
 800ceda:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800cede:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800cee2:	f8a9 3000 	strh.w	r3, [r9]
 800cee6:	f8a9 2008 	strh.w	r2, [r9, #8]
 800ceea:	4413      	add	r3, r2
 800ceec:	7bfa      	ldrb	r2, [r7, #15]
 800ceee:	f8a8 300c 	strh.w	r3, [r8, #12]
 800cef2:	2a01      	cmp	r2, #1
 800cef4:	f8ba 3028 	ldrh.w	r3, [sl, #40]	@ 0x28
 800cef8:	d02e      	beq.n	800cf58 <acc_translation_a121_translate+0x62c>
 800cefa:	2a02      	cmp	r2, #2
 800cefc:	bf0c      	ite	eq
 800cefe:	eef0 5a49 	vmoveq.f32	s11, s18
 800cf02:	eef0 5a69 	vmovne.f32	s11, s19
 800cf06:	3301      	adds	r3, #1
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	ee07 3a10 	vmov	s14, r3
 800cf0e:	88bb      	ldrh	r3, [r7, #4]
 800cf10:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800cf14:	ee06 3a10 	vmov	s12, r3
 800cf18:	893b      	ldrh	r3, [r7, #8]
 800cf1a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800cf1e:	ee07 3a90 	vmov	s15, r3
 800cf22:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cf26:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800cf2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf2e:	ee67 7a06 	vmul.f32	s15, s14, s12
 800cf32:	9b02      	ldr	r3, [sp, #8]
 800cf34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cf38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cf3c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800cf40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf44:	ee17 2a90 	vmov	r2, s15
 800cf48:	4413      	add	r3, r2
 800cf4a:	9302      	str	r3, [sp, #8]
 800cf4c:	9b07      	ldr	r3, [sp, #28]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d193      	bne.n	800ce7a <acc_translation_a121_translate+0x54e>
 800cf52:	7afb      	ldrb	r3, [r7, #11]
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	e790      	b.n	800ce7a <acc_translation_a121_translate+0x54e>
 800cf58:	eef0 5a6a 	vmov.f32	s11, s21
 800cf5c:	e7d3      	b.n	800cf06 <acc_translation_a121_translate+0x5da>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800cf62:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800cf64:	e757      	b.n	800ce16 <acc_translation_a121_translate+0x4ea>
 800cf66:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800cf6a:	9906      	ldr	r1, [sp, #24]
 800cf6c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800cf70:	9d03      	ldr	r5, [sp, #12]
 800cf72:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800cf74:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800cf78:	fb12 f201 	smulbb	r2, r2, r1
 800cf7c:	b292      	uxth	r2, r2
 800cf7e:	4413      	add	r3, r2
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	f103 0c01 	add.w	ip, r3, #1
 800cf86:	fa1f fc8c 	uxth.w	ip, ip
 800cf8a:	e53e      	b.n	800ca0a <acc_translation_a121_translate+0xde>
 800cf8c:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800cf90:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800cf94:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 800d004 <acc_translation_a121_translate+0x6d8>
 800cf98:	4291      	cmp	r1, r2
 800cf9a:	f47f ad0c 	bne.w	800c9b6 <acc_translation_a121_translate+0x8a>
 800cf9e:	e6b7      	b.n	800cd10 <acc_translation_a121_translate+0x3e4>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	f8a8 b002 	strh.w	fp, [r8, #2]
 800cfa6:	f8a8 300a 	strh.w	r3, [r8, #10]
 800cfaa:	465f      	mov	r7, fp
 800cfac:	f04f 0c02 	mov.w	ip, #2
 800cfb0:	465a      	mov	r2, fp
 800cfb2:	f8cd b008 	str.w	fp, [sp, #8]
 800cfb6:	4658      	mov	r0, fp
 800cfb8:	e527      	b.n	800ca0a <acc_translation_a121_translate+0xde>
 800cfba:	b933      	cbnz	r3, 800cfca <acc_translation_a121_translate+0x69e>
 800cfbc:	2a02      	cmp	r2, #2
 800cfbe:	d00a      	beq.n	800cfd6 <acc_translation_a121_translate+0x6aa>
 800cfc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cfc2:	7113      	strb	r3, [r2, #4]
 800cfc4:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800cfc8:	e620      	b.n	800cc0c <acc_translation_a121_translate+0x2e0>
 800cfca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cfcc:	2300      	movs	r3, #0
 800cfce:	7113      	strb	r3, [r2, #4]
 800cfd0:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800cfd4:	e61a      	b.n	800cc0c <acc_translation_a121_translate+0x2e0>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e60c      	b.n	800cbf4 <acc_translation_a121_translate+0x2c8>
 800cfda:	9004      	str	r0, [sp, #16]
 800cfdc:	e69f      	b.n	800cd1e <acc_translation_a121_translate+0x3f2>
 800cfde:	4621      	mov	r1, r4
 800cfe0:	4658      	mov	r0, fp
 800cfe2:	f7fe fffd 	bl	800bfe0 <acc_translation_a121_set_calibration_params>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f8a8 3002 	strh.w	r3, [r8, #2]
 800cfee:	f8a8 300c 	strh.w	r3, [r8, #12]
 800cff2:	f8a8 200a 	strh.w	r2, [r8, #10]
 800cff6:	e719      	b.n	800ce2c <acc_translation_a121_translate+0x500>
 800cff8:	200003f0 	.word	0x200003f0
 800cffc:	080131c8 	.word	0x080131c8
 800d000:	08012f80 	.word	0x08012f80
 800d004:	00000000 	.word	0x00000000
 800d008:	08013188 	.word	0x08013188
 800d00c:	3c23d70a 	.word	0x3c23d70a
 800d010:	49742400 	.word	0x49742400
 800d014:	08013238 	.word	0x08013238
 800d018:	08013128 	.word	0x08013128
 800d01c:	3e124925 	.word	0x3e124925
 800d020:	3e4ccccd 	.word	0x3e4ccccd
 800d024:	3d75c28f 	.word	0x3d75c28f

0800d028 <acc_translation_pulseshaper_calc_settings>:
 800d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02c:	7804      	ldrb	r4, [r0, #0]
 800d02e:	2300      	movs	r3, #0
 800d030:	8093      	strh	r3, [r2, #4]
 800d032:	b374      	cbz	r4, 800d092 <acc_translation_pulseshaper_calc_settings+0x6a>
 800d034:	6846      	ldr	r6, [r0, #4]
 800d036:	2401      	movs	r4, #1
 800d038:	4637      	mov	r7, r6
 800d03a:	8214      	strh	r4, [r2, #16]
 800d03c:	b3a6      	cbz	r6, 800d0a8 <acc_translation_pulseshaper_calc_settings+0x80>
 800d03e:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 800d042:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800d046:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800d04a:	461c      	mov	r4, r3
 800d04c:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 800d050:	eba5 0508 	sub.w	r5, r5, r8
 800d054:	4575      	cmp	r5, lr
 800d056:	fa1f fc84 	uxth.w	ip, r4
 800d05a:	4453      	add	r3, sl
 800d05c:	f104 0401 	add.w	r4, r4, #1
 800d060:	da02      	bge.n	800d068 <acc_translation_pulseshaper_calc_settings+0x40>
 800d062:	2c0f      	cmp	r4, #15
 800d064:	d1f2      	bne.n	800d04c <acc_translation_pulseshaper_calc_settings+0x24>
 800d066:	46a4      	mov	ip, r4
 800d068:	e9d1 8e07 	ldrd	r8, lr, [r1, #28]
 800d06c:	2505      	movs	r5, #5
 800d06e:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d072:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800d076:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 800d07a:	1ba4      	subs	r4, r4, r6
 800d07c:	f105 0c01 	add.w	ip, r5, #1
 800d080:	4473      	add	r3, lr
 800d082:	d563      	bpl.n	800d14c <acc_translation_pulseshaper_calc_settings+0x124>
 800d084:	fa1f f58c 	uxth.w	r5, ip
 800d088:	2d14      	cmp	r5, #20
 800d08a:	d1f4      	bne.n	800d076 <acc_translation_pulseshaper_calc_settings+0x4e>
 800d08c:	2000      	movs	r0, #0
 800d08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d092:	8214      	strh	r4, [r2, #16]
 800d094:	80d4      	strh	r4, [r2, #6]
 800d096:	8054      	strh	r4, [r2, #2]
 800d098:	8114      	strh	r4, [r2, #8]
 800d09a:	81d4      	strh	r4, [r2, #14]
 800d09c:	8154      	strh	r4, [r2, #10]
 800d09e:	8194      	strh	r4, [r2, #12]
 800d0a0:	8254      	strh	r4, [r2, #18]
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800d0ac:	80d6      	strh	r6, [r2, #6]
 800d0ae:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800d0b2:	8056      	strh	r6, [r2, #2]
 800d0b4:	d343      	bcc.n	800d13e <acc_translation_pulseshaper_calc_settings+0x116>
 800d0b6:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800d0ba:	ebac 050e 	sub.w	r5, ip, lr
 800d0be:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800d0c2:	f340 80b3 	ble.w	800d22c <acc_translation_pulseshaper_calc_settings+0x204>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	3002      	adds	r0, #2
 800d0d0:	fb03 f000 	mul.w	r0, r3, r0
 800d0d4:	42a8      	cmp	r0, r5
 800d0d6:	f104 0401 	add.w	r4, r4, #1
 800d0da:	dbf7      	blt.n	800d0cc <acc_translation_pulseshaper_calc_settings+0xa4>
 800d0dc:	2e00      	cmp	r6, #0
 800d0de:	bf14      	ite	ne
 800d0e0:	2501      	movne	r5, #1
 800d0e2:	2500      	moveq	r5, #0
 800d0e4:	f04f 0001 	mov.w	r0, #1
 800d0e8:	8115      	strh	r5, [r2, #8]
 800d0ea:	81d0      	strh	r0, [r2, #14]
 800d0ec:	d14f      	bne.n	800d18e <acc_translation_pulseshaper_calc_settings+0x166>
 800d0ee:	8156      	strh	r6, [r2, #10]
 800d0f0:	b344      	cbz	r4, 800d144 <acc_translation_pulseshaper_calc_settings+0x11c>
 800d0f2:	fb03 c314 	mls	r3, r3, r4, ip
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	e001      	b.n	800d104 <acc_translation_pulseshaper_calc_settings+0xdc>
 800d100:	2916      	cmp	r1, #22
 800d102:	d0c3      	beq.n	800d08c <acc_translation_pulseshaper_calc_settings+0x64>
 800d104:	eb0c 4510 	add.w	r5, ip, r0, lsr #16
 800d108:	1aed      	subs	r5, r5, r3
 800d10a:	b28e      	uxth	r6, r1
 800d10c:	4470      	add	r0, lr
 800d10e:	f101 0101 	add.w	r1, r1, #1
 800d112:	d4f5      	bmi.n	800d100 <acc_translation_pulseshaper_calc_settings+0xd8>
 800d114:	b15e      	cbz	r6, 800d12e <acc_translation_pulseshaper_calc_settings+0x106>
 800d116:	b957      	cbnz	r7, 800d12e <acc_translation_pulseshaper_calc_settings+0x106>
 800d118:	1e71      	subs	r1, r6, #1
 800d11a:	b289      	uxth	r1, r1
 800d11c:	fb0e fe01 	mul.w	lr, lr, r1
 800d120:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 800d124:	eba3 030c 	sub.w	r3, r3, ip
 800d128:	429d      	cmp	r5, r3
 800d12a:	bfc8      	it	gt
 800d12c:	460e      	movgt	r6, r1
 800d12e:	8196      	strh	r6, [r2, #12]
 800d130:	2c00      	cmp	r4, #0
 800d132:	d0b5      	beq.n	800d0a0 <acc_translation_pulseshaper_calc_settings+0x78>
 800d134:	1de3      	adds	r3, r4, #7
 800d136:	2401      	movs	r4, #1
 800d138:	409c      	lsls	r4, r3
 800d13a:	b2a4      	uxth	r4, r4
 800d13c:	e7b0      	b.n	800d0a0 <acc_translation_pulseshaper_calc_settings+0x78>
 800d13e:	8116      	strh	r6, [r2, #8]
 800d140:	81d6      	strh	r6, [r2, #14]
 800d142:	8156      	strh	r6, [r2, #10]
 800d144:	2400      	movs	r4, #0
 800d146:	4663      	mov	r3, ip
 800d148:	4627      	mov	r7, r4
 800d14a:	e7d4      	b.n	800d0f6 <acc_translation_pulseshaper_calc_settings+0xce>
 800d14c:	2d05      	cmp	r5, #5
 800d14e:	d00a      	beq.n	800d166 <acc_translation_pulseshaper_calc_settings+0x13e>
 800d150:	1e6b      	subs	r3, r5, #1
 800d152:	b29b      	uxth	r3, r3
 800d154:	fb0e fe03 	mul.w	lr, lr, r3
 800d158:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 800d15c:	eba6 0e0e 	sub.w	lr, r6, lr
 800d160:	4574      	cmp	r4, lr
 800d162:	bfc8      	it	gt
 800d164:	461d      	movgt	r5, r3
 800d166:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800d16a:	8055      	strh	r5, [r2, #2]
 800d16c:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800d170:	d349      	bcc.n	800d206 <acc_translation_pulseshaper_calc_settings+0x1de>
 800d172:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800d176:	ebac 050e 	sub.w	r5, ip, lr
 800d17a:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800d17e:	dca2      	bgt.n	800d0c6 <acc_translation_pulseshaper_calc_settings+0x9e>
 800d180:	1e30      	subs	r0, r6, #0
 800d182:	bf18      	it	ne
 800d184:	2001      	movne	r0, #1
 800d186:	2301      	movs	r3, #1
 800d188:	8110      	strh	r0, [r2, #8]
 800d18a:	81d3      	strh	r3, [r2, #14]
 800d18c:	2400      	movs	r4, #0
 800d18e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800d192:	fb03 c314 	mls	r3, r3, r4, ip
 800d196:	2500      	movs	r5, #0
 800d198:	f8d1 9018 	ldr.w	r9, [r1, #24]
 800d19c:	4628      	mov	r0, r5
 800d19e:	e002      	b.n	800d1a6 <acc_translation_pulseshaper_calc_settings+0x17e>
 800d1a0:	2816      	cmp	r0, #22
 800d1a2:	f43f af73 	beq.w	800d08c <acc_translation_pulseshaper_calc_settings+0x64>
 800d1a6:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 800d1aa:	1aff      	subs	r7, r7, r3
 800d1ac:	fa1f f880 	uxth.w	r8, r0
 800d1b0:	444d      	add	r5, r9
 800d1b2:	f100 0001 	add.w	r0, r0, #1
 800d1b6:	d4f3      	bmi.n	800d1a0 <acc_translation_pulseshaper_calc_settings+0x178>
 800d1b8:	f1b8 0f00 	cmp.w	r8, #0
 800d1bc:	d12a      	bne.n	800d214 <acc_translation_pulseshaper_calc_settings+0x1ec>
 800d1be:	f8a2 800a 	strh.w	r8, [r2, #10]
 800d1c2:	b1c4      	cbz	r4, 800d1f6 <acc_translation_pulseshaper_calc_settings+0x1ce>
 800d1c4:	4637      	mov	r7, r6
 800d1c6:	2e00      	cmp	r6, #0
 800d1c8:	d095      	beq.n	800d0f6 <acc_translation_pulseshaper_calc_settings+0xce>
 800d1ca:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 800d1ce:	88d6      	ldrh	r6, [r2, #6]
 800d1d0:	fb05 f506 	mul.w	r5, r5, r6
 800d1d4:	688e      	ldr	r6, [r1, #8]
 800d1d6:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 800d1da:	1b80      	subs	r0, r0, r6
 800d1dc:	f53f af56 	bmi.w	800d08c <acc_translation_pulseshaper_calc_settings+0x64>
 800d1e0:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 800d1e4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800d1e8:	fb06 f60c 	mul.w	r6, r6, ip
 800d1ec:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 800d1f0:	4428      	add	r0, r5
 800d1f2:	4403      	add	r3, r0
 800d1f4:	e77f      	b.n	800d0f6 <acc_translation_pulseshaper_calc_settings+0xce>
 800d1f6:	4637      	mov	r7, r6
 800d1f8:	2e00      	cmp	r6, #0
 800d1fa:	d0a3      	beq.n	800d144 <acc_translation_pulseshaper_calc_settings+0x11c>
 800d1fc:	fb09 f308 	mul.w	r3, r9, r8
 800d200:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 800d204:	e7e1      	b.n	800d1ca <acc_translation_pulseshaper_calc_settings+0x1a2>
 800d206:	2400      	movs	r4, #0
 800d208:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800d20c:	8114      	strh	r4, [r2, #8]
 800d20e:	81d4      	strh	r4, [r2, #14]
 800d210:	4663      	mov	r3, ip
 800d212:	e7c0      	b.n	800d196 <acc_translation_pulseshaper_calc_settings+0x16e>
 800d214:	f108 35ff 	add.w	r5, r8, #4294967295
 800d218:	b2ad      	uxth	r5, r5
 800d21a:	fb09 f005 	mul.w	r0, r9, r5
 800d21e:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 800d222:	1a18      	subs	r0, r3, r0
 800d224:	4287      	cmp	r7, r0
 800d226:	bfc8      	it	gt
 800d228:	46a8      	movgt	r8, r5
 800d22a:	e7c8      	b.n	800d1be <acc_translation_pulseshaper_calc_settings+0x196>
 800d22c:	8116      	strh	r6, [r2, #8]
 800d22e:	81d4      	strh	r4, [r2, #14]
 800d230:	8156      	strh	r6, [r2, #10]
 800d232:	e787      	b.n	800d144 <acc_translation_pulseshaper_calc_settings+0x11c>

0800d234 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 800d234:	7803      	ldrb	r3, [r0, #0]
 800d236:	b13b      	cbz	r3, 800d248 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800d238:	6842      	ldr	r2, [r0, #4]
 800d23a:	b12a      	cbz	r2, 800d248 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800d23c:	6902      	ldr	r2, [r0, #16]
 800d23e:	2a02      	cmp	r2, #2
 800d240:	d90b      	bls.n	800d25a <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 800d242:	2300      	movs	r3, #0
 800d244:	4618      	mov	r0, r3
 800d246:	4770      	bx	lr
 800d248:	6903      	ldr	r3, [r0, #16]
 800d24a:	2b07      	cmp	r3, #7
 800d24c:	d8f9      	bhi.n	800d242 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 800d24e:	4a05      	ldr	r2, [pc, #20]	@ (800d264 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 800d250:	5cd3      	ldrb	r3, [r2, r3]
 800d252:	800b      	strh	r3, [r1, #0]
 800d254:	2301      	movs	r3, #1
 800d256:	4618      	mov	r0, r3
 800d258:	4770      	bx	lr
 800d25a:	4803      	ldr	r0, [pc, #12]	@ (800d268 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 800d25c:	5c82      	ldrb	r2, [r0, r2]
 800d25e:	800a      	strh	r2, [r1, #0]
 800d260:	4618      	mov	r0, r3
 800d262:	4770      	bx	lr
 800d264:	08013290 	.word	0x08013290
 800d268:	08013298 	.word	0x08013298

0800d26c <acc_utils_bool_to_str>:
 800d26c:	4a03      	ldr	r2, [pc, #12]	@ (800d27c <acc_utils_bool_to_str+0x10>)
 800d26e:	4b04      	ldr	r3, [pc, #16]	@ (800d280 <acc_utils_bool_to_str+0x14>)
 800d270:	2800      	cmp	r0, #0
 800d272:	bf14      	ite	ne
 800d274:	4610      	movne	r0, r2
 800d276:	4618      	moveq	r0, r3
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop
 800d27c:	0801329c 	.word	0x0801329c
 800d280:	080132a4 	.word	0x080132a4

0800d284 <acc_utils_idle_state_to_str>:
 800d284:	2802      	cmp	r0, #2
 800d286:	bf9a      	itte	ls
 800d288:	4b02      	ldrls	r3, [pc, #8]	@ (800d294 <acc_utils_idle_state_to_str+0x10>)
 800d28a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d28e:	4802      	ldrhi	r0, [pc, #8]	@ (800d298 <acc_utils_idle_state_to_str+0x14>)
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	08013334 	.word	0x08013334
 800d298:	08011bc4 	.word	0x08011bc4

0800d29c <acc_utils_profile_to_str>:
 800d29c:	3801      	subs	r0, #1
 800d29e:	b2c0      	uxtb	r0, r0
 800d2a0:	2804      	cmp	r0, #4
 800d2a2:	bf9a      	itte	ls
 800d2a4:	4b02      	ldrls	r3, [pc, #8]	@ (800d2b0 <acc_utils_profile_to_str+0x14>)
 800d2a6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d2aa:	4802      	ldrhi	r0, [pc, #8]	@ (800d2b4 <acc_utils_profile_to_str+0x18>)
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	08013340 	.word	0x08013340
 800d2b4:	08011bc4 	.word	0x08011bc4

0800d2b8 <acc_utils_prf_to_str>:
 800d2b8:	2805      	cmp	r0, #5
 800d2ba:	bf9a      	itte	ls
 800d2bc:	4b02      	ldrls	r3, [pc, #8]	@ (800d2c8 <acc_utils_prf_to_str+0x10>)
 800d2be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d2c2:	4802      	ldrhi	r0, [pc, #8]	@ (800d2cc <acc_utils_prf_to_str+0x14>)
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop
 800d2c8:	08013354 	.word	0x08013354
 800d2cc:	08011bc4 	.word	0x08011bc4

0800d2d0 <acc_confprogram_modify_bin_sensor>:
 800d2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2d4:	b085      	sub	sp, #20
 800d2d6:	2601      	movs	r6, #1
 800d2d8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800d2dc:	fa06 f503 	lsl.w	r5, r6, r3
 800d2e0:	4545      	cmp	r5, r8
 800d2e2:	461c      	mov	r4, r3
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	d80d      	bhi.n	800d304 <acc_confprogram_modify_bin_sensor+0x34>
 800d2e8:	4a14      	ldr	r2, [pc, #80]	@ (800d33c <acc_confprogram_modify_bin_sensor+0x6c>)
 800d2ea:	f8cd 8000 	str.w	r8, [sp]
 800d2ee:	3d01      	subs	r5, #1
 800d2f0:	9501      	str	r5, [sp, #4]
 800d2f2:	6914      	ldr	r4, [r2, #16]
 800d2f4:	4912      	ldr	r1, [pc, #72]	@ (800d340 <acc_confprogram_modify_bin_sensor+0x70>)
 800d2f6:	4a13      	ldr	r2, [pc, #76]	@ (800d344 <acc_confprogram_modify_bin_sensor+0x74>)
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	47a0      	blx	r4
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	b005      	add	sp, #20
 800d300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d304:	4691      	mov	r9, r2
 800d306:	4607      	mov	r7, r0
 800d308:	9103      	str	r1, [sp, #12]
 800d30a:	f1c4 0420 	rsb	r4, r4, #32
 800d30e:	f000 f9ed 	bl	800d6ec <acc_sensor_conf_read_instr>
 800d312:	f04f 31ff 	mov.w	r1, #4294967295
 800d316:	fa21 f404 	lsr.w	r4, r1, r4
 800d31a:	9b03      	ldr	r3, [sp, #12]
 800d31c:	fa04 f409 	lsl.w	r4, r4, r9
 800d320:	ea20 0404 	bic.w	r4, r0, r4
 800d324:	fa08 f209 	lsl.w	r2, r8, r9
 800d328:	4619      	mov	r1, r3
 800d32a:	4638      	mov	r0, r7
 800d32c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d32e:	4322      	orrs	r2, r4
 800d330:	4798      	blx	r3
 800d332:	4630      	mov	r0, r6
 800d334:	b005      	add	sp, #20
 800d336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d33a:	bf00      	nop
 800d33c:	200003f0 	.word	0x200003f0
 800d340:	080133a4 	.word	0x080133a4
 800d344:	0801336c 	.word	0x0801336c

0800d348 <acc_confprogram_modify_bin>:
 800d348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d34c:	b085      	sub	sp, #20
 800d34e:	2401      	movs	r4, #1
 800d350:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800d354:	fa04 f703 	lsl.w	r7, r4, r3
 800d358:	4547      	cmp	r7, r8
 800d35a:	461e      	mov	r6, r3
 800d35c:	460b      	mov	r3, r1
 800d35e:	d80d      	bhi.n	800d37c <acc_confprogram_modify_bin+0x34>
 800d360:	4a17      	ldr	r2, [pc, #92]	@ (800d3c0 <acc_confprogram_modify_bin+0x78>)
 800d362:	f8cd 8000 	str.w	r8, [sp]
 800d366:	3f01      	subs	r7, #1
 800d368:	9701      	str	r7, [sp, #4]
 800d36a:	6914      	ldr	r4, [r2, #16]
 800d36c:	4915      	ldr	r1, [pc, #84]	@ (800d3c4 <acc_confprogram_modify_bin+0x7c>)
 800d36e:	4a16      	ldr	r2, [pc, #88]	@ (800d3c8 <acc_confprogram_modify_bin+0x80>)
 800d370:	2000      	movs	r0, #0
 800d372:	47a0      	blx	r4
 800d374:	2000      	movs	r0, #0
 800d376:	b005      	add	sp, #20
 800d378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d37c:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 800d380:	4691      	mov	r9, r2
 800d382:	4628      	mov	r0, r5
 800d384:	4622      	mov	r2, r4
 800d386:	a902      	add	r1, sp, #8
 800d388:	f000 faf8 	bl	800d97c <acc_utils_transfer_buffer_to_uint32>
 800d38c:	f1c6 0620 	rsb	r6, r6, #32
 800d390:	f04f 32ff 	mov.w	r2, #4294967295
 800d394:	fa22 f606 	lsr.w	r6, r2, r6
 800d398:	9a02      	ldr	r2, [sp, #8]
 800d39a:	fa06 f609 	lsl.w	r6, r6, r9
 800d39e:	fa08 f809 	lsl.w	r8, r8, r9
 800d3a2:	ea22 0206 	bic.w	r2, r2, r6
 800d3a6:	ea42 0608 	orr.w	r6, r2, r8
 800d3aa:	a803      	add	r0, sp, #12
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	9603      	str	r6, [sp, #12]
 800d3b2:	f000 fad5 	bl	800d960 <acc_utils_uint32_to_transfer_buffer>
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	b005      	add	sp, #20
 800d3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3be:	bf00      	nop
 800d3c0:	200003f0 	.word	0x200003f0
 800d3c4:	080133a4 	.word	0x080133a4
 800d3c8:	080133b0 	.word	0x080133b0

0800d3cc <acc_confprogram_modify_runif>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	460e      	mov	r6, r1
 800d3d8:	4620      	mov	r0, r4
 800d3da:	4669      	mov	r1, sp
 800d3dc:	461d      	mov	r5, r3
 800d3de:	f000 facd 	bl	800d97c <acc_utils_transfer_buffer_to_uint32>
 800d3e2:	9a00      	ldr	r2, [sp, #0]
 800d3e4:	f022 020f 	bic.w	r2, r2, #15
 800d3e8:	b105      	cbz	r5, 800d3ec <acc_confprogram_modify_runif+0x20>
 800d3ea:	4332      	orrs	r2, r6
 800d3ec:	9201      	str	r2, [sp, #4]
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	a801      	add	r0, sp, #4
 800d3f4:	f000 fab4 	bl	800d960 <acc_utils_uint32_to_transfer_buffer>
 800d3f8:	b002      	add	sp, #8
 800d3fa:	bd70      	pop	{r4, r5, r6, pc}

0800d3fc <acc_confprogram_patch_offset>:
 800d3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d400:	b083      	sub	sp, #12
 800d402:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 800d406:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800d40a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d40e:	887b      	ldrh	r3, [r7, #2]
 800d410:	b303      	cbz	r3, 800d454 <acc_confprogram_patch_offset+0x58>
 800d412:	460d      	mov	r5, r1
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	4680      	mov	r8, r0
 800d418:	18ae      	adds	r6, r5, r2
 800d41a:	2400      	movs	r4, #0
 800d41c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800d420:	0042      	lsls	r2, r0, #1
 800d422:	b292      	uxth	r2, r2
 800d424:	42aa      	cmp	r2, r5
 800d426:	d312      	bcc.n	800d44e <acc_confprogram_patch_offset+0x52>
 800d428:	42b2      	cmp	r2, r6
 800d42a:	da10      	bge.n	800d44e <acc_confprogram_patch_offset+0x52>
 800d42c:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800d430:	2b01      	cmp	r3, #1
 800d432:	d036      	beq.n	800d4a2 <acc_confprogram_patch_offset+0xa6>
 800d434:	2b02      	cmp	r3, #2
 800d436:	d024      	beq.n	800d482 <acc_confprogram_patch_offset+0x86>
 800d438:	b183      	cbz	r3, 800d45c <acc_confprogram_patch_offset+0x60>
 800d43a:	4b1e      	ldr	r3, [pc, #120]	@ (800d4b4 <acc_confprogram_patch_offset+0xb8>)
 800d43c:	4a1e      	ldr	r2, [pc, #120]	@ (800d4b8 <acc_confprogram_patch_offset+0xbc>)
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	491e      	ldr	r1, [pc, #120]	@ (800d4bc <acc_confprogram_patch_offset+0xc0>)
 800d442:	2000      	movs	r0, #0
 800d444:	4798      	blx	r3
 800d446:	2000      	movs	r0, #0
 800d448:	b003      	add	sp, #12
 800d44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d44e:	3401      	adds	r4, #1
 800d450:	42a3      	cmp	r3, r4
 800d452:	d8e3      	bhi.n	800d41c <acc_confprogram_patch_offset+0x20>
 800d454:	2001      	movs	r0, #1
 800d456:	b003      	add	sp, #12
 800d458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d45c:	1b52      	subs	r2, r2, r5
 800d45e:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800d462:	b291      	uxth	r1, r2
 800d464:	f8cd 9000 	str.w	r9, [sp]
 800d468:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800d46c:	4640      	mov	r0, r8
 800d46e:	f7ff ff6b 	bl	800d348 <acc_confprogram_modify_bin>
 800d472:	887b      	ldrh	r3, [r7, #2]
 800d474:	3401      	adds	r4, #1
 800d476:	42a3      	cmp	r3, r4
 800d478:	d9e6      	bls.n	800d448 <acc_confprogram_patch_offset+0x4c>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d0e4      	beq.n	800d448 <acc_confprogram_patch_offset+0x4c>
 800d47e:	6879      	ldr	r1, [r7, #4]
 800d480:	e7cc      	b.n	800d41c <acc_confprogram_patch_offset+0x20>
 800d482:	1b52      	subs	r2, r2, r5
 800d484:	fab9 f389 	clz	r3, r9
 800d488:	b292      	uxth	r2, r2
 800d48a:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800d48e:	095b      	lsrs	r3, r3, #5
 800d490:	4640      	mov	r0, r8
 800d492:	f7ff ff9b 	bl	800d3cc <acc_confprogram_modify_runif>
 800d496:	887b      	ldrh	r3, [r7, #2]
 800d498:	3401      	adds	r4, #1
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	d8ef      	bhi.n	800d47e <acc_confprogram_patch_offset+0x82>
 800d49e:	2001      	movs	r0, #1
 800d4a0:	e7d9      	b.n	800d456 <acc_confprogram_patch_offset+0x5a>
 800d4a2:	1b52      	subs	r2, r2, r5
 800d4a4:	f1b9 0300 	subs.w	r3, r9, #0
 800d4a8:	b292      	uxth	r2, r2
 800d4aa:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800d4ae:	bf18      	it	ne
 800d4b0:	2301      	movne	r3, #1
 800d4b2:	e7ed      	b.n	800d490 <acc_confprogram_patch_offset+0x94>
 800d4b4:	200003f0 	.word	0x200003f0
 800d4b8:	080133e8 	.word	0x080133e8
 800d4bc:	080133a4 	.word	0x080133a4

0800d4c0 <acc_confprogram_live_patch>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	b083      	sub	sp, #12
 800d4c6:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 800d4ca:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800d4ce:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d4d2:	8873      	ldrh	r3, [r6, #2]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d050      	beq.n	800d57a <acc_confprogram_live_patch+0xba>
 800d4d8:	4607      	mov	r7, r0
 800d4da:	468b      	mov	fp, r1
 800d4dc:	4690      	mov	r8, r2
 800d4de:	2501      	movs	r5, #1
 800d4e0:	6873      	ldr	r3, [r6, #4]
 800d4e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d4e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d4ea:	f3c0 7401 	ubfx	r4, r0, #28, #2
 800d4ee:	2c01      	cmp	r4, #1
 800d4f0:	d00c      	beq.n	800d50c <acc_confprogram_live_patch+0x4c>
 800d4f2:	2c02      	cmp	r4, #2
 800d4f4:	d032      	beq.n	800d55c <acc_confprogram_live_patch+0x9c>
 800d4f6:	b1ec      	cbz	r4, 800d534 <acc_confprogram_live_patch+0x74>
 800d4f8:	4b22      	ldr	r3, [pc, #136]	@ (800d584 <acc_confprogram_live_patch+0xc4>)
 800d4fa:	4a23      	ldr	r2, [pc, #140]	@ (800d588 <acc_confprogram_live_patch+0xc8>)
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	4923      	ldr	r1, [pc, #140]	@ (800d58c <acc_confprogram_live_patch+0xcc>)
 800d500:	2000      	movs	r0, #0
 800d502:	4798      	blx	r3
 800d504:	2000      	movs	r0, #0
 800d506:	b003      	add	sp, #12
 800d508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50c:	eb08 0100 	add.w	r1, r8, r0
 800d510:	b289      	uxth	r1, r1
 800d512:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800d516:	f022 020f 	bic.w	r2, r2, #15
 800d51a:	f1b9 0f00 	cmp.w	r9, #0
 800d51e:	d002      	beq.n	800d526 <acc_confprogram_live_patch+0x66>
 800d520:	f3c0 4003 	ubfx	r0, r0, #16, #4
 800d524:	4302      	orrs	r2, r0
 800d526:	4638      	mov	r0, r7
 800d528:	47d0      	blx	sl
 800d52a:	8873      	ldrh	r3, [r6, #2]
 800d52c:	42ab      	cmp	r3, r5
 800d52e:	d924      	bls.n	800d57a <acc_confprogram_live_patch+0xba>
 800d530:	3501      	adds	r5, #1
 800d532:	e7d5      	b.n	800d4e0 <acc_confprogram_live_patch+0x20>
 800d534:	eb08 0100 	add.w	r1, r8, r0
 800d538:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800d53c:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800d540:	e9cd 9a00 	strd	r9, sl, [sp]
 800d544:	b289      	uxth	r1, r1
 800d546:	4638      	mov	r0, r7
 800d548:	f7ff fec2 	bl	800d2d0 <acc_confprogram_modify_bin_sensor>
 800d54c:	8873      	ldrh	r3, [r6, #2]
 800d54e:	42ab      	cmp	r3, r5
 800d550:	d9d9      	bls.n	800d506 <acc_confprogram_live_patch+0x46>
 800d552:	2800      	cmp	r0, #0
 800d554:	d1ec      	bne.n	800d530 <acc_confprogram_live_patch+0x70>
 800d556:	b003      	add	sp, #12
 800d558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55c:	eb08 0100 	add.w	r1, r8, r0
 800d560:	b289      	uxth	r1, r1
 800d562:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800d566:	f022 020f 	bic.w	r2, r2, #15
 800d56a:	f1b9 0f00 	cmp.w	r9, #0
 800d56e:	d0d7      	beq.n	800d520 <acc_confprogram_live_patch+0x60>
 800d570:	4638      	mov	r0, r7
 800d572:	47d0      	blx	sl
 800d574:	8873      	ldrh	r3, [r6, #2]
 800d576:	42ab      	cmp	r3, r5
 800d578:	d8da      	bhi.n	800d530 <acc_confprogram_live_patch+0x70>
 800d57a:	2001      	movs	r0, #1
 800d57c:	b003      	add	sp, #12
 800d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d582:	bf00      	nop
 800d584:	200003f0 	.word	0x200003f0
 800d588:	0801340c 	.word	0x0801340c
 800d58c:	080133a4 	.word	0x080133a4

0800d590 <acc_confprogram_copy>:
 800d590:	b152      	cbz	r2, 800d5a8 <acc_confprogram_copy+0x18>
 800d592:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d596:	3804      	subs	r0, #4
 800d598:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800d59c:	804b      	strh	r3, [r1, #2]
 800d59e:	0c1b      	lsrs	r3, r3, #16
 800d5a0:	800b      	strh	r3, [r1, #0]
 800d5a2:	3104      	adds	r1, #4
 800d5a4:	4291      	cmp	r1, r2
 800d5a6:	d1f7      	bne.n	800d598 <acc_confprogram_copy+0x8>
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop

0800d5ac <acc_confprogram_get_parameter_patch_range>:
 800d5ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d5b0:	b470      	push	{r4, r5, r6}
 800d5b2:	884e      	ldrh	r6, [r1, #2]
 800d5b4:	b1c6      	cbz	r6, 800d5e8 <acc_confprogram_get_parameter_patch_range+0x3c>
 800d5b6:	6848      	ldr	r0, [r1, #4]
 800d5b8:	2500      	movs	r5, #0
 800d5ba:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800d5be:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 800d5c2:	f850 1b04 	ldr.w	r1, [r0], #4
 800d5c6:	b289      	uxth	r1, r1
 800d5c8:	428c      	cmp	r4, r1
 800d5ca:	bf28      	it	cs
 800d5cc:	460c      	movcs	r4, r1
 800d5ce:	428d      	cmp	r5, r1
 800d5d0:	bf38      	it	cc
 800d5d2:	460d      	movcc	r5, r1
 800d5d4:	4286      	cmp	r6, r0
 800d5d6:	d1f4      	bne.n	800d5c2 <acc_confprogram_get_parameter_patch_range+0x16>
 800d5d8:	0064      	lsls	r4, r4, #1
 800d5da:	006d      	lsls	r5, r5, #1
 800d5dc:	b2a4      	uxth	r4, r4
 800d5de:	b2ad      	uxth	r5, r5
 800d5e0:	8014      	strh	r4, [r2, #0]
 800d5e2:	801d      	strh	r5, [r3, #0]
 800d5e4:	bc70      	pop	{r4, r5, r6}
 800d5e6:	4770      	bx	lr
 800d5e8:	4635      	mov	r5, r6
 800d5ea:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 800d5ee:	8014      	strh	r4, [r2, #0]
 800d5f0:	801d      	strh	r5, [r3, #0]
 800d5f2:	bc70      	pop	{r4, r5, r6}
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop

0800d5f8 <acc_element_sizeof>:
 800d5f8:	3801      	subs	r0, #1
 800d5fa:	b2c0      	uxtb	r0, r0
 800d5fc:	2807      	cmp	r0, #7
 800d5fe:	bf9a      	itte	ls
 800d600:	4b02      	ldrls	r3, [pc, #8]	@ (800d60c <acc_element_sizeof+0x14>)
 800d602:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d606:	2000      	movhi	r0, #0
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	08013434 	.word	0x08013434

0800d610 <acc_element_connect>:
 800d610:	6001      	str	r1, [r0, #0]
 800d612:	4770      	bx	lr

0800d614 <acc_probes_execute_struct>:
 800d614:	b530      	push	{r4, r5, lr}
 800d616:	4c0a      	ldr	r4, [pc, #40]	@ (800d640 <acc_probes_execute_struct+0x2c>)
 800d618:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 800d61c:	b085      	sub	sp, #20
 800d61e:	6865      	ldr	r5, [r4, #4]
 800d620:	f88d 0004 	strb.w	r0, [sp, #4]
 800d624:	2007      	movs	r0, #7
 800d626:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800d62a:	b135      	cbz	r5, 800d63a <acc_probes_execute_struct+0x26>
 800d62c:	4611      	mov	r1, r2
 800d62e:	a801      	add	r0, sp, #4
 800d630:	461a      	mov	r2, r3
 800d632:	68e3      	ldr	r3, [r4, #12]
 800d634:	47a8      	blx	r5
 800d636:	b005      	add	sp, #20
 800d638:	bd30      	pop	{r4, r5, pc}
 800d63a:	2001      	movs	r0, #1
 800d63c:	b005      	add	sp, #20
 800d63e:	bd30      	pop	{r4, r5, pc}
 800d640:	20000030 	.word	0x20000030

0800d644 <acc_sensor_reg_read>:
 800d644:	b530      	push	{r4, r5, lr}
 800d646:	b083      	sub	sp, #12
 800d648:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 800d64c:	4614      	mov	r4, r2
 800d64e:	2500      	movs	r5, #0
 800d650:	f8ad 1000 	strh.w	r1, [sp]
 800d654:	2301      	movs	r3, #1
 800d656:	2203      	movs	r2, #3
 800d658:	4669      	mov	r1, sp
 800d65a:	f8ad 5002 	strh.w	r5, [sp, #2]
 800d65e:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d662:	f7fd fc27 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800d666:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d66a:	8023      	strh	r3, [r4, #0]
 800d66c:	b003      	add	sp, #12
 800d66e:	bd30      	pop	{r4, r5, pc}

0800d670 <acc_sensor_reg_write>:
 800d670:	b530      	push	{r4, r5, lr}
 800d672:	b083      	sub	sp, #12
 800d674:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 800d678:	4615      	mov	r5, r2
 800d67a:	2300      	movs	r3, #0
 800d67c:	2202      	movs	r2, #2
 800d67e:	a901      	add	r1, sp, #4
 800d680:	f8ad 4004 	strh.w	r4, [sp, #4]
 800d684:	f8ad 5006 	strh.w	r5, [sp, #6]
 800d688:	f7fd fc14 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800d68c:	b003      	add	sp, #12
 800d68e:	bd30      	pop	{r4, r5, pc}

0800d690 <acc_sensor_reg_field_write>:
 800d690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	461d      	mov	r5, r3
 800d698:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800d69c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 800d6a0:	f8ad 3000 	strh.w	r3, [sp]
 800d6a4:	2700      	movs	r7, #0
 800d6a6:	468a      	mov	sl, r1
 800d6a8:	4691      	mov	r9, r2
 800d6aa:	4669      	mov	r1, sp
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	2203      	movs	r2, #3
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	f8ad 7002 	strh.w	r7, [sp, #2]
 800d6b6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d6ba:	f7fd fbfb 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800d6be:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800d6c2:	fa04 f10a 	lsl.w	r1, r4, sl
 800d6c6:	4071      	eors	r1, r6
 800d6c8:	ea01 0409 	and.w	r4, r1, r9
 800d6cc:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	463b      	mov	r3, r7
 800d6d4:	4669      	mov	r1, sp
 800d6d6:	4074      	eors	r4, r6
 800d6d8:	2202      	movs	r2, #2
 800d6da:	f8ad 5000 	strh.w	r5, [sp]
 800d6de:	f8ad 4002 	strh.w	r4, [sp, #2]
 800d6e2:	f7fd fbe7 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800d6e6:	b002      	add	sp, #8
 800d6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d6ec <acc_sensor_conf_read_instr>:
 800d6ec:	b530      	push	{r4, r5, lr}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	2401      	movs	r4, #1
 800d6f2:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 800d6f6:	4623      	mov	r3, r4
 800d6f8:	2500      	movs	r5, #0
 800d6fa:	f8ad 1004 	strh.w	r1, [sp, #4]
 800d6fe:	2205      	movs	r2, #5
 800d700:	a901      	add	r1, sp, #4
 800d702:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d706:	f8ad 5008 	strh.w	r5, [sp, #8]
 800d70a:	f8cd 500a 	str.w	r5, [sp, #10]
 800d70e:	f7fd fbd1 	bl	800aeb4 <acc_rss_integration_sensor_device_transfer>
 800d712:	f10d 000a 	add.w	r0, sp, #10
 800d716:	4622      	mov	r2, r4
 800d718:	4669      	mov	r1, sp
 800d71a:	f000 f92f 	bl	800d97c <acc_utils_transfer_buffer_to_uint32>
 800d71e:	9800      	ldr	r0, [sp, #0]
 800d720:	b005      	add	sp, #20
 800d722:	bd30      	pop	{r4, r5, pc}

0800d724 <acc_cpd_pll_divisors_calculate>:
 800d724:	edd0 7a00 	vldr	s15, [r0]
 800d728:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 800d8b0 <acc_cpd_pll_divisors_calculate+0x18c>
 800d72c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 800d8b4 <acc_cpd_pll_divisors_calculate+0x190>
 800d730:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800d734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d736:	4606      	mov	r6, r0
 800d738:	b083      	sub	sp, #12
 800d73a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d73e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d742:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d746:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74e:	ee17 3a10 	vmov	r3, s14
 800d752:	b29c      	uxth	r4, r3
 800d754:	dc06      	bgt.n	800d764 <acc_cpd_pll_divisors_calculate+0x40>
 800d756:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800d8b8 <acc_cpd_pll_divisors_calculate+0x194>
 800d75a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d762:	d571      	bpl.n	800d848 <acc_cpd_pll_divisors_calculate+0x124>
 800d764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d76c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800d8bc <acc_cpd_pll_divisors_calculate+0x198>
 800d770:	bf4c      	ite	mi
 800d772:	4b53      	ldrmi	r3, [pc, #332]	@ (800d8c0 <acc_cpd_pll_divisors_calculate+0x19c>)
 800d774:	4b53      	ldrpl	r3, [pc, #332]	@ (800d8c4 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800d776:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 800d8bc <acc_cpd_pll_divisors_calculate+0x198>
 800d77a:	eddf 6a53 	vldr	s13, [pc, #332]	@ 800d8c8 <acc_cpd_pll_divisors_calculate+0x1a4>
 800d77e:	4d53      	ldr	r5, [pc, #332]	@ (800d8cc <acc_cpd_pll_divisors_calculate+0x1a8>)
 800d780:	4953      	ldr	r1, [pc, #332]	@ (800d8d0 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800d782:	692f      	ldr	r7, [r5, #16]
 800d784:	bf48      	it	mi
 800d786:	eef1 7a67 	vnegmi.f32	s15, s15
 800d78a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d78e:	2000      	movs	r0, #0
 800d790:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800d794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79c:	ee17 2a10 	vmov	r2, s14
 800d7a0:	bf4c      	ite	mi
 800d7a2:	eeb1 7a67 	vnegmi.f32	s14, s15
 800d7a6:	eeb0 7a67 	vmovpl.f32	s14, s15
 800d7aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d7ae:	9200      	str	r2, [sp, #0]
 800d7b0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d7b4:	4a47      	ldr	r2, [pc, #284]	@ (800d8d4 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800d7b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d7ba:	3c10      	subs	r4, #16
 800d7bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d7c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7c8:	edcd 7a01 	vstr	s15, [sp, #4]
 800d7cc:	47b8      	blx	r7
 800d7ce:	2cef      	cmp	r4, #239	@ 0xef
 800d7d0:	d937      	bls.n	800d842 <acc_cpd_pll_divisors_calculate+0x11e>
 800d7d2:	edd6 7a00 	vldr	s15, [r6]
 800d7d6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800d8bc <acc_cpd_pll_divisors_calculate+0x198>
 800d7da:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 800d8bc <acc_cpd_pll_divisors_calculate+0x198>
 800d7de:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800d8c8 <acc_cpd_pll_divisors_calculate+0x1a4>
 800d7e2:	692c      	ldr	r4, [r5, #16]
 800d7e4:	493a      	ldr	r1, [pc, #232]	@ (800d8d0 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800d7e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ee:	bf48      	it	mi
 800d7f0:	eef1 7a67 	vnegmi.f32	s15, s15
 800d7f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7f8:	bf4c      	ite	mi
 800d7fa:	4b31      	ldrmi	r3, [pc, #196]	@ (800d8c0 <acc_cpd_pll_divisors_calculate+0x19c>)
 800d7fc:	4b31      	ldrpl	r3, [pc, #196]	@ (800d8c4 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800d7fe:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800d802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80a:	ee17 2a10 	vmov	r2, s14
 800d80e:	bf4c      	ite	mi
 800d810:	eeb1 7a67 	vnegmi.f32	s14, s15
 800d814:	eeb0 7a67 	vmovpl.f32	s14, s15
 800d818:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d81c:	9200      	str	r2, [sp, #0]
 800d81e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d822:	4a2c      	ldr	r2, [pc, #176]	@ (800d8d4 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800d824:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d828:	2000      	movs	r0, #0
 800d82a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d82e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d836:	edcd 7a01 	vstr	s15, [sp, #4]
 800d83a:	47a0      	blx	r4
 800d83c:	2000      	movs	r0, #0
 800d83e:	b003      	add	sp, #12
 800d840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d842:	2000      	movs	r0, #0
 800d844:	b003      	add	sp, #12
 800d846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d848:	f1a4 0310 	sub.w	r3, r4, #16
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	2bef      	cmp	r3, #239	@ 0xef
 800d850:	d901      	bls.n	800d856 <acc_cpd_pll_divisors_calculate+0x132>
 800d852:	4d1e      	ldr	r5, [pc, #120]	@ (800d8cc <acc_cpd_pll_divisors_calculate+0x1a8>)
 800d854:	e7bf      	b.n	800d7d6 <acc_cpd_pll_divisors_calculate+0xb2>
 800d856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d85a:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800d8d8 <acc_cpd_pll_divisors_calculate+0x1b4>
 800d85e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800d8dc <acc_cpd_pll_divisors_calculate+0x1b8>
 800d862:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d866:	2c3f      	cmp	r4, #63	@ 0x3f
 800d868:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d86c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d870:	ee17 2a90 	vmov	r2, s15
 800d874:	810a      	strh	r2, [r1, #8]
 800d876:	d912      	bls.n	800d89e <acc_cpd_pll_divisors_calculate+0x17a>
 800d878:	2cbf      	cmp	r4, #191	@ 0xbf
 800d87a:	f04f 0301 	mov.w	r3, #1
 800d87e:	bf98      	it	ls
 800d880:	f1a4 0240 	subls.w	r2, r4, #64	@ 0x40
 800d884:	804b      	strh	r3, [r1, #2]
 800d886:	bf8c      	ite	hi
 800d888:	08e2      	lsrhi	r2, r4, #3
 800d88a:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 800d88e:	f004 0307 	and.w	r3, r4, #7
 800d892:	808a      	strh	r2, [r1, #4]
 800d894:	80cb      	strh	r3, [r1, #6]
 800d896:	2001      	movs	r0, #1
 800d898:	800c      	strh	r4, [r1, #0]
 800d89a:	b003      	add	sp, #12
 800d89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d89e:	2200      	movs	r2, #0
 800d8a0:	2c2f      	cmp	r4, #47	@ 0x2f
 800d8a2:	bf88      	it	hi
 800d8a4:	4623      	movhi	r3, r4
 800d8a6:	808b      	strh	r3, [r1, #4]
 800d8a8:	804a      	strh	r2, [r1, #2]
 800d8aa:	80ca      	strh	r2, [r1, #6]
 800d8ac:	e7f3      	b.n	800d896 <acc_cpd_pll_divisors_calculate+0x172>
 800d8ae:	bf00      	nop
 800d8b0:	4f1502f9 	.word	0x4f1502f9
 800d8b4:	4c989680 	.word	0x4c989680
 800d8b8:	4b989680 	.word	0x4b989680
 800d8bc:	350637bd 	.word	0x350637bd
 800d8c0:	08011bc0 	.word	0x08011bc0
 800d8c4:	08012dc8 	.word	0x08012dc8
 800d8c8:	49742400 	.word	0x49742400
 800d8cc:	200003f0 	.word	0x200003f0
 800d8d0:	08013480 	.word	0x08013480
 800d8d4:	08013454 	.word	0x08013454
 800d8d8:	b55b38e8 	.word	0xb55b38e8
 800d8dc:	427c0000 	.word	0x427c0000

0800d8e0 <acc_cpd_pll_divisors_ref_divisor>:
 800d8e0:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800d8ec <acc_cpd_pll_divisors_ref_divisor+0xc>
 800d8e4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d8e8:	f001 ba3a 	b.w	800ed60 <roundf>
 800d8ec:	4f1502f9 	.word	0x4f1502f9

0800d8f0 <acc_dll_calculate_area_settings>:
 800d8f0:	0080      	lsls	r0, r0, #2
 800d8f2:	b280      	uxth	r0, r0
 800d8f4:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	428b      	cmp	r3, r1
 800d8fc:	8010      	strh	r0, [r2, #0]
 800d8fe:	8053      	strh	r3, [r2, #2]
 800d900:	d20c      	bcs.n	800d91c <acc_dll_calculate_area_settings+0x2c>
 800d902:	2301      	movs	r3, #1
 800d904:	2100      	movs	r1, #0
 800d906:	2003      	movs	r0, #3
 800d908:	8093      	strh	r3, [r2, #4]
 800d90a:	8153      	strh	r3, [r2, #10]
 800d90c:	8193      	strh	r3, [r2, #12]
 800d90e:	8213      	strh	r3, [r2, #16]
 800d910:	80d1      	strh	r1, [r2, #6]
 800d912:	8251      	strh	r1, [r2, #18]
 800d914:	8291      	strh	r1, [r2, #20]
 800d916:	8110      	strh	r0, [r2, #8]
 800d918:	81d0      	strh	r0, [r2, #14]
 800d91a:	4770      	bx	lr
 800d91c:	b430      	push	{r4, r5}
 800d91e:	fbb3 f4f1 	udiv	r4, r3, r1
 800d922:	2500      	movs	r5, #0
 800d924:	fb01 3114 	mls	r1, r1, r4, r3
 800d928:	2401      	movs	r4, #1
 800d92a:	2303      	movs	r3, #3
 800d92c:	8094      	strh	r4, [r2, #4]
 800d92e:	80d4      	strh	r4, [r2, #6]
 800d930:	8154      	strh	r4, [r2, #10]
 800d932:	8214      	strh	r4, [r2, #16]
 800d934:	8254      	strh	r4, [r2, #18]
 800d936:	8195      	strh	r5, [r2, #12]
 800d938:	81d5      	strh	r5, [r2, #14]
 800d93a:	8295      	strh	r5, [r2, #20]
 800d93c:	8050      	strh	r0, [r2, #2]
 800d93e:	bc30      	pop	{r4, r5}
 800d940:	8011      	strh	r1, [r2, #0]
 800d942:	8113      	strh	r3, [r2, #8]
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop

0800d948 <acc_utils_swap16_array>:
 800d948:	b141      	cbz	r1, 800d95c <acc_utils_swap16_array+0x14>
 800d94a:	3802      	subs	r0, #2
 800d94c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800d950:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d954:	ba5b      	rev16	r3, r3
 800d956:	4288      	cmp	r0, r1
 800d958:	8003      	strh	r3, [r0, #0]
 800d95a:	d1f9      	bne.n	800d950 <acc_utils_swap16_array+0x8>
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop

0800d960 <acc_utils_uint32_to_transfer_buffer>:
 800d960:	b152      	cbz	r2, 800d978 <acc_utils_uint32_to_transfer_buffer+0x18>
 800d962:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d966:	3804      	subs	r0, #4
 800d968:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800d96c:	804b      	strh	r3, [r1, #2]
 800d96e:	0c1b      	lsrs	r3, r3, #16
 800d970:	800b      	strh	r3, [r1, #0]
 800d972:	3104      	adds	r1, #4
 800d974:	4291      	cmp	r1, r2
 800d976:	d1f7      	bne.n	800d968 <acc_utils_uint32_to_transfer_buffer+0x8>
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop

0800d97c <acc_utils_transfer_buffer_to_uint32>:
 800d97c:	b17a      	cbz	r2, 800d99e <acc_utils_transfer_buffer_to_uint32+0x22>
 800d97e:	b410      	push	{r4}
 800d980:	3904      	subs	r1, #4
 800d982:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800d986:	8802      	ldrh	r2, [r0, #0]
 800d988:	8843      	ldrh	r3, [r0, #2]
 800d98a:	3004      	adds	r0, #4
 800d98c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d990:	4284      	cmp	r4, r0
 800d992:	f841 3f04 	str.w	r3, [r1, #4]!
 800d996:	d1f6      	bne.n	800d986 <acc_utils_transfer_buffer_to_uint32+0xa>
 800d998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	4770      	bx	lr

0800d9a0 <acc_alg_atan2_q16>:
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	bfb8      	it	lt
 800d9a4:	4240      	neglt	r0, r0
 800d9a6:	b4f0      	push	{r4, r5, r6, r7}
 800d9a8:	bfba      	itte	lt
 800d9aa:	b200      	sxthlt	r0, r0
 800d9ac:	2401      	movlt	r4, #1
 800d9ae:	2400      	movge	r4, #0
 800d9b0:	2900      	cmp	r1, #0
 800d9b2:	db3f      	blt.n	800da34 <acc_alg_atan2_q16+0x94>
 800d9b4:	4288      	cmp	r0, r1
 800d9b6:	db38      	blt.n	800da2a <acc_alg_atan2_q16+0x8a>
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	b368      	cbz	r0, 800da1a <acc_alg_atan2_q16+0x7a>
 800d9be:	4608      	mov	r0, r1
 800d9c0:	2600      	movs	r6, #0
 800d9c2:	f643 4528 	movw	r5, #15400	@ 0x3c28
 800d9c6:	0400      	lsls	r0, r0, #16
 800d9c8:	fbb0 f1f3 	udiv	r1, r0, r3
 800d9cc:	42a9      	cmp	r1, r5
 800d9ce:	d948      	bls.n	800da62 <acc_alg_atan2_q16+0xc2>
 800d9d0:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 800d9d4:	4299      	cmp	r1, r3
 800d9d6:	d936      	bls.n	800da46 <acc_alg_atan2_q16+0xa6>
 800d9d8:	f648 0372 	movw	r3, #34930	@ 0x8872
 800d9dc:	4299      	cmp	r1, r3
 800d9de:	d942      	bls.n	800da66 <acc_alg_atan2_q16+0xc6>
 800d9e0:	f64a 4349 	movw	r3, #44105	@ 0xac49
 800d9e4:	4299      	cmp	r1, r3
 800d9e6:	d940      	bls.n	800da6a <acc_alg_atan2_q16+0xca>
 800d9e8:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 800d9ec:	4299      	cmp	r1, r3
 800d9ee:	d93e      	bls.n	800da6e <acc_alg_atan2_q16+0xce>
 800d9f0:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 800d9f4:	4299      	cmp	r1, r3
 800d9f6:	bf98      	it	ls
 800d9f8:	2705      	movls	r7, #5
 800d9fa:	d925      	bls.n	800da48 <acc_alg_atan2_q16+0xa8>
 800d9fc:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 800da00:	f248 2333 	movw	r3, #33331	@ 0x8233
 800da04:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 800da08:	1b49      	subs	r1, r1, r5
 800da0a:	fb03 f101 	mul.w	r1, r3, r1
 800da0e:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 800da12:	b116      	cbz	r6, 800da1a <acc_alg_atan2_q16+0x7a>
 800da14:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 800da18:	301f      	adds	r0, #31
 800da1a:	b114      	cbz	r4, 800da22 <acc_alg_atan2_q16+0x82>
 800da1c:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 800da20:	303f      	adds	r0, #63	@ 0x3f
 800da22:	b102      	cbz	r2, 800da26 <acc_alg_atan2_q16+0x86>
 800da24:	4240      	negs	r0, r0
 800da26:	bcf0      	pop	{r4, r5, r6, r7}
 800da28:	4770      	bx	lr
 800da2a:	460b      	mov	r3, r1
 800da2c:	b9b1      	cbnz	r1, 800da5c <acc_alg_atan2_q16+0xbc>
 800da2e:	4811      	ldr	r0, [pc, #68]	@ (800da74 <acc_alg_atan2_q16+0xd4>)
 800da30:	460a      	mov	r2, r1
 800da32:	e7f2      	b.n	800da1a <acc_alg_atan2_q16+0x7a>
 800da34:	4249      	negs	r1, r1
 800da36:	b209      	sxth	r1, r1
 800da38:	4288      	cmp	r0, r1
 800da3a:	f04f 0201 	mov.w	r2, #1
 800da3e:	dabc      	bge.n	800d9ba <acc_alg_atan2_q16+0x1a>
 800da40:	460b      	mov	r3, r1
 800da42:	4616      	mov	r6, r2
 800da44:	e7bd      	b.n	800d9c2 <acc_alg_atan2_q16+0x22>
 800da46:	2701      	movs	r7, #1
 800da48:	480b      	ldr	r0, [pc, #44]	@ (800da78 <acc_alg_atan2_q16+0xd8>)
 800da4a:	4b0c      	ldr	r3, [pc, #48]	@ (800da7c <acc_alg_atan2_q16+0xdc>)
 800da4c:	f850 5037 	ldr.w	r5, [r0, r7, lsl #3]
 800da50:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800da54:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800da58:	6840      	ldr	r0, [r0, #4]
 800da5a:	e7d5      	b.n	800da08 <acc_alg_atan2_q16+0x68>
 800da5c:	2200      	movs	r2, #0
 800da5e:	2601      	movs	r6, #1
 800da60:	e7af      	b.n	800d9c2 <acc_alg_atan2_q16+0x22>
 800da62:	2700      	movs	r7, #0
 800da64:	e7f0      	b.n	800da48 <acc_alg_atan2_q16+0xa8>
 800da66:	2702      	movs	r7, #2
 800da68:	e7ee      	b.n	800da48 <acc_alg_atan2_q16+0xa8>
 800da6a:	2703      	movs	r7, #3
 800da6c:	e7ec      	b.n	800da48 <acc_alg_atan2_q16+0xa8>
 800da6e:	2704      	movs	r7, #4
 800da70:	e7ea      	b.n	800da48 <acc_alg_atan2_q16+0xa8>
 800da72:	bf00      	nop
 800da74:	0001921f 	.word	0x0001921f
 800da78:	08013494 	.word	0x08013494
 800da7c:	080134cc 	.word	0x080134cc

0800da80 <acc_alg_basic_util_crc32>:
 800da80:	b1a9      	cbz	r1, 800daae <acc_alg_basic_util_crc32+0x2e>
 800da82:	b430      	push	{r4, r5}
 800da84:	4a0b      	ldr	r2, [pc, #44]	@ (800dab4 <acc_alg_basic_util_crc32+0x34>)
 800da86:	1e44      	subs	r4, r0, #1
 800da88:	1865      	adds	r5, r4, r1
 800da8a:	f04f 30ff 	mov.w	r0, #4294967295
 800da8e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800da92:	2308      	movs	r3, #8
 800da94:	4048      	eors	r0, r1
 800da96:	07c1      	lsls	r1, r0, #31
 800da98:	bf4c      	ite	mi
 800da9a:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
 800da9e:	0840      	lsrpl	r0, r0, #1
 800daa0:	3b01      	subs	r3, #1
 800daa2:	d1f8      	bne.n	800da96 <acc_alg_basic_util_crc32+0x16>
 800daa4:	42ac      	cmp	r4, r5
 800daa6:	d1f2      	bne.n	800da8e <acc_alg_basic_util_crc32+0xe>
 800daa8:	43c0      	mvns	r0, r0
 800daaa:	bc30      	pop	{r4, r5}
 800daac:	4770      	bx	lr
 800daae:	4608      	mov	r0, r1
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	edb88320 	.word	0xedb88320

0800dab8 <acc_alg_least_square_fit>:
 800dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dabc:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800dac0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800dac4:	b08d      	sub	sp, #52	@ 0x34
 800dac6:	2600      	movs	r6, #0
 800dac8:	4683      	mov	fp, r0
 800daca:	4682      	mov	sl, r0
 800dacc:	4680      	mov	r8, r0
 800dace:	4667      	mov	r7, ip
 800dad0:	46b1      	mov	r9, r6
 800dad2:	a803      	add	r0, sp, #12
 800dad4:	ea4f 0589 	mov.w	r5, r9, lsl #2
 800dad8:	4686      	mov	lr, r0
 800dada:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800dc38 <acc_alg_least_square_fit+0x180>
 800dade:	4643      	mov	r3, r8
 800dae0:	b16a      	cbz	r2, 800dafe <acc_alg_least_square_fit+0x46>
 800dae2:	199c      	adds	r4, r3, r6
 800dae4:	442c      	add	r4, r5
 800dae6:	edd4 7a00 	vldr	s15, [r4]
 800daea:	461c      	mov	r4, r3
 800daec:	edd4 6a00 	vldr	s13, [r4]
 800daf0:	330c      	adds	r3, #12
 800daf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800daf6:	42bb      	cmp	r3, r7
 800daf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dafc:	d1f1      	bne.n	800dae2 <acc_alg_least_square_fit+0x2a>
 800dafe:	3504      	adds	r5, #4
 800db00:	2d0c      	cmp	r5, #12
 800db02:	ecae 7a01 	vstmia	lr!, {s14}
 800db06:	d1e8      	bne.n	800dada <acc_alg_least_square_fit+0x22>
 800db08:	f109 0901 	add.w	r9, r9, #1
 800db0c:	f1b9 0f03 	cmp.w	r9, #3
 800db10:	f100 0010 	add.w	r0, r0, #16
 800db14:	f108 0804 	add.w	r8, r8, #4
 800db18:	f1a6 0604 	sub.w	r6, r6, #4
 800db1c:	f107 0704 	add.w	r7, r7, #4
 800db20:	d1d8      	bne.n	800dad4 <acc_alg_least_square_fit+0x1c>
 800db22:	ed9d 6a04 	vldr	s12, [sp, #16]
 800db26:	eddd 5a05 	vldr	s11, [sp, #20]
 800db2a:	eddd 6a08 	vldr	s13, [sp, #32]
 800db2e:	4668      	mov	r0, sp
 800db30:	f10b 040c 	add.w	r4, fp, #12
 800db34:	eddf 7a40 	vldr	s15, [pc, #256]	@ 800dc38 <acc_alg_least_square_fit+0x180>
 800db38:	4653      	mov	r3, sl
 800db3a:	b13a      	cbz	r2, 800db4c <acc_alg_least_square_fit+0x94>
 800db3c:	461d      	mov	r5, r3
 800db3e:	ed95 7a00 	vldr	s14, [r5]
 800db42:	330c      	adds	r3, #12
 800db44:	4563      	cmp	r3, ip
 800db46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db4a:	d1f7      	bne.n	800db3c <acc_alg_least_square_fit+0x84>
 800db4c:	f10a 0a04 	add.w	sl, sl, #4
 800db50:	45a2      	cmp	sl, r4
 800db52:	ece0 7a01 	vstmia	r0!, {s15}
 800db56:	f10c 0c04 	add.w	ip, ip, #4
 800db5a:	d1eb      	bne.n	800db34 <acc_alg_least_square_fit+0x7c>
 800db5c:	eddd 7a03 	vldr	s15, [sp, #12]
 800db60:	eef5 7a40 	vcmp.f32	s15, #0.0
 800db64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db68:	d010      	beq.n	800db8c <acc_alg_least_square_fit+0xd4>
 800db6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db6e:	ee87 4a27 	vdiv.f32	s8, s14, s15
 800db72:	eddd 7a07 	vldr	s15, [sp, #28]
 800db76:	ee66 4a04 	vmul.f32	s9, s12, s8
 800db7a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800db7e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800db82:	eef5 7a40 	vcmp.f32	s15, #0.0
 800db86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8a:	d106      	bne.n	800db9a <acc_alg_least_square_fit+0xe2>
 800db8c:	2000      	movs	r0, #0
 800db8e:	2300      	movs	r3, #0
 800db90:	f8cb 3000 	str.w	r3, [fp]
 800db94:	b00d      	add	sp, #52	@ 0x34
 800db96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db9a:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800db9e:	ee65 3a84 	vmul.f32	s7, s11, s8
 800dba2:	ee25 7aa4 	vmul.f32	s14, s11, s9
 800dba6:	ee66 7a23 	vmul.f32	s15, s12, s7
 800dbaa:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 800dbae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dbb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800dbb6:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800dbba:	ee65 6aa3 	vmul.f32	s13, s11, s7
 800dbbe:	ee75 6a66 	vsub.f32	s13, s10, s13
 800dbc2:	ee27 5a27 	vmul.f32	s10, s14, s15
 800dbc6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800dbca:	eef5 6a40 	vcmp.f32	s13, #0.0
 800dbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd2:	d0db      	beq.n	800db8c <acc_alg_least_square_fit+0xd4>
 800dbd4:	ed9d 5a00 	vldr	s10, [sp]
 800dbd8:	ed9d 3a01 	vldr	s6, [sp, #4]
 800dbdc:	ed9d 2a02 	vldr	s4, [sp, #8]
 800dbe0:	ee64 4a85 	vmul.f32	s9, s9, s10
 800dbe4:	ee63 3a85 	vmul.f32	s7, s7, s10
 800dbe8:	ee73 4a64 	vsub.f32	s9, s6, s9
 800dbec:	2001      	movs	r0, #1
 800dbee:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800dbf8:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800dbfc:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 800dc00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc04:	edc1 7a02 	vstr	s15, [r1, #8]
 800dc08:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800dc0c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800dc10:	ee67 7a22 	vmul.f32	s15, s14, s5
 800dc14:	ee26 6a27 	vmul.f32	s12, s12, s15
 800dc18:	edc1 7a01 	vstr	s15, [r1, #4]
 800dc1c:	ee35 6a46 	vsub.f32	s12, s10, s12
 800dc20:	ee76 5a65 	vsub.f32	s11, s12, s11
 800dc24:	ee25 4a84 	vmul.f32	s8, s11, s8
 800dc28:	ed81 4a00 	vstr	s8, [r1]
 800dc2c:	f8cb 3000 	str.w	r3, [fp]
 800dc30:	b00d      	add	sp, #52	@ 0x34
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc36:	bf00      	nop
 800dc38:	00000000 	.word	0x00000000

0800dc3c <acc_alg_temp>:
 800dc3c:	f240 13e5 	movw	r3, #485	@ 0x1e5
 800dc40:	fb03 f000 	mul.w	r0, r3, r0
 800dc44:	0c00      	lsrs	r0, r0, #16
 800dc46:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 800dc4a:	4770      	bx	lr

0800dc4c <acc_diagnostic_log_set_scope>:
 800dc4c:	4b02      	ldr	r3, [pc, #8]	@ (800dc58 <acc_diagnostic_log_set_scope+0xc>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	b10b      	cbz	r3, 800dc56 <acc_diagnostic_log_set_scope+0xa>
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4718      	bx	r3
 800dc56:	4770      	bx	lr
 800dc58:	200002a0 	.word	0x200002a0

0800dc5c <acc_diagnostic_log_array>:
 800dc5c:	4b02      	ldr	r3, [pc, #8]	@ (800dc68 <acc_diagnostic_log_array+0xc>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	b10b      	cbz	r3, 800dc66 <acc_diagnostic_log_array+0xa>
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	4718      	bx	r3
 800dc66:	4770      	bx	lr
 800dc68:	200002a0 	.word	0x200002a0

0800dc6c <acc_diagnostic_log_scalar>:
 800dc6c:	4b02      	ldr	r3, [pc, #8]	@ (800dc78 <acc_diagnostic_log_scalar+0xc>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	b10b      	cbz	r3, 800dc76 <acc_diagnostic_log_scalar+0xa>
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	4718      	bx	r3
 800dc76:	4770      	bx	lr
 800dc78:	200002a0 	.word	0x200002a0

0800dc7c <acc_diagnostic_log_data_u16>:
 800dc7c:	4b02      	ldr	r3, [pc, #8]	@ (800dc88 <acc_diagnostic_log_data_u16+0xc>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	b10b      	cbz	r3, 800dc86 <acc_diagnostic_log_data_u16+0xa>
 800dc82:	6a1b      	ldr	r3, [r3, #32]
 800dc84:	4718      	bx	r3
 800dc86:	4770      	bx	lr
 800dc88:	200002a0 	.word	0x200002a0

0800dc8c <acc_diagnostic_log_data_i16>:
 800dc8c:	4b02      	ldr	r3, [pc, #8]	@ (800dc98 <acc_diagnostic_log_data_i16+0xc>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	b10b      	cbz	r3, 800dc96 <acc_diagnostic_log_data_i16+0xa>
 800dc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc94:	4718      	bx	r3
 800dc96:	4770      	bx	lr
 800dc98:	200002a0 	.word	0x200002a0

0800dc9c <acc_image_a121_r1a_cal_session_get>:
 800dc9c:	4800      	ldr	r0, [pc, #0]	@ (800dca0 <acc_image_a121_r1a_cal_session_get+0x4>)
 800dc9e:	4770      	bx	lr
 800dca0:	080134e8 	.word	0x080134e8

0800dca4 <acc_image_a121_r1a_cal_session_param_table_get>:
 800dca4:	4800      	ldr	r0, [pc, #0]	@ (800dca8 <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 800dca6:	4770      	bx	lr
 800dca8:	08014b80 	.word	0x08014b80

0800dcac <acc_alg_comp_iq_imb>:
 800dcac:	b430      	push	{r4, r5}
 800dcae:	8814      	ldrh	r4, [r2, #0]
 800dcb0:	9a02      	ldr	r2, [sp, #8]
 800dcb2:	f004 051f 	and.w	r5, r4, #31
 800dcb6:	3530      	adds	r5, #48	@ 0x30
 800dcb8:	fb00 f005 	mul.w	r0, r0, r5
 800dcbc:	0aa5      	lsrs	r5, r4, #10
 800dcbe:	3d20      	subs	r5, #32
 800dcc0:	f3c4 1444 	ubfx	r4, r4, #5, #5
 800dcc4:	fb01 f505 	mul.w	r5, r1, r5
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 800dcce:	fb01 f104 	mul.w	r1, r1, r4
 800dcd2:	bfb8      	it	lt
 800dcd4:	303f      	addlt	r0, #63	@ 0x3f
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	bfb8      	it	lt
 800dcda:	351f      	addlt	r5, #31
 800dcdc:	2900      	cmp	r1, #0
 800dcde:	ea4f 10a0 	mov.w	r0, r0, asr #6
 800dce2:	bfb8      	it	lt
 800dce4:	313f      	addlt	r1, #63	@ 0x3f
 800dce6:	eb00 1065 	add.w	r0, r0, r5, asr #5
 800dcea:	1189      	asrs	r1, r1, #6
 800dcec:	8018      	strh	r0, [r3, #0]
 800dcee:	bc30      	pop	{r4, r5}
 800dcf0:	8011      	strh	r1, [r2, #0]
 800dcf2:	4770      	bx	lr

0800dcf4 <acc_alg_iq_imb_comp_to_fix_point>:
 800dcf4:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 800dcf8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ddd4 <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 800dcfc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800ddd8 <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 800dd00:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dd04:	ee31 1a67 	vsub.f32	s2, s2, s15
 800dd08:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dd0c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dd10:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800dd14:	ee70 0a86 	vadd.f32	s1, s1, s12
 800dd18:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd1c:	ee21 1a07 	vmul.f32	s2, s2, s14
 800dd20:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 800dd24:	ee60 0aa6 	vmul.f32	s1, s1, s13
 800dd28:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd30:	ee31 1a27 	vadd.f32	s2, s2, s15
 800dd34:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800dd38:	dc22      	bgt.n	800dd80 <acc_alg_iq_imb_comp_to_fix_point+0x8c>
 800dd3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd42:	bf48      	it	mi
 800dd44:	2300      	movmi	r3, #0
 800dd46:	d537      	bpl.n	800ddb8 <acc_alg_iq_imb_comp_to_fix_point+0xc4>
 800dd48:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800dddc <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800dd4c:	eef4 0ae7 	vcmpe.f32	s1, s15
 800dd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd54:	dd1d      	ble.n	800dd92 <acc_alg_iq_imb_comp_to_fix_point+0x9e>
 800dd56:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 800dd5a:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 800dd5e:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 800dd62:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800dd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6a:	dc20      	bgt.n	800ddae <acc_alg_iq_imb_comp_to_fix_point+0xba>
 800dd6c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800dd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd74:	bf48      	it	mi
 800dd76:	2200      	movmi	r2, #0
 800dd78:	d524      	bpl.n	800ddc4 <acc_alg_iq_imb_comp_to_fix_point+0xd0>
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	8003      	strh	r3, [r0, #0]
 800dd7e:	4770      	bx	lr
 800dd80:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800dddc <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800dd84:	eef4 0ae7 	vcmpe.f32	s1, s15
 800dd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8c:	f04f 031f 	mov.w	r3, #31
 800dd90:	dce1      	bgt.n	800dd56 <acc_alg_iq_imb_comp_to_fix_point+0x62>
 800dd92:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800dd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9a:	d4e0      	bmi.n	800dd5e <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800dd9c:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 800dda0:	ee10 2a90 	vmov	r2, s1
 800dda4:	b292      	uxth	r2, r2
 800dda6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800ddaa:	b21b      	sxth	r3, r3
 800ddac:	e7d7      	b.n	800dd5e <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800ddae:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	8003      	strh	r3, [r0, #0]
 800ddb6:	4770      	bx	lr
 800ddb8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ddbc:	ee10 3a10 	vmov	r3, s0
 800ddc0:	b21b      	sxth	r3, r3
 800ddc2:	e7c1      	b.n	800dd48 <acc_alg_iq_imb_comp_to_fix_point+0x54>
 800ddc4:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800ddc8:	ee17 2a90 	vmov	r2, s15
 800ddcc:	f342 020a 	sbfx	r2, r2, #0, #11
 800ddd0:	0152      	lsls	r2, r2, #5
 800ddd2:	e7d2      	b.n	800dd7a <acc_alg_iq_imb_comp_to_fix_point+0x86>
 800ddd4:	42800000 	.word	0x42800000
 800ddd8:	42000000 	.word	0x42000000
 800dddc:	427c0000 	.word	0x427c0000

0800dde0 <element_frame_reset>:
 800dde0:	6800      	ldr	r0, [r0, #0]
 800dde2:	68c3      	ldr	r3, [r0, #12]
 800dde4:	4718      	bx	r3
 800dde6:	bf00      	nop

0800dde8 <element_frame_callback>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	6995      	ldr	r5, [r2, #24]
 800ddec:	782b      	ldrb	r3, [r5, #0]
 800ddee:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800ddf2:	4614      	mov	r4, r2
 800ddf4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800ddf8:	460f      	mov	r7, r1
 800ddfa:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 800ddfe:	6963      	ldr	r3, [r4, #20]
 800de00:	4601      	mov	r1, r0
 800de02:	0072      	lsls	r2, r6, #1
 800de04:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 800de08:	f002 fd42 	bl	8010890 <memmove>
 800de0c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800de0e:	8869      	ldrh	r1, [r5, #2]
 800de10:	7813      	ldrb	r3, [r2, #0]
 800de12:	440e      	add	r6, r1
 800de14:	806e      	strh	r6, [r5, #2]
 800de16:	b903      	cbnz	r3, 800de1a <element_frame_callback+0x32>
 800de18:	793b      	ldrb	r3, [r7, #4]
 800de1a:	7013      	strb	r3, [r2, #0]
 800de1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de1e:	bf00      	nop

0800de20 <element_frame_event>:
 800de20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de24:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800de26:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800de2a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800de2e:	2400      	movs	r4, #0
 800de30:	f8a8 4002 	strh.w	r4, [r8, #2]
 800de34:	4605      	mov	r5, r0
 800de36:	701c      	strb	r4, [r3, #0]
 800de38:	f100 074c 	add.w	r7, r0, #76	@ 0x4c
 800de3c:	f857 6b04 	ldr.w	r6, [r7], #4
 800de40:	4649      	mov	r1, r9
 800de42:	4630      	mov	r0, r6
 800de44:	b136      	cbz	r6, 800de54 <element_frame_event+0x34>
 800de46:	f000 fb11 	bl	800e46c <acc_pipeline_subsweep_prepare_memory>
 800de4a:	f888 4000 	strb.w	r4, [r8]
 800de4e:	4630      	mov	r0, r6
 800de50:	f000 fb24 	bl	800e49c <acc_pipeline_subsweep_produce>
 800de54:	3401      	adds	r4, #1
 800de56:	b2e4      	uxtb	r4, r4
 800de58:	2c04      	cmp	r4, #4
 800de5a:	d1ef      	bne.n	800de3c <element_frame_event+0x1c>
 800de5c:	6828      	ldr	r0, [r5, #0]
 800de5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de62:	6843      	ldr	r3, [r0, #4]
 800de64:	4718      	bx	r3
 800de66:	bf00      	nop

0800de68 <element_frame_validate>:
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	4604      	mov	r4, r0
 800de6c:	6980      	ldr	r0, [r0, #24]
 800de6e:	b178      	cbz	r0, 800de90 <element_frame_validate+0x28>
 800de70:	69e3      	ldr	r3, [r4, #28]
 800de72:	b143      	cbz	r3, 800de86 <element_frame_validate+0x1e>
 800de74:	f7fd f898 	bl	800afa8 <acc_rss_integration_log_level>
 800de78:	b128      	cbz	r0, 800de86 <element_frame_validate+0x1e>
 800de7a:	4b0e      	ldr	r3, [pc, #56]	@ (800deb4 <element_frame_validate+0x4c>)
 800de7c:	4a0e      	ldr	r2, [pc, #56]	@ (800deb8 <element_frame_validate+0x50>)
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	490e      	ldr	r1, [pc, #56]	@ (800debc <element_frame_validate+0x54>)
 800de82:	2001      	movs	r0, #1
 800de84:	4798      	blx	r3
 800de86:	6820      	ldr	r0, [r4, #0]
 800de88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de8c:	6883      	ldr	r3, [r0, #8]
 800de8e:	4718      	bx	r3
 800de90:	4d08      	ldr	r5, [pc, #32]	@ (800deb4 <element_frame_validate+0x4c>)
 800de92:	4a0b      	ldr	r2, [pc, #44]	@ (800dec0 <element_frame_validate+0x58>)
 800de94:	692b      	ldr	r3, [r5, #16]
 800de96:	4909      	ldr	r1, [pc, #36]	@ (800debc <element_frame_validate+0x54>)
 800de98:	4798      	blx	r3
 800de9a:	69e3      	ldr	r3, [r4, #28]
 800de9c:	b13b      	cbz	r3, 800deae <element_frame_validate+0x46>
 800de9e:	f7fd f883 	bl	800afa8 <acc_rss_integration_log_level>
 800dea2:	b120      	cbz	r0, 800deae <element_frame_validate+0x46>
 800dea4:	692b      	ldr	r3, [r5, #16]
 800dea6:	4a04      	ldr	r2, [pc, #16]	@ (800deb8 <element_frame_validate+0x50>)
 800dea8:	4904      	ldr	r1, [pc, #16]	@ (800debc <element_frame_validate+0x54>)
 800deaa:	2001      	movs	r0, #1
 800deac:	4798      	blx	r3
 800deae:	2000      	movs	r0, #0
 800deb0:	bd70      	pop	{r4, r5, r6, pc}
 800deb2:	bf00      	nop
 800deb4:	200003f0 	.word	0x200003f0
 800deb8:	08014ed0 	.word	0x08014ed0
 800debc:	08014ec0 	.word	0x08014ec0
 800dec0:	08014ea4 	.word	0x08014ea4

0800dec4 <acc_element_frame_init>:
 800dec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dec8:	460d      	mov	r5, r1
 800deca:	4b33      	ldr	r3, [pc, #204]	@ (800df98 <acc_element_frame_init+0xd4>)
 800decc:	4a33      	ldr	r2, [pc, #204]	@ (800df9c <acc_element_frame_init+0xd8>)
 800dece:	4934      	ldr	r1, [pc, #208]	@ (800dfa0 <acc_element_frame_init+0xdc>)
 800ded0:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800ded4:	896e      	ldrh	r6, [r5, #10]
 800ded6:	6043      	str	r3, [r0, #4]
 800ded8:	2300      	movs	r3, #0
 800deda:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800dede:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 800dee2:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
 800dee6:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 800deea:	8746      	strh	r6, [r0, #58]	@ 0x3a
 800deec:	79aa      	ldrb	r2, [r5, #6]
 800deee:	b087      	sub	sp, #28
 800def0:	2a00      	cmp	r2, #0
 800def2:	d04c      	beq.n	800df8e <acc_element_frame_init+0xca>
 800def4:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800dfb0 <acc_element_frame_init+0xec>
 800def8:	4607      	mov	r7, r0
 800defa:	4699      	mov	r9, r3
 800defc:	461c      	mov	r4, r3
 800defe:	e007      	b.n	800df10 <acc_element_frame_init+0x4c>
 800df00:	79ab      	ldrb	r3, [r5, #6]
 800df02:	fa5f f489 	uxtb.w	r4, r9
 800df06:	42a3      	cmp	r3, r4
 800df08:	d941      	bls.n	800df8e <acc_element_frame_init+0xca>
 800df0a:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800df0e:	896e      	ldrh	r6, [r5, #10]
 800df10:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800df14:	69e8      	ldr	r0, [r5, #28]
 800df16:	f8ad 6012 	strh.w	r6, [sp, #18]
 800df1a:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 800df1e:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 800df22:	898b      	ldrh	r3, [r1, #12]
 800df24:	8a89      	ldrh	r1, [r1, #20]
 800df26:	f8a2 1044 	strh.w	r1, [r2, #68]	@ 0x44
 800df2a:	8793      	strh	r3, [r2, #60]	@ 0x3c
 800df2c:	4473      	add	r3, lr
 800df2e:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 800df32:	f8ad 300c 	strh.w	r3, [sp, #12]
 800df36:	4668      	mov	r0, sp
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	9302      	str	r3, [sp, #8]
 800df3c:	f8cd 8000 	str.w	r8, [sp]
 800df40:	9701      	str	r7, [sp, #4]
 800df42:	f8ad c010 	strh.w	ip, [sp, #16]
 800df46:	f8ad 100e 	strh.w	r1, [sp, #14]
 800df4a:	9205      	str	r2, [sp, #20]
 800df4c:	f000 fa1a 	bl	800e384 <acc_pipeline_subsweep_assemble>
 800df50:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800df54:	f109 0901 	add.w	r9, r9, #1
 800df58:	4606      	mov	r6, r0
 800df5a:	64d8      	str	r0, [r3, #76]	@ 0x4c
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d1cf      	bne.n	800df00 <acc_element_frame_init+0x3c>
 800df60:	4b10      	ldr	r3, [pc, #64]	@ (800dfa4 <acc_element_frame_init+0xe0>)
 800df62:	4a11      	ldr	r2, [pc, #68]	@ (800dfa8 <acc_element_frame_init+0xe4>)
 800df64:	691b      	ldr	r3, [r3, #16]
 800df66:	4911      	ldr	r1, [pc, #68]	@ (800dfac <acc_element_frame_init+0xe8>)
 800df68:	4798      	blx	r3
 800df6a:	b164      	cbz	r4, 800df86 <acc_element_frame_init+0xc2>
 800df6c:	3c01      	subs	r4, #1
 800df6e:	b2e4      	uxtb	r4, r4
 800df70:	3413      	adds	r4, #19
 800df72:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800df76:	3748      	adds	r7, #72	@ 0x48
 800df78:	6820      	ldr	r0, [r4, #0]
 800df7a:	f000 fa6b 	bl	800e454 <acc_pipeline_subsweep_disassemble>
 800df7e:	f844 6904 	str.w	r6, [r4], #-4
 800df82:	42a7      	cmp	r7, r4
 800df84:	d1f8      	bne.n	800df78 <acc_element_frame_init+0xb4>
 800df86:	2000      	movs	r0, #0
 800df88:	b007      	add	sp, #28
 800df8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df8e:	2001      	movs	r0, #1
 800df90:	b007      	add	sp, #28
 800df92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df96:	bf00      	nop
 800df98:	0800de21 	.word	0x0800de21
 800df9c:	0800dde1 	.word	0x0800dde1
 800dfa0:	0800de69 	.word	0x0800de69
 800dfa4:	200003f0 	.word	0x200003f0
 800dfa8:	08014ee0 	.word	0x08014ee0
 800dfac:	08014ec0 	.word	0x08014ec0
 800dfb0:	0800dde9 	.word	0x0800dde9

0800dfb4 <acc_element_frame_release>:
 800dfb4:	b178      	cbz	r0, 800dfd6 <acc_element_frame_release+0x22>
 800dfb6:	b570      	push	{r4, r5, r6, lr}
 800dfb8:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 800dfbc:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 800dfc0:	2600      	movs	r6, #0
 800dfc2:	f854 0b04 	ldr.w	r0, [r4], #4
 800dfc6:	b118      	cbz	r0, 800dfd0 <acc_element_frame_release+0x1c>
 800dfc8:	f000 fa44 	bl	800e454 <acc_pipeline_subsweep_disassemble>
 800dfcc:	f844 6c04 	str.w	r6, [r4, #-4]
 800dfd0:	42ac      	cmp	r4, r5
 800dfd2:	d1f6      	bne.n	800dfc2 <acc_element_frame_release+0xe>
 800dfd4:	bd70      	pop	{r4, r5, r6, pc}
 800dfd6:	4770      	bx	lr

0800dfd8 <element_frame_aux_reset>:
 800dfd8:	6800      	ldr	r0, [r0, #0]
 800dfda:	68c3      	ldr	r3, [r0, #12]
 800dfdc:	4718      	bx	r3
 800dfde:	bf00      	nop

0800dfe0 <element_frame_aux_validate>:
 800dfe0:	6800      	ldr	r0, [r0, #0]
 800dfe2:	6883      	ldr	r3, [r0, #8]
 800dfe4:	4718      	bx	r3
 800dfe6:	bf00      	nop

0800dfe8 <element_frame_aux_event>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	6902      	ldr	r2, [r0, #16]
 800dfec:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 800dff0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dff4:	4604      	mov	r4, r0
 800dff6:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800dffa:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	bf08      	it	eq
 800e000:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 800e004:	f7ff fe1a 	bl	800dc3c <acc_alg_temp>
 800e008:	8028      	strh	r0, [r5, #0]
 800e00a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e012:	b14a      	cbz	r2, 800e028 <element_frame_aux_event+0x40>
 800e014:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 800e018:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e01c:	2a01      	cmp	r2, #1
 800e01e:	d903      	bls.n	800e028 <element_frame_aux_event+0x40>
 800e020:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800e022:	2101      	movs	r1, #1
 800e024:	7011      	strb	r1, [r2, #0]
 800e026:	e002      	b.n	800e02e <element_frame_aux_event+0x46>
 800e028:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800e02a:	2100      	movs	r1, #0
 800e02c:	7011      	strb	r1, [r2, #0]
 800e02e:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800e030:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 800e032:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e036:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800e03a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800e03c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800e03e:	882d      	ldrh	r5, [r5, #0]
 800e040:	f1a2 0301 	sub.w	r3, r2, #1
 800e044:	fab3 f383 	clz	r3, r3
 800e048:	095b      	lsrs	r3, r3, #5
 800e04a:	700b      	strb	r3, [r1, #0]
 800e04c:	f7ff fdf6 	bl	800dc3c <acc_alg_temp>
 800e050:	1a2d      	subs	r5, r5, r0
 800e052:	b22d      	sxth	r5, r5
 800e054:	2d00      	cmp	r5, #0
 800e056:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800e05a:	6820      	ldr	r0, [r4, #0]
 800e05c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e05e:	bfb8      	it	lt
 800e060:	426d      	neglt	r5, r5
 800e062:	b22d      	sxth	r5, r5
 800e064:	42ab      	cmp	r3, r5
 800e066:	bfac      	ite	ge
 800e068:	2500      	movge	r5, #0
 800e06a:	2501      	movlt	r5, #1
 800e06c:	7015      	strb	r5, [r2, #0]
 800e06e:	6843      	ldr	r3, [r0, #4]
 800e070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e074:	4718      	bx	r3
 800e076:	bf00      	nop

0800e078 <acc_element_frame_aux_init>:
 800e078:	b430      	push	{r4, r5}
 800e07a:	880b      	ldrh	r3, [r1, #0]
 800e07c:	4d0c      	ldr	r5, [pc, #48]	@ (800e0b0 <acc_element_frame_aux_init+0x38>)
 800e07e:	4c0d      	ldr	r4, [pc, #52]	@ (800e0b4 <acc_element_frame_aux_init+0x3c>)
 800e080:	4a0d      	ldr	r2, [pc, #52]	@ (800e0b8 <acc_element_frame_aux_init+0x40>)
 800e082:	6045      	str	r5, [r0, #4]
 800e084:	884d      	ldrh	r5, [r1, #2]
 800e086:	6084      	str	r4, [r0, #8]
 800e088:	888c      	ldrh	r4, [r1, #4]
 800e08a:	60c2      	str	r2, [r0, #12]
 800e08c:	88ca      	ldrh	r2, [r1, #6]
 800e08e:	8743      	strh	r3, [r0, #58]	@ 0x3a
 800e090:	890b      	ldrh	r3, [r1, #8]
 800e092:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 800e096:	8785      	strh	r5, [r0, #60]	@ 0x3c
 800e098:	87c4      	strh	r4, [r0, #62]	@ 0x3e
 800e09a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800e09e:	7b0b      	ldrb	r3, [r1, #12]
 800e0a0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800e0a4:	894b      	ldrh	r3, [r1, #10]
 800e0a6:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 800e0aa:	bc30      	pop	{r4, r5}
 800e0ac:	2001      	movs	r0, #1
 800e0ae:	4770      	bx	lr
 800e0b0:	0800dfe9 	.word	0x0800dfe9
 800e0b4:	0800dfe1 	.word	0x0800dfe1
 800e0b8:	0800dfd9 	.word	0x0800dfd9

0800e0bc <acc_element_frame_aux_release>:
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop

0800e0c0 <sink_a121_callback_consume>:
 800e0c0:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 800e0c4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800e0c6:	6900      	ldr	r0, [r0, #16]
 800e0c8:	4718      	bx	r3
 800e0ca:	bf00      	nop

0800e0cc <sink_a121_callback_reset>:
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop

0800e0d0 <sink_a121_callback_validate>:
 800e0d0:	6983      	ldr	r3, [r0, #24]
 800e0d2:	b510      	push	{r4, lr}
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	b1bb      	cbz	r3, 800e108 <sink_a121_callback_validate+0x38>
 800e0d8:	f7fc ff66 	bl	800afa8 <acc_rss_integration_log_level>
 800e0dc:	b948      	cbnz	r0, 800e0f2 <sink_a121_callback_validate+0x22>
 800e0de:	6963      	ldr	r3, [r4, #20]
 800e0e0:	b183      	cbz	r3, 800e104 <sink_a121_callback_validate+0x34>
 800e0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800e110 <sink_a121_callback_validate+0x40>)
 800e0e4:	4a0b      	ldr	r2, [pc, #44]	@ (800e114 <sink_a121_callback_validate+0x44>)
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	490b      	ldr	r1, [pc, #44]	@ (800e118 <sink_a121_callback_validate+0x48>)
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	4798      	blx	r3
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	bd10      	pop	{r4, pc}
 800e0f2:	4b07      	ldr	r3, [pc, #28]	@ (800e110 <sink_a121_callback_validate+0x40>)
 800e0f4:	4a09      	ldr	r2, [pc, #36]	@ (800e11c <sink_a121_callback_validate+0x4c>)
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	4907      	ldr	r1, [pc, #28]	@ (800e118 <sink_a121_callback_validate+0x48>)
 800e0fa:	2001      	movs	r0, #1
 800e0fc:	4798      	blx	r3
 800e0fe:	6963      	ldr	r3, [r4, #20]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1ee      	bne.n	800e0e2 <sink_a121_callback_validate+0x12>
 800e104:	2001      	movs	r0, #1
 800e106:	bd10      	pop	{r4, pc}
 800e108:	69c3      	ldr	r3, [r0, #28]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1e4      	bne.n	800e0d8 <sink_a121_callback_validate+0x8>
 800e10e:	e7e6      	b.n	800e0de <sink_a121_callback_validate+0xe>
 800e110:	200003f0 	.word	0x200003f0
 800e114:	08014f3c 	.word	0x08014f3c
 800e118:	08014f20 	.word	0x08014f20
 800e11c:	08014f04 	.word	0x08014f04

0800e120 <acc_element_sink_a121_callback_init>:
 800e120:	b410      	push	{r4}
 800e122:	4a05      	ldr	r2, [pc, #20]	@ (800e138 <acc_element_sink_a121_callback_init+0x18>)
 800e124:	4c05      	ldr	r4, [pc, #20]	@ (800e13c <acc_element_sink_a121_callback_init+0x1c>)
 800e126:	4b06      	ldr	r3, [pc, #24]	@ (800e140 <acc_element_sink_a121_callback_init+0x20>)
 800e128:	6401      	str	r1, [r0, #64]	@ 0x40
 800e12a:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800e12e:	60c3      	str	r3, [r0, #12]
 800e130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	0800e0d1 	.word	0x0800e0d1
 800e13c:	0800e0c1 	.word	0x0800e0c1
 800e140:	0800e0cd 	.word	0x0800e0cd

0800e144 <patch_program_parameters>:
 800e144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e148:	469a      	mov	sl, r3
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f5c2 671e 	rsb	r7, r2, #2528	@ 0x9e0
 800e150:	42bb      	cmp	r3, r7
 800e152:	b083      	sub	sp, #12
 800e154:	bf94      	ite	ls
 800e156:	b29f      	uxthls	r7, r3
 800e158:	b2bf      	uxthhi	r7, r7
 800e15a:	4690      	mov	r8, r2
 800e15c:	4605      	mov	r5, r0
 800e15e:	4689      	mov	r9, r1
 800e160:	f000 f9a8 	bl	800e4b4 <acc_image_a121_r1a_meas_session_get>
 800e164:	ea4f 0358 	mov.w	r3, r8, lsr #1
 800e168:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e16c:	087a      	lsrs	r2, r7, #1
 800e16e:	4649      	mov	r1, r9
 800e170:	f7ff fa0e 	bl	800d590 <acc_confprogram_copy>
 800e174:	f000 f9a6 	bl	800e4c4 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 800e178:	4606      	mov	r6, r0
 800e17a:	3d02      	subs	r5, #2
 800e17c:	1e44      	subs	r4, r0, #1
 800e17e:	36e1      	adds	r6, #225	@ 0xe1
 800e180:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 800e184:	f000 f99a 	bl	800e4bc <acc_image_a121_r1a_meas_session_param_table_get>
 800e188:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 800e18c:	4603      	mov	r3, r0
 800e18e:	e9cd b200 	strd	fp, r2, [sp]
 800e192:	4641      	mov	r1, r8
 800e194:	463a      	mov	r2, r7
 800e196:	4648      	mov	r0, r9
 800e198:	f7ff f930 	bl	800d3fc <acc_confprogram_patch_offset>
 800e19c:	42b4      	cmp	r4, r6
 800e19e:	d001      	beq.n	800e1a4 <patch_program_parameters+0x60>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d1ed      	bne.n	800e180 <patch_program_parameters+0x3c>
 800e1a4:	f8ca 7000 	str.w	r7, [sl]
 800e1a8:	b003      	add	sp, #12
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	bf00      	nop

0800e1b0 <get_parameter_patch_range.constprop.0>:
 800e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	b085      	sub	sp, #20
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	460d      	mov	r5, r1
 800e1ba:	4693      	mov	fp, r2
 800e1bc:	469a      	mov	sl, r3
 800e1be:	f000 f981 	bl	800e4c4 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 800e1c2:	3e02      	subs	r6, #2
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	3d02      	subs	r5, #2
 800e1c8:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 800e1cc:	2700      	movs	r7, #0
 800e1ce:	f44f 681e 	mov.w	r8, #2528	@ 0x9e0
 800e1d2:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800e1d6:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d013      	beq.n	800e206 <get_parameter_patch_range.constprop.0+0x56>
 800e1de:	7821      	ldrb	r1, [r4, #0]
 800e1e0:	9101      	str	r1, [sp, #4]
 800e1e2:	f000 f96b 	bl	800e4bc <acc_image_a121_r1a_meas_session_param_table_get>
 800e1e6:	f10d 030e 	add.w	r3, sp, #14
 800e1ea:	aa03      	add	r2, sp, #12
 800e1ec:	9901      	ldr	r1, [sp, #4]
 800e1ee:	f7ff f9dd 	bl	800d5ac <acc_confprogram_get_parameter_patch_range>
 800e1f2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e1f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e1fa:	4590      	cmp	r8, r2
 800e1fc:	bf28      	it	cs
 800e1fe:	4690      	movcs	r8, r2
 800e200:	429f      	cmp	r7, r3
 800e202:	bf38      	it	cc
 800e204:	461f      	movcc	r7, r3
 800e206:	3401      	adds	r4, #1
 800e208:	454c      	cmp	r4, r9
 800e20a:	d1e2      	bne.n	800e1d2 <get_parameter_patch_range.constprop.0+0x22>
 800e20c:	f8ab 8000 	strh.w	r8, [fp]
 800e210:	f8aa 7000 	strh.w	r7, [sl]
 800e214:	b005      	add	sp, #20
 800e216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21a:	bf00      	nop

0800e21c <acc_cpd_a121_meas_session_load_program>:
 800e21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e220:	460f      	mov	r7, r1
 800e222:	b084      	sub	sp, #16
 800e224:	4606      	mov	r6, r0
 800e226:	4611      	mov	r1, r2
 800e228:	4638      	mov	r0, r7
 800e22a:	4698      	mov	r8, r3
 800e22c:	2400      	movs	r4, #0
 800e22e:	ab02      	add	r3, sp, #8
 800e230:	aa01      	add	r2, sp, #4
 800e232:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800e236:	f7fd fb55 	bl	800b8e4 <acc_sensor_a121_prepare_load_confmem>
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7fd fbfc 	bl	800ba38 <acc_sensor_protocol_a121_prepare_load>
 800e240:	b1d8      	cbz	r0, 800e27a <acc_cpd_a121_meas_session_load_program+0x5e>
 800e242:	9802      	ldr	r0, [sp, #8]
 800e244:	e000      	b.n	800e248 <acc_cpd_a121_meas_session_load_program+0x2c>
 800e246:	b1c5      	cbz	r5, 800e27a <acc_cpd_a121_meas_session_load_program+0x5e>
 800e248:	4622      	mov	r2, r4
 800e24a:	9901      	ldr	r1, [sp, #4]
 800e24c:	9003      	str	r0, [sp, #12]
 800e24e:	ab03      	add	r3, sp, #12
 800e250:	4640      	mov	r0, r8
 800e252:	f7ff ff77 	bl	800e144 <patch_program_parameters>
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	4605      	mov	r5, r0
 800e25a:	0861      	lsrs	r1, r4, #1
 800e25c:	4630      	mov	r0, r6
 800e25e:	463a      	mov	r2, r7
 800e260:	f7fd fb58 	bl	800b914 <acc_sensor_a121_load_confmem>
 800e264:	9802      	ldr	r0, [sp, #8]
 800e266:	4404      	add	r4, r0
 800e268:	b2a4      	uxth	r4, r4
 800e26a:	f5b4 6f1e 	cmp.w	r4, #2528	@ 0x9e0
 800e26e:	462b      	mov	r3, r5
 800e270:	d3e9      	bcc.n	800e246 <acc_cpd_a121_meas_session_load_program+0x2a>
 800e272:	4618      	mov	r0, r3
 800e274:	b004      	add	sp, #16
 800e276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27a:	2300      	movs	r3, #0
 800e27c:	4618      	mov	r0, r3
 800e27e:	b004      	add	sp, #16
 800e280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e284 <acc_cpd_a121_meas_session_run_program>:
 800e284:	2115      	movs	r1, #21
 800e286:	f7fd bc2d 	b.w	800bae4 <acc_sensor_protocol_a121_run_program>
 800e28a:	bf00      	nop

0800e28c <acc_cpd_a121_meas_session_is_patch_needed>:
 800e28c:	b500      	push	{lr}
 800e28e:	b083      	sub	sp, #12
 800e290:	f10d 0306 	add.w	r3, sp, #6
 800e294:	aa01      	add	r2, sp, #4
 800e296:	f7ff ff8b 	bl	800e1b0 <get_parameter_patch_range.constprop.0>
 800e29a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e29e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e2a2:	4298      	cmp	r0, r3
 800e2a4:	bf34      	ite	cc
 800e2a6:	2000      	movcc	r0, #0
 800e2a8:	2001      	movcs	r0, #1
 800e2aa:	b003      	add	sp, #12
 800e2ac:	f85d fb04 	ldr.w	pc, [sp], #4

0800e2b0 <acc_cpd_a121_meas_session_update_program>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	b085      	sub	sp, #20
 800e2b6:	468a      	mov	sl, r1
 800e2b8:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800e2bc:	4693      	mov	fp, r2
 800e2be:	461c      	mov	r4, r3
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	f7fd fbfb 	bl	800babc <acc_sensor_protocol_a121_is_ready_to_update>
 800e2c6:	b198      	cbz	r0, 800e2f0 <acc_cpd_a121_meas_session_update_program+0x40>
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	ab03      	add	r3, sp, #12
 800e2cc:	aa02      	add	r2, sp, #8
 800e2ce:	4649      	mov	r1, r9
 800e2d0:	f7ff ff6e 	bl	800e1b0 <get_parameter_patch_range.constprop.0>
 800e2d4:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800e2d8:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 800e2dc:	4544      	cmp	r4, r8
 800e2de:	d91c      	bls.n	800e31a <acc_cpd_a121_meas_session_update_program+0x6a>
 800e2e0:	2501      	movs	r5, #1
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	f7fd fdcc 	bl	800be80 <acc_sensor_protocol_a121_reconfigure>
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	b005      	add	sp, #20
 800e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	f7fd fdaf 	bl	800be54 <acc_sensor_protocol_a121_is_hibernate>
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d1e5      	bne.n	800e2c8 <acc_cpd_a121_meas_session_update_program+0x18>
 800e2fc:	f7fc fe54 	bl	800afa8 <acc_rss_integration_log_level>
 800e300:	2800      	cmp	r0, #0
 800e302:	d0f1      	beq.n	800e2e8 <acc_cpd_a121_meas_session_update_program+0x38>
 800e304:	4b18      	ldr	r3, [pc, #96]	@ (800e368 <acc_cpd_a121_meas_session_update_program+0xb8>)
 800e306:	4a19      	ldr	r2, [pc, #100]	@ (800e36c <acc_cpd_a121_meas_session_update_program+0xbc>)
 800e308:	691c      	ldr	r4, [r3, #16]
 800e30a:	4919      	ldr	r1, [pc, #100]	@ (800e370 <acc_cpd_a121_meas_session_update_program+0xc0>)
 800e30c:	463b      	mov	r3, r7
 800e30e:	2001      	movs	r0, #1
 800e310:	47a0      	blx	r4
 800e312:	4628      	mov	r0, r5
 800e314:	b005      	add	sp, #20
 800e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31a:	ab02      	add	r3, sp, #8
 800e31c:	f108 0602 	add.w	r6, r8, #2
 800e320:	4659      	mov	r1, fp
 800e322:	aa01      	add	r2, sp, #4
 800e324:	4650      	mov	r0, sl
 800e326:	f7fd fadd 	bl	800b8e4 <acc_sensor_a121_prepare_load_confmem>
 800e32a:	1b36      	subs	r6, r6, r4
 800e32c:	9b02      	ldr	r3, [sp, #8]
 800e32e:	b2b6      	uxth	r6, r6
 800e330:	429e      	cmp	r6, r3
 800e332:	bf28      	it	cs
 800e334:	461e      	movcs	r6, r3
 800e336:	9602      	str	r6, [sp, #8]
 800e338:	e004      	b.n	800e344 <acc_cpd_a121_meas_session_update_program+0x94>
 800e33a:	9e02      	ldr	r6, [sp, #8]
 800e33c:	4434      	add	r4, r6
 800e33e:	b2a4      	uxth	r4, r4
 800e340:	4544      	cmp	r4, r8
 800e342:	d8ce      	bhi.n	800e2e2 <acc_cpd_a121_meas_session_update_program+0x32>
 800e344:	9901      	ldr	r1, [sp, #4]
 800e346:	9603      	str	r6, [sp, #12]
 800e348:	ab03      	add	r3, sp, #12
 800e34a:	4622      	mov	r2, r4
 800e34c:	4648      	mov	r0, r9
 800e34e:	f7ff fef9 	bl	800e144 <patch_program_parameters>
 800e352:	4605      	mov	r5, r0
 800e354:	2800      	cmp	r0, #0
 800e356:	d0f0      	beq.n	800e33a <acc_cpd_a121_meas_session_update_program+0x8a>
 800e358:	9b03      	ldr	r3, [sp, #12]
 800e35a:	4652      	mov	r2, sl
 800e35c:	0861      	lsrs	r1, r4, #1
 800e35e:	4638      	mov	r0, r7
 800e360:	f7fd fad8 	bl	800b914 <acc_sensor_a121_load_confmem>
 800e364:	e7e9      	b.n	800e33a <acc_cpd_a121_meas_session_update_program+0x8a>
 800e366:	bf00      	nop
 800e368:	200003f0 	.word	0x200003f0
 800e36c:	08014f64 	.word	0x08014f64
 800e370:	08014f88 	.word	0x08014f88

0800e374 <acc_cpd_a121_meas_session_transfer_data>:
 800e374:	b410      	push	{r4}
 800e376:	460c      	mov	r4, r1
 800e378:	4611      	mov	r1, r2
 800e37a:	4622      	mov	r2, r4
 800e37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e380:	f7fd baf2 	b.w	800b968 <acc_sensor_a121_buffer_processed_read>

0800e384 <acc_pipeline_subsweep_assemble>:
 800e384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e386:	4a30      	ldr	r2, [pc, #192]	@ (800e448 <acc_pipeline_subsweep_assemble+0xc4>)
 800e388:	b085      	sub	sp, #20
 800e38a:	4605      	mov	r5, r0
 800e38c:	2333      	movs	r3, #51	@ 0x33
 800e38e:	21e8      	movs	r1, #232	@ 0xe8
 800e390:	2001      	movs	r0, #1
 800e392:	f7fc fdd9 	bl	800af48 <acc_rss_integration_mem_calloc_debug>
 800e396:	4604      	mov	r4, r0
 800e398:	2800      	cmp	r0, #0
 800e39a:	d042      	beq.n	800e422 <acc_pipeline_subsweep_assemble+0x9e>
 800e39c:	89ab      	ldrh	r3, [r5, #12]
 800e39e:	68a9      	ldr	r1, [r5, #8]
 800e3a0:	8a2e      	ldrh	r6, [r5, #16]
 800e3a2:	8a6a      	ldrh	r2, [r5, #18]
 800e3a4:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e3a8:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 800e3ac:	696b      	ldr	r3, [r5, #20]
 800e3ae:	9100      	str	r1, [sp, #0]
 800e3b0:	f8ad 6006 	strh.w	r6, [sp, #6]
 800e3b4:	4669      	mov	r1, sp
 800e3b6:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 800e3ba:	4638      	mov	r0, r7
 800e3bc:	f8ad 2008 	strh.w	r2, [sp, #8]
 800e3c0:	9303      	str	r3, [sp, #12]
 800e3c2:	f000 f975 	bl	800e6b0 <acc_element_phase_enhancement_init>
 800e3c6:	6829      	ldr	r1, [r5, #0]
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f7ff fea9 	bl	800e120 <acc_element_sink_a121_callback_init>
 800e3ce:	89eb      	ldrh	r3, [r5, #14]
 800e3d0:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 800e3d4:	6868      	ldr	r0, [r5, #4]
 800e3d6:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 800e3e2:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 800e3e6:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 800e3ea:	f8a4 c092 	strh.w	ip, [r4, #146]	@ 0x92
 800e3ee:	f8a4 c0d8 	strh.w	ip, [r4, #216]	@ 0xd8
 800e3f2:	8722      	strh	r2, [r4, #56]	@ 0x38
 800e3f4:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 800e3f8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	6265      	str	r5, [r4, #36]	@ 0x24
 800e400:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 800e404:	4620      	mov	r0, r4
 800e406:	f7ff f903 	bl	800d610 <acc_element_connect>
 800e40a:	4631      	mov	r1, r6
 800e40c:	4638      	mov	r0, r7
 800e40e:	f7ff f8ff 	bl	800d610 <acc_element_connect>
 800e412:	6820      	ldr	r0, [r4, #0]
 800e414:	6883      	ldr	r3, [r0, #8]
 800e416:	4798      	blx	r3
 800e418:	4605      	mov	r5, r0
 800e41a:	b128      	cbz	r0, 800e428 <acc_pipeline_subsweep_assemble+0xa4>
 800e41c:	6820      	ldr	r0, [r4, #0]
 800e41e:	68c3      	ldr	r3, [r0, #12]
 800e420:	4798      	blx	r3
 800e422:	4620      	mov	r0, r4
 800e424:	b005      	add	sp, #20
 800e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e428:	4b08      	ldr	r3, [pc, #32]	@ (800e44c <acc_pipeline_subsweep_assemble+0xc8>)
 800e42a:	4a09      	ldr	r2, [pc, #36]	@ (800e450 <acc_pipeline_subsweep_assemble+0xcc>)
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	4906      	ldr	r1, [pc, #24]	@ (800e448 <acc_pipeline_subsweep_assemble+0xc4>)
 800e430:	4798      	blx	r3
 800e432:	4638      	mov	r0, r7
 800e434:	f000 f96e 	bl	800e714 <acc_element_phase_enhancement_release>
 800e438:	4620      	mov	r0, r4
 800e43a:	f7fc fda1 	bl	800af80 <acc_rss_integration_mem_free>
 800e43e:	462c      	mov	r4, r5
 800e440:	4620      	mov	r0, r4
 800e442:	b005      	add	sp, #20
 800e444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e446:	bf00      	nop
 800e448:	08014fa0 	.word	0x08014fa0
 800e44c:	200003f0 	.word	0x200003f0
 800e450:	08012bf4 	.word	0x08012bf4

0800e454 <acc_pipeline_subsweep_disassemble>:
 800e454:	b148      	cbz	r0, 800e46a <acc_pipeline_subsweep_disassemble+0x16>
 800e456:	b510      	push	{r4, lr}
 800e458:	4604      	mov	r4, r0
 800e45a:	303c      	adds	r0, #60	@ 0x3c
 800e45c:	f000 f95a 	bl	800e714 <acc_element_phase_enhancement_release>
 800e460:	4620      	mov	r0, r4
 800e462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e466:	f7fc bd8b 	b.w	800af80 <acc_rss_integration_mem_free>
 800e46a:	4770      	bx	lr

0800e46c <acc_pipeline_subsweep_prepare_memory>:
 800e46c:	b430      	push	{r4, r5}
 800e46e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800e472:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 800e476:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800e478:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 800e47c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800e480:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e484:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e488:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800e48c:	6144      	str	r4, [r0, #20]
 800e48e:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 800e492:	bc30      	pop	{r4, r5}
 800e494:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop

0800e49c <acc_pipeline_subsweep_produce>:
 800e49c:	6803      	ldr	r3, [r0, #0]
 800e49e:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 800e4a2:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 800e4ac:	685a      	ldr	r2, [r3, #4]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	4710      	bx	r2
 800e4b2:	bf00      	nop

0800e4b4 <acc_image_a121_r1a_meas_session_get>:
 800e4b4:	4800      	ldr	r0, [pc, #0]	@ (800e4b8 <acc_image_a121_r1a_meas_session_get+0x4>)
 800e4b6:	4770      	bx	lr
 800e4b8:	08014fb4 	.word	0x08014fb4

0800e4bc <acc_image_a121_r1a_meas_session_param_table_get>:
 800e4bc:	4800      	ldr	r0, [pc, #0]	@ (800e4c0 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 800e4be:	4770      	bx	lr
 800e4c0:	08016374 	.word	0x08016374

0800e4c4 <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 800e4c4:	4800      	ldr	r0, [pc, #0]	@ (800e4c8 <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 800e4c6:	4770      	bx	lr
 800e4c8:	0801711c 	.word	0x0801711c

0800e4cc <element_phase_enhancement_reset>:
 800e4cc:	6800      	ldr	r0, [r0, #0]
 800e4ce:	68c3      	ldr	r3, [r0, #12]
 800e4d0:	4718      	bx	r3
 800e4d2:	bf00      	nop

0800e4d4 <element_phase_enhancement_validate>:
 800e4d4:	6800      	ldr	r0, [r0, #0]
 800e4d6:	6883      	ldr	r3, [r0, #8]
 800e4d8:	4718      	bx	r3
 800e4da:	bf00      	nop

0800e4dc <element_phase_enhancement_event>:
 800e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	ed2d 8b04 	vpush	{d8-d9}
 800e4e4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e4e8:	b089      	sub	sp, #36	@ 0x24
 800e4ea:	4683      	mov	fp, r0
 800e4ec:	9303      	str	r3, [sp, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 80d1 	beq.w	800e696 <element_phase_enhancement_event+0x1ba>
 800e4f4:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 800e4f6:	6904      	ldr	r4, [r0, #16]
 800e4f8:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 800e4fa:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 800e4fe:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800e500:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800e504:	9006      	str	r0, [sp, #24]
 800e506:	0052      	lsls	r2, r2, #1
 800e508:	9201      	str	r2, [sp, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 80c3 	beq.w	800e696 <element_phase_enhancement_event+0x1ba>
 800e510:	2300      	movs	r3, #0
 800e512:	010a      	lsls	r2, r1, #4
 800e514:	eddf 8a64 	vldr	s17, [pc, #400]	@ 800e6a8 <element_phase_enhancement_event+0x1cc>
 800e518:	9302      	str	r3, [sp, #8]
 800e51a:	9207      	str	r2, [sp, #28]
 800e51c:	469a      	mov	sl, r3
 800e51e:	e9db 3211 	ldrd	r3, r2, [fp, #68]	@ 0x44
 800e522:	f8bb 604e 	ldrh.w	r6, [fp, #78]	@ 0x4e
 800e526:	4413      	add	r3, r2
 800e528:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e52c:	fb02 3606 	mla	r6, r2, r6, r3
 800e530:	2118      	movs	r1, #24
 800e532:	4630      	mov	r0, r6
 800e534:	f7fe f906 	bl	800c744 <acc_translation_a121_point_in_coarse>
 800e538:	2118      	movs	r1, #24
 800e53a:	4605      	mov	r5, r0
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7fe f8f3 	bl	800c728 <acc_translation_a121_point_to_coarse>
 800e542:	9b07      	ldr	r3, [sp, #28]
 800e544:	0400      	lsls	r0, r0, #16
 800e546:	fb80 0103 	smull	r0, r1, r0, r3
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f171 0300 	sbcs.w	r3, r1, #0
 800e550:	da04      	bge.n	800e55c <element_phase_enhancement_event+0x80>
 800e552:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e556:	18c0      	adds	r0, r0, r3
 800e558:	f141 0100 	adc.w	r1, r1, #0
 800e55c:	9b06      	ldr	r3, [sp, #24]
 800e55e:	441d      	add	r5, r3
 800e560:	0c03      	lsrs	r3, r0, #16
 800e562:	f934 2015 	ldrsh.w	r2, [r4, r5, lsl #1]
 800e566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e56a:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
 800e56e:	ee07 3a90 	vmov	s15, r3
 800e572:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800e576:	ee29 9a28 	vmul.f32	s18, s18, s17
 800e57a:	eeb0 0a49 	vmov.f32	s0, s18
 800e57e:	f000 fa5b 	bl	800ea38 <cosf>
 800e582:	eeb0 8a40 	vmov.f32	s16, s0
 800e586:	eeb0 0a49 	vmov.f32	s0, s18
 800e58a:	f000 faa1 	bl	800ead0 <sinf>
 800e58e:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 800e592:	f1b9 0f00 	cmp.w	r9, #0
 800e596:	d073      	beq.n	800e680 <element_phase_enhancement_event+0x1a4>
 800e598:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 800e59c:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 800e5a0:	f8cd b014 	str.w	fp, [sp, #20]
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	f893 8000 	ldrb.w	r8, [r3]
 800e5aa:	f8df c100 	ldr.w	ip, [pc, #256]	@ 800e6ac <element_phase_enhancement_event+0x1d0>
 800e5ae:	9304      	str	r3, [sp, #16]
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e5b6:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800e5ba:	4693      	mov	fp, r2
 800e5bc:	e009      	b.n	800e5d2 <element_phase_enhancement_event+0xf6>
 800e5be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e5c2:	52e2      	strh	r2, [r4, r3]
 800e5c4:	3501      	adds	r5, #1
 800e5c6:	fa1f fe85 	uxth.w	lr, r5
 800e5ca:	45f1      	cmp	r9, lr
 800e5cc:	4458      	add	r0, fp
 800e5ce:	8071      	strh	r1, [r6, #2]
 800e5d0:	d952      	bls.n	800e678 <element_phase_enhancement_event+0x19c>
 800e5d2:	9a01      	ldr	r2, [sp, #4]
 800e5d4:	eb0a 0350 	add.w	r3, sl, r0, lsr #1
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5de:	18e6      	adds	r6, r4, r3
 800e5e0:	5ee2      	ldrsh	r2, [r4, r3]
 800e5e2:	ee07 2a90 	vmov	s15, r2
 800e5e6:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800e5ea:	ee06 2a90 	vmov	s13, r2
 800e5ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800e5f6:	ee27 7a88 	vmul.f32	s14, s15, s16
 800e5fa:	ee66 5a80 	vmul.f32	s11, s13, s0
 800e5fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e602:	ee66 6a88 	vmul.f32	s13, s13, s16
 800e606:	ee37 7a65 	vsub.f32	s14, s14, s11
 800e60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e60e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e61a:	bf4c      	ite	mi
 800e61c:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 800e620:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 800e624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e628:	bf4c      	ite	mi
 800e62a:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 800e62e:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 800e632:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800e636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e63a:	ee17 ea10 	vmov	lr, s14
 800e63e:	ee17 1a90 	vmov	r1, s15
 800e642:	ee17 2a10 	vmov	r2, s14
 800e646:	45e6      	cmp	lr, ip
 800e648:	bfb8      	it	lt
 800e64a:	4662      	movlt	r2, ip
 800e64c:	4561      	cmp	r1, ip
 800e64e:	bfb8      	it	lt
 800e650:	4661      	movlt	r1, ip
 800e652:	42ba      	cmp	r2, r7
 800e654:	bfa8      	it	ge
 800e656:	463a      	movge	r2, r7
 800e658:	42b9      	cmp	r1, r7
 800e65a:	bfa8      	it	ge
 800e65c:	4639      	movge	r1, r7
 800e65e:	f1b8 0f00 	cmp.w	r8, #0
 800e662:	d1ae      	bne.n	800e5c2 <element_phase_enhancement_event+0xe6>
 800e664:	4596      	cmp	lr, r2
 800e666:	d1aa      	bne.n	800e5be <element_phase_enhancement_event+0xe2>
 800e668:	ee17 ea90 	vmov	lr, s15
 800e66c:	ebbe 0801 	subs.w	r8, lr, r1
 800e670:	bf18      	it	ne
 800e672:	f04f 0801 	movne.w	r8, #1
 800e676:	e7a4      	b.n	800e5c2 <element_phase_enhancement_event+0xe6>
 800e678:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 800e67c:	f883 8000 	strb.w	r8, [r3]
 800e680:	9b02      	ldr	r3, [sp, #8]
 800e682:	3301      	adds	r3, #1
 800e684:	461a      	mov	r2, r3
 800e686:	9302      	str	r3, [sp, #8]
 800e688:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 800e68c:	fa1f fa82 	uxth.w	sl, r2
 800e690:	4553      	cmp	r3, sl
 800e692:	f63f af44 	bhi.w	800e51e <element_phase_enhancement_event+0x42>
 800e696:	f8db 0000 	ldr.w	r0, [fp]
 800e69a:	6843      	ldr	r3, [r0, #4]
 800e69c:	b009      	add	sp, #36	@ 0x24
 800e69e:	ecbd 8b04 	vpop	{d8-d9}
 800e6a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a6:	4718      	bx	r3
 800e6a8:	37800000 	.word	0x37800000
 800e6ac:	ffff8000 	.word	0xffff8000

0800e6b0 <acc_element_phase_enhancement_init>:
 800e6b0:	b570      	push	{r4, r5, r6, lr}
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	460d      	mov	r5, r1
 800e6b6:	4814      	ldr	r0, [pc, #80]	@ (800e708 <acc_element_phase_enhancement_init+0x58>)
 800e6b8:	4914      	ldr	r1, [pc, #80]	@ (800e70c <acc_element_phase_enhancement_init+0x5c>)
 800e6ba:	68eb      	ldr	r3, [r5, #12]
 800e6bc:	4a14      	ldr	r2, [pc, #80]	@ (800e710 <acc_element_phase_enhancement_init+0x60>)
 800e6be:	60e2      	str	r2, [r4, #12]
 800e6c0:	e9c4 0101 	strd	r0, r1, [r4, #4]
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	a901      	add	r1, sp, #4
 800e6c8:	7bd8      	ldrb	r0, [r3, #15]
 800e6ca:	f7fd fc69 	bl	800bfa0 <acc_translation_a121_profile_to_start_point_offset>
 800e6ce:	68eb      	ldr	r3, [r5, #12]
 800e6d0:	882a      	ldrh	r2, [r5, #0]
 800e6d2:	8869      	ldrh	r1, [r5, #2]
 800e6d4:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800e6d6:	88aa      	ldrh	r2, [r5, #4]
 800e6d8:	88ee      	ldrh	r6, [r5, #6]
 800e6da:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 800e6dc:	8929      	ldrh	r1, [r5, #8]
 800e6de:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 800e6e0:	7b1a      	ldrb	r2, [r3, #12]
 800e6e2:	681d      	ldr	r5, [r3, #0]
 800e6e4:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 800e6e8:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 800e6ec:	9901      	ldr	r1, [sp, #4]
 800e6ee:	88da      	ldrh	r2, [r3, #6]
 800e6f0:	889b      	ldrh	r3, [r3, #4]
 800e6f2:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 800e6f6:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 800e6fa:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 800e6fe:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800e702:	b002      	add	sp, #8
 800e704:	bd70      	pop	{r4, r5, r6, pc}
 800e706:	bf00      	nop
 800e708:	0800e4dd 	.word	0x0800e4dd
 800e70c:	0800e4d5 	.word	0x0800e4d5
 800e710:	0800e4cd 	.word	0x0800e4cd

0800e714 <acc_element_phase_enhancement_release>:
 800e714:	4770      	bx	lr
 800e716:	bf00      	nop

0800e718 <expf>:
 800e718:	b508      	push	{r3, lr}
 800e71a:	ed2d 8b02 	vpush	{d8}
 800e71e:	eef0 8a40 	vmov.f32	s17, s0
 800e722:	f000 fbe1 	bl	800eee8 <__ieee754_expf>
 800e726:	eeb0 8a40 	vmov.f32	s16, s0
 800e72a:	eeb0 0a68 	vmov.f32	s0, s17
 800e72e:	f000 fa15 	bl	800eb5c <finitef>
 800e732:	b160      	cbz	r0, 800e74e <expf+0x36>
 800e734:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800e774 <expf+0x5c>
 800e738:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e740:	dd0a      	ble.n	800e758 <expf+0x40>
 800e742:	f002 f91d 	bl	8010980 <__errno>
 800e746:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800e778 <expf+0x60>
 800e74a:	2322      	movs	r3, #34	@ 0x22
 800e74c:	6003      	str	r3, [r0, #0]
 800e74e:	eeb0 0a48 	vmov.f32	s0, s16
 800e752:	ecbd 8b02 	vpop	{d8}
 800e756:	bd08      	pop	{r3, pc}
 800e758:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e77c <expf+0x64>
 800e75c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e764:	d5f3      	bpl.n	800e74e <expf+0x36>
 800e766:	f002 f90b 	bl	8010980 <__errno>
 800e76a:	2322      	movs	r3, #34	@ 0x22
 800e76c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800e780 <expf+0x68>
 800e770:	6003      	str	r3, [r0, #0]
 800e772:	e7ec      	b.n	800e74e <expf+0x36>
 800e774:	42b17217 	.word	0x42b17217
 800e778:	7f800000 	.word	0x7f800000
 800e77c:	c2cff1b5 	.word	0xc2cff1b5
 800e780:	00000000 	.word	0x00000000

0800e784 <log10f>:
 800e784:	b508      	push	{r3, lr}
 800e786:	ed2d 8b02 	vpush	{d8}
 800e78a:	eeb0 8a40 	vmov.f32	s16, s0
 800e78e:	f000 fc79 	bl	800f084 <__ieee754_log10f>
 800e792:	eeb4 8a48 	vcmp.f32	s16, s16
 800e796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79a:	d60f      	bvs.n	800e7bc <log10f+0x38>
 800e79c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a4:	d80a      	bhi.n	800e7bc <log10f+0x38>
 800e7a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ae:	d108      	bne.n	800e7c2 <log10f+0x3e>
 800e7b0:	f002 f8e6 	bl	8010980 <__errno>
 800e7b4:	2322      	movs	r3, #34	@ 0x22
 800e7b6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e7d8 <log10f+0x54>
 800e7ba:	6003      	str	r3, [r0, #0]
 800e7bc:	ecbd 8b02 	vpop	{d8}
 800e7c0:	bd08      	pop	{r3, pc}
 800e7c2:	f002 f8dd 	bl	8010980 <__errno>
 800e7c6:	ecbd 8b02 	vpop	{d8}
 800e7ca:	2321      	movs	r3, #33	@ 0x21
 800e7cc:	6003      	str	r3, [r0, #0]
 800e7ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e7d2:	4802      	ldr	r0, [pc, #8]	@ (800e7dc <log10f+0x58>)
 800e7d4:	f000 b9cc 	b.w	800eb70 <nanf>
 800e7d8:	ff800000 	.word	0xff800000
 800e7dc:	08017625 	.word	0x08017625

0800e7e0 <powf>:
 800e7e0:	b508      	push	{r3, lr}
 800e7e2:	ed2d 8b04 	vpush	{d8-d9}
 800e7e6:	eeb0 8a60 	vmov.f32	s16, s1
 800e7ea:	eeb0 9a40 	vmov.f32	s18, s0
 800e7ee:	f000 fca1 	bl	800f134 <__ieee754_powf>
 800e7f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fa:	eef0 8a40 	vmov.f32	s17, s0
 800e7fe:	d63e      	bvs.n	800e87e <powf+0x9e>
 800e800:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e808:	d112      	bne.n	800e830 <powf+0x50>
 800e80a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e812:	d039      	beq.n	800e888 <powf+0xa8>
 800e814:	eeb0 0a48 	vmov.f32	s0, s16
 800e818:	f000 f9a0 	bl	800eb5c <finitef>
 800e81c:	b378      	cbz	r0, 800e87e <powf+0x9e>
 800e81e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e826:	d52a      	bpl.n	800e87e <powf+0x9e>
 800e828:	f002 f8aa 	bl	8010980 <__errno>
 800e82c:	2322      	movs	r3, #34	@ 0x22
 800e82e:	e014      	b.n	800e85a <powf+0x7a>
 800e830:	f000 f994 	bl	800eb5c <finitef>
 800e834:	b998      	cbnz	r0, 800e85e <powf+0x7e>
 800e836:	eeb0 0a49 	vmov.f32	s0, s18
 800e83a:	f000 f98f 	bl	800eb5c <finitef>
 800e83e:	b170      	cbz	r0, 800e85e <powf+0x7e>
 800e840:	eeb0 0a48 	vmov.f32	s0, s16
 800e844:	f000 f98a 	bl	800eb5c <finitef>
 800e848:	b148      	cbz	r0, 800e85e <powf+0x7e>
 800e84a:	eef4 8a68 	vcmp.f32	s17, s17
 800e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e852:	d7e9      	bvc.n	800e828 <powf+0x48>
 800e854:	f002 f894 	bl	8010980 <__errno>
 800e858:	2321      	movs	r3, #33	@ 0x21
 800e85a:	6003      	str	r3, [r0, #0]
 800e85c:	e00f      	b.n	800e87e <powf+0x9e>
 800e85e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e866:	d10a      	bne.n	800e87e <powf+0x9e>
 800e868:	eeb0 0a49 	vmov.f32	s0, s18
 800e86c:	f000 f976 	bl	800eb5c <finitef>
 800e870:	b128      	cbz	r0, 800e87e <powf+0x9e>
 800e872:	eeb0 0a48 	vmov.f32	s0, s16
 800e876:	f000 f971 	bl	800eb5c <finitef>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d1d4      	bne.n	800e828 <powf+0x48>
 800e87e:	eeb0 0a68 	vmov.f32	s0, s17
 800e882:	ecbd 8b04 	vpop	{d8-d9}
 800e886:	bd08      	pop	{r3, pc}
 800e888:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800e88c:	e7f7      	b.n	800e87e <powf+0x9e>
	...

0800e890 <atanf>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	ee10 5a10 	vmov	r5, s0
 800e896:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e89a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e89e:	eef0 7a40 	vmov.f32	s15, s0
 800e8a2:	d310      	bcc.n	800e8c6 <atanf+0x36>
 800e8a4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e8a8:	d904      	bls.n	800e8b4 <atanf+0x24>
 800e8aa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e8ae:	eeb0 0a67 	vmov.f32	s0, s15
 800e8b2:	bd38      	pop	{r3, r4, r5, pc}
 800e8b4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e9ec <atanf+0x15c>
 800e8b8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e9f0 <atanf+0x160>
 800e8bc:	2d00      	cmp	r5, #0
 800e8be:	bfc8      	it	gt
 800e8c0:	eef0 7a47 	vmovgt.f32	s15, s14
 800e8c4:	e7f3      	b.n	800e8ae <atanf+0x1e>
 800e8c6:	4b4b      	ldr	r3, [pc, #300]	@ (800e9f4 <atanf+0x164>)
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	d810      	bhi.n	800e8ee <atanf+0x5e>
 800e8cc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e8d0:	d20a      	bcs.n	800e8e8 <atanf+0x58>
 800e8d2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e9f8 <atanf+0x168>
 800e8d6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e8da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e8de:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e6:	dce2      	bgt.n	800e8ae <atanf+0x1e>
 800e8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ec:	e013      	b.n	800e916 <atanf+0x86>
 800e8ee:	f000 f8e7 	bl	800eac0 <fabsf>
 800e8f2:	4b42      	ldr	r3, [pc, #264]	@ (800e9fc <atanf+0x16c>)
 800e8f4:	429c      	cmp	r4, r3
 800e8f6:	d84f      	bhi.n	800e998 <atanf+0x108>
 800e8f8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e8fc:	429c      	cmp	r4, r3
 800e8fe:	d841      	bhi.n	800e984 <atanf+0xf4>
 800e900:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e904:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e908:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e90c:	2300      	movs	r3, #0
 800e90e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e912:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e916:	1c5a      	adds	r2, r3, #1
 800e918:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e91c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ea00 <atanf+0x170>
 800e920:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ea04 <atanf+0x174>
 800e924:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ea08 <atanf+0x178>
 800e928:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e92c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e930:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ea0c <atanf+0x17c>
 800e934:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e938:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ea10 <atanf+0x180>
 800e93c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e940:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ea14 <atanf+0x184>
 800e944:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e948:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ea18 <atanf+0x188>
 800e94c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e950:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ea1c <atanf+0x18c>
 800e954:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e958:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ea20 <atanf+0x190>
 800e95c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e960:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ea24 <atanf+0x194>
 800e964:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e968:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ea28 <atanf+0x198>
 800e96c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e970:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e974:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e978:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e97c:	d121      	bne.n	800e9c2 <atanf+0x132>
 800e97e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e982:	e794      	b.n	800e8ae <atanf+0x1e>
 800e984:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e988:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e98c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e990:	2301      	movs	r3, #1
 800e992:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e996:	e7be      	b.n	800e916 <atanf+0x86>
 800e998:	4b24      	ldr	r3, [pc, #144]	@ (800ea2c <atanf+0x19c>)
 800e99a:	429c      	cmp	r4, r3
 800e99c:	d80b      	bhi.n	800e9b6 <atanf+0x126>
 800e99e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e9a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e9a6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e9aa:	2302      	movs	r3, #2
 800e9ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e9b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9b4:	e7af      	b.n	800e916 <atanf+0x86>
 800e9b6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e9ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e9be:	2303      	movs	r3, #3
 800e9c0:	e7a9      	b.n	800e916 <atanf+0x86>
 800e9c2:	4a1b      	ldr	r2, [pc, #108]	@ (800ea30 <atanf+0x1a0>)
 800e9c4:	491b      	ldr	r1, [pc, #108]	@ (800ea34 <atanf+0x1a4>)
 800e9c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e9ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e9ce:	edd3 6a00 	vldr	s13, [r3]
 800e9d2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e9d6:	2d00      	cmp	r5, #0
 800e9d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e9dc:	edd2 7a00 	vldr	s15, [r2]
 800e9e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9e4:	bfb8      	it	lt
 800e9e6:	eef1 7a67 	vneglt.f32	s15, s15
 800e9ea:	e760      	b.n	800e8ae <atanf+0x1e>
 800e9ec:	bfc90fdb 	.word	0xbfc90fdb
 800e9f0:	3fc90fdb 	.word	0x3fc90fdb
 800e9f4:	3edfffff 	.word	0x3edfffff
 800e9f8:	7149f2ca 	.word	0x7149f2ca
 800e9fc:	3f97ffff 	.word	0x3f97ffff
 800ea00:	3c8569d7 	.word	0x3c8569d7
 800ea04:	3d4bda59 	.word	0x3d4bda59
 800ea08:	bd6ef16b 	.word	0xbd6ef16b
 800ea0c:	3d886b35 	.word	0x3d886b35
 800ea10:	3dba2e6e 	.word	0x3dba2e6e
 800ea14:	3e124925 	.word	0x3e124925
 800ea18:	3eaaaaab 	.word	0x3eaaaaab
 800ea1c:	bd15a221 	.word	0xbd15a221
 800ea20:	bd9d8795 	.word	0xbd9d8795
 800ea24:	bde38e38 	.word	0xbde38e38
 800ea28:	be4ccccd 	.word	0xbe4ccccd
 800ea2c:	401bffff 	.word	0x401bffff
 800ea30:	08017210 	.word	0x08017210
 800ea34:	08017200 	.word	0x08017200

0800ea38 <cosf>:
 800ea38:	ee10 3a10 	vmov	r3, s0
 800ea3c:	b507      	push	{r0, r1, r2, lr}
 800ea3e:	4a1e      	ldr	r2, [pc, #120]	@ (800eab8 <cosf+0x80>)
 800ea40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d806      	bhi.n	800ea56 <cosf+0x1e>
 800ea48:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800eabc <cosf+0x84>
 800ea4c:	b003      	add	sp, #12
 800ea4e:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea52:	f000 b9a9 	b.w	800eda8 <__kernel_cosf>
 800ea56:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ea5a:	d304      	bcc.n	800ea66 <cosf+0x2e>
 800ea5c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ea60:	b003      	add	sp, #12
 800ea62:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea66:	4668      	mov	r0, sp
 800ea68:	f000 fe34 	bl	800f6d4 <__ieee754_rem_pio2f>
 800ea6c:	f000 0003 	and.w	r0, r0, #3
 800ea70:	2801      	cmp	r0, #1
 800ea72:	d009      	beq.n	800ea88 <cosf+0x50>
 800ea74:	2802      	cmp	r0, #2
 800ea76:	d010      	beq.n	800ea9a <cosf+0x62>
 800ea78:	b9b0      	cbnz	r0, 800eaa8 <cosf+0x70>
 800ea7a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea7e:	ed9d 0a00 	vldr	s0, [sp]
 800ea82:	f000 f991 	bl	800eda8 <__kernel_cosf>
 800ea86:	e7eb      	b.n	800ea60 <cosf+0x28>
 800ea88:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea8c:	ed9d 0a00 	vldr	s0, [sp]
 800ea90:	f000 f9e2 	bl	800ee58 <__kernel_sinf>
 800ea94:	eeb1 0a40 	vneg.f32	s0, s0
 800ea98:	e7e2      	b.n	800ea60 <cosf+0x28>
 800ea9a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea9e:	ed9d 0a00 	vldr	s0, [sp]
 800eaa2:	f000 f981 	bl	800eda8 <__kernel_cosf>
 800eaa6:	e7f5      	b.n	800ea94 <cosf+0x5c>
 800eaa8:	eddd 0a01 	vldr	s1, [sp, #4]
 800eaac:	ed9d 0a00 	vldr	s0, [sp]
 800eab0:	2001      	movs	r0, #1
 800eab2:	f000 f9d1 	bl	800ee58 <__kernel_sinf>
 800eab6:	e7d3      	b.n	800ea60 <cosf+0x28>
 800eab8:	3f490fd8 	.word	0x3f490fd8
 800eabc:	00000000 	.word	0x00000000

0800eac0 <fabsf>:
 800eac0:	ee10 3a10 	vmov	r3, s0
 800eac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eac8:	ee00 3a10 	vmov	s0, r3
 800eacc:	4770      	bx	lr
	...

0800ead0 <sinf>:
 800ead0:	ee10 3a10 	vmov	r3, s0
 800ead4:	b507      	push	{r0, r1, r2, lr}
 800ead6:	4a1f      	ldr	r2, [pc, #124]	@ (800eb54 <sinf+0x84>)
 800ead8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eadc:	4293      	cmp	r3, r2
 800eade:	d807      	bhi.n	800eaf0 <sinf+0x20>
 800eae0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800eb58 <sinf+0x88>
 800eae4:	2000      	movs	r0, #0
 800eae6:	b003      	add	sp, #12
 800eae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaec:	f000 b9b4 	b.w	800ee58 <__kernel_sinf>
 800eaf0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eaf4:	d304      	bcc.n	800eb00 <sinf+0x30>
 800eaf6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800eafa:	b003      	add	sp, #12
 800eafc:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb00:	4668      	mov	r0, sp
 800eb02:	f000 fde7 	bl	800f6d4 <__ieee754_rem_pio2f>
 800eb06:	f000 0003 	and.w	r0, r0, #3
 800eb0a:	2801      	cmp	r0, #1
 800eb0c:	d00a      	beq.n	800eb24 <sinf+0x54>
 800eb0e:	2802      	cmp	r0, #2
 800eb10:	d00f      	beq.n	800eb32 <sinf+0x62>
 800eb12:	b9c0      	cbnz	r0, 800eb46 <sinf+0x76>
 800eb14:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb18:	ed9d 0a00 	vldr	s0, [sp]
 800eb1c:	2001      	movs	r0, #1
 800eb1e:	f000 f99b 	bl	800ee58 <__kernel_sinf>
 800eb22:	e7ea      	b.n	800eafa <sinf+0x2a>
 800eb24:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb28:	ed9d 0a00 	vldr	s0, [sp]
 800eb2c:	f000 f93c 	bl	800eda8 <__kernel_cosf>
 800eb30:	e7e3      	b.n	800eafa <sinf+0x2a>
 800eb32:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb36:	ed9d 0a00 	vldr	s0, [sp]
 800eb3a:	2001      	movs	r0, #1
 800eb3c:	f000 f98c 	bl	800ee58 <__kernel_sinf>
 800eb40:	eeb1 0a40 	vneg.f32	s0, s0
 800eb44:	e7d9      	b.n	800eafa <sinf+0x2a>
 800eb46:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb4a:	ed9d 0a00 	vldr	s0, [sp]
 800eb4e:	f000 f92b 	bl	800eda8 <__kernel_cosf>
 800eb52:	e7f5      	b.n	800eb40 <sinf+0x70>
 800eb54:	3f490fd8 	.word	0x3f490fd8
 800eb58:	00000000 	.word	0x00000000

0800eb5c <finitef>:
 800eb5c:	ee10 3a10 	vmov	r3, s0
 800eb60:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800eb64:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800eb68:	bfac      	ite	ge
 800eb6a:	2000      	movge	r0, #0
 800eb6c:	2001      	movlt	r0, #1
 800eb6e:	4770      	bx	lr

0800eb70 <nanf>:
 800eb70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800eb78 <nanf+0x8>
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	7fc00000 	.word	0x7fc00000

0800eb7c <fmaxf>:
 800eb7c:	b508      	push	{r3, lr}
 800eb7e:	ed2d 8b02 	vpush	{d8}
 800eb82:	eeb0 8a40 	vmov.f32	s16, s0
 800eb86:	eef0 8a60 	vmov.f32	s17, s1
 800eb8a:	f000 f831 	bl	800ebf0 <__fpclassifyf>
 800eb8e:	b930      	cbnz	r0, 800eb9e <fmaxf+0x22>
 800eb90:	eeb0 8a68 	vmov.f32	s16, s17
 800eb94:	eeb0 0a48 	vmov.f32	s0, s16
 800eb98:	ecbd 8b02 	vpop	{d8}
 800eb9c:	bd08      	pop	{r3, pc}
 800eb9e:	eeb0 0a68 	vmov.f32	s0, s17
 800eba2:	f000 f825 	bl	800ebf0 <__fpclassifyf>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d0f4      	beq.n	800eb94 <fmaxf+0x18>
 800ebaa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ebae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb2:	dded      	ble.n	800eb90 <fmaxf+0x14>
 800ebb4:	e7ee      	b.n	800eb94 <fmaxf+0x18>

0800ebb6 <fminf>:
 800ebb6:	b508      	push	{r3, lr}
 800ebb8:	ed2d 8b02 	vpush	{d8}
 800ebbc:	eeb0 8a40 	vmov.f32	s16, s0
 800ebc0:	eef0 8a60 	vmov.f32	s17, s1
 800ebc4:	f000 f814 	bl	800ebf0 <__fpclassifyf>
 800ebc8:	b930      	cbnz	r0, 800ebd8 <fminf+0x22>
 800ebca:	eeb0 8a68 	vmov.f32	s16, s17
 800ebce:	eeb0 0a48 	vmov.f32	s0, s16
 800ebd2:	ecbd 8b02 	vpop	{d8}
 800ebd6:	bd08      	pop	{r3, pc}
 800ebd8:	eeb0 0a68 	vmov.f32	s0, s17
 800ebdc:	f000 f808 	bl	800ebf0 <__fpclassifyf>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	d0f4      	beq.n	800ebce <fminf+0x18>
 800ebe4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ebe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebec:	d5ed      	bpl.n	800ebca <fminf+0x14>
 800ebee:	e7ee      	b.n	800ebce <fminf+0x18>

0800ebf0 <__fpclassifyf>:
 800ebf0:	ee10 3a10 	vmov	r3, s0
 800ebf4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800ebf8:	d00d      	beq.n	800ec16 <__fpclassifyf+0x26>
 800ebfa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800ebfe:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800ec02:	d30a      	bcc.n	800ec1a <__fpclassifyf+0x2a>
 800ec04:	4b07      	ldr	r3, [pc, #28]	@ (800ec24 <__fpclassifyf+0x34>)
 800ec06:	1e42      	subs	r2, r0, #1
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d908      	bls.n	800ec1e <__fpclassifyf+0x2e>
 800ec0c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ec10:	4258      	negs	r0, r3
 800ec12:	4158      	adcs	r0, r3
 800ec14:	4770      	bx	lr
 800ec16:	2002      	movs	r0, #2
 800ec18:	4770      	bx	lr
 800ec1a:	2004      	movs	r0, #4
 800ec1c:	4770      	bx	lr
 800ec1e:	2003      	movs	r0, #3
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	007ffffe 	.word	0x007ffffe

0800ec28 <cabsf>:
 800ec28:	b508      	push	{r3, lr}
 800ec2a:	ed2d 8b04 	vpush	{d8-d9}
 800ec2e:	eeb0 9a40 	vmov.f32	s18, s0
 800ec32:	eef0 8a60 	vmov.f32	s17, s1
 800ec36:	f000 f815 	bl	800ec64 <crealf>
 800ec3a:	eef0 0a68 	vmov.f32	s1, s17
 800ec3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ec42:	eeb0 0a49 	vmov.f32	s0, s18
 800ec46:	f000 f80a 	bl	800ec5e <cimagf>
 800ec4a:	eef0 0a40 	vmov.f32	s1, s0
 800ec4e:	eeb0 0a48 	vmov.f32	s0, s16
 800ec52:	ecbd 8b04 	vpop	{d8-d9}
 800ec56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ec5a:	f000 be6b 	b.w	800f934 <hypotf>

0800ec5e <cimagf>:
 800ec5e:	eeb0 0a60 	vmov.f32	s0, s1
 800ec62:	4770      	bx	lr

0800ec64 <crealf>:
 800ec64:	4770      	bx	lr
	...

0800ec68 <cexpf>:
 800ec68:	b508      	push	{r3, lr}
 800ec6a:	ed2d 8b04 	vpush	{d8-d9}
 800ec6e:	eeb0 9a40 	vmov.f32	s18, s0
 800ec72:	eef0 8a60 	vmov.f32	s17, s1
 800ec76:	f7ff fff5 	bl	800ec64 <crealf>
 800ec7a:	eef0 0a68 	vmov.f32	s1, s17
 800ec7e:	eeb0 8a40 	vmov.f32	s16, s0
 800ec82:	eeb0 0a49 	vmov.f32	s0, s18
 800ec86:	f7ff ffea 	bl	800ec5e <cimagf>
 800ec8a:	eeb0 9a40 	vmov.f32	s18, s0
 800ec8e:	eeb0 0a48 	vmov.f32	s0, s16
 800ec92:	f7ff fd41 	bl	800e718 <expf>
 800ec96:	eef0 8a40 	vmov.f32	s17, s0
 800ec9a:	eeb0 0a49 	vmov.f32	s0, s18
 800ec9e:	f7ff ff17 	bl	800ead0 <sinf>
 800eca2:	ee20 8a28 	vmul.f32	s16, s0, s17
 800eca6:	eeb0 0a49 	vmov.f32	s0, s18
 800ecaa:	f7ff fec5 	bl	800ea38 <cosf>
 800ecae:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800eccc <cexpf+0x64>
 800ecb2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ecb6:	eeb0 7a40 	vmov.f32	s14, s0
 800ecba:	eee7 7a28 	vfma.f32	s15, s14, s17
 800ecbe:	eef0 0a48 	vmov.f32	s1, s16
 800ecc2:	ecbd 8b04 	vpop	{d8-d9}
 800ecc6:	eeb0 0a67 	vmov.f32	s0, s15
 800ecca:	bd08      	pop	{r3, pc}
 800eccc:	00000000 	.word	0x00000000

0800ecd0 <__ieee754_sqrtf>:
 800ecd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ecd4:	4770      	bx	lr
	...

0800ecd8 <floorf>:
 800ecd8:	ee10 3a10 	vmov	r3, s0
 800ecdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ece0:	3a7f      	subs	r2, #127	@ 0x7f
 800ece2:	2a16      	cmp	r2, #22
 800ece4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ece8:	dc2b      	bgt.n	800ed42 <floorf+0x6a>
 800ecea:	2a00      	cmp	r2, #0
 800ecec:	da12      	bge.n	800ed14 <floorf+0x3c>
 800ecee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ed54 <floorf+0x7c>
 800ecf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ecf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ecfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecfe:	dd06      	ble.n	800ed0e <floorf+0x36>
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	da24      	bge.n	800ed4e <floorf+0x76>
 800ed04:	2900      	cmp	r1, #0
 800ed06:	4b14      	ldr	r3, [pc, #80]	@ (800ed58 <floorf+0x80>)
 800ed08:	bf08      	it	eq
 800ed0a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800ed0e:	ee00 3a10 	vmov	s0, r3
 800ed12:	4770      	bx	lr
 800ed14:	4911      	ldr	r1, [pc, #68]	@ (800ed5c <floorf+0x84>)
 800ed16:	4111      	asrs	r1, r2
 800ed18:	420b      	tst	r3, r1
 800ed1a:	d0fa      	beq.n	800ed12 <floorf+0x3a>
 800ed1c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800ed54 <floorf+0x7c>
 800ed20:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ed24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2c:	ddef      	ble.n	800ed0e <floorf+0x36>
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	bfbe      	ittt	lt
 800ed32:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800ed36:	fa40 f202 	asrlt.w	r2, r0, r2
 800ed3a:	189b      	addlt	r3, r3, r2
 800ed3c:	ea23 0301 	bic.w	r3, r3, r1
 800ed40:	e7e5      	b.n	800ed0e <floorf+0x36>
 800ed42:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ed46:	d3e4      	bcc.n	800ed12 <floorf+0x3a>
 800ed48:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ed4c:	4770      	bx	lr
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e7dd      	b.n	800ed0e <floorf+0x36>
 800ed52:	bf00      	nop
 800ed54:	7149f2ca 	.word	0x7149f2ca
 800ed58:	bf800000 	.word	0xbf800000
 800ed5c:	007fffff 	.word	0x007fffff

0800ed60 <roundf>:
 800ed60:	ee10 0a10 	vmov	r0, s0
 800ed64:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ed68:	3a7f      	subs	r2, #127	@ 0x7f
 800ed6a:	2a16      	cmp	r2, #22
 800ed6c:	dc15      	bgt.n	800ed9a <roundf+0x3a>
 800ed6e:	2a00      	cmp	r2, #0
 800ed70:	da08      	bge.n	800ed84 <roundf+0x24>
 800ed72:	3201      	adds	r2, #1
 800ed74:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800ed78:	d101      	bne.n	800ed7e <roundf+0x1e>
 800ed7a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800ed7e:	ee00 3a10 	vmov	s0, r3
 800ed82:	4770      	bx	lr
 800ed84:	4907      	ldr	r1, [pc, #28]	@ (800eda4 <roundf+0x44>)
 800ed86:	4111      	asrs	r1, r2
 800ed88:	4201      	tst	r1, r0
 800ed8a:	d0fa      	beq.n	800ed82 <roundf+0x22>
 800ed8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ed90:	4113      	asrs	r3, r2
 800ed92:	4403      	add	r3, r0
 800ed94:	ea23 0301 	bic.w	r3, r3, r1
 800ed98:	e7f1      	b.n	800ed7e <roundf+0x1e>
 800ed9a:	2a80      	cmp	r2, #128	@ 0x80
 800ed9c:	d1f1      	bne.n	800ed82 <roundf+0x22>
 800ed9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eda2:	4770      	bx	lr
 800eda4:	007fffff 	.word	0x007fffff

0800eda8 <__kernel_cosf>:
 800eda8:	ee10 3a10 	vmov	r3, s0
 800edac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800edb0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800edb4:	eef0 6a40 	vmov.f32	s13, s0
 800edb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800edbc:	d204      	bcs.n	800edc8 <__kernel_cosf+0x20>
 800edbe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800edc2:	ee17 2a90 	vmov	r2, s15
 800edc6:	b342      	cbz	r2, 800ee1a <__kernel_cosf+0x72>
 800edc8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800edcc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ee38 <__kernel_cosf+0x90>
 800edd0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ee3c <__kernel_cosf+0x94>
 800edd4:	4a1a      	ldr	r2, [pc, #104]	@ (800ee40 <__kernel_cosf+0x98>)
 800edd6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800edda:	4293      	cmp	r3, r2
 800eddc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ee44 <__kernel_cosf+0x9c>
 800ede0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ede4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ee48 <__kernel_cosf+0xa0>
 800ede8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800edec:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ee4c <__kernel_cosf+0xa4>
 800edf0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800edf4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ee50 <__kernel_cosf+0xa8>
 800edf8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800edfc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ee00:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ee04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ee08:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ee0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee10:	d804      	bhi.n	800ee1c <__kernel_cosf+0x74>
 800ee12:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ee16:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee1a:	4770      	bx	lr
 800ee1c:	4a0d      	ldr	r2, [pc, #52]	@ (800ee54 <__kernel_cosf+0xac>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	bf9a      	itte	ls
 800ee22:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ee26:	ee07 3a10 	vmovls	s14, r3
 800ee2a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ee2e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ee32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee36:	e7ec      	b.n	800ee12 <__kernel_cosf+0x6a>
 800ee38:	ad47d74e 	.word	0xad47d74e
 800ee3c:	310f74f6 	.word	0x310f74f6
 800ee40:	3e999999 	.word	0x3e999999
 800ee44:	b493f27c 	.word	0xb493f27c
 800ee48:	37d00d01 	.word	0x37d00d01
 800ee4c:	bab60b61 	.word	0xbab60b61
 800ee50:	3d2aaaab 	.word	0x3d2aaaab
 800ee54:	3f480000 	.word	0x3f480000

0800ee58 <__kernel_sinf>:
 800ee58:	ee10 3a10 	vmov	r3, s0
 800ee5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee60:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ee64:	d204      	bcs.n	800ee70 <__kernel_sinf+0x18>
 800ee66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ee6a:	ee17 3a90 	vmov	r3, s15
 800ee6e:	b35b      	cbz	r3, 800eec8 <__kernel_sinf+0x70>
 800ee70:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ee74:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800eecc <__kernel_sinf+0x74>
 800ee78:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800eed0 <__kernel_sinf+0x78>
 800ee7c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ee80:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800eed4 <__kernel_sinf+0x7c>
 800ee84:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ee88:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800eed8 <__kernel_sinf+0x80>
 800ee8c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ee90:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800eedc <__kernel_sinf+0x84>
 800ee94:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ee98:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ee9c:	b930      	cbnz	r0, 800eeac <__kernel_sinf+0x54>
 800ee9e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800eee0 <__kernel_sinf+0x88>
 800eea2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eea6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800eeaa:	4770      	bx	lr
 800eeac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800eeb0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800eeb4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800eeb8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800eebc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800eee4 <__kernel_sinf+0x8c>
 800eec0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800eec4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	2f2ec9d3 	.word	0x2f2ec9d3
 800eed0:	b2d72f34 	.word	0xb2d72f34
 800eed4:	3638ef1b 	.word	0x3638ef1b
 800eed8:	b9500d01 	.word	0xb9500d01
 800eedc:	3c088889 	.word	0x3c088889
 800eee0:	be2aaaab 	.word	0xbe2aaaab
 800eee4:	3e2aaaab 	.word	0x3e2aaaab

0800eee8 <__ieee754_expf>:
 800eee8:	ee10 2a10 	vmov	r2, s0
 800eeec:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800eef0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eef4:	d902      	bls.n	800eefc <__ieee754_expf+0x14>
 800eef6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eefa:	4770      	bx	lr
 800eefc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ef00:	d106      	bne.n	800ef10 <__ieee754_expf+0x28>
 800ef02:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800f03c <__ieee754_expf+0x154>
 800ef06:	2900      	cmp	r1, #0
 800ef08:	bf18      	it	ne
 800ef0a:	eeb0 0a67 	vmovne.f32	s0, s15
 800ef0e:	4770      	bx	lr
 800ef10:	484b      	ldr	r0, [pc, #300]	@ (800f040 <__ieee754_expf+0x158>)
 800ef12:	4282      	cmp	r2, r0
 800ef14:	dd02      	ble.n	800ef1c <__ieee754_expf+0x34>
 800ef16:	2000      	movs	r0, #0
 800ef18:	f000 bdb8 	b.w	800fa8c <__math_oflowf>
 800ef1c:	2a00      	cmp	r2, #0
 800ef1e:	da05      	bge.n	800ef2c <__ieee754_expf+0x44>
 800ef20:	4a48      	ldr	r2, [pc, #288]	@ (800f044 <__ieee754_expf+0x15c>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d902      	bls.n	800ef2c <__ieee754_expf+0x44>
 800ef26:	2000      	movs	r0, #0
 800ef28:	f000 bdaa 	b.w	800fa80 <__math_uflowf>
 800ef2c:	4a46      	ldr	r2, [pc, #280]	@ (800f048 <__ieee754_expf+0x160>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800ef34:	d952      	bls.n	800efdc <__ieee754_expf+0xf4>
 800ef36:	4a45      	ldr	r2, [pc, #276]	@ (800f04c <__ieee754_expf+0x164>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800ef3e:	d834      	bhi.n	800efaa <__ieee754_expf+0xc2>
 800ef40:	4b43      	ldr	r3, [pc, #268]	@ (800f050 <__ieee754_expf+0x168>)
 800ef42:	4413      	add	r3, r2
 800ef44:	ed93 7a00 	vldr	s14, [r3]
 800ef48:	4b42      	ldr	r3, [pc, #264]	@ (800f054 <__ieee754_expf+0x16c>)
 800ef4a:	4413      	add	r3, r2
 800ef4c:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ef50:	f1c1 0201 	rsb	r2, r1, #1
 800ef54:	edd3 7a00 	vldr	s15, [r3]
 800ef58:	1a52      	subs	r2, r2, r1
 800ef5a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ef5e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ef62:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800f058 <__ieee754_expf+0x170>
 800ef66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f05c <__ieee754_expf+0x174>
 800ef6a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800ef6e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800f060 <__ieee754_expf+0x178>
 800ef72:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ef76:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f064 <__ieee754_expf+0x17c>
 800ef7a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800ef7e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800f068 <__ieee754_expf+0x180>
 800ef82:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ef86:	eef0 6a40 	vmov.f32	s13, s0
 800ef8a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800ef8e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ef92:	ee20 5a26 	vmul.f32	s10, s0, s13
 800ef96:	bb92      	cbnz	r2, 800effe <__ieee754_expf+0x116>
 800ef98:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ef9c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800efa0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800efa4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800efa8:	4770      	bx	lr
 800efaa:	4b30      	ldr	r3, [pc, #192]	@ (800f06c <__ieee754_expf+0x184>)
 800efac:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800f070 <__ieee754_expf+0x188>
 800efb0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800f074 <__ieee754_expf+0x18c>
 800efb4:	4413      	add	r3, r2
 800efb6:	edd3 7a00 	vldr	s15, [r3]
 800efba:	eee0 7a07 	vfma.f32	s15, s0, s14
 800efbe:	eeb0 7a40 	vmov.f32	s14, s0
 800efc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800efc6:	ee17 2a90 	vmov	r2, s15
 800efca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efce:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800efd2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800f078 <__ieee754_expf+0x190>
 800efd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800efda:	e7be      	b.n	800ef5a <__ieee754_expf+0x72>
 800efdc:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800efe0:	d20b      	bcs.n	800effa <__ieee754_expf+0x112>
 800efe2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f07c <__ieee754_expf+0x194>
 800efe6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800efea:	eef4 6ae5 	vcmpe.f32	s13, s11
 800efee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff2:	dd02      	ble.n	800effa <__ieee754_expf+0x112>
 800eff4:	ee30 0a25 	vadd.f32	s0, s0, s11
 800eff8:	4770      	bx	lr
 800effa:	2200      	movs	r2, #0
 800effc:	e7af      	b.n	800ef5e <__ieee754_expf+0x76>
 800effe:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f002:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800f006:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800f00a:	bfb8      	it	lt
 800f00c:	3264      	addlt	r2, #100	@ 0x64
 800f00e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f016:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f01a:	ee17 3a90 	vmov	r3, s15
 800f01e:	bfab      	itete	ge
 800f020:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800f024:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800f028:	ee00 3a10 	vmovge	s0, r3
 800f02c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800f080 <__ieee754_expf+0x198>
 800f030:	bfbc      	itt	lt
 800f032:	ee00 3a10 	vmovlt	s0, r3
 800f036:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800f03a:	4770      	bx	lr
 800f03c:	00000000 	.word	0x00000000
 800f040:	42b17217 	.word	0x42b17217
 800f044:	42cff1b5 	.word	0x42cff1b5
 800f048:	3eb17218 	.word	0x3eb17218
 800f04c:	3f851591 	.word	0x3f851591
 800f050:	08017228 	.word	0x08017228
 800f054:	08017220 	.word	0x08017220
 800f058:	3331bb4c 	.word	0x3331bb4c
 800f05c:	b5ddea0e 	.word	0xb5ddea0e
 800f060:	388ab355 	.word	0x388ab355
 800f064:	bb360b61 	.word	0xbb360b61
 800f068:	3e2aaaab 	.word	0x3e2aaaab
 800f06c:	08017230 	.word	0x08017230
 800f070:	3fb8aa3b 	.word	0x3fb8aa3b
 800f074:	3f317180 	.word	0x3f317180
 800f078:	3717f7d1 	.word	0x3717f7d1
 800f07c:	7149f2ca 	.word	0x7149f2ca
 800f080:	0d800000 	.word	0x0d800000

0800f084 <__ieee754_log10f>:
 800f084:	b508      	push	{r3, lr}
 800f086:	ee10 3a10 	vmov	r3, s0
 800f08a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f08e:	ed2d 8b02 	vpush	{d8}
 800f092:	d108      	bne.n	800f0a6 <__ieee754_log10f+0x22>
 800f094:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800f11c <__ieee754_log10f+0x98>
 800f098:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800f120 <__ieee754_log10f+0x9c>
 800f09c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f0a0:	ecbd 8b02 	vpop	{d8}
 800f0a4:	bd08      	pop	{r3, pc}
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	da02      	bge.n	800f0b2 <__ieee754_log10f+0x2e>
 800f0ac:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f0b0:	e7f2      	b.n	800f098 <__ieee754_log10f+0x14>
 800f0b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f0b6:	db02      	blt.n	800f0be <__ieee754_log10f+0x3a>
 800f0b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f0bc:	e7f0      	b.n	800f0a0 <__ieee754_log10f+0x1c>
 800f0be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f0c2:	bfbf      	itttt	lt
 800f0c4:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800f124 <__ieee754_log10f+0xa0>
 800f0c8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f0cc:	f06f 0118 	mvnlt.w	r1, #24
 800f0d0:	ee17 2a90 	vmovlt	r2, s15
 800f0d4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f0d8:	bfa8      	it	ge
 800f0da:	2100      	movge	r1, #0
 800f0dc:	3b7f      	subs	r3, #127	@ 0x7f
 800f0de:	440b      	add	r3, r1
 800f0e0:	0fd9      	lsrs	r1, r3, #31
 800f0e2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f0e6:	ee07 3a90 	vmov	s15, r3
 800f0ea:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f0ee:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800f0f2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f0f6:	ee00 3a10 	vmov	s0, r3
 800f0fa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f0fe:	f000 ffcd 	bl	801009c <__ieee754_logf>
 800f102:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f128 <__ieee754_log10f+0xa4>
 800f106:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f10a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f12c <__ieee754_log10f+0xa8>
 800f10e:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f112:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800f130 <__ieee754_log10f+0xac>
 800f116:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f11a:	e7c1      	b.n	800f0a0 <__ieee754_log10f+0x1c>
 800f11c:	cc000000 	.word	0xcc000000
 800f120:	00000000 	.word	0x00000000
 800f124:	4c000000 	.word	0x4c000000
 800f128:	3ede5bd9 	.word	0x3ede5bd9
 800f12c:	355427db 	.word	0x355427db
 800f130:	3e9a2080 	.word	0x3e9a2080

0800f134 <__ieee754_powf>:
 800f134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f138:	ee10 4a90 	vmov	r4, s1
 800f13c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f140:	ed2d 8b02 	vpush	{d8}
 800f144:	ee10 6a10 	vmov	r6, s0
 800f148:	eeb0 8a40 	vmov.f32	s16, s0
 800f14c:	eef0 8a60 	vmov.f32	s17, s1
 800f150:	d10c      	bne.n	800f16c <__ieee754_powf+0x38>
 800f152:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f156:	0076      	lsls	r6, r6, #1
 800f158:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f15c:	f240 829c 	bls.w	800f698 <__ieee754_powf+0x564>
 800f160:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f164:	ecbd 8b02 	vpop	{d8}
 800f168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f16c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f170:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f174:	d802      	bhi.n	800f17c <__ieee754_powf+0x48>
 800f176:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f17a:	d908      	bls.n	800f18e <__ieee754_powf+0x5a>
 800f17c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f180:	d1ee      	bne.n	800f160 <__ieee754_powf+0x2c>
 800f182:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f186:	0064      	lsls	r4, r4, #1
 800f188:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f18c:	e7e6      	b.n	800f15c <__ieee754_powf+0x28>
 800f18e:	2e00      	cmp	r6, #0
 800f190:	da1e      	bge.n	800f1d0 <__ieee754_powf+0x9c>
 800f192:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f196:	d22b      	bcs.n	800f1f0 <__ieee754_powf+0xbc>
 800f198:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f19c:	d332      	bcc.n	800f204 <__ieee754_powf+0xd0>
 800f19e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f1a2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f1a6:	fa49 f503 	asr.w	r5, r9, r3
 800f1aa:	fa05 f303 	lsl.w	r3, r5, r3
 800f1ae:	454b      	cmp	r3, r9
 800f1b0:	d126      	bne.n	800f200 <__ieee754_powf+0xcc>
 800f1b2:	f005 0501 	and.w	r5, r5, #1
 800f1b6:	f1c5 0502 	rsb	r5, r5, #2
 800f1ba:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f1be:	d122      	bne.n	800f206 <__ieee754_powf+0xd2>
 800f1c0:	2c00      	cmp	r4, #0
 800f1c2:	f280 826f 	bge.w	800f6a4 <__ieee754_powf+0x570>
 800f1c6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f1ca:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f1ce:	e7c9      	b.n	800f164 <__ieee754_powf+0x30>
 800f1d0:	2500      	movs	r5, #0
 800f1d2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f1d6:	d1f0      	bne.n	800f1ba <__ieee754_powf+0x86>
 800f1d8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f1dc:	f000 825c 	beq.w	800f698 <__ieee754_powf+0x564>
 800f1e0:	d908      	bls.n	800f1f4 <__ieee754_powf+0xc0>
 800f1e2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800f544 <__ieee754_powf+0x410>
 800f1e6:	2c00      	cmp	r4, #0
 800f1e8:	bfa8      	it	ge
 800f1ea:	eeb0 0a68 	vmovge.f32	s0, s17
 800f1ee:	e7b9      	b.n	800f164 <__ieee754_powf+0x30>
 800f1f0:	2502      	movs	r5, #2
 800f1f2:	e7ee      	b.n	800f1d2 <__ieee754_powf+0x9e>
 800f1f4:	2c00      	cmp	r4, #0
 800f1f6:	f280 8252 	bge.w	800f69e <__ieee754_powf+0x56a>
 800f1fa:	eeb1 0a68 	vneg.f32	s0, s17
 800f1fe:	e7b1      	b.n	800f164 <__ieee754_powf+0x30>
 800f200:	2500      	movs	r5, #0
 800f202:	e7da      	b.n	800f1ba <__ieee754_powf+0x86>
 800f204:	2500      	movs	r5, #0
 800f206:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f20a:	d102      	bne.n	800f212 <__ieee754_powf+0xde>
 800f20c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f210:	e7a8      	b.n	800f164 <__ieee754_powf+0x30>
 800f212:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f216:	d109      	bne.n	800f22c <__ieee754_powf+0xf8>
 800f218:	2e00      	cmp	r6, #0
 800f21a:	db07      	blt.n	800f22c <__ieee754_powf+0xf8>
 800f21c:	eeb0 0a48 	vmov.f32	s0, s16
 800f220:	ecbd 8b02 	vpop	{d8}
 800f224:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f228:	f7ff bd52 	b.w	800ecd0 <__ieee754_sqrtf>
 800f22c:	eeb0 0a48 	vmov.f32	s0, s16
 800f230:	f7ff fc46 	bl	800eac0 <fabsf>
 800f234:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f238:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f23c:	4647      	mov	r7, r8
 800f23e:	d002      	beq.n	800f246 <__ieee754_powf+0x112>
 800f240:	f1b8 0f00 	cmp.w	r8, #0
 800f244:	d117      	bne.n	800f276 <__ieee754_powf+0x142>
 800f246:	2c00      	cmp	r4, #0
 800f248:	bfbc      	itt	lt
 800f24a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f24e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f252:	2e00      	cmp	r6, #0
 800f254:	da86      	bge.n	800f164 <__ieee754_powf+0x30>
 800f256:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f25a:	ea58 0805 	orrs.w	r8, r8, r5
 800f25e:	d104      	bne.n	800f26a <__ieee754_powf+0x136>
 800f260:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f264:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f268:	e77c      	b.n	800f164 <__ieee754_powf+0x30>
 800f26a:	2d01      	cmp	r5, #1
 800f26c:	f47f af7a 	bne.w	800f164 <__ieee754_powf+0x30>
 800f270:	eeb1 0a40 	vneg.f32	s0, s0
 800f274:	e776      	b.n	800f164 <__ieee754_powf+0x30>
 800f276:	0ff0      	lsrs	r0, r6, #31
 800f278:	3801      	subs	r0, #1
 800f27a:	ea55 0300 	orrs.w	r3, r5, r0
 800f27e:	d104      	bne.n	800f28a <__ieee754_powf+0x156>
 800f280:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f284:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f288:	e76c      	b.n	800f164 <__ieee754_powf+0x30>
 800f28a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f28e:	d973      	bls.n	800f378 <__ieee754_powf+0x244>
 800f290:	4bad      	ldr	r3, [pc, #692]	@ (800f548 <__ieee754_powf+0x414>)
 800f292:	4598      	cmp	r8, r3
 800f294:	d808      	bhi.n	800f2a8 <__ieee754_powf+0x174>
 800f296:	2c00      	cmp	r4, #0
 800f298:	da0b      	bge.n	800f2b2 <__ieee754_powf+0x17e>
 800f29a:	2000      	movs	r0, #0
 800f29c:	ecbd 8b02 	vpop	{d8}
 800f2a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a4:	f000 bbf2 	b.w	800fa8c <__math_oflowf>
 800f2a8:	4ba8      	ldr	r3, [pc, #672]	@ (800f54c <__ieee754_powf+0x418>)
 800f2aa:	4598      	cmp	r8, r3
 800f2ac:	d908      	bls.n	800f2c0 <__ieee754_powf+0x18c>
 800f2ae:	2c00      	cmp	r4, #0
 800f2b0:	dcf3      	bgt.n	800f29a <__ieee754_powf+0x166>
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	ecbd 8b02 	vpop	{d8}
 800f2b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2bc:	f000 bbe0 	b.w	800fa80 <__math_uflowf>
 800f2c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f2c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f2c8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800f550 <__ieee754_powf+0x41c>
 800f2cc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f2d0:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f2d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f2d8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f2dc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f2e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f2e4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800f554 <__ieee754_powf+0x420>
 800f2e8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f2ec:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800f558 <__ieee754_powf+0x424>
 800f2f0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f2f4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f55c <__ieee754_powf+0x428>
 800f2f8:	eef0 6a67 	vmov.f32	s13, s15
 800f2fc:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f300:	ee16 3a90 	vmov	r3, s13
 800f304:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f308:	f023 030f 	bic.w	r3, r3, #15
 800f30c:	ee06 3a90 	vmov	s13, r3
 800f310:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f314:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f318:	3d01      	subs	r5, #1
 800f31a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f31e:	4305      	orrs	r5, r0
 800f320:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f324:	f024 040f 	bic.w	r4, r4, #15
 800f328:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f32c:	bf18      	it	ne
 800f32e:	eeb0 8a47 	vmovne.f32	s16, s14
 800f332:	ee07 4a10 	vmov	s14, r4
 800f336:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f33a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f33e:	ee07 3a90 	vmov	s15, r3
 800f342:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f346:	ee07 4a10 	vmov	s14, r4
 800f34a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f34e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f352:	ee17 1a10 	vmov	r1, s14
 800f356:	2900      	cmp	r1, #0
 800f358:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f35c:	f340 80dd 	ble.w	800f51a <__ieee754_powf+0x3e6>
 800f360:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f364:	f240 80ca 	bls.w	800f4fc <__ieee754_powf+0x3c8>
 800f368:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f370:	bf4c      	ite	mi
 800f372:	2001      	movmi	r0, #1
 800f374:	2000      	movpl	r0, #0
 800f376:	e791      	b.n	800f29c <__ieee754_powf+0x168>
 800f378:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f37c:	bf01      	itttt	eq
 800f37e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f560 <__ieee754_powf+0x42c>
 800f382:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f386:	f06f 0317 	mvneq.w	r3, #23
 800f38a:	ee17 7a90 	vmoveq	r7, s15
 800f38e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f392:	bf18      	it	ne
 800f394:	2300      	movne	r3, #0
 800f396:	3a7f      	subs	r2, #127	@ 0x7f
 800f398:	441a      	add	r2, r3
 800f39a:	4b72      	ldr	r3, [pc, #456]	@ (800f564 <__ieee754_powf+0x430>)
 800f39c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f3a0:	429f      	cmp	r7, r3
 800f3a2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f3a6:	dd06      	ble.n	800f3b6 <__ieee754_powf+0x282>
 800f3a8:	4b6f      	ldr	r3, [pc, #444]	@ (800f568 <__ieee754_powf+0x434>)
 800f3aa:	429f      	cmp	r7, r3
 800f3ac:	f340 80a4 	ble.w	800f4f8 <__ieee754_powf+0x3c4>
 800f3b0:	3201      	adds	r2, #1
 800f3b2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f3b6:	2600      	movs	r6, #0
 800f3b8:	4b6c      	ldr	r3, [pc, #432]	@ (800f56c <__ieee754_powf+0x438>)
 800f3ba:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f3be:	ee07 1a10 	vmov	s14, r1
 800f3c2:	edd3 5a00 	vldr	s11, [r3]
 800f3c6:	4b6a      	ldr	r3, [pc, #424]	@ (800f570 <__ieee754_powf+0x43c>)
 800f3c8:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f3cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3d0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f3d4:	1049      	asrs	r1, r1, #1
 800f3d6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f3da:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f3de:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f3e2:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f3e6:	ee07 1a90 	vmov	s15, r1
 800f3ea:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f3ee:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f3f2:	ee15 7a10 	vmov	r7, s10
 800f3f6:	401f      	ands	r7, r3
 800f3f8:	ee06 7a90 	vmov	s13, r7
 800f3fc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f400:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f404:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f408:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f40c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f574 <__ieee754_powf+0x440>
 800f410:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f578 <__ieee754_powf+0x444>
 800f414:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f418:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f57c <__ieee754_powf+0x448>
 800f41c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f420:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f550 <__ieee754_powf+0x41c>
 800f424:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f428:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f580 <__ieee754_powf+0x44c>
 800f42c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f430:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f584 <__ieee754_powf+0x450>
 800f434:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f438:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f43c:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f440:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f444:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f448:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f44c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f450:	eef0 5a67 	vmov.f32	s11, s15
 800f454:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f458:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f45c:	ee15 1a90 	vmov	r1, s11
 800f460:	4019      	ands	r1, r3
 800f462:	ee05 1a90 	vmov	s11, r1
 800f466:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f46a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f46e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f472:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f476:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f47a:	eeb0 6a67 	vmov.f32	s12, s15
 800f47e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f482:	ee16 1a10 	vmov	r1, s12
 800f486:	4019      	ands	r1, r3
 800f488:	ee06 1a10 	vmov	s12, r1
 800f48c:	eeb0 7a46 	vmov.f32	s14, s12
 800f490:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f494:	493c      	ldr	r1, [pc, #240]	@ (800f588 <__ieee754_powf+0x454>)
 800f496:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f49a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f49e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f58c <__ieee754_powf+0x458>
 800f4a2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f590 <__ieee754_powf+0x45c>
 800f4a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4aa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f594 <__ieee754_powf+0x460>
 800f4ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f4b2:	ed91 7a00 	vldr	s14, [r1]
 800f4b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4ba:	ee07 2a10 	vmov	s14, r2
 800f4be:	eef0 6a67 	vmov.f32	s13, s15
 800f4c2:	4a35      	ldr	r2, [pc, #212]	@ (800f598 <__ieee754_powf+0x464>)
 800f4c4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f4c8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f4cc:	ed92 5a00 	vldr	s10, [r2]
 800f4d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4d4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f4d8:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f4dc:	ee16 2a90 	vmov	r2, s13
 800f4e0:	4013      	ands	r3, r2
 800f4e2:	ee06 3a90 	vmov	s13, r3
 800f4e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f4ea:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f4ee:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f4f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4f6:	e70f      	b.n	800f318 <__ieee754_powf+0x1e4>
 800f4f8:	2601      	movs	r6, #1
 800f4fa:	e75d      	b.n	800f3b8 <__ieee754_powf+0x284>
 800f4fc:	d152      	bne.n	800f5a4 <__ieee754_powf+0x470>
 800f4fe:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f59c <__ieee754_powf+0x468>
 800f502:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f506:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f50a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f512:	f73f af29 	bgt.w	800f368 <__ieee754_powf+0x234>
 800f516:	2386      	movs	r3, #134	@ 0x86
 800f518:	e048      	b.n	800f5ac <__ieee754_powf+0x478>
 800f51a:	4a21      	ldr	r2, [pc, #132]	@ (800f5a0 <__ieee754_powf+0x46c>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d907      	bls.n	800f530 <__ieee754_powf+0x3fc>
 800f520:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f528:	bf4c      	ite	mi
 800f52a:	2001      	movmi	r0, #1
 800f52c:	2000      	movpl	r0, #0
 800f52e:	e6c1      	b.n	800f2b4 <__ieee754_powf+0x180>
 800f530:	d138      	bne.n	800f5a4 <__ieee754_powf+0x470>
 800f532:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f536:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53e:	dbea      	blt.n	800f516 <__ieee754_powf+0x3e2>
 800f540:	e7ee      	b.n	800f520 <__ieee754_powf+0x3ec>
 800f542:	bf00      	nop
 800f544:	00000000 	.word	0x00000000
 800f548:	3f7ffff3 	.word	0x3f7ffff3
 800f54c:	3f800007 	.word	0x3f800007
 800f550:	3eaaaaab 	.word	0x3eaaaaab
 800f554:	3fb8aa3b 	.word	0x3fb8aa3b
 800f558:	36eca570 	.word	0x36eca570
 800f55c:	3fb8aa00 	.word	0x3fb8aa00
 800f560:	4b800000 	.word	0x4b800000
 800f564:	001cc471 	.word	0x001cc471
 800f568:	005db3d6 	.word	0x005db3d6
 800f56c:	08017248 	.word	0x08017248
 800f570:	fffff000 	.word	0xfffff000
 800f574:	3e6c3255 	.word	0x3e6c3255
 800f578:	3e53f142 	.word	0x3e53f142
 800f57c:	3e8ba305 	.word	0x3e8ba305
 800f580:	3edb6db7 	.word	0x3edb6db7
 800f584:	3f19999a 	.word	0x3f19999a
 800f588:	08017238 	.word	0x08017238
 800f58c:	3f76384f 	.word	0x3f76384f
 800f590:	3f763800 	.word	0x3f763800
 800f594:	369dc3a0 	.word	0x369dc3a0
 800f598:	08017240 	.word	0x08017240
 800f59c:	3338aa3c 	.word	0x3338aa3c
 800f5a0:	43160000 	.word	0x43160000
 800f5a4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f5a8:	d971      	bls.n	800f68e <__ieee754_powf+0x55a>
 800f5aa:	15db      	asrs	r3, r3, #23
 800f5ac:	3b7e      	subs	r3, #126	@ 0x7e
 800f5ae:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f5b2:	4118      	asrs	r0, r3
 800f5b4:	4408      	add	r0, r1
 800f5b6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f5ba:	4a3c      	ldr	r2, [pc, #240]	@ (800f6ac <__ieee754_powf+0x578>)
 800f5bc:	3b7f      	subs	r3, #127	@ 0x7f
 800f5be:	411a      	asrs	r2, r3
 800f5c0:	4002      	ands	r2, r0
 800f5c2:	ee07 2a10 	vmov	s14, r2
 800f5c6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f5ca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f5ce:	f1c3 0317 	rsb	r3, r3, #23
 800f5d2:	4118      	asrs	r0, r3
 800f5d4:	2900      	cmp	r1, #0
 800f5d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5da:	bfb8      	it	lt
 800f5dc:	4240      	neglt	r0, r0
 800f5de:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f5e2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800f6b0 <__ieee754_powf+0x57c>
 800f5e6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800f6b4 <__ieee754_powf+0x580>
 800f5ea:	ee17 3a10 	vmov	r3, s14
 800f5ee:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f5f2:	f023 030f 	bic.w	r3, r3, #15
 800f5f6:	ee07 3a10 	vmov	s14, r3
 800f5fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5fe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f602:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f606:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800f6b8 <__ieee754_powf+0x584>
 800f60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f60e:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f612:	eef0 6a67 	vmov.f32	s13, s15
 800f616:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f61a:	eef0 5a66 	vmov.f32	s11, s13
 800f61e:	eee7 5a46 	vfms.f32	s11, s14, s12
 800f622:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f626:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f62a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800f6bc <__ieee754_powf+0x588>
 800f62e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800f6c0 <__ieee754_powf+0x58c>
 800f632:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f636:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800f6c4 <__ieee754_powf+0x590>
 800f63a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f63e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800f6c8 <__ieee754_powf+0x594>
 800f642:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f646:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800f6cc <__ieee754_powf+0x598>
 800f64a:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f64e:	eeb0 6a66 	vmov.f32	s12, s13
 800f652:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800f656:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800f65a:	ee66 5a86 	vmul.f32	s11, s13, s12
 800f65e:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f662:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800f666:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800f66a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f66e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f672:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f676:	ee10 3a10 	vmov	r3, s0
 800f67a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f67e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f682:	da06      	bge.n	800f692 <__ieee754_powf+0x55e>
 800f684:	f000 f97c 	bl	800f980 <scalbnf>
 800f688:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f68c:	e56a      	b.n	800f164 <__ieee754_powf+0x30>
 800f68e:	2000      	movs	r0, #0
 800f690:	e7a5      	b.n	800f5de <__ieee754_powf+0x4aa>
 800f692:	ee00 3a10 	vmov	s0, r3
 800f696:	e7f7      	b.n	800f688 <__ieee754_powf+0x554>
 800f698:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f69c:	e562      	b.n	800f164 <__ieee754_powf+0x30>
 800f69e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800f6d0 <__ieee754_powf+0x59c>
 800f6a2:	e55f      	b.n	800f164 <__ieee754_powf+0x30>
 800f6a4:	eeb0 0a48 	vmov.f32	s0, s16
 800f6a8:	e55c      	b.n	800f164 <__ieee754_powf+0x30>
 800f6aa:	bf00      	nop
 800f6ac:	ff800000 	.word	0xff800000
 800f6b0:	3f317218 	.word	0x3f317218
 800f6b4:	3f317200 	.word	0x3f317200
 800f6b8:	35bfbe8c 	.word	0x35bfbe8c
 800f6bc:	b5ddea0e 	.word	0xb5ddea0e
 800f6c0:	3331bb4c 	.word	0x3331bb4c
 800f6c4:	388ab355 	.word	0x388ab355
 800f6c8:	bb360b61 	.word	0xbb360b61
 800f6cc:	3e2aaaab 	.word	0x3e2aaaab
 800f6d0:	00000000 	.word	0x00000000

0800f6d4 <__ieee754_rem_pio2f>:
 800f6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6d6:	ee10 6a10 	vmov	r6, s0
 800f6da:	4b88      	ldr	r3, [pc, #544]	@ (800f8fc <__ieee754_rem_pio2f+0x228>)
 800f6dc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f6e0:	429d      	cmp	r5, r3
 800f6e2:	b087      	sub	sp, #28
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	d805      	bhi.n	800f6f4 <__ieee754_rem_pio2f+0x20>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	ed80 0a00 	vstr	s0, [r0]
 800f6ee:	6043      	str	r3, [r0, #4]
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	e022      	b.n	800f73a <__ieee754_rem_pio2f+0x66>
 800f6f4:	4b82      	ldr	r3, [pc, #520]	@ (800f900 <__ieee754_rem_pio2f+0x22c>)
 800f6f6:	429d      	cmp	r5, r3
 800f6f8:	d83a      	bhi.n	800f770 <__ieee754_rem_pio2f+0x9c>
 800f6fa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f6fe:	2e00      	cmp	r6, #0
 800f700:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f904 <__ieee754_rem_pio2f+0x230>
 800f704:	4a80      	ldr	r2, [pc, #512]	@ (800f908 <__ieee754_rem_pio2f+0x234>)
 800f706:	f023 030f 	bic.w	r3, r3, #15
 800f70a:	dd18      	ble.n	800f73e <__ieee754_rem_pio2f+0x6a>
 800f70c:	4293      	cmp	r3, r2
 800f70e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f712:	bf09      	itett	eq
 800f714:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f90c <__ieee754_rem_pio2f+0x238>
 800f718:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f910 <__ieee754_rem_pio2f+0x23c>
 800f71c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f914 <__ieee754_rem_pio2f+0x240>
 800f720:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f724:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f72c:	ed80 7a00 	vstr	s14, [r0]
 800f730:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f734:	edc0 7a01 	vstr	s15, [r0, #4]
 800f738:	2001      	movs	r0, #1
 800f73a:	b007      	add	sp, #28
 800f73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f73e:	4293      	cmp	r3, r2
 800f740:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f744:	bf09      	itett	eq
 800f746:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f90c <__ieee754_rem_pio2f+0x238>
 800f74a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f910 <__ieee754_rem_pio2f+0x23c>
 800f74e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f914 <__ieee754_rem_pio2f+0x240>
 800f752:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f756:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f75a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f75e:	ed80 7a00 	vstr	s14, [r0]
 800f762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f766:	edc0 7a01 	vstr	s15, [r0, #4]
 800f76a:	f04f 30ff 	mov.w	r0, #4294967295
 800f76e:	e7e4      	b.n	800f73a <__ieee754_rem_pio2f+0x66>
 800f770:	4b69      	ldr	r3, [pc, #420]	@ (800f918 <__ieee754_rem_pio2f+0x244>)
 800f772:	429d      	cmp	r5, r3
 800f774:	d873      	bhi.n	800f85e <__ieee754_rem_pio2f+0x18a>
 800f776:	f7ff f9a3 	bl	800eac0 <fabsf>
 800f77a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f91c <__ieee754_rem_pio2f+0x248>
 800f77e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f782:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f78a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f78e:	ee17 0a90 	vmov	r0, s15
 800f792:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f904 <__ieee754_rem_pio2f+0x230>
 800f796:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f79a:	281f      	cmp	r0, #31
 800f79c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f910 <__ieee754_rem_pio2f+0x23c>
 800f7a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7a4:	eeb1 6a47 	vneg.f32	s12, s14
 800f7a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f7ac:	ee16 1a90 	vmov	r1, s13
 800f7b0:	dc09      	bgt.n	800f7c6 <__ieee754_rem_pio2f+0xf2>
 800f7b2:	4a5b      	ldr	r2, [pc, #364]	@ (800f920 <__ieee754_rem_pio2f+0x24c>)
 800f7b4:	1e47      	subs	r7, r0, #1
 800f7b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f7ba:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f7be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d107      	bne.n	800f7d6 <__ieee754_rem_pio2f+0x102>
 800f7c6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f7ca:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f7ce:	2a08      	cmp	r2, #8
 800f7d0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f7d4:	dc14      	bgt.n	800f800 <__ieee754_rem_pio2f+0x12c>
 800f7d6:	6021      	str	r1, [r4, #0]
 800f7d8:	ed94 7a00 	vldr	s14, [r4]
 800f7dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f7e0:	2e00      	cmp	r6, #0
 800f7e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7e6:	ed84 0a01 	vstr	s0, [r4, #4]
 800f7ea:	daa6      	bge.n	800f73a <__ieee754_rem_pio2f+0x66>
 800f7ec:	eeb1 7a47 	vneg.f32	s14, s14
 800f7f0:	eeb1 0a40 	vneg.f32	s0, s0
 800f7f4:	ed84 7a00 	vstr	s14, [r4]
 800f7f8:	ed84 0a01 	vstr	s0, [r4, #4]
 800f7fc:	4240      	negs	r0, r0
 800f7fe:	e79c      	b.n	800f73a <__ieee754_rem_pio2f+0x66>
 800f800:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f90c <__ieee754_rem_pio2f+0x238>
 800f804:	eef0 6a40 	vmov.f32	s13, s0
 800f808:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f80c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f810:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f814:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f914 <__ieee754_rem_pio2f+0x240>
 800f818:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f81c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f820:	ee15 2a90 	vmov	r2, s11
 800f824:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f828:	1a5b      	subs	r3, r3, r1
 800f82a:	2b19      	cmp	r3, #25
 800f82c:	dc04      	bgt.n	800f838 <__ieee754_rem_pio2f+0x164>
 800f82e:	edc4 5a00 	vstr	s11, [r4]
 800f832:	eeb0 0a66 	vmov.f32	s0, s13
 800f836:	e7cf      	b.n	800f7d8 <__ieee754_rem_pio2f+0x104>
 800f838:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f924 <__ieee754_rem_pio2f+0x250>
 800f83c:	eeb0 0a66 	vmov.f32	s0, s13
 800f840:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f844:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f848:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f928 <__ieee754_rem_pio2f+0x254>
 800f84c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f850:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f854:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f858:	ed84 7a00 	vstr	s14, [r4]
 800f85c:	e7bc      	b.n	800f7d8 <__ieee754_rem_pio2f+0x104>
 800f85e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f862:	d306      	bcc.n	800f872 <__ieee754_rem_pio2f+0x19e>
 800f864:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f868:	edc0 7a01 	vstr	s15, [r0, #4]
 800f86c:	edc0 7a00 	vstr	s15, [r0]
 800f870:	e73e      	b.n	800f6f0 <__ieee754_rem_pio2f+0x1c>
 800f872:	15ea      	asrs	r2, r5, #23
 800f874:	3a86      	subs	r2, #134	@ 0x86
 800f876:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f87a:	ee07 3a90 	vmov	s15, r3
 800f87e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f882:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f92c <__ieee754_rem_pio2f+0x258>
 800f886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f88a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f88e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f892:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f896:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f89a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f89e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8a2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f8a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f8aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b2:	edcd 7a05 	vstr	s15, [sp, #20]
 800f8b6:	d11e      	bne.n	800f8f6 <__ieee754_rem_pio2f+0x222>
 800f8b8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c0:	bf0c      	ite	eq
 800f8c2:	2301      	moveq	r3, #1
 800f8c4:	2302      	movne	r3, #2
 800f8c6:	491a      	ldr	r1, [pc, #104]	@ (800f930 <__ieee754_rem_pio2f+0x25c>)
 800f8c8:	9101      	str	r1, [sp, #4]
 800f8ca:	2102      	movs	r1, #2
 800f8cc:	9100      	str	r1, [sp, #0]
 800f8ce:	a803      	add	r0, sp, #12
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	f000 f8e1 	bl	800fa98 <__kernel_rem_pio2f>
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	f6bf af2f 	bge.w	800f73a <__ieee754_rem_pio2f+0x66>
 800f8dc:	edd4 7a00 	vldr	s15, [r4]
 800f8e0:	eef1 7a67 	vneg.f32	s15, s15
 800f8e4:	edc4 7a00 	vstr	s15, [r4]
 800f8e8:	edd4 7a01 	vldr	s15, [r4, #4]
 800f8ec:	eef1 7a67 	vneg.f32	s15, s15
 800f8f0:	edc4 7a01 	vstr	s15, [r4, #4]
 800f8f4:	e782      	b.n	800f7fc <__ieee754_rem_pio2f+0x128>
 800f8f6:	2303      	movs	r3, #3
 800f8f8:	e7e5      	b.n	800f8c6 <__ieee754_rem_pio2f+0x1f2>
 800f8fa:	bf00      	nop
 800f8fc:	3f490fd8 	.word	0x3f490fd8
 800f900:	4016cbe3 	.word	0x4016cbe3
 800f904:	3fc90f80 	.word	0x3fc90f80
 800f908:	3fc90fd0 	.word	0x3fc90fd0
 800f90c:	37354400 	.word	0x37354400
 800f910:	37354443 	.word	0x37354443
 800f914:	2e85a308 	.word	0x2e85a308
 800f918:	43490f80 	.word	0x43490f80
 800f91c:	3f22f984 	.word	0x3f22f984
 800f920:	08017250 	.word	0x08017250
 800f924:	2e85a300 	.word	0x2e85a300
 800f928:	248d3132 	.word	0x248d3132
 800f92c:	43800000 	.word	0x43800000
 800f930:	080172d0 	.word	0x080172d0

0800f934 <hypotf>:
 800f934:	b508      	push	{r3, lr}
 800f936:	ed2d 8b04 	vpush	{d8-d9}
 800f93a:	eeb0 9a40 	vmov.f32	s18, s0
 800f93e:	eef0 8a60 	vmov.f32	s17, s1
 800f942:	f000 fb1b 	bl	800ff7c <__ieee754_hypotf>
 800f946:	eeb0 8a40 	vmov.f32	s16, s0
 800f94a:	f7ff f907 	bl	800eb5c <finitef>
 800f94e:	b978      	cbnz	r0, 800f970 <hypotf+0x3c>
 800f950:	eeb0 0a49 	vmov.f32	s0, s18
 800f954:	f7ff f902 	bl	800eb5c <finitef>
 800f958:	b150      	cbz	r0, 800f970 <hypotf+0x3c>
 800f95a:	eeb0 0a68 	vmov.f32	s0, s17
 800f95e:	f7ff f8fd 	bl	800eb5c <finitef>
 800f962:	b128      	cbz	r0, 800f970 <hypotf+0x3c>
 800f964:	f001 f80c 	bl	8010980 <__errno>
 800f968:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800f97c <hypotf+0x48>
 800f96c:	2322      	movs	r3, #34	@ 0x22
 800f96e:	6003      	str	r3, [r0, #0]
 800f970:	eeb0 0a48 	vmov.f32	s0, s16
 800f974:	ecbd 8b04 	vpop	{d8-d9}
 800f978:	bd08      	pop	{r3, pc}
 800f97a:	bf00      	nop
 800f97c:	7f800000 	.word	0x7f800000

0800f980 <scalbnf>:
 800f980:	ee10 3a10 	vmov	r3, s0
 800f984:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f988:	d02b      	beq.n	800f9e2 <scalbnf+0x62>
 800f98a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f98e:	d302      	bcc.n	800f996 <scalbnf+0x16>
 800f990:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f994:	4770      	bx	lr
 800f996:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f99a:	d123      	bne.n	800f9e4 <scalbnf+0x64>
 800f99c:	4b24      	ldr	r3, [pc, #144]	@ (800fa30 <scalbnf+0xb0>)
 800f99e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fa34 <scalbnf+0xb4>
 800f9a2:	4298      	cmp	r0, r3
 800f9a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f9a8:	db17      	blt.n	800f9da <scalbnf+0x5a>
 800f9aa:	ee10 3a10 	vmov	r3, s0
 800f9ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f9b2:	3a19      	subs	r2, #25
 800f9b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f9b8:	4288      	cmp	r0, r1
 800f9ba:	dd15      	ble.n	800f9e8 <scalbnf+0x68>
 800f9bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fa38 <scalbnf+0xb8>
 800f9c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fa3c <scalbnf+0xbc>
 800f9c4:	ee10 3a10 	vmov	r3, s0
 800f9c8:	eeb0 7a67 	vmov.f32	s14, s15
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	bfb8      	it	lt
 800f9d0:	eef0 7a66 	vmovlt.f32	s15, s13
 800f9d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f9d8:	4770      	bx	lr
 800f9da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fa40 <scalbnf+0xc0>
 800f9de:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f9e2:	4770      	bx	lr
 800f9e4:	0dd2      	lsrs	r2, r2, #23
 800f9e6:	e7e5      	b.n	800f9b4 <scalbnf+0x34>
 800f9e8:	4410      	add	r0, r2
 800f9ea:	28fe      	cmp	r0, #254	@ 0xfe
 800f9ec:	dce6      	bgt.n	800f9bc <scalbnf+0x3c>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	dd06      	ble.n	800fa00 <scalbnf+0x80>
 800f9f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f9fa:	ee00 3a10 	vmov	s0, r3
 800f9fe:	4770      	bx	lr
 800fa00:	f110 0f16 	cmn.w	r0, #22
 800fa04:	da09      	bge.n	800fa1a <scalbnf+0x9a>
 800fa06:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fa40 <scalbnf+0xc0>
 800fa0a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fa44 <scalbnf+0xc4>
 800fa0e:	ee10 3a10 	vmov	r3, s0
 800fa12:	eeb0 7a67 	vmov.f32	s14, s15
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	e7d9      	b.n	800f9ce <scalbnf+0x4e>
 800fa1a:	3019      	adds	r0, #25
 800fa1c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fa20:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fa24:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fa48 <scalbnf+0xc8>
 800fa28:	ee07 3a90 	vmov	s15, r3
 800fa2c:	e7d7      	b.n	800f9de <scalbnf+0x5e>
 800fa2e:	bf00      	nop
 800fa30:	ffff3cb0 	.word	0xffff3cb0
 800fa34:	4c000000 	.word	0x4c000000
 800fa38:	7149f2ca 	.word	0x7149f2ca
 800fa3c:	f149f2ca 	.word	0xf149f2ca
 800fa40:	0da24260 	.word	0x0da24260
 800fa44:	8da24260 	.word	0x8da24260
 800fa48:	33000000 	.word	0x33000000

0800fa4c <with_errnof>:
 800fa4c:	b510      	push	{r4, lr}
 800fa4e:	ed2d 8b02 	vpush	{d8}
 800fa52:	eeb0 8a40 	vmov.f32	s16, s0
 800fa56:	4604      	mov	r4, r0
 800fa58:	f000 ff92 	bl	8010980 <__errno>
 800fa5c:	eeb0 0a48 	vmov.f32	s0, s16
 800fa60:	ecbd 8b02 	vpop	{d8}
 800fa64:	6004      	str	r4, [r0, #0]
 800fa66:	bd10      	pop	{r4, pc}

0800fa68 <xflowf>:
 800fa68:	b130      	cbz	r0, 800fa78 <xflowf+0x10>
 800fa6a:	eef1 7a40 	vneg.f32	s15, s0
 800fa6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fa72:	2022      	movs	r0, #34	@ 0x22
 800fa74:	f7ff bfea 	b.w	800fa4c <with_errnof>
 800fa78:	eef0 7a40 	vmov.f32	s15, s0
 800fa7c:	e7f7      	b.n	800fa6e <xflowf+0x6>
	...

0800fa80 <__math_uflowf>:
 800fa80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fa88 <__math_uflowf+0x8>
 800fa84:	f7ff bff0 	b.w	800fa68 <xflowf>
 800fa88:	10000000 	.word	0x10000000

0800fa8c <__math_oflowf>:
 800fa8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fa94 <__math_oflowf+0x8>
 800fa90:	f7ff bfea 	b.w	800fa68 <xflowf>
 800fa94:	70000000 	.word	0x70000000

0800fa98 <__kernel_rem_pio2f>:
 800fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa9c:	ed2d 8b04 	vpush	{d8-d9}
 800faa0:	b0d9      	sub	sp, #356	@ 0x164
 800faa2:	4690      	mov	r8, r2
 800faa4:	9001      	str	r0, [sp, #4]
 800faa6:	4ab9      	ldr	r2, [pc, #740]	@ (800fd8c <__kernel_rem_pio2f+0x2f4>)
 800faa8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800faaa:	f118 0f04 	cmn.w	r8, #4
 800faae:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800fab2:	460f      	mov	r7, r1
 800fab4:	f103 3bff 	add.w	fp, r3, #4294967295
 800fab8:	db27      	blt.n	800fb0a <__kernel_rem_pio2f+0x72>
 800faba:	f1b8 0203 	subs.w	r2, r8, #3
 800fabe:	bf48      	it	mi
 800fac0:	f108 0204 	addmi.w	r2, r8, #4
 800fac4:	10d2      	asrs	r2, r2, #3
 800fac6:	1c55      	adds	r5, r2, #1
 800fac8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800faca:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800fd9c <__kernel_rem_pio2f+0x304>
 800face:	00e8      	lsls	r0, r5, #3
 800fad0:	eba2 060b 	sub.w	r6, r2, fp
 800fad4:	9002      	str	r0, [sp, #8]
 800fad6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fada:	eb0a 0c0b 	add.w	ip, sl, fp
 800fade:	ac1c      	add	r4, sp, #112	@ 0x70
 800fae0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fae4:	2000      	movs	r0, #0
 800fae6:	4560      	cmp	r0, ip
 800fae8:	dd11      	ble.n	800fb0e <__kernel_rem_pio2f+0x76>
 800faea:	a91c      	add	r1, sp, #112	@ 0x70
 800faec:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800faf0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800faf4:	f04f 0c00 	mov.w	ip, #0
 800faf8:	45d4      	cmp	ip, sl
 800fafa:	dc27      	bgt.n	800fb4c <__kernel_rem_pio2f+0xb4>
 800fafc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fb00:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800fd9c <__kernel_rem_pio2f+0x304>
 800fb04:	4606      	mov	r6, r0
 800fb06:	2400      	movs	r4, #0
 800fb08:	e016      	b.n	800fb38 <__kernel_rem_pio2f+0xa0>
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	e7db      	b.n	800fac6 <__kernel_rem_pio2f+0x2e>
 800fb0e:	42c6      	cmn	r6, r0
 800fb10:	bf5d      	ittte	pl
 800fb12:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fb16:	ee07 1a90 	vmovpl	s15, r1
 800fb1a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fb1e:	eef0 7a47 	vmovmi.f32	s15, s14
 800fb22:	ece4 7a01 	vstmia	r4!, {s15}
 800fb26:	3001      	adds	r0, #1
 800fb28:	e7dd      	b.n	800fae6 <__kernel_rem_pio2f+0x4e>
 800fb2a:	ecfe 6a01 	vldmia	lr!, {s13}
 800fb2e:	ed96 7a00 	vldr	s14, [r6]
 800fb32:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fb36:	3401      	adds	r4, #1
 800fb38:	455c      	cmp	r4, fp
 800fb3a:	f1a6 0604 	sub.w	r6, r6, #4
 800fb3e:	ddf4      	ble.n	800fb2a <__kernel_rem_pio2f+0x92>
 800fb40:	ece9 7a01 	vstmia	r9!, {s15}
 800fb44:	f10c 0c01 	add.w	ip, ip, #1
 800fb48:	3004      	adds	r0, #4
 800fb4a:	e7d5      	b.n	800faf8 <__kernel_rem_pio2f+0x60>
 800fb4c:	a908      	add	r1, sp, #32
 800fb4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb52:	9104      	str	r1, [sp, #16]
 800fb54:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fb56:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800fd98 <__kernel_rem_pio2f+0x300>
 800fb5a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800fd94 <__kernel_rem_pio2f+0x2fc>
 800fb5e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fb62:	9203      	str	r2, [sp, #12]
 800fb64:	4654      	mov	r4, sl
 800fb66:	00a2      	lsls	r2, r4, #2
 800fb68:	9205      	str	r2, [sp, #20]
 800fb6a:	aa58      	add	r2, sp, #352	@ 0x160
 800fb6c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fb70:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fb74:	a944      	add	r1, sp, #272	@ 0x110
 800fb76:	aa08      	add	r2, sp, #32
 800fb78:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fb7c:	4694      	mov	ip, r2
 800fb7e:	4626      	mov	r6, r4
 800fb80:	2e00      	cmp	r6, #0
 800fb82:	f1a0 0004 	sub.w	r0, r0, #4
 800fb86:	dc4c      	bgt.n	800fc22 <__kernel_rem_pio2f+0x18a>
 800fb88:	4628      	mov	r0, r5
 800fb8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fb8e:	f7ff fef7 	bl	800f980 <scalbnf>
 800fb92:	eeb0 8a40 	vmov.f32	s16, s0
 800fb96:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800fb9a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fb9e:	f7ff f89b 	bl	800ecd8 <floorf>
 800fba2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800fba6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fbaa:	2d00      	cmp	r5, #0
 800fbac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fbb0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fbb4:	ee17 9a90 	vmov	r9, s15
 800fbb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbbc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fbc0:	dd41      	ble.n	800fc46 <__kernel_rem_pio2f+0x1ae>
 800fbc2:	f104 3cff 	add.w	ip, r4, #4294967295
 800fbc6:	a908      	add	r1, sp, #32
 800fbc8:	f1c5 0e08 	rsb	lr, r5, #8
 800fbcc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fbd0:	fa46 f00e 	asr.w	r0, r6, lr
 800fbd4:	4481      	add	r9, r0
 800fbd6:	fa00 f00e 	lsl.w	r0, r0, lr
 800fbda:	1a36      	subs	r6, r6, r0
 800fbdc:	f1c5 0007 	rsb	r0, r5, #7
 800fbe0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fbe4:	4106      	asrs	r6, r0
 800fbe6:	2e00      	cmp	r6, #0
 800fbe8:	dd3c      	ble.n	800fc64 <__kernel_rem_pio2f+0x1cc>
 800fbea:	f04f 0e00 	mov.w	lr, #0
 800fbee:	f109 0901 	add.w	r9, r9, #1
 800fbf2:	4670      	mov	r0, lr
 800fbf4:	4574      	cmp	r4, lr
 800fbf6:	dc68      	bgt.n	800fcca <__kernel_rem_pio2f+0x232>
 800fbf8:	2d00      	cmp	r5, #0
 800fbfa:	dd03      	ble.n	800fc04 <__kernel_rem_pio2f+0x16c>
 800fbfc:	2d01      	cmp	r5, #1
 800fbfe:	d074      	beq.n	800fcea <__kernel_rem_pio2f+0x252>
 800fc00:	2d02      	cmp	r5, #2
 800fc02:	d07d      	beq.n	800fd00 <__kernel_rem_pio2f+0x268>
 800fc04:	2e02      	cmp	r6, #2
 800fc06:	d12d      	bne.n	800fc64 <__kernel_rem_pio2f+0x1cc>
 800fc08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fc0c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fc10:	b340      	cbz	r0, 800fc64 <__kernel_rem_pio2f+0x1cc>
 800fc12:	4628      	mov	r0, r5
 800fc14:	9306      	str	r3, [sp, #24]
 800fc16:	f7ff feb3 	bl	800f980 <scalbnf>
 800fc1a:	9b06      	ldr	r3, [sp, #24]
 800fc1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fc20:	e020      	b.n	800fc64 <__kernel_rem_pio2f+0x1cc>
 800fc22:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fc26:	3e01      	subs	r6, #1
 800fc28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc30:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fc34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fc38:	ecac 0a01 	vstmia	ip!, {s0}
 800fc3c:	ed90 0a00 	vldr	s0, [r0]
 800fc40:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fc44:	e79c      	b.n	800fb80 <__kernel_rem_pio2f+0xe8>
 800fc46:	d105      	bne.n	800fc54 <__kernel_rem_pio2f+0x1bc>
 800fc48:	1e60      	subs	r0, r4, #1
 800fc4a:	a908      	add	r1, sp, #32
 800fc4c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fc50:	11f6      	asrs	r6, r6, #7
 800fc52:	e7c8      	b.n	800fbe6 <__kernel_rem_pio2f+0x14e>
 800fc54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fc58:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc60:	da31      	bge.n	800fcc6 <__kernel_rem_pio2f+0x22e>
 800fc62:	2600      	movs	r6, #0
 800fc64:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6c:	f040 8098 	bne.w	800fda0 <__kernel_rem_pio2f+0x308>
 800fc70:	1e60      	subs	r0, r4, #1
 800fc72:	2200      	movs	r2, #0
 800fc74:	4550      	cmp	r0, sl
 800fc76:	da4b      	bge.n	800fd10 <__kernel_rem_pio2f+0x278>
 800fc78:	2a00      	cmp	r2, #0
 800fc7a:	d065      	beq.n	800fd48 <__kernel_rem_pio2f+0x2b0>
 800fc7c:	3c01      	subs	r4, #1
 800fc7e:	ab08      	add	r3, sp, #32
 800fc80:	3d08      	subs	r5, #8
 800fc82:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d0f8      	beq.n	800fc7c <__kernel_rem_pio2f+0x1e4>
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fc90:	f7ff fe76 	bl	800f980 <scalbnf>
 800fc94:	1c63      	adds	r3, r4, #1
 800fc96:	aa44      	add	r2, sp, #272	@ 0x110
 800fc98:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fd98 <__kernel_rem_pio2f+0x300>
 800fc9c:	0099      	lsls	r1, r3, #2
 800fc9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fca2:	4623      	mov	r3, r4
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f280 80a9 	bge.w	800fdfc <__kernel_rem_pio2f+0x364>
 800fcaa:	4623      	mov	r3, r4
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f2c0 80c7 	blt.w	800fe40 <__kernel_rem_pio2f+0x3a8>
 800fcb2:	aa44      	add	r2, sp, #272	@ 0x110
 800fcb4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fcb8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fd90 <__kernel_rem_pio2f+0x2f8>
 800fcbc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fd9c <__kernel_rem_pio2f+0x304>
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	1ae2      	subs	r2, r4, r3
 800fcc4:	e0b1      	b.n	800fe2a <__kernel_rem_pio2f+0x392>
 800fcc6:	2602      	movs	r6, #2
 800fcc8:	e78f      	b.n	800fbea <__kernel_rem_pio2f+0x152>
 800fcca:	f852 1b04 	ldr.w	r1, [r2], #4
 800fcce:	b948      	cbnz	r0, 800fce4 <__kernel_rem_pio2f+0x24c>
 800fcd0:	b121      	cbz	r1, 800fcdc <__kernel_rem_pio2f+0x244>
 800fcd2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fcd6:	f842 1c04 	str.w	r1, [r2, #-4]
 800fcda:	2101      	movs	r1, #1
 800fcdc:	f10e 0e01 	add.w	lr, lr, #1
 800fce0:	4608      	mov	r0, r1
 800fce2:	e787      	b.n	800fbf4 <__kernel_rem_pio2f+0x15c>
 800fce4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fce8:	e7f5      	b.n	800fcd6 <__kernel_rem_pio2f+0x23e>
 800fcea:	f104 3cff 	add.w	ip, r4, #4294967295
 800fcee:	aa08      	add	r2, sp, #32
 800fcf0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fcf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fcf8:	a908      	add	r1, sp, #32
 800fcfa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fcfe:	e781      	b.n	800fc04 <__kernel_rem_pio2f+0x16c>
 800fd00:	f104 3cff 	add.w	ip, r4, #4294967295
 800fd04:	aa08      	add	r2, sp, #32
 800fd06:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fd0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fd0e:	e7f3      	b.n	800fcf8 <__kernel_rem_pio2f+0x260>
 800fd10:	a908      	add	r1, sp, #32
 800fd12:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fd16:	3801      	subs	r0, #1
 800fd18:	430a      	orrs	r2, r1
 800fd1a:	e7ab      	b.n	800fc74 <__kernel_rem_pio2f+0x1dc>
 800fd1c:	3201      	adds	r2, #1
 800fd1e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800fd22:	2e00      	cmp	r6, #0
 800fd24:	d0fa      	beq.n	800fd1c <__kernel_rem_pio2f+0x284>
 800fd26:	9905      	ldr	r1, [sp, #20]
 800fd28:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fd2c:	eb0d 0001 	add.w	r0, sp, r1
 800fd30:	18e6      	adds	r6, r4, r3
 800fd32:	a91c      	add	r1, sp, #112	@ 0x70
 800fd34:	f104 0c01 	add.w	ip, r4, #1
 800fd38:	384c      	subs	r0, #76	@ 0x4c
 800fd3a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fd3e:	4422      	add	r2, r4
 800fd40:	4562      	cmp	r2, ip
 800fd42:	da04      	bge.n	800fd4e <__kernel_rem_pio2f+0x2b6>
 800fd44:	4614      	mov	r4, r2
 800fd46:	e70e      	b.n	800fb66 <__kernel_rem_pio2f+0xce>
 800fd48:	9804      	ldr	r0, [sp, #16]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	e7e7      	b.n	800fd1e <__kernel_rem_pio2f+0x286>
 800fd4e:	9903      	ldr	r1, [sp, #12]
 800fd50:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fd54:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800fd58:	9105      	str	r1, [sp, #20]
 800fd5a:	ee07 1a90 	vmov	s15, r1
 800fd5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd62:	2400      	movs	r4, #0
 800fd64:	ece6 7a01 	vstmia	r6!, {s15}
 800fd68:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fd9c <__kernel_rem_pio2f+0x304>
 800fd6c:	46b1      	mov	r9, r6
 800fd6e:	455c      	cmp	r4, fp
 800fd70:	dd04      	ble.n	800fd7c <__kernel_rem_pio2f+0x2e4>
 800fd72:	ece0 7a01 	vstmia	r0!, {s15}
 800fd76:	f10c 0c01 	add.w	ip, ip, #1
 800fd7a:	e7e1      	b.n	800fd40 <__kernel_rem_pio2f+0x2a8>
 800fd7c:	ecfe 6a01 	vldmia	lr!, {s13}
 800fd80:	ed39 7a01 	vldmdb	r9!, {s14}
 800fd84:	3401      	adds	r4, #1
 800fd86:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd8a:	e7f0      	b.n	800fd6e <__kernel_rem_pio2f+0x2d6>
 800fd8c:	08017614 	.word	0x08017614
 800fd90:	080175e8 	.word	0x080175e8
 800fd94:	43800000 	.word	0x43800000
 800fd98:	3b800000 	.word	0x3b800000
 800fd9c:	00000000 	.word	0x00000000
 800fda0:	9b02      	ldr	r3, [sp, #8]
 800fda2:	eeb0 0a48 	vmov.f32	s0, s16
 800fda6:	eba3 0008 	sub.w	r0, r3, r8
 800fdaa:	f7ff fde9 	bl	800f980 <scalbnf>
 800fdae:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fd94 <__kernel_rem_pio2f+0x2fc>
 800fdb2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdba:	db19      	blt.n	800fdf0 <__kernel_rem_pio2f+0x358>
 800fdbc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fd98 <__kernel_rem_pio2f+0x300>
 800fdc0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fdc4:	aa08      	add	r2, sp, #32
 800fdc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdca:	3508      	adds	r5, #8
 800fdcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdd0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fdd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fdd8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fddc:	ee10 3a10 	vmov	r3, s0
 800fde0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fde4:	ee17 3a90 	vmov	r3, s15
 800fde8:	3401      	adds	r4, #1
 800fdea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fdee:	e74c      	b.n	800fc8a <__kernel_rem_pio2f+0x1f2>
 800fdf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fdf4:	aa08      	add	r2, sp, #32
 800fdf6:	ee10 3a10 	vmov	r3, s0
 800fdfa:	e7f6      	b.n	800fdea <__kernel_rem_pio2f+0x352>
 800fdfc:	a808      	add	r0, sp, #32
 800fdfe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fe02:	9001      	str	r0, [sp, #4]
 800fe04:	ee07 0a90 	vmov	s15, r0
 800fe08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fe12:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fe16:	ed62 7a01 	vstmdb	r2!, {s15}
 800fe1a:	e743      	b.n	800fca4 <__kernel_rem_pio2f+0x20c>
 800fe1c:	ecfc 6a01 	vldmia	ip!, {s13}
 800fe20:	ecb5 7a01 	vldmia	r5!, {s14}
 800fe24:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fe28:	3001      	adds	r0, #1
 800fe2a:	4550      	cmp	r0, sl
 800fe2c:	dc01      	bgt.n	800fe32 <__kernel_rem_pio2f+0x39a>
 800fe2e:	4282      	cmp	r2, r0
 800fe30:	daf4      	bge.n	800fe1c <__kernel_rem_pio2f+0x384>
 800fe32:	a858      	add	r0, sp, #352	@ 0x160
 800fe34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fe38:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	e735      	b.n	800fcac <__kernel_rem_pio2f+0x214>
 800fe40:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	dc09      	bgt.n	800fe5a <__kernel_rem_pio2f+0x3c2>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	dc2b      	bgt.n	800fea2 <__kernel_rem_pio2f+0x40a>
 800fe4a:	d044      	beq.n	800fed6 <__kernel_rem_pio2f+0x43e>
 800fe4c:	f009 0007 	and.w	r0, r9, #7
 800fe50:	b059      	add	sp, #356	@ 0x164
 800fe52:	ecbd 8b04 	vpop	{d8-d9}
 800fe56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe5a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fe5c:	2b03      	cmp	r3, #3
 800fe5e:	d1f5      	bne.n	800fe4c <__kernel_rem_pio2f+0x3b4>
 800fe60:	aa30      	add	r2, sp, #192	@ 0xc0
 800fe62:	1f0b      	subs	r3, r1, #4
 800fe64:	4413      	add	r3, r2
 800fe66:	461a      	mov	r2, r3
 800fe68:	4620      	mov	r0, r4
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	f1a2 0204 	sub.w	r2, r2, #4
 800fe70:	dc52      	bgt.n	800ff18 <__kernel_rem_pio2f+0x480>
 800fe72:	4622      	mov	r2, r4
 800fe74:	2a01      	cmp	r2, #1
 800fe76:	f1a3 0304 	sub.w	r3, r3, #4
 800fe7a:	dc5d      	bgt.n	800ff38 <__kernel_rem_pio2f+0x4a0>
 800fe7c:	ab30      	add	r3, sp, #192	@ 0xc0
 800fe7e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800fd9c <__kernel_rem_pio2f+0x304>
 800fe82:	440b      	add	r3, r1
 800fe84:	2c01      	cmp	r4, #1
 800fe86:	dc67      	bgt.n	800ff58 <__kernel_rem_pio2f+0x4c0>
 800fe88:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800fe8c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800fe90:	2e00      	cmp	r6, #0
 800fe92:	d167      	bne.n	800ff64 <__kernel_rem_pio2f+0x4cc>
 800fe94:	edc7 6a00 	vstr	s13, [r7]
 800fe98:	ed87 7a01 	vstr	s14, [r7, #4]
 800fe9c:	edc7 7a02 	vstr	s15, [r7, #8]
 800fea0:	e7d4      	b.n	800fe4c <__kernel_rem_pio2f+0x3b4>
 800fea2:	ab30      	add	r3, sp, #192	@ 0xc0
 800fea4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800fd9c <__kernel_rem_pio2f+0x304>
 800fea8:	440b      	add	r3, r1
 800feaa:	4622      	mov	r2, r4
 800feac:	2a00      	cmp	r2, #0
 800feae:	da24      	bge.n	800fefa <__kernel_rem_pio2f+0x462>
 800feb0:	b34e      	cbz	r6, 800ff06 <__kernel_rem_pio2f+0x46e>
 800feb2:	eef1 7a47 	vneg.f32	s15, s14
 800feb6:	edc7 7a00 	vstr	s15, [r7]
 800feba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800febe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fec2:	aa31      	add	r2, sp, #196	@ 0xc4
 800fec4:	2301      	movs	r3, #1
 800fec6:	429c      	cmp	r4, r3
 800fec8:	da20      	bge.n	800ff0c <__kernel_rem_pio2f+0x474>
 800feca:	b10e      	cbz	r6, 800fed0 <__kernel_rem_pio2f+0x438>
 800fecc:	eef1 7a67 	vneg.f32	s15, s15
 800fed0:	edc7 7a01 	vstr	s15, [r7, #4]
 800fed4:	e7ba      	b.n	800fe4c <__kernel_rem_pio2f+0x3b4>
 800fed6:	ab30      	add	r3, sp, #192	@ 0xc0
 800fed8:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800fd9c <__kernel_rem_pio2f+0x304>
 800fedc:	440b      	add	r3, r1
 800fede:	2c00      	cmp	r4, #0
 800fee0:	da05      	bge.n	800feee <__kernel_rem_pio2f+0x456>
 800fee2:	b10e      	cbz	r6, 800fee8 <__kernel_rem_pio2f+0x450>
 800fee4:	eef1 7a67 	vneg.f32	s15, s15
 800fee8:	edc7 7a00 	vstr	s15, [r7]
 800feec:	e7ae      	b.n	800fe4c <__kernel_rem_pio2f+0x3b4>
 800feee:	ed33 7a01 	vldmdb	r3!, {s14}
 800fef2:	3c01      	subs	r4, #1
 800fef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fef8:	e7f1      	b.n	800fede <__kernel_rem_pio2f+0x446>
 800fefa:	ed73 7a01 	vldmdb	r3!, {s15}
 800fefe:	3a01      	subs	r2, #1
 800ff00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff04:	e7d2      	b.n	800feac <__kernel_rem_pio2f+0x414>
 800ff06:	eef0 7a47 	vmov.f32	s15, s14
 800ff0a:	e7d4      	b.n	800feb6 <__kernel_rem_pio2f+0x41e>
 800ff0c:	ecb2 7a01 	vldmia	r2!, {s14}
 800ff10:	3301      	adds	r3, #1
 800ff12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff16:	e7d6      	b.n	800fec6 <__kernel_rem_pio2f+0x42e>
 800ff18:	edd2 7a00 	vldr	s15, [r2]
 800ff1c:	edd2 6a01 	vldr	s13, [r2, #4]
 800ff20:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ff24:	3801      	subs	r0, #1
 800ff26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff2a:	ed82 7a00 	vstr	s14, [r2]
 800ff2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff32:	edc2 7a01 	vstr	s15, [r2, #4]
 800ff36:	e798      	b.n	800fe6a <__kernel_rem_pio2f+0x3d2>
 800ff38:	edd3 7a00 	vldr	s15, [r3]
 800ff3c:	edd3 6a01 	vldr	s13, [r3, #4]
 800ff40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ff44:	3a01      	subs	r2, #1
 800ff46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff4a:	ed83 7a00 	vstr	s14, [r3]
 800ff4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff52:	edc3 7a01 	vstr	s15, [r3, #4]
 800ff56:	e78d      	b.n	800fe74 <__kernel_rem_pio2f+0x3dc>
 800ff58:	ed33 7a01 	vldmdb	r3!, {s14}
 800ff5c:	3c01      	subs	r4, #1
 800ff5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff62:	e78f      	b.n	800fe84 <__kernel_rem_pio2f+0x3ec>
 800ff64:	eef1 6a66 	vneg.f32	s13, s13
 800ff68:	eeb1 7a47 	vneg.f32	s14, s14
 800ff6c:	edc7 6a00 	vstr	s13, [r7]
 800ff70:	ed87 7a01 	vstr	s14, [r7, #4]
 800ff74:	eef1 7a67 	vneg.f32	s15, s15
 800ff78:	e790      	b.n	800fe9c <__kernel_rem_pio2f+0x404>
 800ff7a:	bf00      	nop

0800ff7c <__ieee754_hypotf>:
 800ff7c:	ee10 3a10 	vmov	r3, s0
 800ff80:	ee10 2a90 	vmov	r2, s1
 800ff84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff88:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	bfbe      	ittt	lt
 800ff90:	4619      	movlt	r1, r3
 800ff92:	4613      	movlt	r3, r2
 800ff94:	460a      	movlt	r2, r1
 800ff96:	1a99      	subs	r1, r3, r2
 800ff98:	f1b1 6f70 	cmp.w	r1, #251658240	@ 0xf000000
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	ee00 3a10 	vmov	s0, r3
 800ffa2:	ee06 2a90 	vmov	s13, r2
 800ffa6:	dd02      	ble.n	800ffae <__ieee754_hypotf+0x32>
 800ffa8:	ee30 0a26 	vadd.f32	s0, s0, s13
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	f1b3 4fb1 	cmp.w	r3, #1484783616	@ 0x58800000
 800ffb2:	dd48      	ble.n	8010046 <__ieee754_hypotf+0xca>
 800ffb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ffb8:	db0c      	blt.n	800ffd4 <__ieee754_hypotf+0x58>
 800ffba:	bf14      	ite	ne
 800ffbc:	ee30 0a26 	vaddne.f32	s0, s0, s13
 800ffc0:	ed9f 0a33 	vldreq	s0, [pc, #204]	@ 8010090 <__ieee754_hypotf+0x114>
 800ffc4:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8010090 <__ieee754_hypotf+0x114>
 800ffc8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ffcc:	bf08      	it	eq
 800ffce:	eeb0 0a67 	vmoveq.f32	s0, s15
 800ffd2:	e7eb      	b.n	800ffac <__ieee754_hypotf+0x30>
 800ffd4:	f103 435e 	add.w	r3, r3, #3724541952	@ 0xde000000
 800ffd8:	f102 425e 	add.w	r2, r2, #3724541952	@ 0xde000000
 800ffdc:	ee00 3a10 	vmov	s0, r3
 800ffe0:	ee06 2a90 	vmov	s13, r2
 800ffe4:	2444      	movs	r4, #68	@ 0x44
 800ffe6:	f1b2 5f1a 	cmp.w	r2, #645922816	@ 0x26800000
 800ffea:	da0b      	bge.n	8010004 <__ieee754_hypotf+0x88>
 800ffec:	2a00      	cmp	r2, #0
 800ffee:	d0dd      	beq.n	800ffac <__ieee754_hypotf+0x30>
 800fff0:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800fff4:	da29      	bge.n	801004a <__ieee754_hypotf+0xce>
 800fff6:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8010094 <__ieee754_hypotf+0x118>
 800fffa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fffe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010002:	3c7e      	subs	r4, #126	@ 0x7e
 8010004:	ee30 6a66 	vsub.f32	s12, s0, s13
 8010008:	4923      	ldr	r1, [pc, #140]	@ (8010098 <__ieee754_hypotf+0x11c>)
 801000a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801000e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010012:	d524      	bpl.n	801005e <__ieee754_hypotf+0xe2>
 8010014:	400b      	ands	r3, r1
 8010016:	ee07 3a90 	vmov	s15, r3
 801001a:	ee30 7a27 	vadd.f32	s14, s0, s15
 801001e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010022:	ee27 0a00 	vmul.f32	s0, s14, s0
 8010026:	eea6 0aa6 	vfma.f32	s0, s13, s13
 801002a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801002e:	f7fe fe4f 	bl	800ecd0 <__ieee754_sqrtf>
 8010032:	2c00      	cmp	r4, #0
 8010034:	d0ba      	beq.n	800ffac <__ieee754_hypotf+0x30>
 8010036:	05e4      	lsls	r4, r4, #23
 8010038:	f104 547e 	add.w	r4, r4, #1065353216	@ 0x3f800000
 801003c:	ee07 4a90 	vmov	s15, r4
 8010040:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010044:	e7b2      	b.n	800ffac <__ieee754_hypotf+0x30>
 8010046:	2400      	movs	r4, #0
 8010048:	e7cd      	b.n	800ffe6 <__ieee754_hypotf+0x6a>
 801004a:	f103 5308 	add.w	r3, r3, #570425344	@ 0x22000000
 801004e:	f102 5208 	add.w	r2, r2, #570425344	@ 0x22000000
 8010052:	ee00 3a10 	vmov	s0, r3
 8010056:	ee06 2a90 	vmov	s13, r2
 801005a:	3c44      	subs	r4, #68	@ 0x44
 801005c:	e7d2      	b.n	8010004 <__ieee754_hypotf+0x88>
 801005e:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8010062:	400b      	ands	r3, r1
 8010064:	ee07 3a90 	vmov	s15, r3
 8010068:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 801006c:	eeb0 5a67 	vmov.f32	s10, s15
 8010070:	ee90 5a24 	vfnms.f32	s10, s0, s9
 8010074:	400a      	ands	r2, r1
 8010076:	ee07 2a10 	vmov	s14, r2
 801007a:	ee26 0a85 	vmul.f32	s0, s13, s10
 801007e:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8010082:	eea5 0aa7 	vfma.f32	s0, s11, s15
 8010086:	eea6 0a06 	vfma.f32	s0, s12, s12
 801008a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801008e:	e7ce      	b.n	801002e <__ieee754_hypotf+0xb2>
 8010090:	7f800000 	.word	0x7f800000
 8010094:	7e800000 	.word	0x7e800000
 8010098:	fffff000 	.word	0xfffff000

0801009c <__ieee754_logf>:
 801009c:	ee10 3a10 	vmov	r3, s0
 80100a0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80100a4:	d106      	bne.n	80100b4 <__ieee754_logf+0x18>
 80100a6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8010240 <__ieee754_logf+0x1a4>
 80100aa:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8010244 <__ieee754_logf+0x1a8>
 80100ae:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80100b2:	4770      	bx	lr
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	461a      	mov	r2, r3
 80100b8:	da02      	bge.n	80100c0 <__ieee754_logf+0x24>
 80100ba:	ee30 7a40 	vsub.f32	s14, s0, s0
 80100be:	e7f4      	b.n	80100aa <__ieee754_logf+0xe>
 80100c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80100c4:	db02      	blt.n	80100cc <__ieee754_logf+0x30>
 80100c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80100ca:	4770      	bx	lr
 80100cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80100d0:	bfb8      	it	lt
 80100d2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8010248 <__ieee754_logf+0x1ac>
 80100d6:	485d      	ldr	r0, [pc, #372]	@ (801024c <__ieee754_logf+0x1b0>)
 80100d8:	bfbe      	ittt	lt
 80100da:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80100de:	f06f 0118 	mvnlt.w	r1, #24
 80100e2:	ee17 2a90 	vmovlt	r2, s15
 80100e6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80100ea:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80100ee:	4410      	add	r0, r2
 80100f0:	bfa8      	it	ge
 80100f2:	2100      	movge	r1, #0
 80100f4:	3b7f      	subs	r3, #127	@ 0x7f
 80100f6:	440b      	add	r3, r1
 80100f8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80100fc:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8010100:	4311      	orrs	r1, r2
 8010102:	ee00 1a10 	vmov	s0, r1
 8010106:	4952      	ldr	r1, [pc, #328]	@ (8010250 <__ieee754_logf+0x1b4>)
 8010108:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801010c:	f102 000f 	add.w	r0, r2, #15
 8010110:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010114:	4001      	ands	r1, r0
 8010116:	ee30 0a67 	vsub.f32	s0, s0, s15
 801011a:	bb89      	cbnz	r1, 8010180 <__ieee754_logf+0xe4>
 801011c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010124:	d10f      	bne.n	8010146 <__ieee754_logf+0xaa>
 8010126:	2b00      	cmp	r3, #0
 8010128:	f000 8087 	beq.w	801023a <__ieee754_logf+0x19e>
 801012c:	ee07 3a90 	vmov	s15, r3
 8010130:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8010254 <__ieee754_logf+0x1b8>
 8010134:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8010258 <__ieee754_logf+0x1bc>
 8010138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801013c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010140:	eea7 0a87 	vfma.f32	s0, s15, s14
 8010144:	4770      	bx	lr
 8010146:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801025c <__ieee754_logf+0x1c0>
 801014a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801014e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8010152:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010156:	ee27 7a27 	vmul.f32	s14, s14, s15
 801015a:	b913      	cbnz	r3, 8010162 <__ieee754_logf+0xc6>
 801015c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010160:	4770      	bx	lr
 8010162:	ee07 3a90 	vmov	s15, r3
 8010166:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010254 <__ieee754_logf+0x1b8>
 801016a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801016e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8010172:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010176:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010258 <__ieee754_logf+0x1bc>
 801017a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801017e:	4770      	bx	lr
 8010180:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010184:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010188:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010260 <__ieee754_logf+0x1c4>
 801018c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8010264 <__ieee754_logf+0x1c8>
 8010190:	4935      	ldr	r1, [pc, #212]	@ (8010268 <__ieee754_logf+0x1cc>)
 8010192:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8010196:	4411      	add	r1, r2
 8010198:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801019c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80101a0:	430a      	orrs	r2, r1
 80101a2:	2a00      	cmp	r2, #0
 80101a4:	ee07 3a90 	vmov	s15, r3
 80101a8:	ee26 5a06 	vmul.f32	s10, s12, s12
 80101ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80101b0:	ee25 7a05 	vmul.f32	s14, s10, s10
 80101b4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801026c <__ieee754_logf+0x1d0>
 80101b8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80101bc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8010270 <__ieee754_logf+0x1d4>
 80101c0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80101c4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8010274 <__ieee754_logf+0x1d8>
 80101c8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80101cc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8010278 <__ieee754_logf+0x1dc>
 80101d0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80101d4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801027c <__ieee754_logf+0x1e0>
 80101d8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80101dc:	ee67 7a85 	vmul.f32	s15, s15, s10
 80101e0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80101e4:	dd1a      	ble.n	801021c <__ieee754_logf+0x180>
 80101e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80101ea:	ee20 7a07 	vmul.f32	s14, s0, s14
 80101ee:	ee27 7a00 	vmul.f32	s14, s14, s0
 80101f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80101fa:	b913      	cbnz	r3, 8010202 <__ieee754_logf+0x166>
 80101fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010200:	e7ac      	b.n	801015c <__ieee754_logf+0xc0>
 8010202:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8010254 <__ieee754_logf+0x1b8>
 8010206:	eee6 7a86 	vfma.f32	s15, s13, s12
 801020a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801020e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010212:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8010258 <__ieee754_logf+0x1bc>
 8010216:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801021a:	4770      	bx	lr
 801021c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010220:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010224:	b913      	cbnz	r3, 801022c <__ieee754_logf+0x190>
 8010226:	ee30 0a67 	vsub.f32	s0, s0, s15
 801022a:	4770      	bx	lr
 801022c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8010254 <__ieee754_logf+0x1b8>
 8010230:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010234:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010238:	e7eb      	b.n	8010212 <__ieee754_logf+0x176>
 801023a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8010244 <__ieee754_logf+0x1a8>
 801023e:	4770      	bx	lr
 8010240:	cc000000 	.word	0xcc000000
 8010244:	00000000 	.word	0x00000000
 8010248:	4c000000 	.word	0x4c000000
 801024c:	004afb20 	.word	0x004afb20
 8010250:	007ffff0 	.word	0x007ffff0
 8010254:	3717f7d1 	.word	0x3717f7d1
 8010258:	3f317180 	.word	0x3f317180
 801025c:	3eaaaaab 	.word	0x3eaaaaab
 8010260:	3e1cd04f 	.word	0x3e1cd04f
 8010264:	3e178897 	.word	0x3e178897
 8010268:	ffcf5c30 	.word	0xffcf5c30
 801026c:	3e638e29 	.word	0x3e638e29
 8010270:	3ecccccd 	.word	0x3ecccccd
 8010274:	3e3a3325 	.word	0x3e3a3325
 8010278:	3e924925 	.word	0x3e924925
 801027c:	3f2aaaab 	.word	0x3f2aaaab

08010280 <malloc>:
 8010280:	4b02      	ldr	r3, [pc, #8]	@ (801028c <malloc+0xc>)
 8010282:	4601      	mov	r1, r0
 8010284:	6818      	ldr	r0, [r3, #0]
 8010286:	f000 b82d 	b.w	80102e4 <_malloc_r>
 801028a:	bf00      	nop
 801028c:	200001bc 	.word	0x200001bc

08010290 <free>:
 8010290:	4b02      	ldr	r3, [pc, #8]	@ (801029c <free+0xc>)
 8010292:	4601      	mov	r1, r0
 8010294:	6818      	ldr	r0, [r3, #0]
 8010296:	f000 bbaf 	b.w	80109f8 <_free_r>
 801029a:	bf00      	nop
 801029c:	200001bc 	.word	0x200001bc

080102a0 <sbrk_aligned>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	4e0f      	ldr	r6, [pc, #60]	@ (80102e0 <sbrk_aligned+0x40>)
 80102a4:	460c      	mov	r4, r1
 80102a6:	6831      	ldr	r1, [r6, #0]
 80102a8:	4605      	mov	r5, r0
 80102aa:	b911      	cbnz	r1, 80102b2 <sbrk_aligned+0x12>
 80102ac:	f000 fb46 	bl	801093c <_sbrk_r>
 80102b0:	6030      	str	r0, [r6, #0]
 80102b2:	4621      	mov	r1, r4
 80102b4:	4628      	mov	r0, r5
 80102b6:	f000 fb41 	bl	801093c <_sbrk_r>
 80102ba:	1c43      	adds	r3, r0, #1
 80102bc:	d103      	bne.n	80102c6 <sbrk_aligned+0x26>
 80102be:	f04f 34ff 	mov.w	r4, #4294967295
 80102c2:	4620      	mov	r0, r4
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
 80102c6:	1cc4      	adds	r4, r0, #3
 80102c8:	f024 0403 	bic.w	r4, r4, #3
 80102cc:	42a0      	cmp	r0, r4
 80102ce:	d0f8      	beq.n	80102c2 <sbrk_aligned+0x22>
 80102d0:	1a21      	subs	r1, r4, r0
 80102d2:	4628      	mov	r0, r5
 80102d4:	f000 fb32 	bl	801093c <_sbrk_r>
 80102d8:	3001      	adds	r0, #1
 80102da:	d1f2      	bne.n	80102c2 <sbrk_aligned+0x22>
 80102dc:	e7ef      	b.n	80102be <sbrk_aligned+0x1e>
 80102de:	bf00      	nop
 80102e0:	200002a4 	.word	0x200002a4

080102e4 <_malloc_r>:
 80102e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e8:	1ccd      	adds	r5, r1, #3
 80102ea:	f025 0503 	bic.w	r5, r5, #3
 80102ee:	3508      	adds	r5, #8
 80102f0:	2d0c      	cmp	r5, #12
 80102f2:	bf38      	it	cc
 80102f4:	250c      	movcc	r5, #12
 80102f6:	2d00      	cmp	r5, #0
 80102f8:	4606      	mov	r6, r0
 80102fa:	db01      	blt.n	8010300 <_malloc_r+0x1c>
 80102fc:	42a9      	cmp	r1, r5
 80102fe:	d904      	bls.n	801030a <_malloc_r+0x26>
 8010300:	230c      	movs	r3, #12
 8010302:	6033      	str	r3, [r6, #0]
 8010304:	2000      	movs	r0, #0
 8010306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801030a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80103e0 <_malloc_r+0xfc>
 801030e:	f000 f869 	bl	80103e4 <__malloc_lock>
 8010312:	f8d8 3000 	ldr.w	r3, [r8]
 8010316:	461c      	mov	r4, r3
 8010318:	bb44      	cbnz	r4, 801036c <_malloc_r+0x88>
 801031a:	4629      	mov	r1, r5
 801031c:	4630      	mov	r0, r6
 801031e:	f7ff ffbf 	bl	80102a0 <sbrk_aligned>
 8010322:	1c43      	adds	r3, r0, #1
 8010324:	4604      	mov	r4, r0
 8010326:	d158      	bne.n	80103da <_malloc_r+0xf6>
 8010328:	f8d8 4000 	ldr.w	r4, [r8]
 801032c:	4627      	mov	r7, r4
 801032e:	2f00      	cmp	r7, #0
 8010330:	d143      	bne.n	80103ba <_malloc_r+0xd6>
 8010332:	2c00      	cmp	r4, #0
 8010334:	d04b      	beq.n	80103ce <_malloc_r+0xea>
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	4639      	mov	r1, r7
 801033a:	4630      	mov	r0, r6
 801033c:	eb04 0903 	add.w	r9, r4, r3
 8010340:	f000 fafc 	bl	801093c <_sbrk_r>
 8010344:	4581      	cmp	r9, r0
 8010346:	d142      	bne.n	80103ce <_malloc_r+0xea>
 8010348:	6821      	ldr	r1, [r4, #0]
 801034a:	1a6d      	subs	r5, r5, r1
 801034c:	4629      	mov	r1, r5
 801034e:	4630      	mov	r0, r6
 8010350:	f7ff ffa6 	bl	80102a0 <sbrk_aligned>
 8010354:	3001      	adds	r0, #1
 8010356:	d03a      	beq.n	80103ce <_malloc_r+0xea>
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	442b      	add	r3, r5
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	f8d8 3000 	ldr.w	r3, [r8]
 8010362:	685a      	ldr	r2, [r3, #4]
 8010364:	bb62      	cbnz	r2, 80103c0 <_malloc_r+0xdc>
 8010366:	f8c8 7000 	str.w	r7, [r8]
 801036a:	e00f      	b.n	801038c <_malloc_r+0xa8>
 801036c:	6822      	ldr	r2, [r4, #0]
 801036e:	1b52      	subs	r2, r2, r5
 8010370:	d420      	bmi.n	80103b4 <_malloc_r+0xd0>
 8010372:	2a0b      	cmp	r2, #11
 8010374:	d917      	bls.n	80103a6 <_malloc_r+0xc2>
 8010376:	1961      	adds	r1, r4, r5
 8010378:	42a3      	cmp	r3, r4
 801037a:	6025      	str	r5, [r4, #0]
 801037c:	bf18      	it	ne
 801037e:	6059      	strne	r1, [r3, #4]
 8010380:	6863      	ldr	r3, [r4, #4]
 8010382:	bf08      	it	eq
 8010384:	f8c8 1000 	streq.w	r1, [r8]
 8010388:	5162      	str	r2, [r4, r5]
 801038a:	604b      	str	r3, [r1, #4]
 801038c:	4630      	mov	r0, r6
 801038e:	f000 f82f 	bl	80103f0 <__malloc_unlock>
 8010392:	f104 000b 	add.w	r0, r4, #11
 8010396:	1d23      	adds	r3, r4, #4
 8010398:	f020 0007 	bic.w	r0, r0, #7
 801039c:	1ac2      	subs	r2, r0, r3
 801039e:	bf1c      	itt	ne
 80103a0:	1a1b      	subne	r3, r3, r0
 80103a2:	50a3      	strne	r3, [r4, r2]
 80103a4:	e7af      	b.n	8010306 <_malloc_r+0x22>
 80103a6:	6862      	ldr	r2, [r4, #4]
 80103a8:	42a3      	cmp	r3, r4
 80103aa:	bf0c      	ite	eq
 80103ac:	f8c8 2000 	streq.w	r2, [r8]
 80103b0:	605a      	strne	r2, [r3, #4]
 80103b2:	e7eb      	b.n	801038c <_malloc_r+0xa8>
 80103b4:	4623      	mov	r3, r4
 80103b6:	6864      	ldr	r4, [r4, #4]
 80103b8:	e7ae      	b.n	8010318 <_malloc_r+0x34>
 80103ba:	463c      	mov	r4, r7
 80103bc:	687f      	ldr	r7, [r7, #4]
 80103be:	e7b6      	b.n	801032e <_malloc_r+0x4a>
 80103c0:	461a      	mov	r2, r3
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	42a3      	cmp	r3, r4
 80103c6:	d1fb      	bne.n	80103c0 <_malloc_r+0xdc>
 80103c8:	2300      	movs	r3, #0
 80103ca:	6053      	str	r3, [r2, #4]
 80103cc:	e7de      	b.n	801038c <_malloc_r+0xa8>
 80103ce:	230c      	movs	r3, #12
 80103d0:	6033      	str	r3, [r6, #0]
 80103d2:	4630      	mov	r0, r6
 80103d4:	f000 f80c 	bl	80103f0 <__malloc_unlock>
 80103d8:	e794      	b.n	8010304 <_malloc_r+0x20>
 80103da:	6005      	str	r5, [r0, #0]
 80103dc:	e7d6      	b.n	801038c <_malloc_r+0xa8>
 80103de:	bf00      	nop
 80103e0:	200002a8 	.word	0x200002a8

080103e4 <__malloc_lock>:
 80103e4:	4801      	ldr	r0, [pc, #4]	@ (80103ec <__malloc_lock+0x8>)
 80103e6:	f000 baf6 	b.w	80109d6 <__retarget_lock_acquire_recursive>
 80103ea:	bf00      	nop
 80103ec:	200003ec 	.word	0x200003ec

080103f0 <__malloc_unlock>:
 80103f0:	4801      	ldr	r0, [pc, #4]	@ (80103f8 <__malloc_unlock+0x8>)
 80103f2:	f000 baf1 	b.w	80109d8 <__retarget_lock_release_recursive>
 80103f6:	bf00      	nop
 80103f8:	200003ec 	.word	0x200003ec

080103fc <std>:
 80103fc:	2300      	movs	r3, #0
 80103fe:	b510      	push	{r4, lr}
 8010400:	4604      	mov	r4, r0
 8010402:	e9c0 3300 	strd	r3, r3, [r0]
 8010406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801040a:	6083      	str	r3, [r0, #8]
 801040c:	8181      	strh	r1, [r0, #12]
 801040e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010410:	81c2      	strh	r2, [r0, #14]
 8010412:	6183      	str	r3, [r0, #24]
 8010414:	4619      	mov	r1, r3
 8010416:	2208      	movs	r2, #8
 8010418:	305c      	adds	r0, #92	@ 0x5c
 801041a:	f000 fa53 	bl	80108c4 <memset>
 801041e:	4b0d      	ldr	r3, [pc, #52]	@ (8010454 <std+0x58>)
 8010420:	6263      	str	r3, [r4, #36]	@ 0x24
 8010422:	4b0d      	ldr	r3, [pc, #52]	@ (8010458 <std+0x5c>)
 8010424:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010426:	4b0d      	ldr	r3, [pc, #52]	@ (801045c <std+0x60>)
 8010428:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801042a:	4b0d      	ldr	r3, [pc, #52]	@ (8010460 <std+0x64>)
 801042c:	6323      	str	r3, [r4, #48]	@ 0x30
 801042e:	4b0d      	ldr	r3, [pc, #52]	@ (8010464 <std+0x68>)
 8010430:	6224      	str	r4, [r4, #32]
 8010432:	429c      	cmp	r4, r3
 8010434:	d006      	beq.n	8010444 <std+0x48>
 8010436:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801043a:	4294      	cmp	r4, r2
 801043c:	d002      	beq.n	8010444 <std+0x48>
 801043e:	33d0      	adds	r3, #208	@ 0xd0
 8010440:	429c      	cmp	r4, r3
 8010442:	d105      	bne.n	8010450 <std+0x54>
 8010444:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801044c:	f000 bac2 	b.w	80109d4 <__retarget_lock_init_recursive>
 8010450:	bd10      	pop	{r4, pc}
 8010452:	bf00      	nop
 8010454:	08010671 	.word	0x08010671
 8010458:	08010693 	.word	0x08010693
 801045c:	080106cb 	.word	0x080106cb
 8010460:	080106ef 	.word	0x080106ef
 8010464:	200002ac 	.word	0x200002ac

08010468 <stdio_exit_handler>:
 8010468:	4a02      	ldr	r2, [pc, #8]	@ (8010474 <stdio_exit_handler+0xc>)
 801046a:	4903      	ldr	r1, [pc, #12]	@ (8010478 <stdio_exit_handler+0x10>)
 801046c:	4803      	ldr	r0, [pc, #12]	@ (801047c <stdio_exit_handler+0x14>)
 801046e:	f000 b869 	b.w	8010544 <_fwalk_sglue>
 8010472:	bf00      	nop
 8010474:	200001b0 	.word	0x200001b0
 8010478:	080113e5 	.word	0x080113e5
 801047c:	200001c0 	.word	0x200001c0

08010480 <cleanup_stdio>:
 8010480:	6841      	ldr	r1, [r0, #4]
 8010482:	4b0c      	ldr	r3, [pc, #48]	@ (80104b4 <cleanup_stdio+0x34>)
 8010484:	4299      	cmp	r1, r3
 8010486:	b510      	push	{r4, lr}
 8010488:	4604      	mov	r4, r0
 801048a:	d001      	beq.n	8010490 <cleanup_stdio+0x10>
 801048c:	f000 ffaa 	bl	80113e4 <_fflush_r>
 8010490:	68a1      	ldr	r1, [r4, #8]
 8010492:	4b09      	ldr	r3, [pc, #36]	@ (80104b8 <cleanup_stdio+0x38>)
 8010494:	4299      	cmp	r1, r3
 8010496:	d002      	beq.n	801049e <cleanup_stdio+0x1e>
 8010498:	4620      	mov	r0, r4
 801049a:	f000 ffa3 	bl	80113e4 <_fflush_r>
 801049e:	68e1      	ldr	r1, [r4, #12]
 80104a0:	4b06      	ldr	r3, [pc, #24]	@ (80104bc <cleanup_stdio+0x3c>)
 80104a2:	4299      	cmp	r1, r3
 80104a4:	d004      	beq.n	80104b0 <cleanup_stdio+0x30>
 80104a6:	4620      	mov	r0, r4
 80104a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ac:	f000 bf9a 	b.w	80113e4 <_fflush_r>
 80104b0:	bd10      	pop	{r4, pc}
 80104b2:	bf00      	nop
 80104b4:	200002ac 	.word	0x200002ac
 80104b8:	20000314 	.word	0x20000314
 80104bc:	2000037c 	.word	0x2000037c

080104c0 <global_stdio_init.part.0>:
 80104c0:	b510      	push	{r4, lr}
 80104c2:	4b0b      	ldr	r3, [pc, #44]	@ (80104f0 <global_stdio_init.part.0+0x30>)
 80104c4:	4c0b      	ldr	r4, [pc, #44]	@ (80104f4 <global_stdio_init.part.0+0x34>)
 80104c6:	4a0c      	ldr	r2, [pc, #48]	@ (80104f8 <global_stdio_init.part.0+0x38>)
 80104c8:	601a      	str	r2, [r3, #0]
 80104ca:	4620      	mov	r0, r4
 80104cc:	2200      	movs	r2, #0
 80104ce:	2104      	movs	r1, #4
 80104d0:	f7ff ff94 	bl	80103fc <std>
 80104d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80104d8:	2201      	movs	r2, #1
 80104da:	2109      	movs	r1, #9
 80104dc:	f7ff ff8e 	bl	80103fc <std>
 80104e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80104e4:	2202      	movs	r2, #2
 80104e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ea:	2112      	movs	r1, #18
 80104ec:	f7ff bf86 	b.w	80103fc <std>
 80104f0:	200003e4 	.word	0x200003e4
 80104f4:	200002ac 	.word	0x200002ac
 80104f8:	08010469 	.word	0x08010469

080104fc <__sfp_lock_acquire>:
 80104fc:	4801      	ldr	r0, [pc, #4]	@ (8010504 <__sfp_lock_acquire+0x8>)
 80104fe:	f000 ba6a 	b.w	80109d6 <__retarget_lock_acquire_recursive>
 8010502:	bf00      	nop
 8010504:	200003ed 	.word	0x200003ed

08010508 <__sfp_lock_release>:
 8010508:	4801      	ldr	r0, [pc, #4]	@ (8010510 <__sfp_lock_release+0x8>)
 801050a:	f000 ba65 	b.w	80109d8 <__retarget_lock_release_recursive>
 801050e:	bf00      	nop
 8010510:	200003ed 	.word	0x200003ed

08010514 <__sinit>:
 8010514:	b510      	push	{r4, lr}
 8010516:	4604      	mov	r4, r0
 8010518:	f7ff fff0 	bl	80104fc <__sfp_lock_acquire>
 801051c:	6a23      	ldr	r3, [r4, #32]
 801051e:	b11b      	cbz	r3, 8010528 <__sinit+0x14>
 8010520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010524:	f7ff bff0 	b.w	8010508 <__sfp_lock_release>
 8010528:	4b04      	ldr	r3, [pc, #16]	@ (801053c <__sinit+0x28>)
 801052a:	6223      	str	r3, [r4, #32]
 801052c:	4b04      	ldr	r3, [pc, #16]	@ (8010540 <__sinit+0x2c>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1f5      	bne.n	8010520 <__sinit+0xc>
 8010534:	f7ff ffc4 	bl	80104c0 <global_stdio_init.part.0>
 8010538:	e7f2      	b.n	8010520 <__sinit+0xc>
 801053a:	bf00      	nop
 801053c:	08010481 	.word	0x08010481
 8010540:	200003e4 	.word	0x200003e4

08010544 <_fwalk_sglue>:
 8010544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010548:	4607      	mov	r7, r0
 801054a:	4688      	mov	r8, r1
 801054c:	4614      	mov	r4, r2
 801054e:	2600      	movs	r6, #0
 8010550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010554:	f1b9 0901 	subs.w	r9, r9, #1
 8010558:	d505      	bpl.n	8010566 <_fwalk_sglue+0x22>
 801055a:	6824      	ldr	r4, [r4, #0]
 801055c:	2c00      	cmp	r4, #0
 801055e:	d1f7      	bne.n	8010550 <_fwalk_sglue+0xc>
 8010560:	4630      	mov	r0, r6
 8010562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010566:	89ab      	ldrh	r3, [r5, #12]
 8010568:	2b01      	cmp	r3, #1
 801056a:	d907      	bls.n	801057c <_fwalk_sglue+0x38>
 801056c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010570:	3301      	adds	r3, #1
 8010572:	d003      	beq.n	801057c <_fwalk_sglue+0x38>
 8010574:	4629      	mov	r1, r5
 8010576:	4638      	mov	r0, r7
 8010578:	47c0      	blx	r8
 801057a:	4306      	orrs	r6, r0
 801057c:	3568      	adds	r5, #104	@ 0x68
 801057e:	e7e9      	b.n	8010554 <_fwalk_sglue+0x10>

08010580 <iprintf>:
 8010580:	b40f      	push	{r0, r1, r2, r3}
 8010582:	b507      	push	{r0, r1, r2, lr}
 8010584:	4906      	ldr	r1, [pc, #24]	@ (80105a0 <iprintf+0x20>)
 8010586:	ab04      	add	r3, sp, #16
 8010588:	6808      	ldr	r0, [r1, #0]
 801058a:	f853 2b04 	ldr.w	r2, [r3], #4
 801058e:	6881      	ldr	r1, [r0, #8]
 8010590:	9301      	str	r3, [sp, #4]
 8010592:	f000 fbfd 	bl	8010d90 <_vfiprintf_r>
 8010596:	b003      	add	sp, #12
 8010598:	f85d eb04 	ldr.w	lr, [sp], #4
 801059c:	b004      	add	sp, #16
 801059e:	4770      	bx	lr
 80105a0:	200001bc 	.word	0x200001bc

080105a4 <putchar>:
 80105a4:	4b02      	ldr	r3, [pc, #8]	@ (80105b0 <putchar+0xc>)
 80105a6:	4601      	mov	r1, r0
 80105a8:	6818      	ldr	r0, [r3, #0]
 80105aa:	6882      	ldr	r2, [r0, #8]
 80105ac:	f000 bfa4 	b.w	80114f8 <_putc_r>
 80105b0:	200001bc 	.word	0x200001bc

080105b4 <_puts_r>:
 80105b4:	6a03      	ldr	r3, [r0, #32]
 80105b6:	b570      	push	{r4, r5, r6, lr}
 80105b8:	6884      	ldr	r4, [r0, #8]
 80105ba:	4605      	mov	r5, r0
 80105bc:	460e      	mov	r6, r1
 80105be:	b90b      	cbnz	r3, 80105c4 <_puts_r+0x10>
 80105c0:	f7ff ffa8 	bl	8010514 <__sinit>
 80105c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105c6:	07db      	lsls	r3, r3, #31
 80105c8:	d405      	bmi.n	80105d6 <_puts_r+0x22>
 80105ca:	89a3      	ldrh	r3, [r4, #12]
 80105cc:	0598      	lsls	r0, r3, #22
 80105ce:	d402      	bmi.n	80105d6 <_puts_r+0x22>
 80105d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105d2:	f000 fa00 	bl	80109d6 <__retarget_lock_acquire_recursive>
 80105d6:	89a3      	ldrh	r3, [r4, #12]
 80105d8:	0719      	lsls	r1, r3, #28
 80105da:	d502      	bpl.n	80105e2 <_puts_r+0x2e>
 80105dc:	6923      	ldr	r3, [r4, #16]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d135      	bne.n	801064e <_puts_r+0x9a>
 80105e2:	4621      	mov	r1, r4
 80105e4:	4628      	mov	r0, r5
 80105e6:	f000 f8fd 	bl	80107e4 <__swsetup_r>
 80105ea:	b380      	cbz	r0, 801064e <_puts_r+0x9a>
 80105ec:	f04f 35ff 	mov.w	r5, #4294967295
 80105f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105f2:	07da      	lsls	r2, r3, #31
 80105f4:	d405      	bmi.n	8010602 <_puts_r+0x4e>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	059b      	lsls	r3, r3, #22
 80105fa:	d402      	bmi.n	8010602 <_puts_r+0x4e>
 80105fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105fe:	f000 f9eb 	bl	80109d8 <__retarget_lock_release_recursive>
 8010602:	4628      	mov	r0, r5
 8010604:	bd70      	pop	{r4, r5, r6, pc}
 8010606:	2b00      	cmp	r3, #0
 8010608:	da04      	bge.n	8010614 <_puts_r+0x60>
 801060a:	69a2      	ldr	r2, [r4, #24]
 801060c:	429a      	cmp	r2, r3
 801060e:	dc17      	bgt.n	8010640 <_puts_r+0x8c>
 8010610:	290a      	cmp	r1, #10
 8010612:	d015      	beq.n	8010640 <_puts_r+0x8c>
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	1c5a      	adds	r2, r3, #1
 8010618:	6022      	str	r2, [r4, #0]
 801061a:	7019      	strb	r1, [r3, #0]
 801061c:	68a3      	ldr	r3, [r4, #8]
 801061e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010622:	3b01      	subs	r3, #1
 8010624:	60a3      	str	r3, [r4, #8]
 8010626:	2900      	cmp	r1, #0
 8010628:	d1ed      	bne.n	8010606 <_puts_r+0x52>
 801062a:	2b00      	cmp	r3, #0
 801062c:	da11      	bge.n	8010652 <_puts_r+0x9e>
 801062e:	4622      	mov	r2, r4
 8010630:	210a      	movs	r1, #10
 8010632:	4628      	mov	r0, r5
 8010634:	f000 f898 	bl	8010768 <__swbuf_r>
 8010638:	3001      	adds	r0, #1
 801063a:	d0d7      	beq.n	80105ec <_puts_r+0x38>
 801063c:	250a      	movs	r5, #10
 801063e:	e7d7      	b.n	80105f0 <_puts_r+0x3c>
 8010640:	4622      	mov	r2, r4
 8010642:	4628      	mov	r0, r5
 8010644:	f000 f890 	bl	8010768 <__swbuf_r>
 8010648:	3001      	adds	r0, #1
 801064a:	d1e7      	bne.n	801061c <_puts_r+0x68>
 801064c:	e7ce      	b.n	80105ec <_puts_r+0x38>
 801064e:	3e01      	subs	r6, #1
 8010650:	e7e4      	b.n	801061c <_puts_r+0x68>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	6022      	str	r2, [r4, #0]
 8010658:	220a      	movs	r2, #10
 801065a:	701a      	strb	r2, [r3, #0]
 801065c:	e7ee      	b.n	801063c <_puts_r+0x88>
	...

08010660 <puts>:
 8010660:	4b02      	ldr	r3, [pc, #8]	@ (801066c <puts+0xc>)
 8010662:	4601      	mov	r1, r0
 8010664:	6818      	ldr	r0, [r3, #0]
 8010666:	f7ff bfa5 	b.w	80105b4 <_puts_r>
 801066a:	bf00      	nop
 801066c:	200001bc 	.word	0x200001bc

08010670 <__sread>:
 8010670:	b510      	push	{r4, lr}
 8010672:	460c      	mov	r4, r1
 8010674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010678:	f000 f94e 	bl	8010918 <_read_r>
 801067c:	2800      	cmp	r0, #0
 801067e:	bfab      	itete	ge
 8010680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010682:	89a3      	ldrhlt	r3, [r4, #12]
 8010684:	181b      	addge	r3, r3, r0
 8010686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801068a:	bfac      	ite	ge
 801068c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801068e:	81a3      	strhlt	r3, [r4, #12]
 8010690:	bd10      	pop	{r4, pc}

08010692 <__swrite>:
 8010692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010696:	461f      	mov	r7, r3
 8010698:	898b      	ldrh	r3, [r1, #12]
 801069a:	05db      	lsls	r3, r3, #23
 801069c:	4605      	mov	r5, r0
 801069e:	460c      	mov	r4, r1
 80106a0:	4616      	mov	r6, r2
 80106a2:	d505      	bpl.n	80106b0 <__swrite+0x1e>
 80106a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106a8:	2302      	movs	r3, #2
 80106aa:	2200      	movs	r2, #0
 80106ac:	f000 f922 	bl	80108f4 <_lseek_r>
 80106b0:	89a3      	ldrh	r3, [r4, #12]
 80106b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106ba:	81a3      	strh	r3, [r4, #12]
 80106bc:	4632      	mov	r2, r6
 80106be:	463b      	mov	r3, r7
 80106c0:	4628      	mov	r0, r5
 80106c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106c6:	f000 b949 	b.w	801095c <_write_r>

080106ca <__sseek>:
 80106ca:	b510      	push	{r4, lr}
 80106cc:	460c      	mov	r4, r1
 80106ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106d2:	f000 f90f 	bl	80108f4 <_lseek_r>
 80106d6:	1c43      	adds	r3, r0, #1
 80106d8:	89a3      	ldrh	r3, [r4, #12]
 80106da:	bf15      	itete	ne
 80106dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80106de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80106e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80106e6:	81a3      	strheq	r3, [r4, #12]
 80106e8:	bf18      	it	ne
 80106ea:	81a3      	strhne	r3, [r4, #12]
 80106ec:	bd10      	pop	{r4, pc}

080106ee <__sclose>:
 80106ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106f2:	f000 b8ef 	b.w	80108d4 <_close_r>

080106f6 <_vsniprintf_r>:
 80106f6:	b530      	push	{r4, r5, lr}
 80106f8:	4614      	mov	r4, r2
 80106fa:	2c00      	cmp	r4, #0
 80106fc:	b09b      	sub	sp, #108	@ 0x6c
 80106fe:	4605      	mov	r5, r0
 8010700:	461a      	mov	r2, r3
 8010702:	da05      	bge.n	8010710 <_vsniprintf_r+0x1a>
 8010704:	238b      	movs	r3, #139	@ 0x8b
 8010706:	6003      	str	r3, [r0, #0]
 8010708:	f04f 30ff 	mov.w	r0, #4294967295
 801070c:	b01b      	add	sp, #108	@ 0x6c
 801070e:	bd30      	pop	{r4, r5, pc}
 8010710:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010714:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010718:	bf14      	ite	ne
 801071a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801071e:	4623      	moveq	r3, r4
 8010720:	9302      	str	r3, [sp, #8]
 8010722:	9305      	str	r3, [sp, #20]
 8010724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010728:	9100      	str	r1, [sp, #0]
 801072a:	9104      	str	r1, [sp, #16]
 801072c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010730:	4669      	mov	r1, sp
 8010732:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010734:	f000 fa06 	bl	8010b44 <_svfiprintf_r>
 8010738:	1c43      	adds	r3, r0, #1
 801073a:	bfbc      	itt	lt
 801073c:	238b      	movlt	r3, #139	@ 0x8b
 801073e:	602b      	strlt	r3, [r5, #0]
 8010740:	2c00      	cmp	r4, #0
 8010742:	d0e3      	beq.n	801070c <_vsniprintf_r+0x16>
 8010744:	9b00      	ldr	r3, [sp, #0]
 8010746:	2200      	movs	r2, #0
 8010748:	701a      	strb	r2, [r3, #0]
 801074a:	e7df      	b.n	801070c <_vsniprintf_r+0x16>

0801074c <vsniprintf>:
 801074c:	b507      	push	{r0, r1, r2, lr}
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	4613      	mov	r3, r2
 8010752:	460a      	mov	r2, r1
 8010754:	4601      	mov	r1, r0
 8010756:	4803      	ldr	r0, [pc, #12]	@ (8010764 <vsniprintf+0x18>)
 8010758:	6800      	ldr	r0, [r0, #0]
 801075a:	f7ff ffcc 	bl	80106f6 <_vsniprintf_r>
 801075e:	b003      	add	sp, #12
 8010760:	f85d fb04 	ldr.w	pc, [sp], #4
 8010764:	200001bc 	.word	0x200001bc

08010768 <__swbuf_r>:
 8010768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801076a:	460e      	mov	r6, r1
 801076c:	4614      	mov	r4, r2
 801076e:	4605      	mov	r5, r0
 8010770:	b118      	cbz	r0, 801077a <__swbuf_r+0x12>
 8010772:	6a03      	ldr	r3, [r0, #32]
 8010774:	b90b      	cbnz	r3, 801077a <__swbuf_r+0x12>
 8010776:	f7ff fecd 	bl	8010514 <__sinit>
 801077a:	69a3      	ldr	r3, [r4, #24]
 801077c:	60a3      	str	r3, [r4, #8]
 801077e:	89a3      	ldrh	r3, [r4, #12]
 8010780:	071a      	lsls	r2, r3, #28
 8010782:	d501      	bpl.n	8010788 <__swbuf_r+0x20>
 8010784:	6923      	ldr	r3, [r4, #16]
 8010786:	b943      	cbnz	r3, 801079a <__swbuf_r+0x32>
 8010788:	4621      	mov	r1, r4
 801078a:	4628      	mov	r0, r5
 801078c:	f000 f82a 	bl	80107e4 <__swsetup_r>
 8010790:	b118      	cbz	r0, 801079a <__swbuf_r+0x32>
 8010792:	f04f 37ff 	mov.w	r7, #4294967295
 8010796:	4638      	mov	r0, r7
 8010798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	6922      	ldr	r2, [r4, #16]
 801079e:	1a98      	subs	r0, r3, r2
 80107a0:	6963      	ldr	r3, [r4, #20]
 80107a2:	b2f6      	uxtb	r6, r6
 80107a4:	4283      	cmp	r3, r0
 80107a6:	4637      	mov	r7, r6
 80107a8:	dc05      	bgt.n	80107b6 <__swbuf_r+0x4e>
 80107aa:	4621      	mov	r1, r4
 80107ac:	4628      	mov	r0, r5
 80107ae:	f000 fe19 	bl	80113e4 <_fflush_r>
 80107b2:	2800      	cmp	r0, #0
 80107b4:	d1ed      	bne.n	8010792 <__swbuf_r+0x2a>
 80107b6:	68a3      	ldr	r3, [r4, #8]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	60a3      	str	r3, [r4, #8]
 80107bc:	6823      	ldr	r3, [r4, #0]
 80107be:	1c5a      	adds	r2, r3, #1
 80107c0:	6022      	str	r2, [r4, #0]
 80107c2:	701e      	strb	r6, [r3, #0]
 80107c4:	6962      	ldr	r2, [r4, #20]
 80107c6:	1c43      	adds	r3, r0, #1
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d004      	beq.n	80107d6 <__swbuf_r+0x6e>
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	07db      	lsls	r3, r3, #31
 80107d0:	d5e1      	bpl.n	8010796 <__swbuf_r+0x2e>
 80107d2:	2e0a      	cmp	r6, #10
 80107d4:	d1df      	bne.n	8010796 <__swbuf_r+0x2e>
 80107d6:	4621      	mov	r1, r4
 80107d8:	4628      	mov	r0, r5
 80107da:	f000 fe03 	bl	80113e4 <_fflush_r>
 80107de:	2800      	cmp	r0, #0
 80107e0:	d0d9      	beq.n	8010796 <__swbuf_r+0x2e>
 80107e2:	e7d6      	b.n	8010792 <__swbuf_r+0x2a>

080107e4 <__swsetup_r>:
 80107e4:	b538      	push	{r3, r4, r5, lr}
 80107e6:	4b29      	ldr	r3, [pc, #164]	@ (801088c <__swsetup_r+0xa8>)
 80107e8:	4605      	mov	r5, r0
 80107ea:	6818      	ldr	r0, [r3, #0]
 80107ec:	460c      	mov	r4, r1
 80107ee:	b118      	cbz	r0, 80107f8 <__swsetup_r+0x14>
 80107f0:	6a03      	ldr	r3, [r0, #32]
 80107f2:	b90b      	cbnz	r3, 80107f8 <__swsetup_r+0x14>
 80107f4:	f7ff fe8e 	bl	8010514 <__sinit>
 80107f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107fc:	0719      	lsls	r1, r3, #28
 80107fe:	d422      	bmi.n	8010846 <__swsetup_r+0x62>
 8010800:	06da      	lsls	r2, r3, #27
 8010802:	d407      	bmi.n	8010814 <__swsetup_r+0x30>
 8010804:	2209      	movs	r2, #9
 8010806:	602a      	str	r2, [r5, #0]
 8010808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	f04f 30ff 	mov.w	r0, #4294967295
 8010812:	e033      	b.n	801087c <__swsetup_r+0x98>
 8010814:	0758      	lsls	r0, r3, #29
 8010816:	d512      	bpl.n	801083e <__swsetup_r+0x5a>
 8010818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801081a:	b141      	cbz	r1, 801082e <__swsetup_r+0x4a>
 801081c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010820:	4299      	cmp	r1, r3
 8010822:	d002      	beq.n	801082a <__swsetup_r+0x46>
 8010824:	4628      	mov	r0, r5
 8010826:	f000 f8e7 	bl	80109f8 <_free_r>
 801082a:	2300      	movs	r3, #0
 801082c:	6363      	str	r3, [r4, #52]	@ 0x34
 801082e:	89a3      	ldrh	r3, [r4, #12]
 8010830:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010834:	81a3      	strh	r3, [r4, #12]
 8010836:	2300      	movs	r3, #0
 8010838:	6063      	str	r3, [r4, #4]
 801083a:	6923      	ldr	r3, [r4, #16]
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	f043 0308 	orr.w	r3, r3, #8
 8010844:	81a3      	strh	r3, [r4, #12]
 8010846:	6923      	ldr	r3, [r4, #16]
 8010848:	b94b      	cbnz	r3, 801085e <__swsetup_r+0x7a>
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010854:	d003      	beq.n	801085e <__swsetup_r+0x7a>
 8010856:	4621      	mov	r1, r4
 8010858:	4628      	mov	r0, r5
 801085a:	f000 fe11 	bl	8011480 <__smakebuf_r>
 801085e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010862:	f013 0201 	ands.w	r2, r3, #1
 8010866:	d00a      	beq.n	801087e <__swsetup_r+0x9a>
 8010868:	2200      	movs	r2, #0
 801086a:	60a2      	str	r2, [r4, #8]
 801086c:	6962      	ldr	r2, [r4, #20]
 801086e:	4252      	negs	r2, r2
 8010870:	61a2      	str	r2, [r4, #24]
 8010872:	6922      	ldr	r2, [r4, #16]
 8010874:	b942      	cbnz	r2, 8010888 <__swsetup_r+0xa4>
 8010876:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801087a:	d1c5      	bne.n	8010808 <__swsetup_r+0x24>
 801087c:	bd38      	pop	{r3, r4, r5, pc}
 801087e:	0799      	lsls	r1, r3, #30
 8010880:	bf58      	it	pl
 8010882:	6962      	ldrpl	r2, [r4, #20]
 8010884:	60a2      	str	r2, [r4, #8]
 8010886:	e7f4      	b.n	8010872 <__swsetup_r+0x8e>
 8010888:	2000      	movs	r0, #0
 801088a:	e7f7      	b.n	801087c <__swsetup_r+0x98>
 801088c:	200001bc 	.word	0x200001bc

08010890 <memmove>:
 8010890:	4288      	cmp	r0, r1
 8010892:	b510      	push	{r4, lr}
 8010894:	eb01 0402 	add.w	r4, r1, r2
 8010898:	d902      	bls.n	80108a0 <memmove+0x10>
 801089a:	4284      	cmp	r4, r0
 801089c:	4623      	mov	r3, r4
 801089e:	d807      	bhi.n	80108b0 <memmove+0x20>
 80108a0:	1e43      	subs	r3, r0, #1
 80108a2:	42a1      	cmp	r1, r4
 80108a4:	d008      	beq.n	80108b8 <memmove+0x28>
 80108a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108ae:	e7f8      	b.n	80108a2 <memmove+0x12>
 80108b0:	4402      	add	r2, r0
 80108b2:	4601      	mov	r1, r0
 80108b4:	428a      	cmp	r2, r1
 80108b6:	d100      	bne.n	80108ba <memmove+0x2a>
 80108b8:	bd10      	pop	{r4, pc}
 80108ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108c2:	e7f7      	b.n	80108b4 <memmove+0x24>

080108c4 <memset>:
 80108c4:	4402      	add	r2, r0
 80108c6:	4603      	mov	r3, r0
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d100      	bne.n	80108ce <memset+0xa>
 80108cc:	4770      	bx	lr
 80108ce:	f803 1b01 	strb.w	r1, [r3], #1
 80108d2:	e7f9      	b.n	80108c8 <memset+0x4>

080108d4 <_close_r>:
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	4d06      	ldr	r5, [pc, #24]	@ (80108f0 <_close_r+0x1c>)
 80108d8:	2300      	movs	r3, #0
 80108da:	4604      	mov	r4, r0
 80108dc:	4608      	mov	r0, r1
 80108de:	602b      	str	r3, [r5, #0]
 80108e0:	f7f1 f800 	bl	80018e4 <_close>
 80108e4:	1c43      	adds	r3, r0, #1
 80108e6:	d102      	bne.n	80108ee <_close_r+0x1a>
 80108e8:	682b      	ldr	r3, [r5, #0]
 80108ea:	b103      	cbz	r3, 80108ee <_close_r+0x1a>
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	bd38      	pop	{r3, r4, r5, pc}
 80108f0:	200003e8 	.word	0x200003e8

080108f4 <_lseek_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	4d07      	ldr	r5, [pc, #28]	@ (8010914 <_lseek_r+0x20>)
 80108f8:	4604      	mov	r4, r0
 80108fa:	4608      	mov	r0, r1
 80108fc:	4611      	mov	r1, r2
 80108fe:	2200      	movs	r2, #0
 8010900:	602a      	str	r2, [r5, #0]
 8010902:	461a      	mov	r2, r3
 8010904:	f7f1 f815 	bl	8001932 <_lseek>
 8010908:	1c43      	adds	r3, r0, #1
 801090a:	d102      	bne.n	8010912 <_lseek_r+0x1e>
 801090c:	682b      	ldr	r3, [r5, #0]
 801090e:	b103      	cbz	r3, 8010912 <_lseek_r+0x1e>
 8010910:	6023      	str	r3, [r4, #0]
 8010912:	bd38      	pop	{r3, r4, r5, pc}
 8010914:	200003e8 	.word	0x200003e8

08010918 <_read_r>:
 8010918:	b538      	push	{r3, r4, r5, lr}
 801091a:	4d07      	ldr	r5, [pc, #28]	@ (8010938 <_read_r+0x20>)
 801091c:	4604      	mov	r4, r0
 801091e:	4608      	mov	r0, r1
 8010920:	4611      	mov	r1, r2
 8010922:	2200      	movs	r2, #0
 8010924:	602a      	str	r2, [r5, #0]
 8010926:	461a      	mov	r2, r3
 8010928:	f7f0 ffa3 	bl	8001872 <_read>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d102      	bne.n	8010936 <_read_r+0x1e>
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	b103      	cbz	r3, 8010936 <_read_r+0x1e>
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	200003e8 	.word	0x200003e8

0801093c <_sbrk_r>:
 801093c:	b538      	push	{r3, r4, r5, lr}
 801093e:	4d06      	ldr	r5, [pc, #24]	@ (8010958 <_sbrk_r+0x1c>)
 8010940:	2300      	movs	r3, #0
 8010942:	4604      	mov	r4, r0
 8010944:	4608      	mov	r0, r1
 8010946:	602b      	str	r3, [r5, #0]
 8010948:	f7f1 f800 	bl	800194c <_sbrk>
 801094c:	1c43      	adds	r3, r0, #1
 801094e:	d102      	bne.n	8010956 <_sbrk_r+0x1a>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	b103      	cbz	r3, 8010956 <_sbrk_r+0x1a>
 8010954:	6023      	str	r3, [r4, #0]
 8010956:	bd38      	pop	{r3, r4, r5, pc}
 8010958:	200003e8 	.word	0x200003e8

0801095c <_write_r>:
 801095c:	b538      	push	{r3, r4, r5, lr}
 801095e:	4d07      	ldr	r5, [pc, #28]	@ (801097c <_write_r+0x20>)
 8010960:	4604      	mov	r4, r0
 8010962:	4608      	mov	r0, r1
 8010964:	4611      	mov	r1, r2
 8010966:	2200      	movs	r2, #0
 8010968:	602a      	str	r2, [r5, #0]
 801096a:	461a      	mov	r2, r3
 801096c:	f7f0 ff9e 	bl	80018ac <_write>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	d102      	bne.n	801097a <_write_r+0x1e>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	b103      	cbz	r3, 801097a <_write_r+0x1e>
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	bd38      	pop	{r3, r4, r5, pc}
 801097c:	200003e8 	.word	0x200003e8

08010980 <__errno>:
 8010980:	4b01      	ldr	r3, [pc, #4]	@ (8010988 <__errno+0x8>)
 8010982:	6818      	ldr	r0, [r3, #0]
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	200001bc 	.word	0x200001bc

0801098c <__libc_init_array>:
 801098c:	b570      	push	{r4, r5, r6, lr}
 801098e:	4d0d      	ldr	r5, [pc, #52]	@ (80109c4 <__libc_init_array+0x38>)
 8010990:	4c0d      	ldr	r4, [pc, #52]	@ (80109c8 <__libc_init_array+0x3c>)
 8010992:	1b64      	subs	r4, r4, r5
 8010994:	10a4      	asrs	r4, r4, #2
 8010996:	2600      	movs	r6, #0
 8010998:	42a6      	cmp	r6, r4
 801099a:	d109      	bne.n	80109b0 <__libc_init_array+0x24>
 801099c:	4d0b      	ldr	r5, [pc, #44]	@ (80109cc <__libc_init_array+0x40>)
 801099e:	4c0c      	ldr	r4, [pc, #48]	@ (80109d0 <__libc_init_array+0x44>)
 80109a0:	f000 fe36 	bl	8011610 <_init>
 80109a4:	1b64      	subs	r4, r4, r5
 80109a6:	10a4      	asrs	r4, r4, #2
 80109a8:	2600      	movs	r6, #0
 80109aa:	42a6      	cmp	r6, r4
 80109ac:	d105      	bne.n	80109ba <__libc_init_array+0x2e>
 80109ae:	bd70      	pop	{r4, r5, r6, pc}
 80109b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80109b4:	4798      	blx	r3
 80109b6:	3601      	adds	r6, #1
 80109b8:	e7ee      	b.n	8010998 <__libc_init_array+0xc>
 80109ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80109be:	4798      	blx	r3
 80109c0:	3601      	adds	r6, #1
 80109c2:	e7f2      	b.n	80109aa <__libc_init_array+0x1e>
 80109c4:	0801765c 	.word	0x0801765c
 80109c8:	0801765c 	.word	0x0801765c
 80109cc:	0801765c 	.word	0x0801765c
 80109d0:	08017660 	.word	0x08017660

080109d4 <__retarget_lock_init_recursive>:
 80109d4:	4770      	bx	lr

080109d6 <__retarget_lock_acquire_recursive>:
 80109d6:	4770      	bx	lr

080109d8 <__retarget_lock_release_recursive>:
 80109d8:	4770      	bx	lr

080109da <memcpy>:
 80109da:	440a      	add	r2, r1
 80109dc:	4291      	cmp	r1, r2
 80109de:	f100 33ff 	add.w	r3, r0, #4294967295
 80109e2:	d100      	bne.n	80109e6 <memcpy+0xc>
 80109e4:	4770      	bx	lr
 80109e6:	b510      	push	{r4, lr}
 80109e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109f0:	4291      	cmp	r1, r2
 80109f2:	d1f9      	bne.n	80109e8 <memcpy+0xe>
 80109f4:	bd10      	pop	{r4, pc}
	...

080109f8 <_free_r>:
 80109f8:	b538      	push	{r3, r4, r5, lr}
 80109fa:	4605      	mov	r5, r0
 80109fc:	2900      	cmp	r1, #0
 80109fe:	d041      	beq.n	8010a84 <_free_r+0x8c>
 8010a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a04:	1f0c      	subs	r4, r1, #4
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	bfb8      	it	lt
 8010a0a:	18e4      	addlt	r4, r4, r3
 8010a0c:	f7ff fcea 	bl	80103e4 <__malloc_lock>
 8010a10:	4a1d      	ldr	r2, [pc, #116]	@ (8010a88 <_free_r+0x90>)
 8010a12:	6813      	ldr	r3, [r2, #0]
 8010a14:	b933      	cbnz	r3, 8010a24 <_free_r+0x2c>
 8010a16:	6063      	str	r3, [r4, #4]
 8010a18:	6014      	str	r4, [r2, #0]
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a20:	f7ff bce6 	b.w	80103f0 <__malloc_unlock>
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	d908      	bls.n	8010a3a <_free_r+0x42>
 8010a28:	6820      	ldr	r0, [r4, #0]
 8010a2a:	1821      	adds	r1, r4, r0
 8010a2c:	428b      	cmp	r3, r1
 8010a2e:	bf01      	itttt	eq
 8010a30:	6819      	ldreq	r1, [r3, #0]
 8010a32:	685b      	ldreq	r3, [r3, #4]
 8010a34:	1809      	addeq	r1, r1, r0
 8010a36:	6021      	streq	r1, [r4, #0]
 8010a38:	e7ed      	b.n	8010a16 <_free_r+0x1e>
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	b10b      	cbz	r3, 8010a44 <_free_r+0x4c>
 8010a40:	42a3      	cmp	r3, r4
 8010a42:	d9fa      	bls.n	8010a3a <_free_r+0x42>
 8010a44:	6811      	ldr	r1, [r2, #0]
 8010a46:	1850      	adds	r0, r2, r1
 8010a48:	42a0      	cmp	r0, r4
 8010a4a:	d10b      	bne.n	8010a64 <_free_r+0x6c>
 8010a4c:	6820      	ldr	r0, [r4, #0]
 8010a4e:	4401      	add	r1, r0
 8010a50:	1850      	adds	r0, r2, r1
 8010a52:	4283      	cmp	r3, r0
 8010a54:	6011      	str	r1, [r2, #0]
 8010a56:	d1e0      	bne.n	8010a1a <_free_r+0x22>
 8010a58:	6818      	ldr	r0, [r3, #0]
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	6053      	str	r3, [r2, #4]
 8010a5e:	4408      	add	r0, r1
 8010a60:	6010      	str	r0, [r2, #0]
 8010a62:	e7da      	b.n	8010a1a <_free_r+0x22>
 8010a64:	d902      	bls.n	8010a6c <_free_r+0x74>
 8010a66:	230c      	movs	r3, #12
 8010a68:	602b      	str	r3, [r5, #0]
 8010a6a:	e7d6      	b.n	8010a1a <_free_r+0x22>
 8010a6c:	6820      	ldr	r0, [r4, #0]
 8010a6e:	1821      	adds	r1, r4, r0
 8010a70:	428b      	cmp	r3, r1
 8010a72:	bf04      	itt	eq
 8010a74:	6819      	ldreq	r1, [r3, #0]
 8010a76:	685b      	ldreq	r3, [r3, #4]
 8010a78:	6063      	str	r3, [r4, #4]
 8010a7a:	bf04      	itt	eq
 8010a7c:	1809      	addeq	r1, r1, r0
 8010a7e:	6021      	streq	r1, [r4, #0]
 8010a80:	6054      	str	r4, [r2, #4]
 8010a82:	e7ca      	b.n	8010a1a <_free_r+0x22>
 8010a84:	bd38      	pop	{r3, r4, r5, pc}
 8010a86:	bf00      	nop
 8010a88:	200002a8 	.word	0x200002a8

08010a8c <__ssputs_r>:
 8010a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a90:	688e      	ldr	r6, [r1, #8]
 8010a92:	461f      	mov	r7, r3
 8010a94:	42be      	cmp	r6, r7
 8010a96:	680b      	ldr	r3, [r1, #0]
 8010a98:	4682      	mov	sl, r0
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	4690      	mov	r8, r2
 8010a9e:	d82d      	bhi.n	8010afc <__ssputs_r+0x70>
 8010aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010aa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010aa8:	d026      	beq.n	8010af8 <__ssputs_r+0x6c>
 8010aaa:	6965      	ldr	r5, [r4, #20]
 8010aac:	6909      	ldr	r1, [r1, #16]
 8010aae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ab2:	eba3 0901 	sub.w	r9, r3, r1
 8010ab6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010aba:	1c7b      	adds	r3, r7, #1
 8010abc:	444b      	add	r3, r9
 8010abe:	106d      	asrs	r5, r5, #1
 8010ac0:	429d      	cmp	r5, r3
 8010ac2:	bf38      	it	cc
 8010ac4:	461d      	movcc	r5, r3
 8010ac6:	0553      	lsls	r3, r2, #21
 8010ac8:	d527      	bpl.n	8010b1a <__ssputs_r+0x8e>
 8010aca:	4629      	mov	r1, r5
 8010acc:	f7ff fc0a 	bl	80102e4 <_malloc_r>
 8010ad0:	4606      	mov	r6, r0
 8010ad2:	b360      	cbz	r0, 8010b2e <__ssputs_r+0xa2>
 8010ad4:	6921      	ldr	r1, [r4, #16]
 8010ad6:	464a      	mov	r2, r9
 8010ad8:	f7ff ff7f 	bl	80109da <memcpy>
 8010adc:	89a3      	ldrh	r3, [r4, #12]
 8010ade:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ae6:	81a3      	strh	r3, [r4, #12]
 8010ae8:	6126      	str	r6, [r4, #16]
 8010aea:	6165      	str	r5, [r4, #20]
 8010aec:	444e      	add	r6, r9
 8010aee:	eba5 0509 	sub.w	r5, r5, r9
 8010af2:	6026      	str	r6, [r4, #0]
 8010af4:	60a5      	str	r5, [r4, #8]
 8010af6:	463e      	mov	r6, r7
 8010af8:	42be      	cmp	r6, r7
 8010afa:	d900      	bls.n	8010afe <__ssputs_r+0x72>
 8010afc:	463e      	mov	r6, r7
 8010afe:	6820      	ldr	r0, [r4, #0]
 8010b00:	4632      	mov	r2, r6
 8010b02:	4641      	mov	r1, r8
 8010b04:	f7ff fec4 	bl	8010890 <memmove>
 8010b08:	68a3      	ldr	r3, [r4, #8]
 8010b0a:	1b9b      	subs	r3, r3, r6
 8010b0c:	60a3      	str	r3, [r4, #8]
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	4433      	add	r3, r6
 8010b12:	6023      	str	r3, [r4, #0]
 8010b14:	2000      	movs	r0, #0
 8010b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b1a:	462a      	mov	r2, r5
 8010b1c:	f000 fd42 	bl	80115a4 <_realloc_r>
 8010b20:	4606      	mov	r6, r0
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d1e0      	bne.n	8010ae8 <__ssputs_r+0x5c>
 8010b26:	6921      	ldr	r1, [r4, #16]
 8010b28:	4650      	mov	r0, sl
 8010b2a:	f7ff ff65 	bl	80109f8 <_free_r>
 8010b2e:	230c      	movs	r3, #12
 8010b30:	f8ca 3000 	str.w	r3, [sl]
 8010b34:	89a3      	ldrh	r3, [r4, #12]
 8010b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b3a:	81a3      	strh	r3, [r4, #12]
 8010b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b40:	e7e9      	b.n	8010b16 <__ssputs_r+0x8a>
	...

08010b44 <_svfiprintf_r>:
 8010b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	4698      	mov	r8, r3
 8010b4a:	898b      	ldrh	r3, [r1, #12]
 8010b4c:	061b      	lsls	r3, r3, #24
 8010b4e:	b09d      	sub	sp, #116	@ 0x74
 8010b50:	4607      	mov	r7, r0
 8010b52:	460d      	mov	r5, r1
 8010b54:	4614      	mov	r4, r2
 8010b56:	d510      	bpl.n	8010b7a <_svfiprintf_r+0x36>
 8010b58:	690b      	ldr	r3, [r1, #16]
 8010b5a:	b973      	cbnz	r3, 8010b7a <_svfiprintf_r+0x36>
 8010b5c:	2140      	movs	r1, #64	@ 0x40
 8010b5e:	f7ff fbc1 	bl	80102e4 <_malloc_r>
 8010b62:	6028      	str	r0, [r5, #0]
 8010b64:	6128      	str	r0, [r5, #16]
 8010b66:	b930      	cbnz	r0, 8010b76 <_svfiprintf_r+0x32>
 8010b68:	230c      	movs	r3, #12
 8010b6a:	603b      	str	r3, [r7, #0]
 8010b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b70:	b01d      	add	sp, #116	@ 0x74
 8010b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b76:	2340      	movs	r3, #64	@ 0x40
 8010b78:	616b      	str	r3, [r5, #20]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b7e:	2320      	movs	r3, #32
 8010b80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b88:	2330      	movs	r3, #48	@ 0x30
 8010b8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010d28 <_svfiprintf_r+0x1e4>
 8010b8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b92:	f04f 0901 	mov.w	r9, #1
 8010b96:	4623      	mov	r3, r4
 8010b98:	469a      	mov	sl, r3
 8010b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b9e:	b10a      	cbz	r2, 8010ba4 <_svfiprintf_r+0x60>
 8010ba0:	2a25      	cmp	r2, #37	@ 0x25
 8010ba2:	d1f9      	bne.n	8010b98 <_svfiprintf_r+0x54>
 8010ba4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ba8:	d00b      	beq.n	8010bc2 <_svfiprintf_r+0x7e>
 8010baa:	465b      	mov	r3, fp
 8010bac:	4622      	mov	r2, r4
 8010bae:	4629      	mov	r1, r5
 8010bb0:	4638      	mov	r0, r7
 8010bb2:	f7ff ff6b 	bl	8010a8c <__ssputs_r>
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	f000 80a7 	beq.w	8010d0a <_svfiprintf_r+0x1c6>
 8010bbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010bbe:	445a      	add	r2, fp
 8010bc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	f000 809f 	beq.w	8010d0a <_svfiprintf_r+0x1c6>
 8010bcc:	2300      	movs	r3, #0
 8010bce:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bd6:	f10a 0a01 	add.w	sl, sl, #1
 8010bda:	9304      	str	r3, [sp, #16]
 8010bdc:	9307      	str	r3, [sp, #28]
 8010bde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010be2:	931a      	str	r3, [sp, #104]	@ 0x68
 8010be4:	4654      	mov	r4, sl
 8010be6:	2205      	movs	r2, #5
 8010be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bec:	484e      	ldr	r0, [pc, #312]	@ (8010d28 <_svfiprintf_r+0x1e4>)
 8010bee:	f7ef fb07 	bl	8000200 <memchr>
 8010bf2:	9a04      	ldr	r2, [sp, #16]
 8010bf4:	b9d8      	cbnz	r0, 8010c2e <_svfiprintf_r+0xea>
 8010bf6:	06d0      	lsls	r0, r2, #27
 8010bf8:	bf44      	itt	mi
 8010bfa:	2320      	movmi	r3, #32
 8010bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c00:	0711      	lsls	r1, r2, #28
 8010c02:	bf44      	itt	mi
 8010c04:	232b      	movmi	r3, #43	@ 0x2b
 8010c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c10:	d015      	beq.n	8010c3e <_svfiprintf_r+0xfa>
 8010c12:	9a07      	ldr	r2, [sp, #28]
 8010c14:	4654      	mov	r4, sl
 8010c16:	2000      	movs	r0, #0
 8010c18:	f04f 0c0a 	mov.w	ip, #10
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c22:	3b30      	subs	r3, #48	@ 0x30
 8010c24:	2b09      	cmp	r3, #9
 8010c26:	d94b      	bls.n	8010cc0 <_svfiprintf_r+0x17c>
 8010c28:	b1b0      	cbz	r0, 8010c58 <_svfiprintf_r+0x114>
 8010c2a:	9207      	str	r2, [sp, #28]
 8010c2c:	e014      	b.n	8010c58 <_svfiprintf_r+0x114>
 8010c2e:	eba0 0308 	sub.w	r3, r0, r8
 8010c32:	fa09 f303 	lsl.w	r3, r9, r3
 8010c36:	4313      	orrs	r3, r2
 8010c38:	9304      	str	r3, [sp, #16]
 8010c3a:	46a2      	mov	sl, r4
 8010c3c:	e7d2      	b.n	8010be4 <_svfiprintf_r+0xa0>
 8010c3e:	9b03      	ldr	r3, [sp, #12]
 8010c40:	1d19      	adds	r1, r3, #4
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	9103      	str	r1, [sp, #12]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	bfbb      	ittet	lt
 8010c4a:	425b      	neglt	r3, r3
 8010c4c:	f042 0202 	orrlt.w	r2, r2, #2
 8010c50:	9307      	strge	r3, [sp, #28]
 8010c52:	9307      	strlt	r3, [sp, #28]
 8010c54:	bfb8      	it	lt
 8010c56:	9204      	strlt	r2, [sp, #16]
 8010c58:	7823      	ldrb	r3, [r4, #0]
 8010c5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8010c5c:	d10a      	bne.n	8010c74 <_svfiprintf_r+0x130>
 8010c5e:	7863      	ldrb	r3, [r4, #1]
 8010c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c62:	d132      	bne.n	8010cca <_svfiprintf_r+0x186>
 8010c64:	9b03      	ldr	r3, [sp, #12]
 8010c66:	1d1a      	adds	r2, r3, #4
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	9203      	str	r2, [sp, #12]
 8010c6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c70:	3402      	adds	r4, #2
 8010c72:	9305      	str	r3, [sp, #20]
 8010c74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010d38 <_svfiprintf_r+0x1f4>
 8010c78:	7821      	ldrb	r1, [r4, #0]
 8010c7a:	2203      	movs	r2, #3
 8010c7c:	4650      	mov	r0, sl
 8010c7e:	f7ef fabf 	bl	8000200 <memchr>
 8010c82:	b138      	cbz	r0, 8010c94 <_svfiprintf_r+0x150>
 8010c84:	9b04      	ldr	r3, [sp, #16]
 8010c86:	eba0 000a 	sub.w	r0, r0, sl
 8010c8a:	2240      	movs	r2, #64	@ 0x40
 8010c8c:	4082      	lsls	r2, r0
 8010c8e:	4313      	orrs	r3, r2
 8010c90:	3401      	adds	r4, #1
 8010c92:	9304      	str	r3, [sp, #16]
 8010c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c98:	4824      	ldr	r0, [pc, #144]	@ (8010d2c <_svfiprintf_r+0x1e8>)
 8010c9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c9e:	2206      	movs	r2, #6
 8010ca0:	f7ef faae 	bl	8000200 <memchr>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d036      	beq.n	8010d16 <_svfiprintf_r+0x1d2>
 8010ca8:	4b21      	ldr	r3, [pc, #132]	@ (8010d30 <_svfiprintf_r+0x1ec>)
 8010caa:	bb1b      	cbnz	r3, 8010cf4 <_svfiprintf_r+0x1b0>
 8010cac:	9b03      	ldr	r3, [sp, #12]
 8010cae:	3307      	adds	r3, #7
 8010cb0:	f023 0307 	bic.w	r3, r3, #7
 8010cb4:	3308      	adds	r3, #8
 8010cb6:	9303      	str	r3, [sp, #12]
 8010cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cba:	4433      	add	r3, r6
 8010cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cbe:	e76a      	b.n	8010b96 <_svfiprintf_r+0x52>
 8010cc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cc4:	460c      	mov	r4, r1
 8010cc6:	2001      	movs	r0, #1
 8010cc8:	e7a8      	b.n	8010c1c <_svfiprintf_r+0xd8>
 8010cca:	2300      	movs	r3, #0
 8010ccc:	3401      	adds	r4, #1
 8010cce:	9305      	str	r3, [sp, #20]
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	f04f 0c0a 	mov.w	ip, #10
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010cdc:	3a30      	subs	r2, #48	@ 0x30
 8010cde:	2a09      	cmp	r2, #9
 8010ce0:	d903      	bls.n	8010cea <_svfiprintf_r+0x1a6>
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d0c6      	beq.n	8010c74 <_svfiprintf_r+0x130>
 8010ce6:	9105      	str	r1, [sp, #20]
 8010ce8:	e7c4      	b.n	8010c74 <_svfiprintf_r+0x130>
 8010cea:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cee:	4604      	mov	r4, r0
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e7f0      	b.n	8010cd6 <_svfiprintf_r+0x192>
 8010cf4:	ab03      	add	r3, sp, #12
 8010cf6:	9300      	str	r3, [sp, #0]
 8010cf8:	462a      	mov	r2, r5
 8010cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8010d34 <_svfiprintf_r+0x1f0>)
 8010cfc:	a904      	add	r1, sp, #16
 8010cfe:	4638      	mov	r0, r7
 8010d00:	f3af 8000 	nop.w
 8010d04:	1c42      	adds	r2, r0, #1
 8010d06:	4606      	mov	r6, r0
 8010d08:	d1d6      	bne.n	8010cb8 <_svfiprintf_r+0x174>
 8010d0a:	89ab      	ldrh	r3, [r5, #12]
 8010d0c:	065b      	lsls	r3, r3, #25
 8010d0e:	f53f af2d 	bmi.w	8010b6c <_svfiprintf_r+0x28>
 8010d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d14:	e72c      	b.n	8010b70 <_svfiprintf_r+0x2c>
 8010d16:	ab03      	add	r3, sp, #12
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	462a      	mov	r2, r5
 8010d1c:	4b05      	ldr	r3, [pc, #20]	@ (8010d34 <_svfiprintf_r+0x1f0>)
 8010d1e:	a904      	add	r1, sp, #16
 8010d20:	4638      	mov	r0, r7
 8010d22:	f000 f9bb 	bl	801109c <_printf_i>
 8010d26:	e7ed      	b.n	8010d04 <_svfiprintf_r+0x1c0>
 8010d28:	08017620 	.word	0x08017620
 8010d2c:	0801762a 	.word	0x0801762a
 8010d30:	00000000 	.word	0x00000000
 8010d34:	08010a8d 	.word	0x08010a8d
 8010d38:	08017626 	.word	0x08017626

08010d3c <__sfputc_r>:
 8010d3c:	6893      	ldr	r3, [r2, #8]
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	b410      	push	{r4}
 8010d44:	6093      	str	r3, [r2, #8]
 8010d46:	da08      	bge.n	8010d5a <__sfputc_r+0x1e>
 8010d48:	6994      	ldr	r4, [r2, #24]
 8010d4a:	42a3      	cmp	r3, r4
 8010d4c:	db01      	blt.n	8010d52 <__sfputc_r+0x16>
 8010d4e:	290a      	cmp	r1, #10
 8010d50:	d103      	bne.n	8010d5a <__sfputc_r+0x1e>
 8010d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d56:	f7ff bd07 	b.w	8010768 <__swbuf_r>
 8010d5a:	6813      	ldr	r3, [r2, #0]
 8010d5c:	1c58      	adds	r0, r3, #1
 8010d5e:	6010      	str	r0, [r2, #0]
 8010d60:	7019      	strb	r1, [r3, #0]
 8010d62:	4608      	mov	r0, r1
 8010d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d68:	4770      	bx	lr

08010d6a <__sfputs_r>:
 8010d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d6c:	4606      	mov	r6, r0
 8010d6e:	460f      	mov	r7, r1
 8010d70:	4614      	mov	r4, r2
 8010d72:	18d5      	adds	r5, r2, r3
 8010d74:	42ac      	cmp	r4, r5
 8010d76:	d101      	bne.n	8010d7c <__sfputs_r+0x12>
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e007      	b.n	8010d8c <__sfputs_r+0x22>
 8010d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d80:	463a      	mov	r2, r7
 8010d82:	4630      	mov	r0, r6
 8010d84:	f7ff ffda 	bl	8010d3c <__sfputc_r>
 8010d88:	1c43      	adds	r3, r0, #1
 8010d8a:	d1f3      	bne.n	8010d74 <__sfputs_r+0xa>
 8010d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d90 <_vfiprintf_r>:
 8010d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	460d      	mov	r5, r1
 8010d96:	b09d      	sub	sp, #116	@ 0x74
 8010d98:	4614      	mov	r4, r2
 8010d9a:	4698      	mov	r8, r3
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	b118      	cbz	r0, 8010da8 <_vfiprintf_r+0x18>
 8010da0:	6a03      	ldr	r3, [r0, #32]
 8010da2:	b90b      	cbnz	r3, 8010da8 <_vfiprintf_r+0x18>
 8010da4:	f7ff fbb6 	bl	8010514 <__sinit>
 8010da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010daa:	07d9      	lsls	r1, r3, #31
 8010dac:	d405      	bmi.n	8010dba <_vfiprintf_r+0x2a>
 8010dae:	89ab      	ldrh	r3, [r5, #12]
 8010db0:	059a      	lsls	r2, r3, #22
 8010db2:	d402      	bmi.n	8010dba <_vfiprintf_r+0x2a>
 8010db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010db6:	f7ff fe0e 	bl	80109d6 <__retarget_lock_acquire_recursive>
 8010dba:	89ab      	ldrh	r3, [r5, #12]
 8010dbc:	071b      	lsls	r3, r3, #28
 8010dbe:	d501      	bpl.n	8010dc4 <_vfiprintf_r+0x34>
 8010dc0:	692b      	ldr	r3, [r5, #16]
 8010dc2:	b99b      	cbnz	r3, 8010dec <_vfiprintf_r+0x5c>
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	f7ff fd0c 	bl	80107e4 <__swsetup_r>
 8010dcc:	b170      	cbz	r0, 8010dec <_vfiprintf_r+0x5c>
 8010dce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dd0:	07dc      	lsls	r4, r3, #31
 8010dd2:	d504      	bpl.n	8010dde <_vfiprintf_r+0x4e>
 8010dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd8:	b01d      	add	sp, #116	@ 0x74
 8010dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dde:	89ab      	ldrh	r3, [r5, #12]
 8010de0:	0598      	lsls	r0, r3, #22
 8010de2:	d4f7      	bmi.n	8010dd4 <_vfiprintf_r+0x44>
 8010de4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010de6:	f7ff fdf7 	bl	80109d8 <__retarget_lock_release_recursive>
 8010dea:	e7f3      	b.n	8010dd4 <_vfiprintf_r+0x44>
 8010dec:	2300      	movs	r3, #0
 8010dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8010df0:	2320      	movs	r3, #32
 8010df2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010dfa:	2330      	movs	r3, #48	@ 0x30
 8010dfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010fac <_vfiprintf_r+0x21c>
 8010e00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e04:	f04f 0901 	mov.w	r9, #1
 8010e08:	4623      	mov	r3, r4
 8010e0a:	469a      	mov	sl, r3
 8010e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e10:	b10a      	cbz	r2, 8010e16 <_vfiprintf_r+0x86>
 8010e12:	2a25      	cmp	r2, #37	@ 0x25
 8010e14:	d1f9      	bne.n	8010e0a <_vfiprintf_r+0x7a>
 8010e16:	ebba 0b04 	subs.w	fp, sl, r4
 8010e1a:	d00b      	beq.n	8010e34 <_vfiprintf_r+0xa4>
 8010e1c:	465b      	mov	r3, fp
 8010e1e:	4622      	mov	r2, r4
 8010e20:	4629      	mov	r1, r5
 8010e22:	4630      	mov	r0, r6
 8010e24:	f7ff ffa1 	bl	8010d6a <__sfputs_r>
 8010e28:	3001      	adds	r0, #1
 8010e2a:	f000 80a7 	beq.w	8010f7c <_vfiprintf_r+0x1ec>
 8010e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e30:	445a      	add	r2, fp
 8010e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e34:	f89a 3000 	ldrb.w	r3, [sl]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f000 809f 	beq.w	8010f7c <_vfiprintf_r+0x1ec>
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f04f 32ff 	mov.w	r2, #4294967295
 8010e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e48:	f10a 0a01 	add.w	sl, sl, #1
 8010e4c:	9304      	str	r3, [sp, #16]
 8010e4e:	9307      	str	r3, [sp, #28]
 8010e50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e56:	4654      	mov	r4, sl
 8010e58:	2205      	movs	r2, #5
 8010e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e5e:	4853      	ldr	r0, [pc, #332]	@ (8010fac <_vfiprintf_r+0x21c>)
 8010e60:	f7ef f9ce 	bl	8000200 <memchr>
 8010e64:	9a04      	ldr	r2, [sp, #16]
 8010e66:	b9d8      	cbnz	r0, 8010ea0 <_vfiprintf_r+0x110>
 8010e68:	06d1      	lsls	r1, r2, #27
 8010e6a:	bf44      	itt	mi
 8010e6c:	2320      	movmi	r3, #32
 8010e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e72:	0713      	lsls	r3, r2, #28
 8010e74:	bf44      	itt	mi
 8010e76:	232b      	movmi	r3, #43	@ 0x2b
 8010e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e82:	d015      	beq.n	8010eb0 <_vfiprintf_r+0x120>
 8010e84:	9a07      	ldr	r2, [sp, #28]
 8010e86:	4654      	mov	r4, sl
 8010e88:	2000      	movs	r0, #0
 8010e8a:	f04f 0c0a 	mov.w	ip, #10
 8010e8e:	4621      	mov	r1, r4
 8010e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e94:	3b30      	subs	r3, #48	@ 0x30
 8010e96:	2b09      	cmp	r3, #9
 8010e98:	d94b      	bls.n	8010f32 <_vfiprintf_r+0x1a2>
 8010e9a:	b1b0      	cbz	r0, 8010eca <_vfiprintf_r+0x13a>
 8010e9c:	9207      	str	r2, [sp, #28]
 8010e9e:	e014      	b.n	8010eca <_vfiprintf_r+0x13a>
 8010ea0:	eba0 0308 	sub.w	r3, r0, r8
 8010ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8010ea8:	4313      	orrs	r3, r2
 8010eaa:	9304      	str	r3, [sp, #16]
 8010eac:	46a2      	mov	sl, r4
 8010eae:	e7d2      	b.n	8010e56 <_vfiprintf_r+0xc6>
 8010eb0:	9b03      	ldr	r3, [sp, #12]
 8010eb2:	1d19      	adds	r1, r3, #4
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	9103      	str	r1, [sp, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	bfbb      	ittet	lt
 8010ebc:	425b      	neglt	r3, r3
 8010ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8010ec2:	9307      	strge	r3, [sp, #28]
 8010ec4:	9307      	strlt	r3, [sp, #28]
 8010ec6:	bfb8      	it	lt
 8010ec8:	9204      	strlt	r2, [sp, #16]
 8010eca:	7823      	ldrb	r3, [r4, #0]
 8010ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ece:	d10a      	bne.n	8010ee6 <_vfiprintf_r+0x156>
 8010ed0:	7863      	ldrb	r3, [r4, #1]
 8010ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ed4:	d132      	bne.n	8010f3c <_vfiprintf_r+0x1ac>
 8010ed6:	9b03      	ldr	r3, [sp, #12]
 8010ed8:	1d1a      	adds	r2, r3, #4
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	9203      	str	r2, [sp, #12]
 8010ede:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ee2:	3402      	adds	r4, #2
 8010ee4:	9305      	str	r3, [sp, #20]
 8010ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010fbc <_vfiprintf_r+0x22c>
 8010eea:	7821      	ldrb	r1, [r4, #0]
 8010eec:	2203      	movs	r2, #3
 8010eee:	4650      	mov	r0, sl
 8010ef0:	f7ef f986 	bl	8000200 <memchr>
 8010ef4:	b138      	cbz	r0, 8010f06 <_vfiprintf_r+0x176>
 8010ef6:	9b04      	ldr	r3, [sp, #16]
 8010ef8:	eba0 000a 	sub.w	r0, r0, sl
 8010efc:	2240      	movs	r2, #64	@ 0x40
 8010efe:	4082      	lsls	r2, r0
 8010f00:	4313      	orrs	r3, r2
 8010f02:	3401      	adds	r4, #1
 8010f04:	9304      	str	r3, [sp, #16]
 8010f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f0a:	4829      	ldr	r0, [pc, #164]	@ (8010fb0 <_vfiprintf_r+0x220>)
 8010f0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f10:	2206      	movs	r2, #6
 8010f12:	f7ef f975 	bl	8000200 <memchr>
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d03f      	beq.n	8010f9a <_vfiprintf_r+0x20a>
 8010f1a:	4b26      	ldr	r3, [pc, #152]	@ (8010fb4 <_vfiprintf_r+0x224>)
 8010f1c:	bb1b      	cbnz	r3, 8010f66 <_vfiprintf_r+0x1d6>
 8010f1e:	9b03      	ldr	r3, [sp, #12]
 8010f20:	3307      	adds	r3, #7
 8010f22:	f023 0307 	bic.w	r3, r3, #7
 8010f26:	3308      	adds	r3, #8
 8010f28:	9303      	str	r3, [sp, #12]
 8010f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f2c:	443b      	add	r3, r7
 8010f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f30:	e76a      	b.n	8010e08 <_vfiprintf_r+0x78>
 8010f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f36:	460c      	mov	r4, r1
 8010f38:	2001      	movs	r0, #1
 8010f3a:	e7a8      	b.n	8010e8e <_vfiprintf_r+0xfe>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	3401      	adds	r4, #1
 8010f40:	9305      	str	r3, [sp, #20]
 8010f42:	4619      	mov	r1, r3
 8010f44:	f04f 0c0a 	mov.w	ip, #10
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f4e:	3a30      	subs	r2, #48	@ 0x30
 8010f50:	2a09      	cmp	r2, #9
 8010f52:	d903      	bls.n	8010f5c <_vfiprintf_r+0x1cc>
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d0c6      	beq.n	8010ee6 <_vfiprintf_r+0x156>
 8010f58:	9105      	str	r1, [sp, #20]
 8010f5a:	e7c4      	b.n	8010ee6 <_vfiprintf_r+0x156>
 8010f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f60:	4604      	mov	r4, r0
 8010f62:	2301      	movs	r3, #1
 8010f64:	e7f0      	b.n	8010f48 <_vfiprintf_r+0x1b8>
 8010f66:	ab03      	add	r3, sp, #12
 8010f68:	9300      	str	r3, [sp, #0]
 8010f6a:	462a      	mov	r2, r5
 8010f6c:	4b12      	ldr	r3, [pc, #72]	@ (8010fb8 <_vfiprintf_r+0x228>)
 8010f6e:	a904      	add	r1, sp, #16
 8010f70:	4630      	mov	r0, r6
 8010f72:	f3af 8000 	nop.w
 8010f76:	4607      	mov	r7, r0
 8010f78:	1c78      	adds	r0, r7, #1
 8010f7a:	d1d6      	bne.n	8010f2a <_vfiprintf_r+0x19a>
 8010f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f7e:	07d9      	lsls	r1, r3, #31
 8010f80:	d405      	bmi.n	8010f8e <_vfiprintf_r+0x1fe>
 8010f82:	89ab      	ldrh	r3, [r5, #12]
 8010f84:	059a      	lsls	r2, r3, #22
 8010f86:	d402      	bmi.n	8010f8e <_vfiprintf_r+0x1fe>
 8010f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f8a:	f7ff fd25 	bl	80109d8 <__retarget_lock_release_recursive>
 8010f8e:	89ab      	ldrh	r3, [r5, #12]
 8010f90:	065b      	lsls	r3, r3, #25
 8010f92:	f53f af1f 	bmi.w	8010dd4 <_vfiprintf_r+0x44>
 8010f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f98:	e71e      	b.n	8010dd8 <_vfiprintf_r+0x48>
 8010f9a:	ab03      	add	r3, sp, #12
 8010f9c:	9300      	str	r3, [sp, #0]
 8010f9e:	462a      	mov	r2, r5
 8010fa0:	4b05      	ldr	r3, [pc, #20]	@ (8010fb8 <_vfiprintf_r+0x228>)
 8010fa2:	a904      	add	r1, sp, #16
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f000 f879 	bl	801109c <_printf_i>
 8010faa:	e7e4      	b.n	8010f76 <_vfiprintf_r+0x1e6>
 8010fac:	08017620 	.word	0x08017620
 8010fb0:	0801762a 	.word	0x0801762a
 8010fb4:	00000000 	.word	0x00000000
 8010fb8:	08010d6b 	.word	0x08010d6b
 8010fbc:	08017626 	.word	0x08017626

08010fc0 <_printf_common>:
 8010fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fc4:	4616      	mov	r6, r2
 8010fc6:	4698      	mov	r8, r3
 8010fc8:	688a      	ldr	r2, [r1, #8]
 8010fca:	690b      	ldr	r3, [r1, #16]
 8010fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	bfb8      	it	lt
 8010fd4:	4613      	movlt	r3, r2
 8010fd6:	6033      	str	r3, [r6, #0]
 8010fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010fdc:	4607      	mov	r7, r0
 8010fde:	460c      	mov	r4, r1
 8010fe0:	b10a      	cbz	r2, 8010fe6 <_printf_common+0x26>
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	6033      	str	r3, [r6, #0]
 8010fe6:	6823      	ldr	r3, [r4, #0]
 8010fe8:	0699      	lsls	r1, r3, #26
 8010fea:	bf42      	ittt	mi
 8010fec:	6833      	ldrmi	r3, [r6, #0]
 8010fee:	3302      	addmi	r3, #2
 8010ff0:	6033      	strmi	r3, [r6, #0]
 8010ff2:	6825      	ldr	r5, [r4, #0]
 8010ff4:	f015 0506 	ands.w	r5, r5, #6
 8010ff8:	d106      	bne.n	8011008 <_printf_common+0x48>
 8010ffa:	f104 0a19 	add.w	sl, r4, #25
 8010ffe:	68e3      	ldr	r3, [r4, #12]
 8011000:	6832      	ldr	r2, [r6, #0]
 8011002:	1a9b      	subs	r3, r3, r2
 8011004:	42ab      	cmp	r3, r5
 8011006:	dc26      	bgt.n	8011056 <_printf_common+0x96>
 8011008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801100c:	6822      	ldr	r2, [r4, #0]
 801100e:	3b00      	subs	r3, #0
 8011010:	bf18      	it	ne
 8011012:	2301      	movne	r3, #1
 8011014:	0692      	lsls	r2, r2, #26
 8011016:	d42b      	bmi.n	8011070 <_printf_common+0xb0>
 8011018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801101c:	4641      	mov	r1, r8
 801101e:	4638      	mov	r0, r7
 8011020:	47c8      	blx	r9
 8011022:	3001      	adds	r0, #1
 8011024:	d01e      	beq.n	8011064 <_printf_common+0xa4>
 8011026:	6823      	ldr	r3, [r4, #0]
 8011028:	6922      	ldr	r2, [r4, #16]
 801102a:	f003 0306 	and.w	r3, r3, #6
 801102e:	2b04      	cmp	r3, #4
 8011030:	bf02      	ittt	eq
 8011032:	68e5      	ldreq	r5, [r4, #12]
 8011034:	6833      	ldreq	r3, [r6, #0]
 8011036:	1aed      	subeq	r5, r5, r3
 8011038:	68a3      	ldr	r3, [r4, #8]
 801103a:	bf0c      	ite	eq
 801103c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011040:	2500      	movne	r5, #0
 8011042:	4293      	cmp	r3, r2
 8011044:	bfc4      	itt	gt
 8011046:	1a9b      	subgt	r3, r3, r2
 8011048:	18ed      	addgt	r5, r5, r3
 801104a:	2600      	movs	r6, #0
 801104c:	341a      	adds	r4, #26
 801104e:	42b5      	cmp	r5, r6
 8011050:	d11a      	bne.n	8011088 <_printf_common+0xc8>
 8011052:	2000      	movs	r0, #0
 8011054:	e008      	b.n	8011068 <_printf_common+0xa8>
 8011056:	2301      	movs	r3, #1
 8011058:	4652      	mov	r2, sl
 801105a:	4641      	mov	r1, r8
 801105c:	4638      	mov	r0, r7
 801105e:	47c8      	blx	r9
 8011060:	3001      	adds	r0, #1
 8011062:	d103      	bne.n	801106c <_printf_common+0xac>
 8011064:	f04f 30ff 	mov.w	r0, #4294967295
 8011068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801106c:	3501      	adds	r5, #1
 801106e:	e7c6      	b.n	8010ffe <_printf_common+0x3e>
 8011070:	18e1      	adds	r1, r4, r3
 8011072:	1c5a      	adds	r2, r3, #1
 8011074:	2030      	movs	r0, #48	@ 0x30
 8011076:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801107a:	4422      	add	r2, r4
 801107c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011084:	3302      	adds	r3, #2
 8011086:	e7c7      	b.n	8011018 <_printf_common+0x58>
 8011088:	2301      	movs	r3, #1
 801108a:	4622      	mov	r2, r4
 801108c:	4641      	mov	r1, r8
 801108e:	4638      	mov	r0, r7
 8011090:	47c8      	blx	r9
 8011092:	3001      	adds	r0, #1
 8011094:	d0e6      	beq.n	8011064 <_printf_common+0xa4>
 8011096:	3601      	adds	r6, #1
 8011098:	e7d9      	b.n	801104e <_printf_common+0x8e>
	...

0801109c <_printf_i>:
 801109c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110a0:	7e0f      	ldrb	r7, [r1, #24]
 80110a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80110a4:	2f78      	cmp	r7, #120	@ 0x78
 80110a6:	4691      	mov	r9, r2
 80110a8:	4680      	mov	r8, r0
 80110aa:	460c      	mov	r4, r1
 80110ac:	469a      	mov	sl, r3
 80110ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80110b2:	d807      	bhi.n	80110c4 <_printf_i+0x28>
 80110b4:	2f62      	cmp	r7, #98	@ 0x62
 80110b6:	d80a      	bhi.n	80110ce <_printf_i+0x32>
 80110b8:	2f00      	cmp	r7, #0
 80110ba:	f000 80d2 	beq.w	8011262 <_printf_i+0x1c6>
 80110be:	2f58      	cmp	r7, #88	@ 0x58
 80110c0:	f000 80b9 	beq.w	8011236 <_printf_i+0x19a>
 80110c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80110cc:	e03a      	b.n	8011144 <_printf_i+0xa8>
 80110ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80110d2:	2b15      	cmp	r3, #21
 80110d4:	d8f6      	bhi.n	80110c4 <_printf_i+0x28>
 80110d6:	a101      	add	r1, pc, #4	@ (adr r1, 80110dc <_printf_i+0x40>)
 80110d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110dc:	08011135 	.word	0x08011135
 80110e0:	08011149 	.word	0x08011149
 80110e4:	080110c5 	.word	0x080110c5
 80110e8:	080110c5 	.word	0x080110c5
 80110ec:	080110c5 	.word	0x080110c5
 80110f0:	080110c5 	.word	0x080110c5
 80110f4:	08011149 	.word	0x08011149
 80110f8:	080110c5 	.word	0x080110c5
 80110fc:	080110c5 	.word	0x080110c5
 8011100:	080110c5 	.word	0x080110c5
 8011104:	080110c5 	.word	0x080110c5
 8011108:	08011249 	.word	0x08011249
 801110c:	08011173 	.word	0x08011173
 8011110:	08011203 	.word	0x08011203
 8011114:	080110c5 	.word	0x080110c5
 8011118:	080110c5 	.word	0x080110c5
 801111c:	0801126b 	.word	0x0801126b
 8011120:	080110c5 	.word	0x080110c5
 8011124:	08011173 	.word	0x08011173
 8011128:	080110c5 	.word	0x080110c5
 801112c:	080110c5 	.word	0x080110c5
 8011130:	0801120b 	.word	0x0801120b
 8011134:	6833      	ldr	r3, [r6, #0]
 8011136:	1d1a      	adds	r2, r3, #4
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	6032      	str	r2, [r6, #0]
 801113c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011144:	2301      	movs	r3, #1
 8011146:	e09d      	b.n	8011284 <_printf_i+0x1e8>
 8011148:	6833      	ldr	r3, [r6, #0]
 801114a:	6820      	ldr	r0, [r4, #0]
 801114c:	1d19      	adds	r1, r3, #4
 801114e:	6031      	str	r1, [r6, #0]
 8011150:	0606      	lsls	r6, r0, #24
 8011152:	d501      	bpl.n	8011158 <_printf_i+0xbc>
 8011154:	681d      	ldr	r5, [r3, #0]
 8011156:	e003      	b.n	8011160 <_printf_i+0xc4>
 8011158:	0645      	lsls	r5, r0, #25
 801115a:	d5fb      	bpl.n	8011154 <_printf_i+0xb8>
 801115c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011160:	2d00      	cmp	r5, #0
 8011162:	da03      	bge.n	801116c <_printf_i+0xd0>
 8011164:	232d      	movs	r3, #45	@ 0x2d
 8011166:	426d      	negs	r5, r5
 8011168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801116c:	4859      	ldr	r0, [pc, #356]	@ (80112d4 <_printf_i+0x238>)
 801116e:	230a      	movs	r3, #10
 8011170:	e011      	b.n	8011196 <_printf_i+0xfa>
 8011172:	6821      	ldr	r1, [r4, #0]
 8011174:	6833      	ldr	r3, [r6, #0]
 8011176:	0608      	lsls	r0, r1, #24
 8011178:	f853 5b04 	ldr.w	r5, [r3], #4
 801117c:	d402      	bmi.n	8011184 <_printf_i+0xe8>
 801117e:	0649      	lsls	r1, r1, #25
 8011180:	bf48      	it	mi
 8011182:	b2ad      	uxthmi	r5, r5
 8011184:	2f6f      	cmp	r7, #111	@ 0x6f
 8011186:	4853      	ldr	r0, [pc, #332]	@ (80112d4 <_printf_i+0x238>)
 8011188:	6033      	str	r3, [r6, #0]
 801118a:	bf14      	ite	ne
 801118c:	230a      	movne	r3, #10
 801118e:	2308      	moveq	r3, #8
 8011190:	2100      	movs	r1, #0
 8011192:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011196:	6866      	ldr	r6, [r4, #4]
 8011198:	60a6      	str	r6, [r4, #8]
 801119a:	2e00      	cmp	r6, #0
 801119c:	bfa2      	ittt	ge
 801119e:	6821      	ldrge	r1, [r4, #0]
 80111a0:	f021 0104 	bicge.w	r1, r1, #4
 80111a4:	6021      	strge	r1, [r4, #0]
 80111a6:	b90d      	cbnz	r5, 80111ac <_printf_i+0x110>
 80111a8:	2e00      	cmp	r6, #0
 80111aa:	d04b      	beq.n	8011244 <_printf_i+0x1a8>
 80111ac:	4616      	mov	r6, r2
 80111ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80111b2:	fb03 5711 	mls	r7, r3, r1, r5
 80111b6:	5dc7      	ldrb	r7, [r0, r7]
 80111b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80111bc:	462f      	mov	r7, r5
 80111be:	42bb      	cmp	r3, r7
 80111c0:	460d      	mov	r5, r1
 80111c2:	d9f4      	bls.n	80111ae <_printf_i+0x112>
 80111c4:	2b08      	cmp	r3, #8
 80111c6:	d10b      	bne.n	80111e0 <_printf_i+0x144>
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	07df      	lsls	r7, r3, #31
 80111cc:	d508      	bpl.n	80111e0 <_printf_i+0x144>
 80111ce:	6923      	ldr	r3, [r4, #16]
 80111d0:	6861      	ldr	r1, [r4, #4]
 80111d2:	4299      	cmp	r1, r3
 80111d4:	bfde      	ittt	le
 80111d6:	2330      	movle	r3, #48	@ 0x30
 80111d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80111dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80111e0:	1b92      	subs	r2, r2, r6
 80111e2:	6122      	str	r2, [r4, #16]
 80111e4:	f8cd a000 	str.w	sl, [sp]
 80111e8:	464b      	mov	r3, r9
 80111ea:	aa03      	add	r2, sp, #12
 80111ec:	4621      	mov	r1, r4
 80111ee:	4640      	mov	r0, r8
 80111f0:	f7ff fee6 	bl	8010fc0 <_printf_common>
 80111f4:	3001      	adds	r0, #1
 80111f6:	d14a      	bne.n	801128e <_printf_i+0x1f2>
 80111f8:	f04f 30ff 	mov.w	r0, #4294967295
 80111fc:	b004      	add	sp, #16
 80111fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011202:	6823      	ldr	r3, [r4, #0]
 8011204:	f043 0320 	orr.w	r3, r3, #32
 8011208:	6023      	str	r3, [r4, #0]
 801120a:	4833      	ldr	r0, [pc, #204]	@ (80112d8 <_printf_i+0x23c>)
 801120c:	2778      	movs	r7, #120	@ 0x78
 801120e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	6831      	ldr	r1, [r6, #0]
 8011216:	061f      	lsls	r7, r3, #24
 8011218:	f851 5b04 	ldr.w	r5, [r1], #4
 801121c:	d402      	bmi.n	8011224 <_printf_i+0x188>
 801121e:	065f      	lsls	r7, r3, #25
 8011220:	bf48      	it	mi
 8011222:	b2ad      	uxthmi	r5, r5
 8011224:	6031      	str	r1, [r6, #0]
 8011226:	07d9      	lsls	r1, r3, #31
 8011228:	bf44      	itt	mi
 801122a:	f043 0320 	orrmi.w	r3, r3, #32
 801122e:	6023      	strmi	r3, [r4, #0]
 8011230:	b11d      	cbz	r5, 801123a <_printf_i+0x19e>
 8011232:	2310      	movs	r3, #16
 8011234:	e7ac      	b.n	8011190 <_printf_i+0xf4>
 8011236:	4827      	ldr	r0, [pc, #156]	@ (80112d4 <_printf_i+0x238>)
 8011238:	e7e9      	b.n	801120e <_printf_i+0x172>
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	f023 0320 	bic.w	r3, r3, #32
 8011240:	6023      	str	r3, [r4, #0]
 8011242:	e7f6      	b.n	8011232 <_printf_i+0x196>
 8011244:	4616      	mov	r6, r2
 8011246:	e7bd      	b.n	80111c4 <_printf_i+0x128>
 8011248:	6833      	ldr	r3, [r6, #0]
 801124a:	6825      	ldr	r5, [r4, #0]
 801124c:	6961      	ldr	r1, [r4, #20]
 801124e:	1d18      	adds	r0, r3, #4
 8011250:	6030      	str	r0, [r6, #0]
 8011252:	062e      	lsls	r6, r5, #24
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	d501      	bpl.n	801125c <_printf_i+0x1c0>
 8011258:	6019      	str	r1, [r3, #0]
 801125a:	e002      	b.n	8011262 <_printf_i+0x1c6>
 801125c:	0668      	lsls	r0, r5, #25
 801125e:	d5fb      	bpl.n	8011258 <_printf_i+0x1bc>
 8011260:	8019      	strh	r1, [r3, #0]
 8011262:	2300      	movs	r3, #0
 8011264:	6123      	str	r3, [r4, #16]
 8011266:	4616      	mov	r6, r2
 8011268:	e7bc      	b.n	80111e4 <_printf_i+0x148>
 801126a:	6833      	ldr	r3, [r6, #0]
 801126c:	1d1a      	adds	r2, r3, #4
 801126e:	6032      	str	r2, [r6, #0]
 8011270:	681e      	ldr	r6, [r3, #0]
 8011272:	6862      	ldr	r2, [r4, #4]
 8011274:	2100      	movs	r1, #0
 8011276:	4630      	mov	r0, r6
 8011278:	f7ee ffc2 	bl	8000200 <memchr>
 801127c:	b108      	cbz	r0, 8011282 <_printf_i+0x1e6>
 801127e:	1b80      	subs	r0, r0, r6
 8011280:	6060      	str	r0, [r4, #4]
 8011282:	6863      	ldr	r3, [r4, #4]
 8011284:	6123      	str	r3, [r4, #16]
 8011286:	2300      	movs	r3, #0
 8011288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801128c:	e7aa      	b.n	80111e4 <_printf_i+0x148>
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	4632      	mov	r2, r6
 8011292:	4649      	mov	r1, r9
 8011294:	4640      	mov	r0, r8
 8011296:	47d0      	blx	sl
 8011298:	3001      	adds	r0, #1
 801129a:	d0ad      	beq.n	80111f8 <_printf_i+0x15c>
 801129c:	6823      	ldr	r3, [r4, #0]
 801129e:	079b      	lsls	r3, r3, #30
 80112a0:	d413      	bmi.n	80112ca <_printf_i+0x22e>
 80112a2:	68e0      	ldr	r0, [r4, #12]
 80112a4:	9b03      	ldr	r3, [sp, #12]
 80112a6:	4298      	cmp	r0, r3
 80112a8:	bfb8      	it	lt
 80112aa:	4618      	movlt	r0, r3
 80112ac:	e7a6      	b.n	80111fc <_printf_i+0x160>
 80112ae:	2301      	movs	r3, #1
 80112b0:	4632      	mov	r2, r6
 80112b2:	4649      	mov	r1, r9
 80112b4:	4640      	mov	r0, r8
 80112b6:	47d0      	blx	sl
 80112b8:	3001      	adds	r0, #1
 80112ba:	d09d      	beq.n	80111f8 <_printf_i+0x15c>
 80112bc:	3501      	adds	r5, #1
 80112be:	68e3      	ldr	r3, [r4, #12]
 80112c0:	9903      	ldr	r1, [sp, #12]
 80112c2:	1a5b      	subs	r3, r3, r1
 80112c4:	42ab      	cmp	r3, r5
 80112c6:	dcf2      	bgt.n	80112ae <_printf_i+0x212>
 80112c8:	e7eb      	b.n	80112a2 <_printf_i+0x206>
 80112ca:	2500      	movs	r5, #0
 80112cc:	f104 0619 	add.w	r6, r4, #25
 80112d0:	e7f5      	b.n	80112be <_printf_i+0x222>
 80112d2:	bf00      	nop
 80112d4:	08017631 	.word	0x08017631
 80112d8:	08017642 	.word	0x08017642

080112dc <__sflush_r>:
 80112dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80112e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112e4:	0716      	lsls	r6, r2, #28
 80112e6:	4605      	mov	r5, r0
 80112e8:	460c      	mov	r4, r1
 80112ea:	d454      	bmi.n	8011396 <__sflush_r+0xba>
 80112ec:	684b      	ldr	r3, [r1, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	dc02      	bgt.n	80112f8 <__sflush_r+0x1c>
 80112f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	dd48      	ble.n	801138a <__sflush_r+0xae>
 80112f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112fa:	2e00      	cmp	r6, #0
 80112fc:	d045      	beq.n	801138a <__sflush_r+0xae>
 80112fe:	2300      	movs	r3, #0
 8011300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011304:	682f      	ldr	r7, [r5, #0]
 8011306:	6a21      	ldr	r1, [r4, #32]
 8011308:	602b      	str	r3, [r5, #0]
 801130a:	d030      	beq.n	801136e <__sflush_r+0x92>
 801130c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801130e:	89a3      	ldrh	r3, [r4, #12]
 8011310:	0759      	lsls	r1, r3, #29
 8011312:	d505      	bpl.n	8011320 <__sflush_r+0x44>
 8011314:	6863      	ldr	r3, [r4, #4]
 8011316:	1ad2      	subs	r2, r2, r3
 8011318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801131a:	b10b      	cbz	r3, 8011320 <__sflush_r+0x44>
 801131c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801131e:	1ad2      	subs	r2, r2, r3
 8011320:	2300      	movs	r3, #0
 8011322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011324:	6a21      	ldr	r1, [r4, #32]
 8011326:	4628      	mov	r0, r5
 8011328:	47b0      	blx	r6
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	d106      	bne.n	801133e <__sflush_r+0x62>
 8011330:	6829      	ldr	r1, [r5, #0]
 8011332:	291d      	cmp	r1, #29
 8011334:	d82b      	bhi.n	801138e <__sflush_r+0xb2>
 8011336:	4a2a      	ldr	r2, [pc, #168]	@ (80113e0 <__sflush_r+0x104>)
 8011338:	410a      	asrs	r2, r1
 801133a:	07d6      	lsls	r6, r2, #31
 801133c:	d427      	bmi.n	801138e <__sflush_r+0xb2>
 801133e:	2200      	movs	r2, #0
 8011340:	6062      	str	r2, [r4, #4]
 8011342:	04d9      	lsls	r1, r3, #19
 8011344:	6922      	ldr	r2, [r4, #16]
 8011346:	6022      	str	r2, [r4, #0]
 8011348:	d504      	bpl.n	8011354 <__sflush_r+0x78>
 801134a:	1c42      	adds	r2, r0, #1
 801134c:	d101      	bne.n	8011352 <__sflush_r+0x76>
 801134e:	682b      	ldr	r3, [r5, #0]
 8011350:	b903      	cbnz	r3, 8011354 <__sflush_r+0x78>
 8011352:	6560      	str	r0, [r4, #84]	@ 0x54
 8011354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011356:	602f      	str	r7, [r5, #0]
 8011358:	b1b9      	cbz	r1, 801138a <__sflush_r+0xae>
 801135a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801135e:	4299      	cmp	r1, r3
 8011360:	d002      	beq.n	8011368 <__sflush_r+0x8c>
 8011362:	4628      	mov	r0, r5
 8011364:	f7ff fb48 	bl	80109f8 <_free_r>
 8011368:	2300      	movs	r3, #0
 801136a:	6363      	str	r3, [r4, #52]	@ 0x34
 801136c:	e00d      	b.n	801138a <__sflush_r+0xae>
 801136e:	2301      	movs	r3, #1
 8011370:	4628      	mov	r0, r5
 8011372:	47b0      	blx	r6
 8011374:	4602      	mov	r2, r0
 8011376:	1c50      	adds	r0, r2, #1
 8011378:	d1c9      	bne.n	801130e <__sflush_r+0x32>
 801137a:	682b      	ldr	r3, [r5, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d0c6      	beq.n	801130e <__sflush_r+0x32>
 8011380:	2b1d      	cmp	r3, #29
 8011382:	d001      	beq.n	8011388 <__sflush_r+0xac>
 8011384:	2b16      	cmp	r3, #22
 8011386:	d11e      	bne.n	80113c6 <__sflush_r+0xea>
 8011388:	602f      	str	r7, [r5, #0]
 801138a:	2000      	movs	r0, #0
 801138c:	e022      	b.n	80113d4 <__sflush_r+0xf8>
 801138e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011392:	b21b      	sxth	r3, r3
 8011394:	e01b      	b.n	80113ce <__sflush_r+0xf2>
 8011396:	690f      	ldr	r7, [r1, #16]
 8011398:	2f00      	cmp	r7, #0
 801139a:	d0f6      	beq.n	801138a <__sflush_r+0xae>
 801139c:	0793      	lsls	r3, r2, #30
 801139e:	680e      	ldr	r6, [r1, #0]
 80113a0:	bf08      	it	eq
 80113a2:	694b      	ldreq	r3, [r1, #20]
 80113a4:	600f      	str	r7, [r1, #0]
 80113a6:	bf18      	it	ne
 80113a8:	2300      	movne	r3, #0
 80113aa:	eba6 0807 	sub.w	r8, r6, r7
 80113ae:	608b      	str	r3, [r1, #8]
 80113b0:	f1b8 0f00 	cmp.w	r8, #0
 80113b4:	dde9      	ble.n	801138a <__sflush_r+0xae>
 80113b6:	6a21      	ldr	r1, [r4, #32]
 80113b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80113ba:	4643      	mov	r3, r8
 80113bc:	463a      	mov	r2, r7
 80113be:	4628      	mov	r0, r5
 80113c0:	47b0      	blx	r6
 80113c2:	2800      	cmp	r0, #0
 80113c4:	dc08      	bgt.n	80113d8 <__sflush_r+0xfc>
 80113c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113ce:	81a3      	strh	r3, [r4, #12]
 80113d0:	f04f 30ff 	mov.w	r0, #4294967295
 80113d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113d8:	4407      	add	r7, r0
 80113da:	eba8 0800 	sub.w	r8, r8, r0
 80113de:	e7e7      	b.n	80113b0 <__sflush_r+0xd4>
 80113e0:	dfbffffe 	.word	0xdfbffffe

080113e4 <_fflush_r>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	690b      	ldr	r3, [r1, #16]
 80113e8:	4605      	mov	r5, r0
 80113ea:	460c      	mov	r4, r1
 80113ec:	b913      	cbnz	r3, 80113f4 <_fflush_r+0x10>
 80113ee:	2500      	movs	r5, #0
 80113f0:	4628      	mov	r0, r5
 80113f2:	bd38      	pop	{r3, r4, r5, pc}
 80113f4:	b118      	cbz	r0, 80113fe <_fflush_r+0x1a>
 80113f6:	6a03      	ldr	r3, [r0, #32]
 80113f8:	b90b      	cbnz	r3, 80113fe <_fflush_r+0x1a>
 80113fa:	f7ff f88b 	bl	8010514 <__sinit>
 80113fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d0f3      	beq.n	80113ee <_fflush_r+0xa>
 8011406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011408:	07d0      	lsls	r0, r2, #31
 801140a:	d404      	bmi.n	8011416 <_fflush_r+0x32>
 801140c:	0599      	lsls	r1, r3, #22
 801140e:	d402      	bmi.n	8011416 <_fflush_r+0x32>
 8011410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011412:	f7ff fae0 	bl	80109d6 <__retarget_lock_acquire_recursive>
 8011416:	4628      	mov	r0, r5
 8011418:	4621      	mov	r1, r4
 801141a:	f7ff ff5f 	bl	80112dc <__sflush_r>
 801141e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011420:	07da      	lsls	r2, r3, #31
 8011422:	4605      	mov	r5, r0
 8011424:	d4e4      	bmi.n	80113f0 <_fflush_r+0xc>
 8011426:	89a3      	ldrh	r3, [r4, #12]
 8011428:	059b      	lsls	r3, r3, #22
 801142a:	d4e1      	bmi.n	80113f0 <_fflush_r+0xc>
 801142c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801142e:	f7ff fad3 	bl	80109d8 <__retarget_lock_release_recursive>
 8011432:	e7dd      	b.n	80113f0 <_fflush_r+0xc>

08011434 <__swhatbuf_r>:
 8011434:	b570      	push	{r4, r5, r6, lr}
 8011436:	460c      	mov	r4, r1
 8011438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801143c:	2900      	cmp	r1, #0
 801143e:	b096      	sub	sp, #88	@ 0x58
 8011440:	4615      	mov	r5, r2
 8011442:	461e      	mov	r6, r3
 8011444:	da0d      	bge.n	8011462 <__swhatbuf_r+0x2e>
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801144c:	f04f 0100 	mov.w	r1, #0
 8011450:	bf14      	ite	ne
 8011452:	2340      	movne	r3, #64	@ 0x40
 8011454:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011458:	2000      	movs	r0, #0
 801145a:	6031      	str	r1, [r6, #0]
 801145c:	602b      	str	r3, [r5, #0]
 801145e:	b016      	add	sp, #88	@ 0x58
 8011460:	bd70      	pop	{r4, r5, r6, pc}
 8011462:	466a      	mov	r2, sp
 8011464:	f000 f87c 	bl	8011560 <_fstat_r>
 8011468:	2800      	cmp	r0, #0
 801146a:	dbec      	blt.n	8011446 <__swhatbuf_r+0x12>
 801146c:	9901      	ldr	r1, [sp, #4]
 801146e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011472:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011476:	4259      	negs	r1, r3
 8011478:	4159      	adcs	r1, r3
 801147a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801147e:	e7eb      	b.n	8011458 <__swhatbuf_r+0x24>

08011480 <__smakebuf_r>:
 8011480:	898b      	ldrh	r3, [r1, #12]
 8011482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011484:	079d      	lsls	r5, r3, #30
 8011486:	4606      	mov	r6, r0
 8011488:	460c      	mov	r4, r1
 801148a:	d507      	bpl.n	801149c <__smakebuf_r+0x1c>
 801148c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011490:	6023      	str	r3, [r4, #0]
 8011492:	6123      	str	r3, [r4, #16]
 8011494:	2301      	movs	r3, #1
 8011496:	6163      	str	r3, [r4, #20]
 8011498:	b003      	add	sp, #12
 801149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801149c:	ab01      	add	r3, sp, #4
 801149e:	466a      	mov	r2, sp
 80114a0:	f7ff ffc8 	bl	8011434 <__swhatbuf_r>
 80114a4:	9f00      	ldr	r7, [sp, #0]
 80114a6:	4605      	mov	r5, r0
 80114a8:	4639      	mov	r1, r7
 80114aa:	4630      	mov	r0, r6
 80114ac:	f7fe ff1a 	bl	80102e4 <_malloc_r>
 80114b0:	b948      	cbnz	r0, 80114c6 <__smakebuf_r+0x46>
 80114b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114b6:	059a      	lsls	r2, r3, #22
 80114b8:	d4ee      	bmi.n	8011498 <__smakebuf_r+0x18>
 80114ba:	f023 0303 	bic.w	r3, r3, #3
 80114be:	f043 0302 	orr.w	r3, r3, #2
 80114c2:	81a3      	strh	r3, [r4, #12]
 80114c4:	e7e2      	b.n	801148c <__smakebuf_r+0xc>
 80114c6:	89a3      	ldrh	r3, [r4, #12]
 80114c8:	6020      	str	r0, [r4, #0]
 80114ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ce:	81a3      	strh	r3, [r4, #12]
 80114d0:	9b01      	ldr	r3, [sp, #4]
 80114d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80114d6:	b15b      	cbz	r3, 80114f0 <__smakebuf_r+0x70>
 80114d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114dc:	4630      	mov	r0, r6
 80114de:	f000 f851 	bl	8011584 <_isatty_r>
 80114e2:	b128      	cbz	r0, 80114f0 <__smakebuf_r+0x70>
 80114e4:	89a3      	ldrh	r3, [r4, #12]
 80114e6:	f023 0303 	bic.w	r3, r3, #3
 80114ea:	f043 0301 	orr.w	r3, r3, #1
 80114ee:	81a3      	strh	r3, [r4, #12]
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	431d      	orrs	r5, r3
 80114f4:	81a5      	strh	r5, [r4, #12]
 80114f6:	e7cf      	b.n	8011498 <__smakebuf_r+0x18>

080114f8 <_putc_r>:
 80114f8:	b570      	push	{r4, r5, r6, lr}
 80114fa:	460d      	mov	r5, r1
 80114fc:	4614      	mov	r4, r2
 80114fe:	4606      	mov	r6, r0
 8011500:	b118      	cbz	r0, 801150a <_putc_r+0x12>
 8011502:	6a03      	ldr	r3, [r0, #32]
 8011504:	b90b      	cbnz	r3, 801150a <_putc_r+0x12>
 8011506:	f7ff f805 	bl	8010514 <__sinit>
 801150a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801150c:	07d8      	lsls	r0, r3, #31
 801150e:	d405      	bmi.n	801151c <_putc_r+0x24>
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	0599      	lsls	r1, r3, #22
 8011514:	d402      	bmi.n	801151c <_putc_r+0x24>
 8011516:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011518:	f7ff fa5d 	bl	80109d6 <__retarget_lock_acquire_recursive>
 801151c:	68a3      	ldr	r3, [r4, #8]
 801151e:	3b01      	subs	r3, #1
 8011520:	2b00      	cmp	r3, #0
 8011522:	60a3      	str	r3, [r4, #8]
 8011524:	da05      	bge.n	8011532 <_putc_r+0x3a>
 8011526:	69a2      	ldr	r2, [r4, #24]
 8011528:	4293      	cmp	r3, r2
 801152a:	db12      	blt.n	8011552 <_putc_r+0x5a>
 801152c:	b2eb      	uxtb	r3, r5
 801152e:	2b0a      	cmp	r3, #10
 8011530:	d00f      	beq.n	8011552 <_putc_r+0x5a>
 8011532:	6823      	ldr	r3, [r4, #0]
 8011534:	1c5a      	adds	r2, r3, #1
 8011536:	6022      	str	r2, [r4, #0]
 8011538:	701d      	strb	r5, [r3, #0]
 801153a:	b2ed      	uxtb	r5, r5
 801153c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801153e:	07da      	lsls	r2, r3, #31
 8011540:	d405      	bmi.n	801154e <_putc_r+0x56>
 8011542:	89a3      	ldrh	r3, [r4, #12]
 8011544:	059b      	lsls	r3, r3, #22
 8011546:	d402      	bmi.n	801154e <_putc_r+0x56>
 8011548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801154a:	f7ff fa45 	bl	80109d8 <__retarget_lock_release_recursive>
 801154e:	4628      	mov	r0, r5
 8011550:	bd70      	pop	{r4, r5, r6, pc}
 8011552:	4629      	mov	r1, r5
 8011554:	4622      	mov	r2, r4
 8011556:	4630      	mov	r0, r6
 8011558:	f7ff f906 	bl	8010768 <__swbuf_r>
 801155c:	4605      	mov	r5, r0
 801155e:	e7ed      	b.n	801153c <_putc_r+0x44>

08011560 <_fstat_r>:
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	4d07      	ldr	r5, [pc, #28]	@ (8011580 <_fstat_r+0x20>)
 8011564:	2300      	movs	r3, #0
 8011566:	4604      	mov	r4, r0
 8011568:	4608      	mov	r0, r1
 801156a:	4611      	mov	r1, r2
 801156c:	602b      	str	r3, [r5, #0]
 801156e:	f7f0 f9c5 	bl	80018fc <_fstat>
 8011572:	1c43      	adds	r3, r0, #1
 8011574:	d102      	bne.n	801157c <_fstat_r+0x1c>
 8011576:	682b      	ldr	r3, [r5, #0]
 8011578:	b103      	cbz	r3, 801157c <_fstat_r+0x1c>
 801157a:	6023      	str	r3, [r4, #0]
 801157c:	bd38      	pop	{r3, r4, r5, pc}
 801157e:	bf00      	nop
 8011580:	200003e8 	.word	0x200003e8

08011584 <_isatty_r>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	4d06      	ldr	r5, [pc, #24]	@ (80115a0 <_isatty_r+0x1c>)
 8011588:	2300      	movs	r3, #0
 801158a:	4604      	mov	r4, r0
 801158c:	4608      	mov	r0, r1
 801158e:	602b      	str	r3, [r5, #0]
 8011590:	f7f0 f9c4 	bl	800191c <_isatty>
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	d102      	bne.n	801159e <_isatty_r+0x1a>
 8011598:	682b      	ldr	r3, [r5, #0]
 801159a:	b103      	cbz	r3, 801159e <_isatty_r+0x1a>
 801159c:	6023      	str	r3, [r4, #0]
 801159e:	bd38      	pop	{r3, r4, r5, pc}
 80115a0:	200003e8 	.word	0x200003e8

080115a4 <_realloc_r>:
 80115a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a8:	4680      	mov	r8, r0
 80115aa:	4615      	mov	r5, r2
 80115ac:	460c      	mov	r4, r1
 80115ae:	b921      	cbnz	r1, 80115ba <_realloc_r+0x16>
 80115b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115b4:	4611      	mov	r1, r2
 80115b6:	f7fe be95 	b.w	80102e4 <_malloc_r>
 80115ba:	b92a      	cbnz	r2, 80115c8 <_realloc_r+0x24>
 80115bc:	f7ff fa1c 	bl	80109f8 <_free_r>
 80115c0:	2400      	movs	r4, #0
 80115c2:	4620      	mov	r0, r4
 80115c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c8:	f000 f81a 	bl	8011600 <_malloc_usable_size_r>
 80115cc:	4285      	cmp	r5, r0
 80115ce:	4606      	mov	r6, r0
 80115d0:	d802      	bhi.n	80115d8 <_realloc_r+0x34>
 80115d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80115d6:	d8f4      	bhi.n	80115c2 <_realloc_r+0x1e>
 80115d8:	4629      	mov	r1, r5
 80115da:	4640      	mov	r0, r8
 80115dc:	f7fe fe82 	bl	80102e4 <_malloc_r>
 80115e0:	4607      	mov	r7, r0
 80115e2:	2800      	cmp	r0, #0
 80115e4:	d0ec      	beq.n	80115c0 <_realloc_r+0x1c>
 80115e6:	42b5      	cmp	r5, r6
 80115e8:	462a      	mov	r2, r5
 80115ea:	4621      	mov	r1, r4
 80115ec:	bf28      	it	cs
 80115ee:	4632      	movcs	r2, r6
 80115f0:	f7ff f9f3 	bl	80109da <memcpy>
 80115f4:	4621      	mov	r1, r4
 80115f6:	4640      	mov	r0, r8
 80115f8:	f7ff f9fe 	bl	80109f8 <_free_r>
 80115fc:	463c      	mov	r4, r7
 80115fe:	e7e0      	b.n	80115c2 <_realloc_r+0x1e>

08011600 <_malloc_usable_size_r>:
 8011600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011604:	1f18      	subs	r0, r3, #4
 8011606:	2b00      	cmp	r3, #0
 8011608:	bfbc      	itt	lt
 801160a:	580b      	ldrlt	r3, [r1, r0]
 801160c:	18c0      	addlt	r0, r0, r3
 801160e:	4770      	bx	lr

08011610 <_init>:
 8011610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011612:	bf00      	nop
 8011614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011616:	bc08      	pop	{r3}
 8011618:	469e      	mov	lr, r3
 801161a:	4770      	bx	lr

0801161c <_fini>:
 801161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161e:	bf00      	nop
 8011620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011622:	bc08      	pop	{r3}
 8011624:	469e      	mov	lr, r3
 8011626:	4770      	bx	lr
