
icp-20100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000433c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080044f8  080044f8  000054f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004538  08004538  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004538  08004538  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004538  08004538  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004538  08004538  00005538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004540  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  0800454c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800454c  00006140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ade5  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2a  00000000  00000000  00010e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00012a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081c  00000000  00000000  000134f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d14  00000000  00000000  00013d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf6b  00000000  00000000  0003da28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fed54  00000000  00000000  0004a993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001496e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab8  00000000  00000000  0014972c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014c1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080044e0 	.word	0x080044e0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080044e0 	.word	0x080044e0

080001fc <ICP20100_Init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);

void ICP20100_Init(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af04      	add	r7, sp, #16
	uint8_t data;

	data = MODE_SELECT_CONTINUOUS;
 8000202:	238b      	movs	r3, #139	@ 0x8b
 8000204:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, ICP20100_ADDR, MODE_SELECT_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000206:	f04f 33ff 	mov.w	r3, #4294967295
 800020a:	9302      	str	r3, [sp, #8]
 800020c:	2301      	movs	r3, #1
 800020e:	9301      	str	r3, [sp, #4]
 8000210:	1dfb      	adds	r3, r7, #7
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2301      	movs	r3, #1
 8000216:	22c0      	movs	r2, #192	@ 0xc0
 8000218:	2118      	movs	r1, #24
 800021a:	480b      	ldr	r0, [pc, #44]	@ (8000248 <ICP20100_Init+0x4c>)
 800021c:	f001 f8ba 	bl	8001394 <HAL_I2C_Mem_Write>


	data = INTERRUPT_MASK_PRESSURE_READY;
 8000220:	2347      	movs	r3, #71	@ 0x47
 8000222:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, ICP20100_ADDR, INTERRUPT_MASK_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000224:	f04f 33ff 	mov.w	r3, #4294967295
 8000228:	9302      	str	r3, [sp, #8]
 800022a:	2301      	movs	r3, #1
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2301      	movs	r3, #1
 8000234:	22c2      	movs	r2, #194	@ 0xc2
 8000236:	2118      	movs	r1, #24
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <ICP20100_Init+0x4c>)
 800023a:	f001 f8ab 	bl	8001394 <HAL_I2C_Mem_Write>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000028 	.word	0x20000028

0800024c <ICP20100_ReadPressure>:

uint16_t ICP20100_ReadPressure(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af04      	add	r7, sp, #16
	uint8_t pressure_data[3];  // Buffer to hold 3 bytes of pressure data

	HAL_I2C_Mem_Read(&hi2c1, ICP20100_ADDR, PRESS_ABS_LSB_REG, I2C_MEMADD_SIZE_8BIT, pressure_data, 3, HAL_MAX_DELAY);
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	9302      	str	r3, [sp, #8]
 8000258:	2303      	movs	r3, #3
 800025a:	9301      	str	r3, [sp, #4]
 800025c:	463b      	mov	r3, r7
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2301      	movs	r3, #1
 8000262:	22c7      	movs	r2, #199	@ 0xc7
 8000264:	2118      	movs	r1, #24
 8000266:	4808      	ldr	r0, [pc, #32]	@ (8000288 <ICP20100_ReadPressure+0x3c>)
 8000268:	f001 f9a8 	bl	80015bc <HAL_I2C_Mem_Read>


	uint32_t pressure = (pressure_data[0] << 16) | (pressure_data[1] << 8) | pressure_data[2];
 800026c:	783b      	ldrb	r3, [r7, #0]
 800026e:	041a      	lsls	r2, r3, #16
 8000270:	787b      	ldrb	r3, [r7, #1]
 8000272:	021b      	lsls	r3, r3, #8
 8000274:	4313      	orrs	r3, r2
 8000276:	78ba      	ldrb	r2, [r7, #2]
 8000278:	4313      	orrs	r3, r2
 800027a:	607b      	str	r3, [r7, #4]

	return pressure;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	b29b      	uxth	r3, r3
}
 8000280:	4618      	mov	r0, r3
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f000 fa80 	bl	8000796 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 f812 	bl	80002be <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 f8c9 	bl	8000430 <MX_GPIO_Init>
  MX_DMA_Init();
 800029e:	f000 f895 	bl	80003cc <MX_DMA_Init>
  MX_I2C1_Init();
 80002a2:	f000 f853 	bl	800034c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ICP20100_Init();
 80002a6:	f7ff ffa9 	bl	80001fc <ICP20100_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t pressure = ICP20100_ReadPressure();
 80002aa:	f7ff ffcf 	bl	800024c <ICP20100_ReadPressure>
 80002ae:	4603      	mov	r3, r0
 80002b0:	80fb      	strh	r3, [r7, #6]

	  HAL_Delay(1000);
 80002b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b6:	f000 fae3 	bl	8000880 <HAL_Delay>
  {
 80002ba:	bf00      	nop
 80002bc:	e7f5      	b.n	80002aa <main+0x1e>

080002be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b098      	sub	sp, #96	@ 0x60
 80002c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	2248      	movs	r2, #72	@ 0x48
 80002ca:	2100      	movs	r1, #0
 80002cc:	4618      	mov	r0, r3
 80002ce:	f004 f8db 	bl	8004488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002e4:	f002 fbd6 	bl	8002a94 <HAL_PWREx_ControlVoltageScaling>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002ee:	f000 f8b7 	bl	8000460 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f2:	2310      	movs	r3, #16
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f6:	2301      	movs	r3, #1
 80002f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002fe:	2360      	movs	r3, #96	@ 0x60
 8000300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000302:	2300      	movs	r3, #0
 8000304:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0318 	add.w	r3, r7, #24
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fc66 	bl	8002bdc <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000316:	f000 f8a3 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800031e:	2300      	movs	r3, #0
 8000320:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 f8ce 	bl	80034d4 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800033e:	f000 f88f 	bl	8000460 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3760      	adds	r7, #96	@ 0x60
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000350:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000352:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <MX_I2C1_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000356:	4b1a      	ldr	r3, [pc, #104]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000358:	4a1b      	ldr	r2, [pc, #108]	@ (80003c8 <MX_I2C1_Init+0x7c>)
 800035a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000364:	2201      	movs	r2, #1
 8000366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000380:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000386:	480e      	ldr	r0, [pc, #56]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000388:	f000 ff68 	bl	800125c <HAL_I2C_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000392:	f000 f865 	bl	8000460 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000396:	2100      	movs	r1, #0
 8000398:	4809      	ldr	r0, [pc, #36]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800039a:	f002 fac3 	bl	8002924 <HAL_I2CEx_ConfigAnalogFilter>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a4:	f000 f85c 	bl	8000460 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a8:	2100      	movs	r1, #0
 80003aa:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_I2C1_Init+0x74>)
 80003ac:	f002 fb05 	bl	80029ba <HAL_I2CEx_ConfigDigitalFilter>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f853 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40005400 	.word	0x40005400
 80003c8:	00100d14 	.word	0x00100d14

080003cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80003d2:	4b16      	ldr	r3, [pc, #88]	@ (800042c <MX_DMA_Init+0x60>)
 80003d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003d6:	4a15      	ldr	r2, [pc, #84]	@ (800042c <MX_DMA_Init+0x60>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80003de:	4b13      	ldr	r3, [pc, #76]	@ (800042c <MX_DMA_Init+0x60>)
 80003e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003e2:	f003 0304 	and.w	r3, r3, #4
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <MX_DMA_Init+0x60>)
 80003ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003ee:	4a0f      	ldr	r2, [pc, #60]	@ (800042c <MX_DMA_Init+0x60>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80003f6:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <MX_DMA_Init+0x60>)
 80003f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	200b      	movs	r0, #11
 8000408:	f000 fb39 	bl	8000a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800040c:	200b      	movs	r0, #11
 800040e:	f000 fb52 	bl	8000ab6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	2100      	movs	r1, #0
 8000416:	200c      	movs	r0, #12
 8000418:	f000 fb31 	bl	8000a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800041c:	200c      	movs	r0, #12
 800041e:	f000 fb4a 	bl	8000ab6 <HAL_NVIC_EnableIRQ>

}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <MX_GPIO_Init+0x2c>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a08      	ldr	r2, [pc, #32]	@ (800045c <MX_GPIO_Init+0x2c>)
 800043c:	f043 0302 	orr.w	r3, r3, #2
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <MX_GPIO_Init+0x2c>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <Error_Handler+0x8>

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_MspInit+0x44>)
 8000474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <HAL_MspInit+0x44>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6613      	str	r3, [r2, #96]	@ 0x60
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <HAL_MspInit+0x44>)
 800048c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800048e:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <HAL_MspInit+0x44>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000494:	6593      	str	r3, [r2, #88]	@ 0x58
 8000496:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b0b0      	sub	sp, #192	@ 0xc0
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2298      	movs	r2, #152	@ 0x98
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f003 ffd7 	bl	8004488 <memset>
  if(hi2c->Instance==I2C1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a5d      	ldr	r2, [pc, #372]	@ (8000654 <HAL_I2C_MspInit+0x1a0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	f040 80b2 	bne.w	800064a <HAL_I2C_MspInit+0x196>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004e6:	2340      	movs	r3, #64	@ 0x40
 80004e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fa74 	bl	80039e0 <HAL_RCCEx_PeriphCLKConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80004fe:	f7ff ffaf 	bl	8000460 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b55      	ldr	r3, [pc, #340]	@ (8000658 <HAL_I2C_MspInit+0x1a4>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000506:	4a54      	ldr	r2, [pc, #336]	@ (8000658 <HAL_I2C_MspInit+0x1a4>)
 8000508:	f043 0302 	orr.w	r3, r3, #2
 800050c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050e:	4b52      	ldr	r3, [pc, #328]	@ (8000658 <HAL_I2C_MspInit+0x1a4>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	f003 0302 	and.w	r3, r3, #2
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800051a:	2340      	movs	r3, #64	@ 0x40
 800051c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000520:	2312      	movs	r3, #18
 8000522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000526:	2301      	movs	r3, #1
 8000528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000532:	2304      	movs	r3, #4
 8000534:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800053c:	4619      	mov	r1, r3
 800053e:	4847      	ldr	r0, [pc, #284]	@ (800065c <HAL_I2C_MspInit+0x1a8>)
 8000540:	f000 fcfa 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800054a:	2312      	movs	r3, #18
 800054c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000556:	2303      	movs	r3, #3
 8000558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800055c:	2304      	movs	r3, #4
 800055e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000562:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000566:	4619      	mov	r1, r3
 8000568:	483c      	ldr	r0, [pc, #240]	@ (800065c <HAL_I2C_MspInit+0x1a8>)
 800056a:	f000 fce5 	bl	8000f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800056e:	4b3a      	ldr	r3, [pc, #232]	@ (8000658 <HAL_I2C_MspInit+0x1a4>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000572:	4a39      	ldr	r2, [pc, #228]	@ (8000658 <HAL_I2C_MspInit+0x1a4>)
 8000574:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000578:	6593      	str	r3, [r2, #88]	@ 0x58
 800057a:	4b37      	ldr	r3, [pc, #220]	@ (8000658 <HAL_I2C_MspInit+0x1a4>)
 800057c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800057e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8000586:	4b36      	ldr	r3, [pc, #216]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 8000588:	4a36      	ldr	r2, [pc, #216]	@ (8000664 <HAL_I2C_MspInit+0x1b0>)
 800058a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800058c:	4b34      	ldr	r3, [pc, #208]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 800058e:	2212      	movs	r2, #18
 8000590:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000592:	4b33      	ldr	r3, [pc, #204]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 8000594:	2210      	movs	r2, #16
 8000596:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000598:	4b31      	ldr	r3, [pc, #196]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800059e:	4b30      	ldr	r3, [pc, #192]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80005b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80005b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80005bc:	4828      	ldr	r0, [pc, #160]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005be:	f000 fa95 	bl	8000aec <HAL_DMA_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <HAL_I2C_MspInit+0x118>
    {
      Error_Handler();
 80005c8:	f7ff ff4a 	bl	8000460 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a24      	ldr	r2, [pc, #144]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80005d2:	4a23      	ldr	r2, [pc, #140]	@ (8000660 <HAL_I2C_MspInit+0x1ac>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 80005da:	4a24      	ldr	r2, [pc, #144]	@ (800066c <HAL_I2C_MspInit+0x1b8>)
 80005dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80005de:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 80005e0:	2211      	movs	r2, #17
 80005e2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e4:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000608:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800060e:	4816      	ldr	r0, [pc, #88]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 8000610:	f000 fa6c 	bl	8000aec <HAL_DMA_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_I2C_MspInit+0x16a>
    {
      Error_Handler();
 800061a:	f7ff ff21 	bl	8000460 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 8000622:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000624:	4a10      	ldr	r2, [pc, #64]	@ (8000668 <HAL_I2C_MspInit+0x1b4>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	201f      	movs	r0, #31
 8000630:	f000 fa25 	bl	8000a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000634:	201f      	movs	r0, #31
 8000636:	f000 fa3e 	bl	8000ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2020      	movs	r0, #32
 8000640:	f000 fa1d 	bl	8000a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000644:	2020      	movs	r0, #32
 8000646:	f000 fa36 	bl	8000ab6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800064a:	bf00      	nop
 800064c:	37c0      	adds	r7, #192	@ 0xc0
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40005400 	.word	0x40005400
 8000658:	40021000 	.word	0x40021000
 800065c:	48000400 	.word	0x48000400
 8000660:	2000007c 	.word	0x2000007c
 8000664:	40020008 	.word	0x40020008
 8000668:	200000dc 	.word	0x200000dc
 800066c:	4002001c 	.word	0x4002001c

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <NMI_Handler+0x4>

08000678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <MemManage_Handler+0x4>

08000688 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <UsageFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c6:	f000 f8bb 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80006d4:	4802      	ldr	r0, [pc, #8]	@ (80006e0 <DMA1_Channel1_IRQHandler+0x10>)
 80006d6:	f000 fb10 	bl	8000cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000007c 	.word	0x2000007c

080006e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80006e8:	4802      	ldr	r0, [pc, #8]	@ (80006f4 <DMA1_Channel2_IRQHandler+0x10>)
 80006ea:	f000 fb06 	bl	8000cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000dc 	.word	0x200000dc

080006f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <I2C1_EV_IRQHandler+0x10>)
 80006fe:	f001 f877 	bl	80017f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028

0800070c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000710:	4802      	ldr	r0, [pc, #8]	@ (800071c <I2C1_ER_IRQHandler+0x10>)
 8000712:	f001 f887 	bl	8001824 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028

08000720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000724:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <SystemInit+0x20>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <SystemInit+0x20>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000744:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800077c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000748:	f7ff ffea 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	@ (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	@ (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000772:	f003 fe91 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000776:	f7ff fd89 	bl	800028c <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800077c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000788:	08004540 	.word	0x08004540
  ldr r2, =_sbss
 800078c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000790:	20000140 	.word	0x20000140

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>

08000796 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f961 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a6:	200f      	movs	r0, #15
 80007a8:	f000 f80e 	bl	80007c8 <HAL_InitTick>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	e001      	b.n	80007bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b8:	f7ff fe58 	bl	800046c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <HAL_InitTick+0x6c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d023      	beq.n	8000824 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <HAL_InitTick+0x70>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_InitTick+0x6c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f96d 	bl	8000ad2 <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10f      	bne.n	800081e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d809      	bhi.n	8000818 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f937 	bl	8000a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000810:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_InitTick+0x74>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	e007      	b.n	8000828 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e004      	b.n	8000828 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e001      	b.n	8000828 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000828:	7bfb      	ldrb	r3, [r7, #15]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <HAL_IncTick+0x20>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_IncTick+0x24>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_IncTick+0x24>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008
 8000864:	2000013c 	.word	0x2000013c

08000868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <HAL_GetTick+0x14>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	2000013c 	.word	0x2000013c

08000880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000888:	f7ff ffee 	bl	8000868 <HAL_GetTick>
 800088c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000898:	d005      	beq.n	80008a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <HAL_Delay+0x44>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008a6:	bf00      	nop
 80008a8:	f7ff ffde 	bl	8000868 <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d8f7      	bhi.n	80008a8 <HAL_Delay+0x28>
  {
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000008 	.word	0x20000008

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	@ (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4907      	ldr	r1, [pc, #28]	@ (8000964 <__NVIC_EnableIRQ+0x38>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	@ (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	@ 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	@ 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a34:	d301      	bcc.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00f      	b.n	8000a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <SysTick_Config+0x40>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	210f      	movs	r1, #15
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff8e 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <SysTick_Config+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <SysTick_Config+0x40>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff29 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a90:	f7ff ff3e 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff ff8e 	bl	80009bc <NVIC_EncodePriority>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff31 	bl	800092c <__NVIC_EnableIRQ>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffa2 	bl	8000a24 <SysTick_Config>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e08d      	b.n	8000c1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b47      	ldr	r3, [pc, #284]	@ (8000c24 <HAL_DMA_Init+0x138>)
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d80f      	bhi.n	8000b2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b45      	ldr	r3, [pc, #276]	@ (8000c28 <HAL_DMA_Init+0x13c>)
 8000b12:	4413      	add	r3, r2
 8000b14:	4a45      	ldr	r2, [pc, #276]	@ (8000c2c <HAL_DMA_Init+0x140>)
 8000b16:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1a:	091b      	lsrs	r3, r3, #4
 8000b1c:	009a      	lsls	r2, r3, #2
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a42      	ldr	r2, [pc, #264]	@ (8000c30 <HAL_DMA_Init+0x144>)
 8000b26:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b28:	e00e      	b.n	8000b48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b40      	ldr	r3, [pc, #256]	@ (8000c34 <HAL_DMA_Init+0x148>)
 8000b32:	4413      	add	r3, r2
 8000b34:	4a3d      	ldr	r2, [pc, #244]	@ (8000c2c <HAL_DMA_Init+0x140>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	091b      	lsrs	r3, r3, #4
 8000b3c:	009a      	lsls	r2, r3, #2
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a3c      	ldr	r2, [pc, #240]	@ (8000c38 <HAL_DMA_Init+0x14c>)
 8000b46:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 f96a 	bl	8000e74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ba8:	d102      	bne.n	8000bb0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000bc4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d010      	beq.n	8000bf0 <HAL_DMA_Init+0x104>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d80c      	bhi.n	8000bf0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f98a 	bl	8000ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	e008      	b.n	8000c02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020407 	.word	0x40020407
 8000c28:	bffdfff8 	.word	0xbffdfff8
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	40020000 	.word	0x40020000
 8000c34:	bffdfbf8 	.word	0xbffdfbf8
 8000c38:	40020400 	.word	0x40020400

08000c3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d005      	beq.n	8000c60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2204      	movs	r2, #4
 8000c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e047      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 020e 	bic.w	r2, r2, #14
 8000c6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c94:	f003 021c 	and.w	r2, r3, #28
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000cac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00c      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000cc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000cce:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	4798      	blx	r3
    }
  }
  return status;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f003 031c 	and.w	r3, r3, #28
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d026      	beq.n	8000d74 <HAL_DMA_IRQHandler+0x7a>
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d021      	beq.n	8000d74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d107      	bne.n	8000d4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0204 	bic.w	r2, r2, #4
 8000d4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f003 021c 	and.w	r2, r3, #28
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d071      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d72:	e06c      	b.n	8000e4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d78:	f003 031c 	and.w	r3, r3, #28
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d02e      	beq.n	8000de6 <HAL_DMA_IRQHandler+0xec>
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d029      	beq.n	8000de6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0320 	and.w	r3, r3, #32
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10b      	bne.n	8000db8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 020a 	bic.w	r2, r2, #10
 8000dae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbc:	f003 021c 	and.w	r2, r3, #28
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d038      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000de4:	e033      	b.n	8000e4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f003 031c 	and.w	r3, r3, #28
 8000dee:	2208      	movs	r2, #8
 8000df0:	409a      	lsls	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d02a      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x156>
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d025      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 020e 	bic.w	r2, r2, #14
 8000e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e18:	f003 021c 	and.w	r2, r3, #28
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d004      	beq.n	8000e50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
}
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e66:	b2db      	uxtb	r3, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d80a      	bhi.n	8000e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e94:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e9c:	e007      	b.n	8000eae <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000ea8:	4413      	add	r3, r2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	3b08      	subs	r3, #8
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000ec4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	2201      	movs	r2, #1
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40020407 	.word	0x40020407
 8000ee4:	4002081c 	.word	0x4002081c
 8000ee8:	cccccccd 	.word	0xcccccccd
 8000eec:	40020880 	.word	0x40020880

08000ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000f04:	4413      	add	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000f12:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	1000823f 	.word	0x1000823f
 8000f34:	40020940 	.word	0x40020940

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f46:	e166      	b.n	8001216 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	4013      	ands	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8158 	beq.w	8001210 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d005      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d130      	bne.n	8000fda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	091b      	lsrs	r3, r3, #4
 8000fc4:	f003 0201 	and.w	r2, r3, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d017      	beq.n	8001016 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d123      	bne.n	800106a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	220f      	movs	r2, #15
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691a      	ldr	r2, [r3, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0203 	and.w	r2, r3, #3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80b2 	beq.w	8001210 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ac:	4b61      	ldr	r3, [pc, #388]	@ (8001234 <HAL_GPIO_Init+0x2fc>)
 80010ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b0:	4a60      	ldr	r2, [pc, #384]	@ (8001234 <HAL_GPIO_Init+0x2fc>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001234 <HAL_GPIO_Init+0x2fc>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c4:	4a5c      	ldr	r2, [pc, #368]	@ (8001238 <HAL_GPIO_Init+0x300>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010ee:	d02b      	beq.n	8001148 <HAL_GPIO_Init+0x210>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a52      	ldr	r2, [pc, #328]	@ (800123c <HAL_GPIO_Init+0x304>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d025      	beq.n	8001144 <HAL_GPIO_Init+0x20c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a51      	ldr	r2, [pc, #324]	@ (8001240 <HAL_GPIO_Init+0x308>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d01f      	beq.n	8001140 <HAL_GPIO_Init+0x208>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a50      	ldr	r2, [pc, #320]	@ (8001244 <HAL_GPIO_Init+0x30c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d019      	beq.n	800113c <HAL_GPIO_Init+0x204>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a4f      	ldr	r2, [pc, #316]	@ (8001248 <HAL_GPIO_Init+0x310>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d013      	beq.n	8001138 <HAL_GPIO_Init+0x200>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a4e      	ldr	r2, [pc, #312]	@ (800124c <HAL_GPIO_Init+0x314>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1fc>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a4d      	ldr	r2, [pc, #308]	@ (8001250 <HAL_GPIO_Init+0x318>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1f8>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4c      	ldr	r2, [pc, #304]	@ (8001254 <HAL_GPIO_Init+0x31c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1f4>
 8001128:	2307      	movs	r3, #7
 800112a:	e00e      	b.n	800114a <HAL_GPIO_Init+0x212>
 800112c:	2308      	movs	r3, #8
 800112e:	e00c      	b.n	800114a <HAL_GPIO_Init+0x212>
 8001130:	2306      	movs	r3, #6
 8001132:	e00a      	b.n	800114a <HAL_GPIO_Init+0x212>
 8001134:	2305      	movs	r3, #5
 8001136:	e008      	b.n	800114a <HAL_GPIO_Init+0x212>
 8001138:	2304      	movs	r3, #4
 800113a:	e006      	b.n	800114a <HAL_GPIO_Init+0x212>
 800113c:	2303      	movs	r3, #3
 800113e:	e004      	b.n	800114a <HAL_GPIO_Init+0x212>
 8001140:	2302      	movs	r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x212>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_GPIO_Init+0x212>
 8001148:	2300      	movs	r3, #0
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	f002 0203 	and.w	r2, r2, #3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4093      	lsls	r3, r2
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800115a:	4937      	ldr	r1, [pc, #220]	@ (8001238 <HAL_GPIO_Init+0x300>)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001168:	4b3b      	ldr	r3, [pc, #236]	@ (8001258 <HAL_GPIO_Init+0x320>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800118c:	4a32      	ldr	r2, [pc, #200]	@ (8001258 <HAL_GPIO_Init+0x320>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001192:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_GPIO_Init+0x320>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011b6:	4a28      	ldr	r2, [pc, #160]	@ (8001258 <HAL_GPIO_Init+0x320>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011bc:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <HAL_GPIO_Init+0x320>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_GPIO_Init+0x320>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_GPIO_Init+0x320>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800120a:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <HAL_GPIO_Init+0x320>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	f47f ae91 	bne.w	8000f48 <HAL_GPIO_Init+0x10>
  }
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00
 8001248:	48001000 	.word	0x48001000
 800124c:	48001400 	.word	0x48001400
 8001250:	48001800 	.word	0x48001800
 8001254:	48001c00 	.word	0x48001c00
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e08d      	b.n	800138a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff f916 	bl	80004b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2224      	movs	r2, #36	@ 0x24
 800128c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e006      	b.n	80012e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80012e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d108      	bne.n	80012fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	e007      	b.n	800130e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800130c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800131c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001320:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001330:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69d9      	ldr	r1, [r3, #28]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2220      	movs	r2, #32
 8001376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	4608      	mov	r0, r1
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	817b      	strh	r3, [r7, #10]
 80013a6:	460b      	mov	r3, r1
 80013a8:	813b      	strh	r3, [r7, #8]
 80013aa:	4613      	mov	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	f040 80f9 	bne.w	80015ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <HAL_I2C_Mem_Write+0x34>
 80013c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0ed      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Mem_Write+0x4e>
 80013de:	2302      	movs	r3, #2
 80013e0:	e0e6      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ea:	f7ff fa3d 	bl	8000868 <HAL_GetTick>
 80013ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2319      	movs	r3, #25
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f001 f83e 	bl	800247e <I2C_WaitOnFlagUntilTimeout>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d1      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2221      	movs	r2, #33	@ 0x21
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2240      	movs	r2, #64	@ 0x40
 8001418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a3a      	ldr	r2, [r7, #32]
 8001426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800142c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001434:	88f8      	ldrh	r0, [r7, #6]
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	8979      	ldrh	r1, [r7, #10]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4603      	mov	r3, r0
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fb81 	bl	8001b4c <I2C_RequestMemoryWrite>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0a9      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001460:	b29b      	uxth	r3, r3
 8001462:	2bff      	cmp	r3, #255	@ 0xff
 8001464:	d90e      	bls.n	8001484 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	22ff      	movs	r2, #255	@ 0xff
 800146a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001470:	b2da      	uxtb	r2, r3
 8001472:	8979      	ldrh	r1, [r7, #10]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f001 f9c1 	bl	8002804 <I2C_TransferConfig>
 8001482:	e00f      	b.n	80014a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f001 f9b0 	bl	8002804 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f001 f841 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e07b      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d034      	beq.n	800155c <HAL_I2C_Mem_Write+0x1c8>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d130      	bne.n	800155c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001500:	2200      	movs	r2, #0
 8001502:	2180      	movs	r1, #128	@ 0x80
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 ffba 	bl	800247e <I2C_WaitOnFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e04d      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001518:	b29b      	uxth	r3, r3
 800151a:	2bff      	cmp	r3, #255	@ 0xff
 800151c:	d90e      	bls.n	800153c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	22ff      	movs	r2, #255	@ 0xff
 8001522:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001528:	b2da      	uxtb	r2, r3
 800152a:	8979      	ldrh	r1, [r7, #10]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f001 f965 	bl	8002804 <I2C_TransferConfig>
 800153a:	e00f      	b.n	800155c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154a:	b2da      	uxtb	r2, r3
 800154c:	8979      	ldrh	r1, [r7, #10]
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f001 f954 	bl	8002804 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d19e      	bne.n	80014a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f001 f827 	bl	80025be <I2C_WaitOnSTOPFlagUntilTimeout>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e01a      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_I2C_Mem_Write+0x224>)
 800158e:	400b      	ands	r3, r1
 8001590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
  }
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	fe00e800 	.word	0xfe00e800

080015bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	817b      	strh	r3, [r7, #10]
 80015ce:	460b      	mov	r3, r1
 80015d0:	813b      	strh	r3, [r7, #8]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b20      	cmp	r3, #32
 80015e0:	f040 80fd 	bne.w	80017de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_I2C_Mem_Read+0x34>
 80015ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0f1      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_I2C_Mem_Read+0x4e>
 8001606:	2302      	movs	r3, #2
 8001608:	e0ea      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001612:	f7ff f929 	bl	8000868 <HAL_GetTick>
 8001616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2319      	movs	r3, #25
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 ff2a 	bl	800247e <I2C_WaitOnFlagUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0d5      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2222      	movs	r2, #34	@ 0x22
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a3a      	ldr	r2, [r7, #32]
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800165c:	88f8      	ldrh	r0, [r7, #6]
 800165e:	893a      	ldrh	r2, [r7, #8]
 8001660:	8979      	ldrh	r1, [r7, #10]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4603      	mov	r3, r0
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fac1 	bl	8001bf4 <I2C_RequestMemoryRead>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0ad      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001688:	b29b      	uxth	r3, r3
 800168a:	2bff      	cmp	r3, #255	@ 0xff
 800168c:	d90e      	bls.n	80016ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2201      	movs	r2, #1
 8001692:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001698:	b2da      	uxtb	r2, r3
 800169a:	8979      	ldrh	r1, [r7, #10]
 800169c:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <HAL_I2C_Mem_Read+0x22c>)
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f001 f8ad 	bl	8002804 <I2C_TransferConfig>
 80016aa:	e00f      	b.n	80016cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	8979      	ldrh	r1, [r7, #10]
 80016be:	4b4a      	ldr	r3, [pc, #296]	@ (80017e8 <HAL_I2C_Mem_Read+0x22c>)
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f001 f89c 	bl	8002804 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fed1 	bl	800247e <I2C_WaitOnFlagUntilTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07c      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001702:	3b01      	subs	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170e:	b29b      	uxth	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d034      	beq.n	800178c <HAL_I2C_Mem_Read+0x1d0>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001726:	2b00      	cmp	r3, #0
 8001728:	d130      	bne.n	800178c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fea2 	bl	800247e <I2C_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e04d      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2bff      	cmp	r3, #255	@ 0xff
 800174c:	d90e      	bls.n	800176c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001758:	b2da      	uxtb	r2, r3
 800175a:	8979      	ldrh	r1, [r7, #10]
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f001 f84d 	bl	8002804 <I2C_TransferConfig>
 800176a:	e00f      	b.n	800178c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177a:	b2da      	uxtb	r2, r3
 800177c:	8979      	ldrh	r1, [r7, #10]
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f001 f83c 	bl	8002804 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d19a      	bne.n	80016cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 ff0f 	bl	80025be <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e01a      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2220      	movs	r2, #32
 80017b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_I2C_Mem_Read+0x230>)
 80017be:	400b      	ands	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	80002400 	.word	0x80002400
 80017ec:	fe00e800 	.word	0xfe00e800

080017f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
  }
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00f      	beq.n	8001866 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00a      	beq.n	8001866 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001864:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00f      	beq.n	8001890 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00a      	beq.n	8001890 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f043 0208 	orr.w	r2, r3, #8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00f      	beq.n	80018ba <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00a      	beq.n	80018ba <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a8:	f043 0202 	orr.w	r2, r3, #2
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 030b 	and.w	r3, r3, #11
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80018ca:	68f9      	ldr	r1, [r7, #12]
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 fc7d 	bl	80021cc <I2C_ITError>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	70fb      	strb	r3, [r7, #3]
 800190e:	4613      	mov	r3, r2
 8001910:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <I2C_Slave_ISR_IT+0x24>
 800197a:	2302      	movs	r3, #2
 800197c:	e0e2      	b.n	8001b44 <I2C_Slave_ISR_IT+0x1ea>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f003 0320 	and.w	r3, r3, #32
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800199a:	6939      	ldr	r1, [r7, #16]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fa5d 	bl	8001e5c <I2C_ITSlaveCplt>
 80019a2:	e0ca      	b.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d04b      	beq.n	8001a46 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d046      	beq.n	8001a46 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d128      	bne.n	8001a14 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b28      	cmp	r3, #40	@ 0x28
 80019cc:	d108      	bne.n	80019e0 <I2C_Slave_ISR_IT+0x86>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80019d4:	d104      	bne.n	80019e0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fba3 	bl	8002124 <I2C_ITListenCplt>
 80019de:	e031      	b.n	8001a44 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b29      	cmp	r3, #41	@ 0x29
 80019ea:	d10e      	bne.n	8001a0a <I2C_Slave_ISR_IT+0xb0>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019f2:	d00a      	beq.n	8001a0a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2210      	movs	r2, #16
 80019fa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fcfc 	bl	80023fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f9ce 	bl	8001da4 <I2C_ITSlaveSeqCplt>
 8001a08:	e01c      	b.n	8001a44 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2210      	movs	r2, #16
 8001a10:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a12:	e08f      	b.n	8001b34 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2210      	movs	r2, #16
 8001a1a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <I2C_Slave_ISR_IT+0xdc>
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d17e      	bne.n	8001b34 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fbc5 	bl	80021cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a42:	e077      	b.n	8001b34 <I2C_Slave_ISR_IT+0x1da>
 8001a44:	e076      	b.n	8001b34 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d02f      	beq.n	8001ab0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d02a      	beq.n	8001ab0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d018      	beq.n	8001a96 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d14b      	bne.n	8001b38 <I2C_Slave_ISR_IT+0x1de>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001aa6:	d047      	beq.n	8001b38 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f97b 	bl	8001da4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001aae:	e043      	b.n	8001b38 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ac4:	6939      	ldr	r1, [r7, #16]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f8e8 	bl	8001c9c <I2C_ITAddrCplt>
 8001acc:	e035      	b.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d030      	beq.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d02b      	beq.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d018      	beq.n	8001b1e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	781a      	ldrb	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001b1c:	e00d      	b.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b24:	d002      	beq.n	8001b2c <I2C_Slave_ISR_IT+0x1d2>
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f939 	bl	8001da4 <I2C_ITSlaveSeqCplt>
 8001b32:	e002      	b.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8001b34:	bf00      	nop
 8001b36:	e000      	b.n	8001b3a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8001b38:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	817b      	strh	r3, [r7, #10]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	813b      	strh	r3, [r7, #8]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <I2C_RequestMemoryWrite+0xa4>)
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fe45 	bl	8002804 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	69b9      	ldr	r1, [r7, #24]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fcd6 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e02c      	b.n	8001be8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b94:	893b      	ldrh	r3, [r7, #8]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b9e:	e015      	b.n	8001bcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ba0:	893b      	ldrh	r3, [r7, #8]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	69b9      	ldr	r1, [r7, #24]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fcbc 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e012      	b.n	8001be8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc2:	893b      	ldrh	r3, [r7, #8]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2180      	movs	r1, #128	@ 0x80
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fc51 	bl	800247e <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	80002000 	.word	0x80002000

08001bf4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	460b      	mov	r3, r1
 8001c08:	813b      	strh	r3, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	8979      	ldrh	r1, [r7, #10]
 8001c14:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <I2C_RequestMemoryRead+0xa4>)
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fdf2 	bl	8002804 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fc83 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e02c      	b.n	8001c8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d105      	bne.n	8001c46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c3a:	893b      	ldrh	r3, [r7, #8]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c44:	e015      	b.n	8001c72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c46:	893b      	ldrh	r3, [r7, #8]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fc69 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e012      	b.n	8001c8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c68:	893b      	ldrh	r3, [r7, #8]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2140      	movs	r1, #64	@ 0x40
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fbfe 	bl	800247e <I2C_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	80002000 	.word	0x80002000

08001c9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001cb2:	2b28      	cmp	r3, #40	@ 0x28
 8001cb4:	d16a      	bne.n	8001d8c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001cd4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001cf0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d138      	bne.n	8001d6c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001cfa:	897b      	ldrh	r3, [r7, #10]
 8001cfc:	09db      	lsrs	r3, r3, #7
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	89bb      	ldrh	r3, [r7, #12]
 8001d02:	4053      	eors	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f003 0306 	and.w	r3, r3, #6
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11c      	bne.n	8001d48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d13b      	bne.n	8001d9c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2208      	movs	r2, #8
 8001d30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d3a:	89ba      	ldrh	r2, [r7, #12]
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fdde 	bl	8001902 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001d46:	e029      	b.n	8001d9c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001d48:	893b      	ldrh	r3, [r7, #8]
 8001d4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fd89 	bl	8002868 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d5e:	89ba      	ldrh	r2, [r7, #12]
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	4619      	mov	r1, r3
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fdcc 	bl	8001902 <HAL_I2C_AddrCallback>
}
 8001d6a:	e017      	b.n	8001d9c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fd79 	bl	8002868 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d7e:	89ba      	ldrh	r2, [r7, #12]
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fdbc 	bl	8001902 <HAL_I2C_AddrCallback>
}
 8001d8a:	e007      	b.n	8001d9c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2208      	movs	r2, #8
 8001d92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e00c      	b.n	8001df2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001df0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b29      	cmp	r3, #41	@ 0x29
 8001dfc:	d112      	bne.n	8001e24 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2228      	movs	r2, #40	@ 0x28
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2221      	movs	r2, #33	@ 0x21
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fd2a 	bl	8002868 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fd5c 	bl	80018da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001e22:	e017      	b.n	8001e54 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e2e:	d111      	bne.n	8001e54 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2228      	movs	r2, #40	@ 0x28
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2222      	movs	r2, #34	@ 0x22
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e3e:	2102      	movs	r1, #2
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fd11 	bl	8002868 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fd4d 	bl	80018ee <HAL_I2C_SlaveRxCpltCallback>
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e7e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2220      	movs	r2, #32
 8001e86:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	2b21      	cmp	r3, #33	@ 0x21
 8001e8c:	d002      	beq.n	8001e94 <I2C_ITSlaveCplt+0x38>
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
 8001e90:	2b29      	cmp	r3, #41	@ 0x29
 8001e92:	d108      	bne.n	8001ea6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001e94:	f248 0101 	movw	r1, #32769	@ 0x8001
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fce5 	bl	8002868 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2221      	movs	r2, #33	@ 0x21
 8001ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ea4:	e019      	b.n	8001eda <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	2b22      	cmp	r3, #34	@ 0x22
 8001eaa:	d002      	beq.n	8001eb2 <I2C_ITSlaveCplt+0x56>
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8001eb0:	d108      	bne.n	8001ec4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001eb2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fcd6 	bl	8002868 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2222      	movs	r2, #34	@ 0x22
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec2:	e00a      	b.n	8001eda <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	2b28      	cmp	r3, #40	@ 0x28
 8001ec8:	d107      	bne.n	8001eda <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001eca:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fcca 	bl	8002868 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ee8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b89      	ldr	r3, [pc, #548]	@ (800211c <I2C_ITSlaveCplt+0x2c0>)
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fa7d 	bl	80023fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d013      	beq.n	8001f32 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f18:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01f      	beq.n	8001f62 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f30:	e017      	b.n	8001f62 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d012      	beq.n	8001f62 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f4a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00c      	beq.n	8001fae <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d049      	beq.n	8002062 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d044      	beq.n	8002062 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d128      	bne.n	8002034 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b28      	cmp	r3, #40	@ 0x28
 8001fec:	d108      	bne.n	8002000 <I2C_ITSlaveCplt+0x1a4>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ff4:	d104      	bne.n	8002000 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ff6:	6979      	ldr	r1, [r7, #20]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f893 	bl	8002124 <I2C_ITListenCplt>
 8001ffe:	e030      	b.n	8002062 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b29      	cmp	r3, #41	@ 0x29
 800200a:	d10e      	bne.n	800202a <I2C_ITSlaveCplt+0x1ce>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002012:	d00a      	beq.n	800202a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2210      	movs	r2, #16
 800201a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f9ec 	bl	80023fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff febe 	bl	8001da4 <I2C_ITSlaveSeqCplt>
 8002028:	e01b      	b.n	8002062 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2210      	movs	r2, #16
 8002030:	61da      	str	r2, [r3, #28]
 8002032:	e016      	b.n	8002062 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2210      	movs	r2, #16
 800203a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	f043 0204 	orr.w	r2, r3, #4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <I2C_ITSlaveCplt+0x1fa>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002054:	d105      	bne.n	8002062 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f8b5 	bl	80021cc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8a4 	bl	80021cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b28      	cmp	r3, #40	@ 0x28
 800208e:	d141      	bne.n	8002114 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002090:	6979      	ldr	r1, [r7, #20]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f846 	bl	8002124 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002098:	e03c      	b.n	8002114 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020a2:	d014      	beq.n	80020ce <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff fe7d 	bl	8001da4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002120 <I2C_ITSlaveCplt+0x2c4>)
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fc29 	bl	800191e <HAL_I2C_ListenCpltCallback>
}
 80020cc:	e022      	b.n	8002114 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b22      	cmp	r3, #34	@ 0x22
 80020d8:	d10e      	bne.n	80020f8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fbfc 	bl	80018ee <HAL_I2C_SlaveRxCpltCallback>
}
 80020f6:	e00d      	b.n	8002114 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fbe3 	bl	80018da <HAL_I2C_SlaveTxCpltCallback>
}
 8002114:	bf00      	nop
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	fe00e800 	.word	0xfe00e800
 8002120:	ffff0000 	.word	0xffff0000

08002124 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a25      	ldr	r2, [pc, #148]	@ (80021c8 <I2C_ITListenCplt+0xa4>)
 8002132:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d022      	beq.n	80021a0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	f043 0204 	orr.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021a0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fb5f 	bl	8002868 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2210      	movs	r2, #16
 80021b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fbaf 	bl	800191e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	ffff0000 	.word	0xffff0000

080021cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021dc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a6d      	ldr	r2, [pc, #436]	@ (80023a0 <I2C_ITError+0x1d4>)
 80021ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b28      	cmp	r3, #40	@ 0x28
 8002202:	d005      	beq.n	8002210 <I2C_ITError+0x44>
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b29      	cmp	r3, #41	@ 0x29
 8002208:	d002      	beq.n	8002210 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b2a      	cmp	r3, #42	@ 0x2a
 800220e:	d10b      	bne.n	8002228 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002210:	2103      	movs	r1, #3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fb28 	bl	8002868 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2228      	movs	r2, #40	@ 0x28
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a60      	ldr	r2, [pc, #384]	@ (80023a4 <I2C_ITError+0x1d8>)
 8002224:	635a      	str	r2, [r3, #52]	@ 0x34
 8002226:	e030      	b.n	800228a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002228:	f248 0103 	movw	r1, #32771	@ 0x8003
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fb1b 	bl	8002868 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8e1 	bl	80023fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b60      	cmp	r3, #96	@ 0x60
 8002242:	d01f      	beq.n	8002284 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b20      	cmp	r3, #32
 8002258:	d114      	bne.n	8002284 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d109      	bne.n	800227c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2210      	movs	r2, #16
 800226e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2220      	movs	r2, #32
 8002282:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	2b00      	cmp	r3, #0
 8002296:	d039      	beq.n	800230c <I2C_ITError+0x140>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b11      	cmp	r3, #17
 800229c:	d002      	beq.n	80022a4 <I2C_ITError+0xd8>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b21      	cmp	r3, #33	@ 0x21
 80022a2:	d133      	bne.n	800230c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022b2:	d107      	bne.n	80022c4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fdc5 	bl	8000e58 <HAL_DMA_GetState>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d017      	beq.n	8002304 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d8:	4a33      	ldr	r2, [pc, #204]	@ (80023a8 <I2C_ITError+0x1dc>)
 80022da:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fca7 	bl	8000c3c <HAL_DMA_Abort_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d04d      	beq.n	8002390 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022fe:	4610      	mov	r0, r2
 8002300:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002302:	e045      	b.n	8002390 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f851 	bl	80023ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800230a:	e041      	b.n	8002390 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d039      	beq.n	8002388 <I2C_ITError+0x1bc>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b12      	cmp	r3, #18
 8002318:	d002      	beq.n	8002320 <I2C_ITError+0x154>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b22      	cmp	r3, #34	@ 0x22
 800231e:	d133      	bne.n	8002388 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800232a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800232e:	d107      	bne.n	8002340 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800233e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fd87 	bl	8000e58 <HAL_DMA_GetState>
 800234a:	4603      	mov	r3, r0
 800234c:	2b01      	cmp	r3, #1
 800234e:	d017      	beq.n	8002380 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	4a14      	ldr	r2, [pc, #80]	@ (80023a8 <I2C_ITError+0x1dc>)
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fc69 	bl	8000c3c <HAL_DMA_Abort_IT>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d011      	beq.n	8002394 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800237a:	4610      	mov	r0, r2
 800237c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800237e:	e009      	b.n	8002394 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f813 	bl	80023ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002386:	e005      	b.n	8002394 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f80f 	bl	80023ac <I2C_TreatErrorCallback>
  }
}
 800238e:	e002      	b.n	8002396 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002394:	bf00      	nop
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	ffff0000 	.word	0xffff0000
 80023a4:	0800195b 	.word	0x0800195b
 80023a8:	08002443 	.word	0x08002443

080023ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b60      	cmp	r3, #96	@ 0x60
 80023be:	d10e      	bne.n	80023de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fab5 	bl	8001946 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023dc:	e009      	b.n	80023f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff faa0 	bl	8001932 <HAL_I2C_ErrorCallback>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b02      	cmp	r3, #2
 800240e:	d103      	bne.n	8002418 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d007      	beq.n	8002436 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	619a      	str	r2, [r3, #24]
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245c:	2200      	movs	r2, #0
 800245e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	2200      	movs	r2, #0
 800246e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff ff9b 	bl	80023ac <I2C_TreatErrorCallback>
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248e:	e03b      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f8d5 	bl	8002644 <I2C_IsErrorOccurred>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e041      	b.n	8002528 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d02d      	beq.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ac:	f7fe f9dc 	bl	8000868 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d302      	bcc.n	80024c2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d122      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4013      	ands	r3, r2
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d113      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00f      	b.n	8002528 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4013      	ands	r3, r2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	429a      	cmp	r2, r3
 8002524:	d0b4      	beq.n	8002490 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800253c:	e033      	b.n	80025a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f87e 	bl	8002644 <I2C_IsErrorOccurred>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e031      	b.n	80025b6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d025      	beq.n	80025a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7fe f985 	bl	8000868 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11a      	bne.n	80025a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d013      	beq.n	80025a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e007      	b.n	80025b6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d1c4      	bne.n	800253e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ca:	e02f      	b.n	800262c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f837 	bl	8002644 <I2C_IsErrorOccurred>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e02d      	b.n	800263c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7fe f942 	bl	8000868 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11a      	bne.n	800262c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b20      	cmp	r3, #32
 8002602:	d013      	beq.n	800262c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e007      	b.n	800263c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d1c8      	bne.n	80025cc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	@ 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d068      	beq.n	8002742 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2210      	movs	r2, #16
 8002676:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002678:	e049      	b.n	800270e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d045      	beq.n	800270e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7fe f8f1 	bl	8000868 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <I2C_IsErrorOccurred+0x54>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d13a      	bne.n	800270e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ba:	d121      	bne.n	8002700 <I2C_IsErrorOccurred+0xbc>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026c2:	d01d      	beq.n	8002700 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d01a      	beq.n	8002700 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026da:	f7fe f8c5 	bl	8000868 <HAL_GetTick>
 80026de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e0:	e00e      	b.n	8002700 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026e2:	f7fe f8c1 	bl	8000868 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b19      	cmp	r3, #25
 80026ee:	d907      	bls.n	8002700 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f043 0320 	orr.w	r3, r3, #32
 80026f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80026fe:	e006      	b.n	800270e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b20      	cmp	r3, #32
 800270c:	d1e9      	bne.n	80026e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b20      	cmp	r3, #32
 800271a:	d003      	beq.n	8002724 <I2C_IsErrorOccurred+0xe0>
 800271c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0aa      	beq.n	800267a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2220      	movs	r2, #32
 8002732:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002764:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002786:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01c      	beq.n	80027f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f7ff fe1e 	bl	80023fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <I2C_IsErrorOccurred+0x1bc>)
 80027ca:	400b      	ands	r3, r1
 80027cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80027f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3728      	adds	r7, #40	@ 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	fe00e800 	.word	0xfe00e800

08002804 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	4613      	mov	r3, r2
 8002814:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800281c:	7a7b      	ldrb	r3, [r7, #9]
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002824:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	4313      	orrs	r3, r2
 800282e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002832:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	0d5b      	lsrs	r3, r3, #21
 800283e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <I2C_TransferConfig+0x60>)
 8002844:	430b      	orrs	r3, r1
 8002846:	43db      	mvns	r3, r3
 8002848:	ea02 0103 	and.w	r1, r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	03ff63ff 	.word	0x03ff63ff

08002868 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00f      	beq.n	80028a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002888:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002896:	2b28      	cmp	r3, #40	@ 0x28
 8002898:	d003      	beq.n	80028a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80028a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00f      	beq.n	80028cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80028b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028c0:	2b28      	cmp	r3, #40	@ 0x28
 80028c2:	d003      	beq.n	80028cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80028ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	da03      	bge.n	80028dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d103      	bne.n	80028ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d103      	bne.n	80028f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	2b40      	cmp	r3, #64	@ 0x40
 80028fc:	d103      	bne.n	8002906 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002904:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43da      	mvns	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	400a      	ands	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b20      	cmp	r3, #32
 8002938:	d138      	bne.n	80029ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002944:	2302      	movs	r3, #2
 8002946:	e032      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	@ 0x24
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d139      	bne.n	8002a44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029da:	2302      	movs	r3, #2
 80029dc:	e033      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2224      	movs	r2, #36	@ 0x24
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a64:	d102      	bne.n	8002a6c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a6a:	e00b      	b.n	8002a84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7a:	d102      	bne.n	8002a82 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a80:	e000      	b.n	8002a84 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002a82:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007000 	.word	0x40007000

08002a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d141      	bne.n	8002b26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aae:	d131      	bne.n	8002b14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab0:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ab6:	4a46      	ldr	r2, [pc, #280]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002abc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ac8:	4a41      	ldr	r2, [pc, #260]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ad0:	4b40      	ldr	r3, [pc, #256]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2232      	movs	r2, #50	@ 0x32
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	4a3f      	ldr	r2, [pc, #252]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ae6:	e002      	b.n	8002aee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aee:	4b38      	ldr	r3, [pc, #224]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afa:	d102      	bne.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f2      	bne.n	8002ae8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b02:	4b33      	ldr	r3, [pc, #204]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d158      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e057      	b.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b24:	e04d      	b.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b2c:	d141      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b2e:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3a:	d131      	bne.n	8002ba0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b3c:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b42:	4a23      	ldr	r2, [pc, #140]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b54:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2232      	movs	r2, #50	@ 0x32
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	0c9b      	lsrs	r3, r3, #18
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b72:	e002      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b86:	d102      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f2      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9a:	d112      	bne.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e011      	b.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bb0:	e007      	b.n	8002bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bba:	4a05      	ldr	r2, [pc, #20]	@ (8002bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	431bde83 	.word	0x431bde83

08002bdc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	@ 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f000 bc68 	b.w	80034c0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf0:	4b97      	ldr	r3, [pc, #604]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bfa:	4b95      	ldr	r3, [pc, #596]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80e6 	beq.w	8002dde <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4c>
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	f040 808d 	bne.w	8002d3a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 8089 	bne.w	8002d3a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c28:	4b89      	ldr	r3, [pc, #548]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_RCC_OscConfig+0x66>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f000 bc3f 	b.w	80034c0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c46:	4b82      	ldr	r3, [pc, #520]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_RCC_OscConfig+0x80>
 8002c52:	4b7f      	ldr	r3, [pc, #508]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c5a:	e005      	b.n	8002c68 <HAL_RCC_OscConfig+0x8c>
 8002c5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d224      	bcs.n	8002cb6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fdf5 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f000 bc1f 	b.w	80034c0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c82:	4b73      	ldr	r3, [pc, #460]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a72      	ldr	r2, [pc, #456]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c88:	f043 0308 	orr.w	r3, r3, #8
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b70      	ldr	r3, [pc, #448]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	496d      	ldr	r1, [pc, #436]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	4968      	ldr	r1, [pc, #416]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
 8002cb4:	e025      	b.n	8002d02 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb6:	4b66      	ldr	r3, [pc, #408]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a65      	ldr	r2, [pc, #404]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b63      	ldr	r3, [pc, #396]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	4960      	ldr	r1, [pc, #384]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	495b      	ldr	r1, [pc, #364]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fdb4 	bl	8003860 <RCC_SetFlashLatencyFromMSIRange>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e3de      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d02:	f000 fd21 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b51      	ldr	r3, [pc, #324]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4950      	ldr	r1, [pc, #320]	@ (8002e54 <HAL_RCC_OscConfig+0x278>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d22:	4b4e      	ldr	r3, [pc, #312]	@ (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fd fd4e 	bl	80007c8 <HAL_InitTick>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d052      	beq.n	8002ddc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	e3c2      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d032      	beq.n	8002da8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d42:	4b43      	ldr	r3, [pc, #268]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a42      	ldr	r2, [pc, #264]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d4e:	f7fd fd8b 	bl	8000868 <HAL_GetTick>
 8002d52:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d56:	f7fd fd87 	bl	8000868 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e3ab      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d68:	4b39      	ldr	r3, [pc, #228]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d74:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a35      	ldr	r2, [pc, #212]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b33      	ldr	r3, [pc, #204]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	4930      	ldr	r1, [pc, #192]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d92:	4b2f      	ldr	r3, [pc, #188]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	492b      	ldr	r1, [pc, #172]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
 8002da6:	e01a      	b.n	8002dde <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002da8:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a28      	ldr	r2, [pc, #160]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002db4:	f7fd fd58 	bl	8000868 <HAL_GetTick>
 8002db8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dbc:	f7fd fd54 	bl	8000868 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e378      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dce:	4b20      	ldr	r3, [pc, #128]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1e0>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d073      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_OscConfig+0x220>
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d10e      	bne.n	8002e14 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d063      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2f4>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d15f      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e355      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x250>
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a0b      	ldr	r2, [pc, #44]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e025      	b.n	8002e78 <HAL_RCC_OscConfig+0x29c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e34:	d114      	bne.n	8002e60 <HAL_RCC_OscConfig+0x284>
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a05      	ldr	r2, [pc, #20]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a02      	ldr	r2, [pc, #8]	@ (8002e50 <HAL_RCC_OscConfig+0x274>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e013      	b.n	8002e78 <HAL_RCC_OscConfig+0x29c>
 8002e50:	40021000 	.word	0x40021000
 8002e54:	080044f8 	.word	0x080044f8
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	4b8f      	ldr	r3, [pc, #572]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a8e      	ldr	r2, [pc, #568]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a8b      	ldr	r2, [pc, #556]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fd fcf2 	bl	8000868 <HAL_GetTick>
 8002e84:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fd fcee 	bl	8000868 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	@ 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e312      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9a:	4b81      	ldr	r3, [pc, #516]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x2ac>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fd fcde 	bl	8000868 <HAL_GetTick>
 8002eac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fd fcda 	bl	8000868 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	@ 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e2fe      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec2:	4b77      	ldr	r3, [pc, #476]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2d4>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d060      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x314>
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d119      	bne.n	8002f1e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d116      	bne.n	8002f1e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_OscConfig+0x32c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e2db      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b65      	ldr	r3, [pc, #404]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	4962      	ldr	r1, [pc, #392]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f1c:	e040      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d023      	beq.n	8002f6e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f26:	4b5e      	ldr	r3, [pc, #376]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a5d      	ldr	r2, [pc, #372]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fd fc99 	bl	8000868 <HAL_GetTick>
 8002f36:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7fd fc95 	bl	8000868 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e2b9      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4c:	4b54      	ldr	r3, [pc, #336]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b51      	ldr	r3, [pc, #324]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	494e      	ldr	r1, [pc, #312]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
 8002f6c:	e018      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4b      	ldr	r2, [pc, #300]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fc75 	bl	8000868 <HAL_GetTick>
 8002f7e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f82:	f7fd fc71 	bl	8000868 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e295      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f94:	4b42      	ldr	r3, [pc, #264]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8082 	beq.w	80030b2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d05f      	beq.n	8003076 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fbc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d037      	beq.n	800303c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d006      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e26d      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01b      	beq.n	8003026 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002fee:	4b2c      	ldr	r3, [pc, #176]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	f023 0301 	bic.w	r3, r3, #1
 8002ffa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ffe:	f7fd fc33 	bl	8000868 <HAL_GetTick>
 8003002:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003006:	f7fd fc2f 	bl	8000868 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b11      	cmp	r3, #17
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e253      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003018:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ef      	bne.n	8003006 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003026:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800302c:	f023 0210 	bic.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	491a      	ldr	r1, [pc, #104]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303c:	4b18      	ldr	r3, [pc, #96]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003042:	4a17      	ldr	r2, [pc, #92]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fd fc0c 	bl	8000868 <HAL_GetTick>
 8003050:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003054:	f7fd fc08 	bl	8000868 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b11      	cmp	r3, #17
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e22c      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003066:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ef      	beq.n	8003054 <HAL_RCC_OscConfig+0x478>
 8003074:	e01d      	b.n	80030b2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003076:	4b0a      	ldr	r3, [pc, #40]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307c:	4a08      	ldr	r2, [pc, #32]	@ (80030a0 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fd fbef 	bl	8000868 <HAL_GetTick>
 800308a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308e:	f7fd fbeb 	bl	8000868 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b11      	cmp	r3, #17
 800309a:	d903      	bls.n	80030a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e20f      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
 80030a0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a4:	4b83      	ldr	r3, [pc, #524]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ed      	bne.n	800308e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80bd 	beq.w	800323a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030c6:	4b7b      	ldr	r3, [pc, #492]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10e      	bne.n	80030f0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b78      	ldr	r3, [pc, #480]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d6:	4a77      	ldr	r2, [pc, #476]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030de:	4b75      	ldr	r3, [pc, #468]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f0:	4b71      	ldr	r3, [pc, #452]	@ (80032b8 <HAL_RCC_OscConfig+0x6dc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d118      	bne.n	800312e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fc:	4b6e      	ldr	r3, [pc, #440]	@ (80032b8 <HAL_RCC_OscConfig+0x6dc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6d      	ldr	r2, [pc, #436]	@ (80032b8 <HAL_RCC_OscConfig+0x6dc>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003108:	f7fd fbae 	bl	8000868 <HAL_GetTick>
 800310c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fd fbaa 	bl	8000868 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1ce      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003122:	4b65      	ldr	r3, [pc, #404]	@ (80032b8 <HAL_RCC_OscConfig+0x6dc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d02c      	beq.n	8003194 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800313a:	4b5e      	ldr	r3, [pc, #376]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314c:	4959      	ldr	r1, [pc, #356]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d010      	beq.n	8003182 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003160:	4b54      	ldr	r3, [pc, #336]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003166:	4a53      	ldr	r2, [pc, #332]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003170:	4b50      	ldr	r3, [pc, #320]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	4a4f      	ldr	r2, [pc, #316]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003180:	e018      	b.n	80031b4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003182:	4b4c      	ldr	r3, [pc, #304]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003188:	4a4a      	ldr	r2, [pc, #296]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003192:	e00f      	b.n	80031b4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003194:	4b47      	ldr	r3, [pc, #284]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	4a46      	ldr	r2, [pc, #280]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031a4:	4b43      	ldr	r3, [pc, #268]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	4a42      	ldr	r2, [pc, #264]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d016      	beq.n	80031ea <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031bc:	f7fd fb54 	bl	8000868 <HAL_GetTick>
 80031c0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c4:	f7fd fb50 	bl	8000868 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e172      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031da:	4b36      	ldr	r3, [pc, #216]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ed      	beq.n	80031c4 <HAL_RCC_OscConfig+0x5e8>
 80031e8:	e01d      	b.n	8003226 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fd fb3d 	bl	8000868 <HAL_GetTick>
 80031ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f7fd fb39 	bl	8000868 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003200:	4293      	cmp	r3, r2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e15b      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003208:	4b2a      	ldr	r3, [pc, #168]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ed      	bne.n	80031f2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003216:	4b27      	ldr	r3, [pc, #156]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321c:	4a25      	ldr	r2, [pc, #148]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800321e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003222:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322e:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	4a20      	ldr	r2, [pc, #128]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003238:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d041      	beq.n	80032ca <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01c      	beq.n	8003288 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003250:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003254:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fd fb03 	bl	8000868 <HAL_GetTick>
 8003262:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003266:	f7fd faff 	bl	8000868 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e123      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003278:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800327a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0ef      	beq.n	8003266 <HAL_RCC_OscConfig+0x68a>
 8003286:	e020      	b.n	80032ca <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003288:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 800328a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_OscConfig+0x6d8>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fd fae6 	bl	8000868 <HAL_GetTick>
 800329c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800329e:	e00d      	b.n	80032bc <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a0:	f7fd fae2 	bl	8000868 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d906      	bls.n	80032bc <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e106      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032bc:	4b82      	ldr	r3, [pc, #520]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80032be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ea      	bne.n	80032a0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80f5 	beq.w	80034be <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f040 80cb 	bne.w	8003474 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032de:	4b7a      	ldr	r3, [pc, #488]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d12c      	bne.n	800334c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fc:	3b01      	subs	r3, #1
 80032fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d123      	bne.n	800334c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d11b      	bne.n	800334c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d113      	bne.n	800334c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d109      	bne.n	800334c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d06d      	beq.n	8003428 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d068      	beq.n	8003424 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003352:	4b5d      	ldr	r3, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800335e:	4b5a      	ldr	r3, [pc, #360]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0a8      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800336e:	4b56      	ldr	r3, [pc, #344]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003374:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337a:	f7fd fa75 	bl	8000868 <HAL_GetTick>
 800337e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd fa71 	bl	8000868 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e095      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b4c      	ldr	r3, [pc, #304]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a0:	4b49      	ldr	r3, [pc, #292]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4b49      	ldr	r3, [pc, #292]	@ (80034cc <HAL_RCC_OscConfig+0x8f0>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033ba:	0212      	lsls	r2, r2, #8
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0552      	lsls	r2, r2, #21
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0652      	lsls	r2, r2, #25
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033da:	06d2      	lsls	r2, r2, #27
 80033dc:	430a      	orrs	r2, r1
 80033de:	493a      	ldr	r1, [pc, #232]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033e4:	4b38      	ldr	r3, [pc, #224]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a37      	ldr	r2, [pc, #220]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f0:	4b35      	ldr	r3, [pc, #212]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a34      	ldr	r2, [pc, #208]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033fc:	f7fd fa34 	bl	8000868 <HAL_GetTick>
 8003400:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd fa30 	bl	8000868 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e054      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	4b2c      	ldr	r3, [pc, #176]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003422:	e04c      	b.n	80034be <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e04b      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003428:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d144      	bne.n	80034be <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003440:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800344c:	f7fd fa0c 	bl	8000868 <HAL_GetTick>
 8003450:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd fa08 	bl	8000868 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e02c      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	4b18      	ldr	r3, [pc, #96]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x878>
 8003472:	e024      	b.n	80034be <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d01f      	beq.n	80034ba <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 8003480:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd f9ef 	bl	8000868 <HAL_GetTick>
 800348a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fd f9eb 	bl	8000868 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e00f      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ac:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	4905      	ldr	r1, [pc, #20]	@ (80034c8 <HAL_RCC_OscConfig+0x8ec>)
 80034b2:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <HAL_RCC_OscConfig+0x8f4>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
 80034b8:	e001      	b.n	80034be <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	@ 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	019d800c 	.word	0x019d800c
 80034d0:	feeefffc 	.word	0xfeeefffc

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e11d      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034ec:	4b90      	ldr	r3, [pc, #576]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d910      	bls.n	800351c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 020f 	bic.w	r2, r3, #15
 8003502:	498b      	ldr	r1, [pc, #556]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b89      	ldr	r3, [pc, #548]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e105      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b81      	ldr	r3, [pc, #516]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003534:	429a      	cmp	r2, r3
 8003536:	d908      	bls.n	800354a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b7e      	ldr	r3, [pc, #504]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	497b      	ldr	r1, [pc, #492]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d079      	beq.n	800364a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d11e      	bne.n	800359c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	4b75      	ldr	r3, [pc, #468]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0dc      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800356e:	f000 f9d1 	bl	8003914 <RCC_GetSysClockFreqFromPLLSource>
 8003572:	4603      	mov	r3, r0
 8003574:	4a70      	ldr	r2, [pc, #448]	@ (8003738 <HAL_RCC_ClockConfig+0x264>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d946      	bls.n	8003608 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800357a:	4b6e      	ldr	r3, [pc, #440]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d140      	bne.n	8003608 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003586:	4b6b      	ldr	r3, [pc, #428]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800358e:	4a69      	ldr	r2, [pc, #420]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003594:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e035      	b.n	8003608 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a4:	4b63      	ldr	r3, [pc, #396]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d115      	bne.n	80035dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b9      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035bc:	4b5d      	ldr	r3, [pc, #372]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0ad      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035cc:	4b59      	ldr	r3, [pc, #356]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0a5      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80035dc:	f000 f8b4 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 80035e0:	4603      	mov	r3, r0
 80035e2:	4a55      	ldr	r2, [pc, #340]	@ (8003738 <HAL_RCC_ClockConfig+0x264>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d90f      	bls.n	8003608 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035e8:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80035fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003602:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003608:	4b4a      	ldr	r3, [pc, #296]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 0203 	bic.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4947      	ldr	r1, [pc, #284]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361a:	f7fd f925 	bl	8000868 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003620:	e00a      	b.n	8003638 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003622:	f7fd f921 	bl	8000868 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e077      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003638:	4b3e      	ldr	r3, [pc, #248]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 020c 	and.w	r2, r3, #12
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	429a      	cmp	r2, r3
 8003648:	d1eb      	bne.n	8003622 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b80      	cmp	r3, #128	@ 0x80
 800364e:	d105      	bne.n	800365c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a37      	ldr	r2, [pc, #220]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003674:	429a      	cmp	r2, r3
 8003676:	d208      	bcs.n	800368a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003678:	4b2e      	ldr	r3, [pc, #184]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	492b      	ldr	r1, [pc, #172]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368a:	4b29      	ldr	r3, [pc, #164]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d210      	bcs.n	80036ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003698:	4b25      	ldr	r3, [pc, #148]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 020f 	bic.w	r2, r3, #15
 80036a0:	4923      	ldr	r1, [pc, #140]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <HAL_RCC_ClockConfig+0x25c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e036      	b.n	8003728 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4918      	ldr	r1, [pc, #96]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e4:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4910      	ldr	r1, [pc, #64]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f8:	f000 f826 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003734 <HAL_RCC_ClockConfig+0x260>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	490c      	ldr	r1, [pc, #48]	@ (800373c <HAL_RCC_ClockConfig+0x268>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <HAL_RCC_ClockConfig+0x26c>)
 8003716:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <HAL_RCC_ClockConfig+0x270>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd f853 	bl	80007c8 <HAL_InitTick>
 8003722:	4603      	mov	r3, r0
 8003724:	73fb      	strb	r3, [r7, #15]

  return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40022000 	.word	0x40022000
 8003734:	40021000 	.word	0x40021000
 8003738:	04c4b400 	.word	0x04c4b400
 800373c:	080044f8 	.word	0x080044f8
 8003740:	20000000 	.word	0x20000000
 8003744:	20000004 	.word	0x20000004

08003748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	@ 0x24
 800374c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4b3e      	ldr	r3, [pc, #248]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003760:	4b3b      	ldr	r3, [pc, #236]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x34>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d121      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11e      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800377c:	4b34      	ldr	r3, [pc, #208]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003788:	4b31      	ldr	r3, [pc, #196]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e005      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c0:	4b25      	ldr	r3, [pc, #148]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e004      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037cc:	4b23      	ldr	r3, [pc, #140]	@ (800385c <HAL_RCC_GetSysClockFreq+0x114>)
 80037ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d134      	bne.n	8003840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d003      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0xa6>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d003      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0xac>
 80037ec:	e005      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f0:	617b      	str	r3, [r7, #20]
      break;
 80037f2:	e005      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037f4:	4b19      	ldr	r3, [pc, #100]	@ (800385c <HAL_RCC_GetSysClockFreq+0x114>)
 80037f6:	617b      	str	r3, [r7, #20]
      break;
 80037f8:	e002      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	617b      	str	r3, [r7, #20]
      break;
 80037fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003800:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3301      	adds	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800380e:	4b10      	ldr	r3, [pc, #64]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	fb03 f202 	mul.w	r2, r3, r2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	0e5b      	lsrs	r3, r3, #25
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	3301      	adds	r3, #1
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003840:	69bb      	ldr	r3, [r7, #24]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	08004508 	.word	0x08004508
 8003858:	00f42400 	.word	0x00f42400
 800385c:	007a1200 	.word	0x007a1200

08003860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800386c:	4b27      	ldr	r3, [pc, #156]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003878:	f7ff f8ec 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 800387c:	6178      	str	r0, [r7, #20]
 800387e:	e014      	b.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b22      	ldr	r3, [pc, #136]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	4a21      	ldr	r2, [pc, #132]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	4b1f      	ldr	r3, [pc, #124]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003898:	f7ff f8dc 	bl	8002a54 <HAL_PWREx_GetVoltageRange>
 800389c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b1b      	ldr	r3, [pc, #108]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	4a1a      	ldr	r2, [pc, #104]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b0:	d10b      	bne.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d913      	bls.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80038bc:	d902      	bls.n	80038c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038be:	2302      	movs	r3, #2
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e00d      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c4:	2301      	movs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e00a      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80038ce:	d902      	bls.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80038d0:	2302      	movs	r3, #2
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e004      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b70      	cmp	r3, #112	@ 0x70
 80038da:	d101      	bne.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038dc:	2301      	movs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 020f 	bic.w	r2, r3, #15
 80038e8:	4909      	ldr	r1, [pc, #36]	@ (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	40022000 	.word	0x40022000

08003914 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800391a:	4b2d      	ldr	r3, [pc, #180]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b03      	cmp	r3, #3
 8003928:	d00b      	beq.n	8003942 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d825      	bhi.n	800397c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d008      	beq.n	8003948 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d11f      	bne.n	800397c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800393c:	4b25      	ldr	r3, [pc, #148]	@ (80039d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800393e:	613b      	str	r3, [r7, #16]
    break;
 8003940:	e01f      	b.n	8003982 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003942:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003944:	613b      	str	r3, [r7, #16]
    break;
 8003946:	e01c      	b.n	8003982 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003948:	4b21      	ldr	r3, [pc, #132]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003954:	4b1e      	ldr	r3, [pc, #120]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e005      	b.n	8003970 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003978:	613b      	str	r3, [r7, #16]
    break;
 800397a:	e002      	b.n	8003982 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
    break;
 8003980:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003982:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	3301      	adds	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003990:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	fb03 f202 	mul.w	r2, r3, r2
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0e5b      	lsrs	r3, r3, #25
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	3301      	adds	r3, #1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80039c2:	683b      	ldr	r3, [r7, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	40021000 	.word	0x40021000
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	007a1200 	.word	0x007a1200
 80039dc:	08004508 	.word	0x08004508

080039e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039e8:	2300      	movs	r3, #0
 80039ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ec:	2300      	movs	r3, #0
 80039ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d040      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a00:	2b80      	cmp	r3, #128	@ 0x80
 8003a02:	d02a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a04:	2b80      	cmp	r3, #128	@ 0x80
 8003a06:	d825      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a08:	2b60      	cmp	r3, #96	@ 0x60
 8003a0a:	d026      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a0c:	2b60      	cmp	r3, #96	@ 0x60
 8003a0e:	d821      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d006      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003a14:	2b40      	cmp	r3, #64	@ 0x40
 8003a16:	d81d      	bhi.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d010      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003a20:	e018      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a22:	4b89      	ldr	r3, [pc, #548]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	4a88      	ldr	r2, [pc, #544]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a2e:	e015      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb3e 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a40:	e00c      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3320      	adds	r3, #32
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fc29 	bl	80042a0 <RCCEx_PLLSAI2_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a52:	e003      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	74fb      	strb	r3, [r7, #19]
      break;
 8003a58:	e000      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a62:	4b79      	ldr	r3, [pc, #484]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a68:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a70:	4975      	ldr	r1, [pc, #468]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003a78:	e001      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d047      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a92:	d030      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a98:	d82a      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a9e:	d02a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003aa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa4:	d824      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aaa:	d008      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab0:	d81e      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aba:	d010      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003abc:	e018      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003abe:	4b62      	ldr	r3, [pc, #392]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a61      	ldr	r2, [pc, #388]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aca:	e015      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 faf0 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003adc:	e00c      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3320      	adds	r3, #32
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fbdb 	bl	80042a0 <RCCEx_PLLSAI2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	74fb      	strb	r3, [r7, #19]
      break;
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003afe:	4b52      	ldr	r3, [pc, #328]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0c:	494e      	ldr	r1, [pc, #312]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003b14:	e001      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 809f 	beq.w	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b2c:	4b46      	ldr	r3, [pc, #280]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	4b41      	ldr	r3, [pc, #260]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	4a40      	ldr	r2, [pc, #256]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a3a      	ldr	r2, [pc, #232]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b6a:	f7fc fe7d 	bl	8000868 <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b70:	e009      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fc fe79 	bl	8000868 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d902      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	74fb      	strb	r3, [r7, #19]
        break;
 8003b84:	e005      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b86:	4b31      	ldr	r3, [pc, #196]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0ef      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003b92:	7cfb      	ldrb	r3, [r7, #19]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d15b      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b98:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d01f      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d019      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bb6:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bc2:	4b21      	ldr	r3, [pc, #132]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003be2:	4a19      	ldr	r2, [pc, #100]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d016      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fc fe38 	bl	8000868 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fc fe34 	bl	8000868 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d902      	bls.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	74fb      	strb	r3, [r7, #19]
            break;
 8003c12:	e006      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ec      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10c      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c28:	4b07      	ldr	r3, [pc, #28]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c38:	4903      	ldr	r1, [pc, #12]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c40:	e008      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	74bb      	strb	r3, [r7, #18]
 8003c46:	e005      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c54:	7c7b      	ldrb	r3, [r7, #17]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5a:	4ba0      	ldr	r3, [pc, #640]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	4a9f      	ldr	r2, [pc, #636]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c72:	4b9a      	ldr	r3, [pc, #616]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f023 0203 	bic.w	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	4996      	ldr	r1, [pc, #600]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c94:	4b91      	ldr	r3, [pc, #580]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	f023 020c 	bic.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	498e      	ldr	r1, [pc, #568]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cb6:	4b89      	ldr	r3, [pc, #548]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc4:	4985      	ldr	r1, [pc, #532]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd8:	4b80      	ldr	r3, [pc, #512]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce6:	497d      	ldr	r1, [pc, #500]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cfa:	4b78      	ldr	r3, [pc, #480]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d08:	4974      	ldr	r1, [pc, #464]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2a:	496c      	ldr	r1, [pc, #432]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d3e:	4b67      	ldr	r3, [pc, #412]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4c:	4963      	ldr	r1, [pc, #396]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d60:	4b5e      	ldr	r3, [pc, #376]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d6e:	495b      	ldr	r1, [pc, #364]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d82:	4b56      	ldr	r3, [pc, #344]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d90:	4952      	ldr	r1, [pc, #328]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da4:	4b4d      	ldr	r3, [pc, #308]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003daa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	494a      	ldr	r1, [pc, #296]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc6:	4b45      	ldr	r3, [pc, #276]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd4:	4941      	ldr	r1, [pc, #260]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003de8:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df6:	4939      	ldr	r1, [pc, #228]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d028      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0a:	4b34      	ldr	r3, [pc, #208]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e18:	4930      	ldr	r1, [pc, #192]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e28:	d106      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e34:	60d3      	str	r3, [r2, #12]
 8003e36:	e011      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f935 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003e58:	7cfb      	ldrb	r3, [r7, #19]
 8003e5a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d04d      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e70:	d108      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003e72:	4b1a      	ldr	r3, [pc, #104]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e78:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e7e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003e82:	e012      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003e84:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e8a:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea2:	490e      	ldr	r1, [pc, #56]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eb4:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a08      	ldr	r2, [pc, #32]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ebe:	60d3      	str	r3, [r2, #12]
 8003ec0:	e020      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ecc:	4b03      	ldr	r3, [pc, #12]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a02      	ldr	r2, [pc, #8]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed6:	60d3      	str	r3, [r2, #12]
 8003ed8:	e014      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f8e1 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d028      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f10:	4b68      	ldr	r3, [pc, #416]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f1e:	4965      	ldr	r1, [pc, #404]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b60      	ldr	r3, [pc, #384]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a5f      	ldr	r2, [pc, #380]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]
 8003f3c:	e011      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f46:	d10c      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f8b2 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01e      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f6e:	4b51      	ldr	r3, [pc, #324]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f7e:	494d      	ldr	r1, [pc, #308]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 f88d 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003fa8:	7cfb      	ldrb	r3, [r7, #19]
 8003faa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00b      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fbe:	f023 0204 	bic.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc8:	493a      	ldr	r1, [pc, #232]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00b      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fdc:	4b35      	ldr	r3, [pc, #212]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe2:	f023 0218 	bic.w	r2, r3, #24
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fec:	4931      	ldr	r1, [pc, #196]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d035      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004000:	4b2c      	ldr	r3, [pc, #176]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2b      	ldr	r2, [pc, #172]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400c:	f7fc fc2c 	bl	8000868 <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004014:	f7fc fc28 	bl	8000868 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d902      	bls.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	74fb      	strb	r3, [r7, #19]
        break;
 8004026:	e005      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004028:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ef      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800403a:	4b1e      	ldr	r3, [pc, #120]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800403c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004040:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800404a:	491a      	ldr	r1, [pc, #104]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3320      	adds	r3, #32
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f921 	bl	80042a0 <RCCEx_PLLSAI2_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d017      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004078:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800407a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800407e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004088:	490a      	ldr	r1, [pc, #40]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800409a:	d105      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409c:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a04      	ldr	r2, [pc, #16]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000

080040b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040c6:	4b72      	ldr	r3, [pc, #456]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0203 	and.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d103      	bne.n	80040ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
       ||
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d142      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
 80040ee:	e03f      	b.n	8004170 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d018      	beq.n	800412a <RCCEx_PLLSAI1_Config+0x72>
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d825      	bhi.n	8004148 <RCCEx_PLLSAI1_Config+0x90>
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d002      	beq.n	8004106 <RCCEx_PLLSAI1_Config+0x4e>
 8004100:	2b02      	cmp	r3, #2
 8004102:	d009      	beq.n	8004118 <RCCEx_PLLSAI1_Config+0x60>
 8004104:	e020      	b.n	8004148 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004106:	4b62      	ldr	r3, [pc, #392]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11d      	bne.n	800414e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004116:	e01a      	b.n	800414e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004118:	4b5d      	ldr	r3, [pc, #372]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004128:	e013      	b.n	8004152 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800412a:	4b59      	ldr	r3, [pc, #356]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004136:	4b56      	ldr	r3, [pc, #344]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004146:	e006      	b.n	8004156 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      break;
 800414c:	e004      	b.n	8004158 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004156:	bf00      	nop
    }

    if(status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d108      	bne.n	8004170 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800415e:	4b4c      	ldr	r3, [pc, #304]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4949      	ldr	r1, [pc, #292]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 800416c:	4313      	orrs	r3, r2
 800416e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 8086 	bne.w	8004284 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004178:	4b45      	ldr	r3, [pc, #276]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a44      	ldr	r2, [pc, #272]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 800417e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004184:	f7fc fb70 	bl	8000868 <HAL_GetTick>
 8004188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800418a:	e009      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800418c:	f7fc fb6c 	bl	8000868 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d902      	bls.n	80041a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	73fb      	strb	r3, [r7, #15]
        break;
 800419e:	e005      	b.n	80041ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ef      	bne.n	800418c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d168      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d113      	bne.n	80041e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041b8:	4b35      	ldr	r3, [pc, #212]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	4b35      	ldr	r3, [pc, #212]	@ (8004294 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	0211      	lsls	r1, r2, #8
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	06d2      	lsls	r2, r2, #27
 80041cc:	4311      	orrs	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6852      	ldr	r2, [r2, #4]
 80041d2:	3a01      	subs	r2, #1
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	430a      	orrs	r2, r1
 80041d8:	492d      	ldr	r1, [pc, #180]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	610b      	str	r3, [r1, #16]
 80041de:	e02d      	b.n	800423c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d115      	bne.n	8004212 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6892      	ldr	r2, [r2, #8]
 80041f2:	0211      	lsls	r1, r2, #8
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6912      	ldr	r2, [r2, #16]
 80041f8:	0852      	lsrs	r2, r2, #1
 80041fa:	3a01      	subs	r2, #1
 80041fc:	0552      	lsls	r2, r2, #21
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6852      	ldr	r2, [r2, #4]
 8004204:	3a01      	subs	r2, #1
 8004206:	0112      	lsls	r2, r2, #4
 8004208:	430a      	orrs	r2, r1
 800420a:	4921      	ldr	r1, [pc, #132]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	610b      	str	r3, [r1, #16]
 8004210:	e014      	b.n	800423c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004212:	4b1f      	ldr	r3, [pc, #124]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	4b21      	ldr	r3, [pc, #132]	@ (800429c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6892      	ldr	r2, [r2, #8]
 800421e:	0211      	lsls	r1, r2, #8
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6952      	ldr	r2, [r2, #20]
 8004224:	0852      	lsrs	r2, r2, #1
 8004226:	3a01      	subs	r2, #1
 8004228:	0652      	lsls	r2, r2, #25
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6852      	ldr	r2, [r2, #4]
 8004230:	3a01      	subs	r2, #1
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	430a      	orrs	r2, r1
 8004236:	4916      	ldr	r1, [pc, #88]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004238:	4313      	orrs	r3, r2
 800423a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800423c:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004246:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fc fb0e 	bl	8000868 <HAL_GetTick>
 800424c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800424e:	e009      	b.n	8004264 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004250:	f7fc fb0a 	bl	8000868 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d902      	bls.n	8004264 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	73fb      	strb	r3, [r7, #15]
          break;
 8004262:	e005      	b.n	8004270 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004264:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ef      	beq.n	8004250 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	4904      	ldr	r1, [pc, #16]	@ (8004290 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	07ff800f 	.word	0x07ff800f
 8004298:	ff9f800f 	.word	0xff9f800f
 800429c:	f9ff800f 	.word	0xf9ff800f

080042a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ae:	4b72      	ldr	r3, [pc, #456]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00e      	beq.n	80042d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0203 	and.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d103      	bne.n	80042d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
       ||
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d142      	bne.n	8004358 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
 80042d6:	e03f      	b.n	8004358 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d018      	beq.n	8004312 <RCCEx_PLLSAI2_Config+0x72>
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d825      	bhi.n	8004330 <RCCEx_PLLSAI2_Config+0x90>
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d002      	beq.n	80042ee <RCCEx_PLLSAI2_Config+0x4e>
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d009      	beq.n	8004300 <RCCEx_PLLSAI2_Config+0x60>
 80042ec:	e020      	b.n	8004330 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042ee:	4b62      	ldr	r3, [pc, #392]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11d      	bne.n	8004336 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fe:	e01a      	b.n	8004336 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004300:	4b5d      	ldr	r3, [pc, #372]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d116      	bne.n	800433a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004310:	e013      	b.n	800433a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004312:	4b59      	ldr	r3, [pc, #356]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800431e:	4b56      	ldr	r3, [pc, #344]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800432e:	e006      	b.n	800433e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      break;
 8004334:	e004      	b.n	8004340 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800433e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004346:	4b4c      	ldr	r3, [pc, #304]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f023 0203 	bic.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4949      	ldr	r1, [pc, #292]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8086 	bne.w	800446c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a44      	ldr	r2, [pc, #272]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fc fa7c 	bl	8000868 <HAL_GetTick>
 8004370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004372:	e009      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004374:	f7fc fa78 	bl	8000868 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d902      	bls.n	8004388 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	73fb      	strb	r3, [r7, #15]
        break;
 8004386:	e005      	b.n	8004394 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004388:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ef      	bne.n	8004374 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d168      	bne.n	800446c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d113      	bne.n	80043c8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043a0:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	4b35      	ldr	r3, [pc, #212]	@ (800447c <RCCEx_PLLSAI2_Config+0x1dc>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6892      	ldr	r2, [r2, #8]
 80043ac:	0211      	lsls	r1, r2, #8
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68d2      	ldr	r2, [r2, #12]
 80043b2:	06d2      	lsls	r2, r2, #27
 80043b4:	4311      	orrs	r1, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6852      	ldr	r2, [r2, #4]
 80043ba:	3a01      	subs	r2, #1
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	430a      	orrs	r2, r1
 80043c0:	492d      	ldr	r1, [pc, #180]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	614b      	str	r3, [r1, #20]
 80043c6:	e02d      	b.n	8004424 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d115      	bne.n	80043fa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1e0>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6892      	ldr	r2, [r2, #8]
 80043da:	0211      	lsls	r1, r2, #8
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6912      	ldr	r2, [r2, #16]
 80043e0:	0852      	lsrs	r2, r2, #1
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0552      	lsls	r2, r2, #21
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6852      	ldr	r2, [r2, #4]
 80043ec:	3a01      	subs	r2, #1
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	430a      	orrs	r2, r1
 80043f2:	4921      	ldr	r1, [pc, #132]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	614b      	str	r3, [r1, #20]
 80043f8:	e014      	b.n	8004424 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	4b21      	ldr	r3, [pc, #132]	@ (8004484 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6892      	ldr	r2, [r2, #8]
 8004406:	0211      	lsls	r1, r2, #8
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6952      	ldr	r2, [r2, #20]
 800440c:	0852      	lsrs	r2, r2, #1
 800440e:	3a01      	subs	r2, #1
 8004410:	0652      	lsls	r2, r2, #25
 8004412:	4311      	orrs	r1, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6852      	ldr	r2, [r2, #4]
 8004418:	3a01      	subs	r2, #1
 800441a:	0112      	lsls	r2, r2, #4
 800441c:	430a      	orrs	r2, r1
 800441e:	4916      	ldr	r1, [pc, #88]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004424:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a13      	ldr	r2, [pc, #76]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800442e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fc fa1a 	bl	8000868 <HAL_GetTick>
 8004434:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004436:	e009      	b.n	800444c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004438:	f7fc fa16 	bl	8000868 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d902      	bls.n	800444c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	73fb      	strb	r3, [r7, #15]
          break;
 800444a:	e005      	b.n	8004458 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ef      	beq.n	8004438 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800445e:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	4904      	ldr	r1, [pc, #16]	@ (8004478 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004468:	4313      	orrs	r3, r2
 800446a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	07ff800f 	.word	0x07ff800f
 8004480:	ff9f800f 	.word	0xff9f800f
 8004484:	f9ff800f 	.word	0xf9ff800f

08004488 <memset>:
 8004488:	4402      	add	r2, r0
 800448a:	4603      	mov	r3, r0
 800448c:	4293      	cmp	r3, r2
 800448e:	d100      	bne.n	8004492 <memset+0xa>
 8004490:	4770      	bx	lr
 8004492:	f803 1b01 	strb.w	r1, [r3], #1
 8004496:	e7f9      	b.n	800448c <memset+0x4>

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4d0d      	ldr	r5, [pc, #52]	@ (80044d0 <__libc_init_array+0x38>)
 800449c:	4c0d      	ldr	r4, [pc, #52]	@ (80044d4 <__libc_init_array+0x3c>)
 800449e:	1b64      	subs	r4, r4, r5
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	2600      	movs	r6, #0
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	4d0b      	ldr	r5, [pc, #44]	@ (80044d8 <__libc_init_array+0x40>)
 80044aa:	4c0c      	ldr	r4, [pc, #48]	@ (80044dc <__libc_init_array+0x44>)
 80044ac:	f000 f818 	bl	80044e0 <_init>
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	2600      	movs	r6, #0
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	08004538 	.word	0x08004538
 80044d4:	08004538 	.word	0x08004538
 80044d8:	08004538 	.word	0x08004538
 80044dc:	0800453c 	.word	0x0800453c

080044e0 <_init>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr

080044ec <_fini>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr
